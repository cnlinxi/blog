{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-\\.]"},"docs":[{"location":"","text":"\u8bed\u97f3\u4e0e\u8bed\u8a00\u5904\u7406 \u5206\u4eab\u5173\u4e8e\u8bed\u97f3\u548c\u8bed\u8a00\u5904\u7406\u76f8\u5173\u7684\u6280\u672f\u3002 \u672c\u7ad9\u6240\u6709\u5185\u5bb9\u9075\u5faaApache-2.0 License\uff0c\u4f7f\u7528\u65f6\u9700\u6ce8\u660e\u6765\u6e90\u548c\u4f5c\u8005\u3002 \u5fae\u4fe1\u516c\u4f17\u53f7 \u77e5\u4e4e \u4e00\u952e\u76f4\u8fbe\uff1a\ud83d\udd17 \u77e5\u4e4e/\u51ac\u8272 \u535a\u5ba2\u56ed \u4e00\u952e\u76f4\u8fbe\uff1a\ud83d\udd17 \u535a\u5ba2\u56ed/\u51ac\u8272 GitHub \u4e00\u952e\u76f4\u8fbe\uff1a\ud83d\udd17 GitHub/\u51ac\u8272","title":"\u8bed\u97f3\u4e0e\u8bed\u8a00\u5904\u7406"},{"location":"#_1","text":"\u5206\u4eab\u5173\u4e8e\u8bed\u97f3\u548c\u8bed\u8a00\u5904\u7406\u76f8\u5173\u7684\u6280\u672f\u3002 \u672c\u7ad9\u6240\u6709\u5185\u5bb9\u9075\u5faaApache-2.0 License\uff0c\u4f7f\u7528\u65f6\u9700\u6ce8\u660e\u6765\u6e90\u548c\u4f5c\u8005\u3002","title":"\u8bed\u97f3\u4e0e\u8bed\u8a00\u5904\u7406"},{"location":"#_2","text":"","title":"\u5fae\u4fe1\u516c\u4f17\u53f7"},{"location":"#_3","text":"\u4e00\u952e\u76f4\u8fbe\uff1a\ud83d\udd17 \u77e5\u4e4e/\u51ac\u8272","title":"\u77e5\u4e4e"},{"location":"#_4","text":"\u4e00\u952e\u76f4\u8fbe\uff1a\ud83d\udd17 \u535a\u5ba2\u56ed/\u51ac\u8272","title":"\u535a\u5ba2\u56ed"},{"location":"#github","text":"\u4e00\u952e\u76f4\u8fbe\uff1a\ud83d\udd17 GitHub/\u51ac\u8272","title":"GitHub"},{"location":"asr_index/","text":"","title":"Asr index"},{"location":"leetcode_index/","text":"","title":"Leetcode index"},{"location":"om_index/","text":"","title":"Om index"},{"location":"open_source_index/","text":"\u5f00\u6e90\u6570\u636e\u548c\u5de5\u5177 Awesome List https://github.com/faroit/awesome-python-scientific-audio https://github.com/wenet-e2e/speech-synthesis-paper https://github.com/ddlBoJack/Speech-Resources https://github.com/sindresorhus/awesome \u53c2\u8003\u4e66\u7c4d \u795e\u7ecf\u7f51\u7edc\u4e0e\u6df1\u5ea6\u5b66\u4e60 Tan X, Qin T, Soong F, et al. A survey on Neural Speech Synthesis[J]. arXiv preprint arXiv:2106.15561, 2021. Sisman B, Yamagishi J, King S, et al. An Overview of Voice Conversion and Its Challenges: From Statistical Modeling to Deep Learning[J]. IEEE/ACM Transactions on Audio, Speech, and Language Processing, 2020, 29: 132-157. \u8bed\u97f3\u76f8\u5173\u7684\u4f1a\u8bae\u3001\u671f\u520a\u3001\u6bd4\u8d5b\u548c\u516c\u53f8 \u4f1a\u8bae INTERSPEECH\uff08Conference of the International Speech Communication Association\uff09 ICASSP\uff08IEEE International Conference on Acoustics, Speech and Signal Processing\uff09 ASRU\uff08IEEE Automatic Speech Recognition and Understanding Workshop\uff09 ISCSLP\uff08International Symposium on Chinese Spoken Language Processing\uff09 ACL\uff08Association of Computational Linguistics\uff09 \u671f\u520a Computer Speech and Language \u6700\u65b0\u8bba\u6587 \u4f4e\u8c03\u594b\u8fdbTTS\u6700\u65b0\u8bba\u6587\u96c6 https://arxiv.org/list/eess.AS/recent https://arxiv.org/list/cs.SD/recent https://arxiv.org/list/cs.CL/recent https://arxiv.org/list/cs.MM/recent \u6bd4\u8d5b Blizzard Challenge Zero Resource Speech Challenge ICASSP2021 M2VoC Voice Conversion Challenge CHiME: Computational Hearing in Multisource Environment NIST \u516c\u53f8 \u5fae\u8f6f \u8c37\u6b4c\u4e91 \u6377\u901a\u534e\u58f0 Nuance Amazon polly \u767e\u5ea6\uff08\u7ffb\u8bd1\uff09 \u641c\u72d7\u5f00\u53d1\u5e73\u53f0 \u641c\u72d7\uff08\u7ffb\u8bd1\uff09 \u6709\u9053\u5f00\u653e\u5e73\u53f0 \u6709\u9053\uff08\u7ffb\u8bd1\uff09 \u5fae\u8f6f\uff08\u7ffb\u8bd1\uff09 Google\u7ffb\u8bd1 \u5fae\u4fe1\u516c\u4f17\u53f7 \u963f\u91cc\u8bed\u97f3AI CCF\u8bed\u97f3\u5bf9\u8bdd\u4e0e\u542c\u89c9\u4e13\u59d4\u4f1a CSMT \u58f0\u5b66\u6316\u6398\u673a \u8c08\u8c08\u8bed\u97f3\u6280\u672f THUsatlab WeNet\u6b65\u884c\u8857 \u97f3\u9891\u8bed\u97f3\u4e0e\u8bed\u8a00\u5904\u7406\u7814\u7a76\u7ec4 \u96e8\u77f3\u8bb0 \u8bed\u97f3\u7b97\u6cd5\u7ec4 \u8bed\u97f3\u6742\u8c08 \u8bed\u97f3\u4e4b\u5bb6 \u667a\u80fd\u8bed\u97f3\u65b0\u9752\u5e74 \u5f00\u6e90\u8d44\u6599 \u4e2d\u6587\u6570\u636e\u96c6 \u6807\u8d1d\u4e2d\u6587\u6807\u51c6\u5973\u58f0\u97f3\u5e93 : \u4e2d\u6587\u5355\u8bf4\u8bdd\u4eba\u8bed\u97f3\u5408\u6210\u6570\u636e\u96c6\uff0c\u8d28\u91cf\u9ad8\u3002 THCHS-30 : \u4e2d\u6587\u591a\u8bf4\u8bdd\u4eba\u6570\u636e\u96c6\uff0c\u539f\u4e3a\u8bed\u97f3\u8bc6\u522b\u7ec3\u624b\u7ea7\u522b\u7684\u6570\u636e\u96c6\uff0c\u4e5f\u53ef\u7528\u4e8e\u591a\u8bf4\u8bdd\u4eba\u4e2d\u6587\u8bed\u97f3\u5408\u6210\u3002 Free ST Chinese Mandarin Corpus : 855\u4e2a\u8bf4\u8bdd\u4eba\uff0c\u6bcf\u4e2a\u8bf4\u8bdd\u4eba120\u53e5\u8bdd\uff0c\u6709\u5bf9\u5e94\u4eba\u5de5\u6838\u5bf9\u7684\u6587\u672c\uff0c\u5171102600\u53e5\u8bdd\u3002 zhvoice : zhvoice\u8bed\u6599\u75318\u4e2a\u5f00\u6e90\u6570\u636e\u96c6\uff0c\u7ecf\u8fc7\u964d\u566a\u548c\u53bb\u9664\u9759\u97f3\u5904\u7406\u800c\u6210\uff0c\u8bf4\u8bdd\u4eba\u7ea63200\u4e2a\uff0c\u97f3\u9891\u7ea6900\u5c0f\u65f6\uff0c\u6587\u672c\u7ea6113\u4e07\u6761\uff0c\u5171\u6709\u7ea61300\u4e07\u5b57\u3002 \u6ef4\u6ef4800+\u5c0f\u65f6DiDiSpeech\u8bed\u97f3\u6570\u636e\u96c6 : DiDi\u5f00\u6e90\u6570\u636e\u96c6\uff0c800\u5c0f\u65f6\uff0c48kHz\uff0c6000\u8bf4\u8bdd\u4eba\uff0c\u5b58\u5728\u5bf9\u5e94\u6587\u672c\uff0c\u80cc\u666f\u566a\u97f3\u5e72\u51c0\uff0c\u9002\u7528\u4e8e\u97f3\u8272\u8f6c\u6362\u3001\u591a\u8bf4\u8bdd\u4eba\u8bed\u97f3\u5408\u6210\u548c\u8bed\u97f3\u8bc6\u522b\uff0c\u53c2\u89c1\uff1ahttps://zhuanlan.zhihu.com/p/268425880\u3002 SpiCE-Corpus : SpiCE\u662f\u7ca4\u8bed\u548c\u82f1\u8bed\u4f1a\u8bdd\u53cc\u8bed\u8bed\u6599\u5e93\u3002 HKUST : 10\u5c0f\u65f6\uff0c\u5355\u8bf4\u8bdd\u4eba\uff0c\u91c7\u6837\u73878kHz\u3002 AISHELL-1 : 170\u5c0f\u65f6\uff0c400\u4e2a\u8bf4\u8bdd\u4eba\uff0c\u91c7\u6837\u738716kHz\u3002 AISHELL-2 : 1000\u5c0f\u65f6\uff0c1991\u4e2a\u8bf4\u8bdd\u4eba\uff0c\u91c7\u6837\u738744.1kHz\u3002\u5e0c\u5c14\u8d1d\u58f3\u5f00\u6e90\u4e86\u4e0d\u5c11\u4e2d\u6587\u8bed\u97f3\u6570\u636e\u96c6\uff0cAISHELL-2\u662f\u6700\u8fd1\u5f00\u6e90\u7684\u4e00\u4e2a1000\u5c0f\u65f6\u7684\u8bed\u97f3\u6570\u636e\u5e93\uff0c\u7981\u6b62\u5546\u7528\u3002\u5b98\u7f51\u4e0a\u8fd8\u6709\u5176\u5b83\u9886\u57df\uff0c\u6bd4\u5982\u7528\u4e8e\u8bed\u97f3\u8bc6\u522b\u76844\u4e2a\u5f00\u6e90\u6570\u636e\u96c6\u3002 10. AISHELL-3 : 85\u5c0f\u65f6\uff0c218\u4e2a\u8bf4\u8bdd\u4eba\uff0c\u91c7\u6837\u738744.1kHz\u3002 \u82f1\u6587\u6570\u636e\u96c6 LJSpeech : \u82f1\u6587\u5355\u8bf4\u8bdd\u4eba\u8bed\u97f3\u5408\u6210\u6570\u636e\u96c6\uff0c\u8d28\u91cf\u8f83\u9ad8\uff0c25\u5c0f\u65f6\uff0c\u91c7\u6837\u738722.05kHz\u3002 VCTK : \u82f1\u6587\u591a\u8bf4\u8bdd\u4eba\u8bed\u97f3\u6570\u636e\u96c6\uff0c44\u5c0f\u65f6\uff0c109\u4e2a\u8bf4\u8bdd\u4eba\uff0c\u6bcf\u4eba400\u53e5\u8bdd\uff0c\u91c7\u6837\u738748kHz\uff0c\u4f4d\u6df116bits\u3002 TIMIT : 630\u4e2a\u8bf4\u8bdd\u4eba\uff0c8\u4e2a\u7f8e\u5f0f\u82f1\u8bed\u53e3\u97f3\uff0c\u6bcf\u4eba10\u53e5\u8bdd\uff0c\u91c7\u6837\u738716kHz\uff0c\u4f4d\u6df116bits\u3002 \u8fd9\u91cc\u662f\u5177\u4f53\u4e0b\u8f7d\u5730\u5740 \uff0c\u4e0b\u8f7d\u65b9\u6cd5\uff1a\u9996\u5148\u4e0b\u8f7d\u79cd\u5b50\uff0c\u7136\u540e\u6267\u884c\uff1a 1 ctorrent *.torrent CMU ARCTIC : 7\u5c0f\u65f6\uff0c7\u4e2a\u8bf4\u8bdd\u4eba\uff0c\u91c7\u6837\u738716kHz\u3002\u8bed\u97f3\u8d28\u91cf\u8f83\u9ad8\uff0c\u53ef\u4ee5\u7528\u4e8e\u82f1\u6587\u591a\u8bf4\u8bdd\u4eba\u7684\u8bad\u7ec3\u3002 Blizzard-2011 : 16.6\u5c0f\u65f6\uff0c\u5355\u8bf4\u8bdd\u4eba\uff0c\u91c7\u6837\u738716kHz\u3002\u53ef\u4ee5\u4ece The Blizzard Challenge \u67e5\u627e\u8be5\u6bd4\u8d5b\u7684\u76f8\u5173\u6570\u636e\uff0c\u4ece SynSIG \u67e5\u627e\u8be5\u6bd4\u8d5b\u7684\u76f8\u5173\u4fe1\u606f\u3002 Blizzard-2013 : 319\u5c0f\u65f6\uff0c\u5355\u8bf4\u8bdd\u4eba\uff0c\u91c7\u6837\u738744.1kHz\u3002 LibriSpeech : 982\u5c0f\u65f6\uff0c2484\u4e2a\u8bf4\u8bdd\u4eba\uff0c\u91c7\u6837\u738716kHz\u3002 OpenSLR \u641c\u96c6\u4e86\u8bed\u97f3\u5408\u6210\u548c\u8bc6\u522b\u5e38\u7528\u7684\u8bed\u6599\u3002 LibriTTS : 586\u5c0f\u65f6\uff0c2456\u4e2a\u8bf4\u8bdd\u4eba\uff0c\u91c7\u6837\u738724kHz\u3002 VCC 2018 : 1\u5c0f\u65f6\uff0c12\u4e2a\u8bf4\u8bdd\u4eba\uff0c\u91c7\u6837\u738722.05kHz\u3002\u7c7b\u4f3c\u7684\uff0c\u53ef\u4ee5\u4ece The Voice Conversion Challenge 2016 \u83b7\u53d62016\u5e74\u7684VC\u6570\u636e\u3002 HiFi-TTS : 300\u5c0f\u65f6\uff0c11\u4e2a\u8bf4\u8bdd\u4eba\uff0c\u91c7\u6837\u738744.1kHz\u3002 TED-LIUM : 118\u5c0f\u65f6\uff0c666\u4e2a\u8bf4\u8bdd\u4eba\u3002 CALLHOME : 60\u5c0f\u65f6\uff0c120\u4e2a\u8bf4\u8bdd\u4eba\uff0c\u91c7\u6837\u73878kHz\u3002 RyanSpeech : 10\u5c0f\u65f6\uff0c\u5355\u8bf4\u8bdd\u4eba\uff0c\u91c7\u6837\u738744.1kHz\u3002\u4ea4\u4e92\u5f0f\u8bed\u97f3\u5408\u6210\u8bed\u6599\u3002 People Speech : 30k\u5c0f\u65f6\uff0c\u591a\u8bf4\u8bdd\u4eba\uff0c\u591a\u79cd\u91c7\u6837\u7387\uff0c\u6709\u80cc\u666f\u566a\u97f3\uff0c\u9002\u5408\u573a\u666f\u504f\u5411\u4e8e\u591a\u573a\u666f\u8bed\u97f3\u8bc6\u522b\uff0c\u6570\u636e\u96c6\u4e3b\u9875\uff1a MLCommons/People's Speech \u3002 \u60c5\u611f\u6570\u636e\u96c6 ESD : \u7528\u4e8e\u8bed\u97f3\u5408\u6210\u548c\u8bed\u97f3\u8f6c\u6362\u7684\u60c5\u611f\u6570\u636e\u96c6\u3002 \u60c5\u611f\u6570\u636e\u548c\u5b9e\u9a8c\u603b\u7ed3 : \u5b9e\u9645\u662f\u60c5\u611f\u8bed\u97f3\u5408\u6210\u7684\u5b9e\u9a8c\u603b\u7ed3\uff0c\u5305\u542b\u4e86\u4e00\u4e9b\u60c5\u611f\u6570\u636e\u96c6\u7684\u603b\u7ed3\u3002 \u5176\u5b83\u6570\u636e\u96c6 Opencpop : \u9ad8\u8d28\u91cf\u6b4c\u5531\u5408\u6210\u6570\u636e\u96c6\u3002 \u597d\u672a\u6765\u5f00\u6e90\u6570\u636e\u96c6 : \u76ee\u524d\u4e3b\u8981\u5f00\u6e90\u4e863\u4e2a\u5927\u7684\u8bed\u97f3\u6570\u636e\u96c6\uff0c\u5206\u522b\u662f\u8bed\u97f3\u8bc6\u522b\u6570\u636e\u96c6\uff0c\u8bed\u97f3\u60c5\u611f\u6570\u636e\u96c6\u548c\u4e2d\u82f1\u6587\u6df7\u5408\u8bed\u97f3\u6570\u636e\u96c6\uff0c\u90fd\u662f\u591a\u8bf4\u8bdd\u4eba\u6559\u5e08\u6388\u8bfe\u97f3\u9891\u3002 JSUT : \u65e5\u8bed\uff0c10\u5c0f\u65f6\uff0c\u5355\u8bf4\u8bdd\u4eba\uff0c\u91c7\u6837\u738748kHz\u3002 KazakhTTS : \u54c8\u8428\u514b\u8bed\uff0c93\u5c0f\u65f6\uff0c2\u4e2a\u8bf4\u8bdd\u4eba\uff0c\u91c7\u6837\u738744.1/48kHz\u3002 Ruslan : \u4fc4\u8bed\uff0c31\u5c0f\u65f6\uff0c\u5355\u8bf4\u8bdd\u4eba\uff0c\u91c7\u6837\u738744.1kHz\u3002 HUI-Audio-Corpus : \u5fb7\u8bed\uff0c326\u5c0f\u65f6\uff0c122\u4e2a\u8bf4\u8bdd\u4eba\uff0c\u91c7\u6837\u738744.1kHz\u3002 M-AILABS : \u591a\u8bed\u79cd\uff0c1000\u5c0f\u65f6\uff0c\u91c7\u6837\u738716kHz\u3002 India Corpus : \u591a\u8bed\u79cd\uff0c39\u5c0f\u65f6\uff0c253\u4e2a\u8bf4\u8bdd\u4eba\uff0c\u91c7\u6837\u738748kHz\u3002 MLS : \u591a\u8bed\u79cd\uff0c5.1\u4e07\u5c0f\u65f6\uff0c6\u5343\u4e2a\u8bf4\u8bdd\u4eba\uff0c\u91c7\u6837\u738716kHz\u3002 CommonVoice : \u591a\u8bed\u79cd\uff0c2500\u5c0f\u65f6\uff0c5\u4e07\u4e2a\u8bf4\u8bdd\u4eba\uff0c\u91c7\u6837\u738748kHz\u3002 CSS10 : \u5341\u4e2a\u8bed\u79cd\u7684\u5355\u8bf4\u8bdd\u4eba\u8bed\u97f3\u6570\u636e\u7684\u96c6\u5408\uff0c140\u5c0f\u65f6\uff0c\u91c7\u6837\u738722.05kHz\u3002 OpenSLR : OpenSLR\u662f\u4e00\u4e2a\u4e13\u95e8\u6258\u7ba1\u8bed\u97f3\u548c\u8bed\u8a00\u8d44\u6e90\u7684\u7f51\u7ad9\uff0c\u4f8b\u5982\u8bed\u97f3\u8bc6\u522b\u8bad\u7ec3\u8bed\u6599\u5e93\u548c\u4e0e\u8bed\u97f3\u8bc6\u522b\u76f8\u5173\u7684\u8f6f\u4ef6\u3002\u8fc4\u4eca\u4e3a\u6b62\uff0c\u5df2\u7ecf\u6709100+\u8bed\u97f3\u76f8\u5173\u7684\u8bed\u6599\u3002 DataShare : \u7231\u4e01\u5821\u5927\u5b66\u7ef4\u62a4\u7684\u6570\u636e\u96c6\u6c47\u603b\uff0c\u5305\u542b\u4e86\u8bed\u97f3\u3001\u56fe\u50cf\u7b49\u591a\u4e2a\u9886\u57df\u7684\u6570\u636e\u96c6\u548c\u8f6f\u4ef6\uff0c\u8bed\u97f3\u6570\u636e\u96c6\u4e2d\u5305\u62ec\u4e86\u8bed\u97f3\u5408\u6210\u3001\u589e\u5f3a\u3001\u8bf4\u8bdd\u4eba\u8bc6\u522b\u3001\u8bed\u97f3\u8f6c\u6362\u7b49\u65b9\u9762\u7684\u5185\u5bb9\u3002 Speech in Microsoft Research Open Data : \u5fae\u8f6f\u5f00\u6e90\u6570\u636e\u641c\u7d22\u5f15\u64ce\u4e2d\u5173\u4e8e\u8bed\u97f3\u7684\u76f8\u5173\u6570\u636e\u96c6\u3002 voice datasets : Github\u4e0a\u8f83\u4e3a\u5168\u9762\u7684\u5f00\u6e90\u8bed\u97f3\u548c\u97f3\u4e50\u6570\u636e\u96c6\u5217\u8868\uff0c\u5305\u62ec\u8bed\u97f3\u5408\u6210\u3001\u8bed\u97f3\u8bc6\u522b\u3001\u60c5\u611f\u8bed\u97f3\u6570\u636e\u96c6\u3001\u8bed\u97f3\u5206\u79bb\u3001\u6b4c\u5531\u7b49\u8bed\u6599\uff0c\u627e\u4e0d\u5230\u8bed\u6599\u53ef\u4ee5\u5230\u8fd9\u91cc\u770b\u770b\u3002 Open Speech Corpora : \u5f00\u653e\u5f0f\u8bed\u97f3\u6570\u636e\u5e93\u5217\u8868\uff0c\u7279\u70b9\u662f\u5305\u542b\u591a\u4e2a\u8bed\u79cd\u7684\u8bed\u6599\u3002 EMIME : \u5305\u542b\u4e00\u4e9bTTS\u548cASR\u6a21\u578b\uff0c\u4ee5\u53ca\u4e00\u4e2a\u4e2d\u6587/\u82f1\u8bed\uff0c\u6cd5\u8bed/\u82f1\u8bed\uff0c\u5fb7\u8bed/\u82f1\u8bed\u53cc\u8bed\u6570\u636e\u96c6\u3002 Celebrity Audio Extraction : \u4e2d\u56fd\u540d\u4eba\u6570\u636e\u96c6\uff0c\u5305\u542b\u4e2d\u56fd\u540d\u4eba\u8bed\u97f3\u548c\u56fe\u50cf\u6570\u636e\u3002 \u5f00\u6e90\u5de5\u5177 sonic : \u8bed\u97f3\u5347\u964d\u901f\u5de5\u5177\u3002 MFA : \u4ece\u8bed\u97f3\u8bc6\u522b\u5de5\u5177Kaldi\u4e2d\u63d0\u53d6\u51fa\u6765\u7684\u97f3\u7d20-\u97f3\u9891\u5bf9\u9f50\u5de5\u5177\uff0c\u53ef\u4ee5\u5229\u7528MFA\u83b7\u53d6\u6bcf\u4e00\u4e2a\u97f3\u7d20\u7684\u65f6\u957f\uff0c\u4f9b\u9884\u6807\u6ce8\u6216\u65f6\u957f\u6a21\u578b\u4f7f\u7528\u3002 \u5bbe\u897f\u6cd5\u5c3c\u4e9a\u5927\u5b66\u5f3a\u5236\u5bf9\u9f50\u6807\u6ce8\u8f6f\u4ef6\uff08P2FA\uff09 \uff1a \u8fd9\u91cc \u6709\u76f8\u5173\u7684\u4ecb\u7ecd\uff0c\u5bf9\u4e8e\u566a\u97f3\u6570\u636e\u9c81\u68d2\u6027\u5dee\u3002 ABXpy : \u8bed\u97f3\u7b49\u6d4b\u8bc4ABX\u6d4b\u8bd5\u7f51\u9875\u3002 SpeechSubjectiveTest : \u4e3b\u89c2\u6d4b\u8bc4\u5de5\u5177\uff0c\u5305\u62ec\u7528\u4e8e\u8bed\u97f3\u5408\u6210\u548c\u8f6c\u6362\u7684MOS\u3001PK\uff08\u503e\u5411\u6027\u6d4b\u542c\uff09\u3001\u8bf4\u8bdd\u4eba\u76f8\u4f3c\u5ea6\u6d4b\u8bd5\u548cABX\u6d4b\u8bd5\u3002 Matools : \u673a\u5668\u5b66\u4e60\u73af\u5883\u914d\u7f6e\u5de5\u5177\u5e93 MyTinySTL : \u57fa\u4e8eC++11\u7684\u8ff7\u4f60STL\u3002 CppPrimerPractice : \u300aC++ Primer \u4e2d\u6587\u7248\uff08\u7b2c 5 \u7248\uff09\u300b\u5b66\u4e60\u4ed3\u5e93\u3002 git-tips : Git\u7684\u5947\u6280\u6deb\u5de7\u3002 \u5f00\u6e90\u9879\u76ee coqui-ai TTS : \u91c7\u7528\u6700\u65b0\u7814\u7a76\u6210\u679c\u6784\u5efa\u7684\u8bed\u97f3\u5408\u6210\u540e\u7aef\u5de5\u5177\u96c6\u3002 ESPNet : \u8bed\u97f3\u5408\u6210\u548c\u8bc6\u522b\u5de5\u5177\u96c6\uff0c\u4e3b\u8981\u96c6\u6210\u58f0\u5b66\u6a21\u578b\u3001\u58f0\u7801\u5668\u7b49\u540e\u7aef\u6a21\u578b\u3002 fairseq : \u5e8f\u5217\u5230\u5e8f\u5217\u5efa\u6a21\u5de5\u5177\uff0c\u5305\u542b\u8bed\u97f3\u8bc6\u522b\u3001\u5408\u6210\u3001\u673a\u5668\u7ffb\u8bd1\u7b49\u6a21\u578b\u3002 eSpeak NG Text-to-Speech : \u5171\u632f\u5cf0\u751f\u6210\u7684\u8bed\u97f3\u5408\u6210\u6a21\u578b\uff0c\u96c6\u6210\u8d85\u8fc7100\u4e2a\u8bed\u79cd\u548c\u53e3\u97f3\u7684\u8bed\u97f3\u5408\u6210\u7cfb\u7edf\uff0c\u7279\u522b\u5730\uff0c\u53ef\u501f\u9274\u8be5\u9879\u76ee\u4e2d\u7684\u591a\u8bed\u79cd\u6587\u672c\u524d\u7aef\u3002 Epitran : \u5c06\u6587\u672c\u8f6c\u6362\u4e3aIPA\u7684\u5de5\u5177\uff0c\u652f\u6301\u4f17\u591a\u8bed\u79cd\u3002 Tacotron-2 : Tensorflow\u7248\u672c\u7684Tacotron-2. Transformer TTS : TensorFlow 2\u5b9e\u73b0\u7684FastSpeech\u7cfb\u5217\u8bed\u97f3\u5408\u6210\u3002 Text-to-speech in (partially) C++ using Tacotron model + Tensorflow : \u91c7\u7528TensorFlow C++ API\u8fd0\u884cTacotron\u6a21\u578b\u3002 muzic : \u5fae\u8f6fAI\u97f3\u4e50\u7684\u5f00\u6e90\u9879\u76ee\uff0c\u5305\u62ec\u4e50\u66f2\u7406\u89e3\u3001\u97f3\u4e50\u751f\u6210\u7b49\u591a\u79cd\u5de5\u4f5c\u3002 merlin : CSTR\u5f00\u53d1\u7684\u7edf\u8ba1\u53c2\u6570\u8bed\u97f3\u5408\u6210\u5de5\u5177\u5305\uff0c\u9700\u8981\u4e0e\u6587\u672c\u524d\u7aef\uff08\u6bd4\u5982Festival\uff09\u548c\u58f0\u7801\u5668\uff08\u6bd4\u5982STRAIGHT\u6216WORLD\uff09\u642d\u914d\u4f7f\u7528\u3002","title":"\u4e3b\u9875"},{"location":"open_source_index/#_1","text":"","title":"\u5f00\u6e90\u6570\u636e\u548c\u5de5\u5177"},{"location":"open_source_index/#awesome-list","text":"https://github.com/faroit/awesome-python-scientific-audio https://github.com/wenet-e2e/speech-synthesis-paper https://github.com/ddlBoJack/Speech-Resources https://github.com/sindresorhus/awesome","title":"Awesome List"},{"location":"open_source_index/#_2","text":"\u795e\u7ecf\u7f51\u7edc\u4e0e\u6df1\u5ea6\u5b66\u4e60 Tan X, Qin T, Soong F, et al. A survey on Neural Speech Synthesis[J]. arXiv preprint arXiv:2106.15561, 2021. Sisman B, Yamagishi J, King S, et al. An Overview of Voice Conversion and Its Challenges: From Statistical Modeling to Deep Learning[J]. IEEE/ACM Transactions on Audio, Speech, and Language Processing, 2020, 29: 132-157.","title":"\u53c2\u8003\u4e66\u7c4d"},{"location":"open_source_index/#_3","text":"","title":"\u8bed\u97f3\u76f8\u5173\u7684\u4f1a\u8bae\u3001\u671f\u520a\u3001\u6bd4\u8d5b\u548c\u516c\u53f8"},{"location":"open_source_index/#_4","text":"INTERSPEECH\uff08Conference of the International Speech Communication Association\uff09 ICASSP\uff08IEEE International Conference on Acoustics, Speech and Signal Processing\uff09 ASRU\uff08IEEE Automatic Speech Recognition and Understanding Workshop\uff09 ISCSLP\uff08International Symposium on Chinese Spoken Language Processing\uff09 ACL\uff08Association of Computational Linguistics\uff09","title":"\u4f1a\u8bae"},{"location":"open_source_index/#_5","text":"Computer Speech and Language","title":"\u671f\u520a"},{"location":"open_source_index/#_6","text":"\u4f4e\u8c03\u594b\u8fdbTTS\u6700\u65b0\u8bba\u6587\u96c6 https://arxiv.org/list/eess.AS/recent https://arxiv.org/list/cs.SD/recent https://arxiv.org/list/cs.CL/recent https://arxiv.org/list/cs.MM/recent","title":"\u6700\u65b0\u8bba\u6587"},{"location":"open_source_index/#_7","text":"Blizzard Challenge Zero Resource Speech Challenge ICASSP2021 M2VoC Voice Conversion Challenge CHiME: Computational Hearing in Multisource Environment NIST","title":"\u6bd4\u8d5b"},{"location":"open_source_index/#_8","text":"\u5fae\u8f6f \u8c37\u6b4c\u4e91 \u6377\u901a\u534e\u58f0 Nuance Amazon polly \u767e\u5ea6\uff08\u7ffb\u8bd1\uff09 \u641c\u72d7\u5f00\u53d1\u5e73\u53f0 \u641c\u72d7\uff08\u7ffb\u8bd1\uff09 \u6709\u9053\u5f00\u653e\u5e73\u53f0 \u6709\u9053\uff08\u7ffb\u8bd1\uff09 \u5fae\u8f6f\uff08\u7ffb\u8bd1\uff09 Google\u7ffb\u8bd1","title":"\u516c\u53f8"},{"location":"open_source_index/#_9","text":"\u963f\u91cc\u8bed\u97f3AI CCF\u8bed\u97f3\u5bf9\u8bdd\u4e0e\u542c\u89c9\u4e13\u59d4\u4f1a CSMT \u58f0\u5b66\u6316\u6398\u673a \u8c08\u8c08\u8bed\u97f3\u6280\u672f THUsatlab WeNet\u6b65\u884c\u8857 \u97f3\u9891\u8bed\u97f3\u4e0e\u8bed\u8a00\u5904\u7406\u7814\u7a76\u7ec4 \u96e8\u77f3\u8bb0 \u8bed\u97f3\u7b97\u6cd5\u7ec4 \u8bed\u97f3\u6742\u8c08 \u8bed\u97f3\u4e4b\u5bb6 \u667a\u80fd\u8bed\u97f3\u65b0\u9752\u5e74","title":"\u5fae\u4fe1\u516c\u4f17\u53f7"},{"location":"open_source_index/#_10","text":"","title":"\u5f00\u6e90\u8d44\u6599"},{"location":"open_source_index/#_11","text":"\u6807\u8d1d\u4e2d\u6587\u6807\u51c6\u5973\u58f0\u97f3\u5e93 : \u4e2d\u6587\u5355\u8bf4\u8bdd\u4eba\u8bed\u97f3\u5408\u6210\u6570\u636e\u96c6\uff0c\u8d28\u91cf\u9ad8\u3002 THCHS-30 : \u4e2d\u6587\u591a\u8bf4\u8bdd\u4eba\u6570\u636e\u96c6\uff0c\u539f\u4e3a\u8bed\u97f3\u8bc6\u522b\u7ec3\u624b\u7ea7\u522b\u7684\u6570\u636e\u96c6\uff0c\u4e5f\u53ef\u7528\u4e8e\u591a\u8bf4\u8bdd\u4eba\u4e2d\u6587\u8bed\u97f3\u5408\u6210\u3002 Free ST Chinese Mandarin Corpus : 855\u4e2a\u8bf4\u8bdd\u4eba\uff0c\u6bcf\u4e2a\u8bf4\u8bdd\u4eba120\u53e5\u8bdd\uff0c\u6709\u5bf9\u5e94\u4eba\u5de5\u6838\u5bf9\u7684\u6587\u672c\uff0c\u5171102600\u53e5\u8bdd\u3002 zhvoice : zhvoice\u8bed\u6599\u75318\u4e2a\u5f00\u6e90\u6570\u636e\u96c6\uff0c\u7ecf\u8fc7\u964d\u566a\u548c\u53bb\u9664\u9759\u97f3\u5904\u7406\u800c\u6210\uff0c\u8bf4\u8bdd\u4eba\u7ea63200\u4e2a\uff0c\u97f3\u9891\u7ea6900\u5c0f\u65f6\uff0c\u6587\u672c\u7ea6113\u4e07\u6761\uff0c\u5171\u6709\u7ea61300\u4e07\u5b57\u3002 \u6ef4\u6ef4800+\u5c0f\u65f6DiDiSpeech\u8bed\u97f3\u6570\u636e\u96c6 : DiDi\u5f00\u6e90\u6570\u636e\u96c6\uff0c800\u5c0f\u65f6\uff0c48kHz\uff0c6000\u8bf4\u8bdd\u4eba\uff0c\u5b58\u5728\u5bf9\u5e94\u6587\u672c\uff0c\u80cc\u666f\u566a\u97f3\u5e72\u51c0\uff0c\u9002\u7528\u4e8e\u97f3\u8272\u8f6c\u6362\u3001\u591a\u8bf4\u8bdd\u4eba\u8bed\u97f3\u5408\u6210\u548c\u8bed\u97f3\u8bc6\u522b\uff0c\u53c2\u89c1\uff1ahttps://zhuanlan.zhihu.com/p/268425880\u3002 SpiCE-Corpus : SpiCE\u662f\u7ca4\u8bed\u548c\u82f1\u8bed\u4f1a\u8bdd\u53cc\u8bed\u8bed\u6599\u5e93\u3002 HKUST : 10\u5c0f\u65f6\uff0c\u5355\u8bf4\u8bdd\u4eba\uff0c\u91c7\u6837\u73878kHz\u3002 AISHELL-1 : 170\u5c0f\u65f6\uff0c400\u4e2a\u8bf4\u8bdd\u4eba\uff0c\u91c7\u6837\u738716kHz\u3002 AISHELL-2 : 1000\u5c0f\u65f6\uff0c1991\u4e2a\u8bf4\u8bdd\u4eba\uff0c\u91c7\u6837\u738744.1kHz\u3002\u5e0c\u5c14\u8d1d\u58f3\u5f00\u6e90\u4e86\u4e0d\u5c11\u4e2d\u6587\u8bed\u97f3\u6570\u636e\u96c6\uff0cAISHELL-2\u662f\u6700\u8fd1\u5f00\u6e90\u7684\u4e00\u4e2a1000\u5c0f\u65f6\u7684\u8bed\u97f3\u6570\u636e\u5e93\uff0c\u7981\u6b62\u5546\u7528\u3002\u5b98\u7f51\u4e0a\u8fd8\u6709\u5176\u5b83\u9886\u57df\uff0c\u6bd4\u5982\u7528\u4e8e\u8bed\u97f3\u8bc6\u522b\u76844\u4e2a\u5f00\u6e90\u6570\u636e\u96c6\u3002 10. AISHELL-3 : 85\u5c0f\u65f6\uff0c218\u4e2a\u8bf4\u8bdd\u4eba\uff0c\u91c7\u6837\u738744.1kHz\u3002","title":"\u4e2d\u6587\u6570\u636e\u96c6"},{"location":"open_source_index/#_12","text":"LJSpeech : \u82f1\u6587\u5355\u8bf4\u8bdd\u4eba\u8bed\u97f3\u5408\u6210\u6570\u636e\u96c6\uff0c\u8d28\u91cf\u8f83\u9ad8\uff0c25\u5c0f\u65f6\uff0c\u91c7\u6837\u738722.05kHz\u3002 VCTK : \u82f1\u6587\u591a\u8bf4\u8bdd\u4eba\u8bed\u97f3\u6570\u636e\u96c6\uff0c44\u5c0f\u65f6\uff0c109\u4e2a\u8bf4\u8bdd\u4eba\uff0c\u6bcf\u4eba400\u53e5\u8bdd\uff0c\u91c7\u6837\u738748kHz\uff0c\u4f4d\u6df116bits\u3002 TIMIT : 630\u4e2a\u8bf4\u8bdd\u4eba\uff0c8\u4e2a\u7f8e\u5f0f\u82f1\u8bed\u53e3\u97f3\uff0c\u6bcf\u4eba10\u53e5\u8bdd\uff0c\u91c7\u6837\u738716kHz\uff0c\u4f4d\u6df116bits\u3002 \u8fd9\u91cc\u662f\u5177\u4f53\u4e0b\u8f7d\u5730\u5740 \uff0c\u4e0b\u8f7d\u65b9\u6cd5\uff1a\u9996\u5148\u4e0b\u8f7d\u79cd\u5b50\uff0c\u7136\u540e\u6267\u884c\uff1a 1 ctorrent *.torrent CMU ARCTIC : 7\u5c0f\u65f6\uff0c7\u4e2a\u8bf4\u8bdd\u4eba\uff0c\u91c7\u6837\u738716kHz\u3002\u8bed\u97f3\u8d28\u91cf\u8f83\u9ad8\uff0c\u53ef\u4ee5\u7528\u4e8e\u82f1\u6587\u591a\u8bf4\u8bdd\u4eba\u7684\u8bad\u7ec3\u3002 Blizzard-2011 : 16.6\u5c0f\u65f6\uff0c\u5355\u8bf4\u8bdd\u4eba\uff0c\u91c7\u6837\u738716kHz\u3002\u53ef\u4ee5\u4ece The Blizzard Challenge \u67e5\u627e\u8be5\u6bd4\u8d5b\u7684\u76f8\u5173\u6570\u636e\uff0c\u4ece SynSIG \u67e5\u627e\u8be5\u6bd4\u8d5b\u7684\u76f8\u5173\u4fe1\u606f\u3002 Blizzard-2013 : 319\u5c0f\u65f6\uff0c\u5355\u8bf4\u8bdd\u4eba\uff0c\u91c7\u6837\u738744.1kHz\u3002 LibriSpeech : 982\u5c0f\u65f6\uff0c2484\u4e2a\u8bf4\u8bdd\u4eba\uff0c\u91c7\u6837\u738716kHz\u3002 OpenSLR \u641c\u96c6\u4e86\u8bed\u97f3\u5408\u6210\u548c\u8bc6\u522b\u5e38\u7528\u7684\u8bed\u6599\u3002 LibriTTS : 586\u5c0f\u65f6\uff0c2456\u4e2a\u8bf4\u8bdd\u4eba\uff0c\u91c7\u6837\u738724kHz\u3002 VCC 2018 : 1\u5c0f\u65f6\uff0c12\u4e2a\u8bf4\u8bdd\u4eba\uff0c\u91c7\u6837\u738722.05kHz\u3002\u7c7b\u4f3c\u7684\uff0c\u53ef\u4ee5\u4ece The Voice Conversion Challenge 2016 \u83b7\u53d62016\u5e74\u7684VC\u6570\u636e\u3002 HiFi-TTS : 300\u5c0f\u65f6\uff0c11\u4e2a\u8bf4\u8bdd\u4eba\uff0c\u91c7\u6837\u738744.1kHz\u3002 TED-LIUM : 118\u5c0f\u65f6\uff0c666\u4e2a\u8bf4\u8bdd\u4eba\u3002 CALLHOME : 60\u5c0f\u65f6\uff0c120\u4e2a\u8bf4\u8bdd\u4eba\uff0c\u91c7\u6837\u73878kHz\u3002 RyanSpeech : 10\u5c0f\u65f6\uff0c\u5355\u8bf4\u8bdd\u4eba\uff0c\u91c7\u6837\u738744.1kHz\u3002\u4ea4\u4e92\u5f0f\u8bed\u97f3\u5408\u6210\u8bed\u6599\u3002 People Speech : 30k\u5c0f\u65f6\uff0c\u591a\u8bf4\u8bdd\u4eba\uff0c\u591a\u79cd\u91c7\u6837\u7387\uff0c\u6709\u80cc\u666f\u566a\u97f3\uff0c\u9002\u5408\u573a\u666f\u504f\u5411\u4e8e\u591a\u573a\u666f\u8bed\u97f3\u8bc6\u522b\uff0c\u6570\u636e\u96c6\u4e3b\u9875\uff1a MLCommons/People's Speech \u3002","title":"\u82f1\u6587\u6570\u636e\u96c6"},{"location":"open_source_index/#_13","text":"ESD : \u7528\u4e8e\u8bed\u97f3\u5408\u6210\u548c\u8bed\u97f3\u8f6c\u6362\u7684\u60c5\u611f\u6570\u636e\u96c6\u3002 \u60c5\u611f\u6570\u636e\u548c\u5b9e\u9a8c\u603b\u7ed3 : \u5b9e\u9645\u662f\u60c5\u611f\u8bed\u97f3\u5408\u6210\u7684\u5b9e\u9a8c\u603b\u7ed3\uff0c\u5305\u542b\u4e86\u4e00\u4e9b\u60c5\u611f\u6570\u636e\u96c6\u7684\u603b\u7ed3\u3002","title":"\u60c5\u611f\u6570\u636e\u96c6"},{"location":"open_source_index/#_14","text":"Opencpop : \u9ad8\u8d28\u91cf\u6b4c\u5531\u5408\u6210\u6570\u636e\u96c6\u3002 \u597d\u672a\u6765\u5f00\u6e90\u6570\u636e\u96c6 : \u76ee\u524d\u4e3b\u8981\u5f00\u6e90\u4e863\u4e2a\u5927\u7684\u8bed\u97f3\u6570\u636e\u96c6\uff0c\u5206\u522b\u662f\u8bed\u97f3\u8bc6\u522b\u6570\u636e\u96c6\uff0c\u8bed\u97f3\u60c5\u611f\u6570\u636e\u96c6\u548c\u4e2d\u82f1\u6587\u6df7\u5408\u8bed\u97f3\u6570\u636e\u96c6\uff0c\u90fd\u662f\u591a\u8bf4\u8bdd\u4eba\u6559\u5e08\u6388\u8bfe\u97f3\u9891\u3002 JSUT : \u65e5\u8bed\uff0c10\u5c0f\u65f6\uff0c\u5355\u8bf4\u8bdd\u4eba\uff0c\u91c7\u6837\u738748kHz\u3002 KazakhTTS : \u54c8\u8428\u514b\u8bed\uff0c93\u5c0f\u65f6\uff0c2\u4e2a\u8bf4\u8bdd\u4eba\uff0c\u91c7\u6837\u738744.1/48kHz\u3002 Ruslan : \u4fc4\u8bed\uff0c31\u5c0f\u65f6\uff0c\u5355\u8bf4\u8bdd\u4eba\uff0c\u91c7\u6837\u738744.1kHz\u3002 HUI-Audio-Corpus : \u5fb7\u8bed\uff0c326\u5c0f\u65f6\uff0c122\u4e2a\u8bf4\u8bdd\u4eba\uff0c\u91c7\u6837\u738744.1kHz\u3002 M-AILABS : \u591a\u8bed\u79cd\uff0c1000\u5c0f\u65f6\uff0c\u91c7\u6837\u738716kHz\u3002 India Corpus : \u591a\u8bed\u79cd\uff0c39\u5c0f\u65f6\uff0c253\u4e2a\u8bf4\u8bdd\u4eba\uff0c\u91c7\u6837\u738748kHz\u3002 MLS : \u591a\u8bed\u79cd\uff0c5.1\u4e07\u5c0f\u65f6\uff0c6\u5343\u4e2a\u8bf4\u8bdd\u4eba\uff0c\u91c7\u6837\u738716kHz\u3002 CommonVoice : \u591a\u8bed\u79cd\uff0c2500\u5c0f\u65f6\uff0c5\u4e07\u4e2a\u8bf4\u8bdd\u4eba\uff0c\u91c7\u6837\u738748kHz\u3002 CSS10 : \u5341\u4e2a\u8bed\u79cd\u7684\u5355\u8bf4\u8bdd\u4eba\u8bed\u97f3\u6570\u636e\u7684\u96c6\u5408\uff0c140\u5c0f\u65f6\uff0c\u91c7\u6837\u738722.05kHz\u3002 OpenSLR : OpenSLR\u662f\u4e00\u4e2a\u4e13\u95e8\u6258\u7ba1\u8bed\u97f3\u548c\u8bed\u8a00\u8d44\u6e90\u7684\u7f51\u7ad9\uff0c\u4f8b\u5982\u8bed\u97f3\u8bc6\u522b\u8bad\u7ec3\u8bed\u6599\u5e93\u548c\u4e0e\u8bed\u97f3\u8bc6\u522b\u76f8\u5173\u7684\u8f6f\u4ef6\u3002\u8fc4\u4eca\u4e3a\u6b62\uff0c\u5df2\u7ecf\u6709100+\u8bed\u97f3\u76f8\u5173\u7684\u8bed\u6599\u3002 DataShare : \u7231\u4e01\u5821\u5927\u5b66\u7ef4\u62a4\u7684\u6570\u636e\u96c6\u6c47\u603b\uff0c\u5305\u542b\u4e86\u8bed\u97f3\u3001\u56fe\u50cf\u7b49\u591a\u4e2a\u9886\u57df\u7684\u6570\u636e\u96c6\u548c\u8f6f\u4ef6\uff0c\u8bed\u97f3\u6570\u636e\u96c6\u4e2d\u5305\u62ec\u4e86\u8bed\u97f3\u5408\u6210\u3001\u589e\u5f3a\u3001\u8bf4\u8bdd\u4eba\u8bc6\u522b\u3001\u8bed\u97f3\u8f6c\u6362\u7b49\u65b9\u9762\u7684\u5185\u5bb9\u3002 Speech in Microsoft Research Open Data : \u5fae\u8f6f\u5f00\u6e90\u6570\u636e\u641c\u7d22\u5f15\u64ce\u4e2d\u5173\u4e8e\u8bed\u97f3\u7684\u76f8\u5173\u6570\u636e\u96c6\u3002 voice datasets : Github\u4e0a\u8f83\u4e3a\u5168\u9762\u7684\u5f00\u6e90\u8bed\u97f3\u548c\u97f3\u4e50\u6570\u636e\u96c6\u5217\u8868\uff0c\u5305\u62ec\u8bed\u97f3\u5408\u6210\u3001\u8bed\u97f3\u8bc6\u522b\u3001\u60c5\u611f\u8bed\u97f3\u6570\u636e\u96c6\u3001\u8bed\u97f3\u5206\u79bb\u3001\u6b4c\u5531\u7b49\u8bed\u6599\uff0c\u627e\u4e0d\u5230\u8bed\u6599\u53ef\u4ee5\u5230\u8fd9\u91cc\u770b\u770b\u3002 Open Speech Corpora : \u5f00\u653e\u5f0f\u8bed\u97f3\u6570\u636e\u5e93\u5217\u8868\uff0c\u7279\u70b9\u662f\u5305\u542b\u591a\u4e2a\u8bed\u79cd\u7684\u8bed\u6599\u3002 EMIME : \u5305\u542b\u4e00\u4e9bTTS\u548cASR\u6a21\u578b\uff0c\u4ee5\u53ca\u4e00\u4e2a\u4e2d\u6587/\u82f1\u8bed\uff0c\u6cd5\u8bed/\u82f1\u8bed\uff0c\u5fb7\u8bed/\u82f1\u8bed\u53cc\u8bed\u6570\u636e\u96c6\u3002 Celebrity Audio Extraction : \u4e2d\u56fd\u540d\u4eba\u6570\u636e\u96c6\uff0c\u5305\u542b\u4e2d\u56fd\u540d\u4eba\u8bed\u97f3\u548c\u56fe\u50cf\u6570\u636e\u3002","title":"\u5176\u5b83\u6570\u636e\u96c6"},{"location":"open_source_index/#_15","text":"sonic : \u8bed\u97f3\u5347\u964d\u901f\u5de5\u5177\u3002 MFA : \u4ece\u8bed\u97f3\u8bc6\u522b\u5de5\u5177Kaldi\u4e2d\u63d0\u53d6\u51fa\u6765\u7684\u97f3\u7d20-\u97f3\u9891\u5bf9\u9f50\u5de5\u5177\uff0c\u53ef\u4ee5\u5229\u7528MFA\u83b7\u53d6\u6bcf\u4e00\u4e2a\u97f3\u7d20\u7684\u65f6\u957f\uff0c\u4f9b\u9884\u6807\u6ce8\u6216\u65f6\u957f\u6a21\u578b\u4f7f\u7528\u3002 \u5bbe\u897f\u6cd5\u5c3c\u4e9a\u5927\u5b66\u5f3a\u5236\u5bf9\u9f50\u6807\u6ce8\u8f6f\u4ef6\uff08P2FA\uff09 \uff1a \u8fd9\u91cc \u6709\u76f8\u5173\u7684\u4ecb\u7ecd\uff0c\u5bf9\u4e8e\u566a\u97f3\u6570\u636e\u9c81\u68d2\u6027\u5dee\u3002 ABXpy : \u8bed\u97f3\u7b49\u6d4b\u8bc4ABX\u6d4b\u8bd5\u7f51\u9875\u3002 SpeechSubjectiveTest : \u4e3b\u89c2\u6d4b\u8bc4\u5de5\u5177\uff0c\u5305\u62ec\u7528\u4e8e\u8bed\u97f3\u5408\u6210\u548c\u8f6c\u6362\u7684MOS\u3001PK\uff08\u503e\u5411\u6027\u6d4b\u542c\uff09\u3001\u8bf4\u8bdd\u4eba\u76f8\u4f3c\u5ea6\u6d4b\u8bd5\u548cABX\u6d4b\u8bd5\u3002 Matools : \u673a\u5668\u5b66\u4e60\u73af\u5883\u914d\u7f6e\u5de5\u5177\u5e93 MyTinySTL : \u57fa\u4e8eC++11\u7684\u8ff7\u4f60STL\u3002 CppPrimerPractice : \u300aC++ Primer \u4e2d\u6587\u7248\uff08\u7b2c 5 \u7248\uff09\u300b\u5b66\u4e60\u4ed3\u5e93\u3002 git-tips : Git\u7684\u5947\u6280\u6deb\u5de7\u3002","title":"\u5f00\u6e90\u5de5\u5177"},{"location":"open_source_index/#_16","text":"coqui-ai TTS : \u91c7\u7528\u6700\u65b0\u7814\u7a76\u6210\u679c\u6784\u5efa\u7684\u8bed\u97f3\u5408\u6210\u540e\u7aef\u5de5\u5177\u96c6\u3002 ESPNet : \u8bed\u97f3\u5408\u6210\u548c\u8bc6\u522b\u5de5\u5177\u96c6\uff0c\u4e3b\u8981\u96c6\u6210\u58f0\u5b66\u6a21\u578b\u3001\u58f0\u7801\u5668\u7b49\u540e\u7aef\u6a21\u578b\u3002 fairseq : \u5e8f\u5217\u5230\u5e8f\u5217\u5efa\u6a21\u5de5\u5177\uff0c\u5305\u542b\u8bed\u97f3\u8bc6\u522b\u3001\u5408\u6210\u3001\u673a\u5668\u7ffb\u8bd1\u7b49\u6a21\u578b\u3002 eSpeak NG Text-to-Speech : \u5171\u632f\u5cf0\u751f\u6210\u7684\u8bed\u97f3\u5408\u6210\u6a21\u578b\uff0c\u96c6\u6210\u8d85\u8fc7100\u4e2a\u8bed\u79cd\u548c\u53e3\u97f3\u7684\u8bed\u97f3\u5408\u6210\u7cfb\u7edf\uff0c\u7279\u522b\u5730\uff0c\u53ef\u501f\u9274\u8be5\u9879\u76ee\u4e2d\u7684\u591a\u8bed\u79cd\u6587\u672c\u524d\u7aef\u3002 Epitran : \u5c06\u6587\u672c\u8f6c\u6362\u4e3aIPA\u7684\u5de5\u5177\uff0c\u652f\u6301\u4f17\u591a\u8bed\u79cd\u3002 Tacotron-2 : Tensorflow\u7248\u672c\u7684Tacotron-2. Transformer TTS : TensorFlow 2\u5b9e\u73b0\u7684FastSpeech\u7cfb\u5217\u8bed\u97f3\u5408\u6210\u3002 Text-to-speech in (partially) C++ using Tacotron model + Tensorflow : \u91c7\u7528TensorFlow C++ API\u8fd0\u884cTacotron\u6a21\u578b\u3002 muzic : \u5fae\u8f6fAI\u97f3\u4e50\u7684\u5f00\u6e90\u9879\u76ee\uff0c\u5305\u62ec\u4e50\u66f2\u7406\u89e3\u3001\u97f3\u4e50\u751f\u6210\u7b49\u591a\u79cd\u5de5\u4f5c\u3002 merlin : CSTR\u5f00\u53d1\u7684\u7edf\u8ba1\u53c2\u6570\u8bed\u97f3\u5408\u6210\u5de5\u5177\u5305\uff0c\u9700\u8981\u4e0e\u6587\u672c\u524d\u7aef\uff08\u6bd4\u5982Festival\uff09\u548c\u58f0\u7801\u5668\uff08\u6bd4\u5982STRAIGHT\u6216WORLD\uff09\u642d\u914d\u4f7f\u7528\u3002","title":"\u5f00\u6e90\u9879\u76ee"},{"location":"paper_index/","text":"","title":"Paper index"},{"location":"asr/OpenFST%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/","text":"OpenFST\u57fa\u672c\u64cd\u4f5c \u6982\u8ff0 OpenFST\u662fC++\u6a21\u677f\u5e93\uff0c\u9700\u8981\u5305\u542b\u5934\u6587\u4ef6 <fst/fstlib.h> \uff0c\u52a8\u6001\u94fe\u63a5\u5e93 libfst.so \u4f4d\u4e8e\u5b89\u88c5\u5e93\u76ee\u5f55\uff08installation library directory\uff09\uff0c\u6240\u6709\u7c7b\u548c\u51fd\u6570\u4f4d\u4e8e\u547d\u540d\u7a7a\u95f4 fst \u3002 OpenFST\u540c\u6837\u63d0\u4f9b\u4e86shell\u63a5\u53e3\uff0c\u4f4d\u4e8e\u5b89\u88c5 bin \u76ee\u5f55\u4e0b\uff0c\u53ef\u5bf9FST\u6587\u4ef6\u8fdb\u884c\u64cd\u4f5c\u3002 FST\u793a\u4f8b \u4e0b\u56fe\u5b9a\u4e49\u4e86\u4e00\u4e2a\u6709\u9650\u72b6\u6001\u673a\uff08Finite State Transducer\uff0cFST\uff09\uff1a \u4e0a\u56fe\u4e2d\uff0c\u4ec5\u6709\u4e00\u4e2a\u521d\u59cb\u72b6\u6001\uff0c\u521d\u59cb\u72b6\u6001\u4e3a\u6807\u7b7e0\uff1b\u7ed3\u675f\u72b6\u6001\u4e3a\u6807\u7b7e2\uff0c\u6743\u91cd\u4e3a3.5\uff0c\u4efb\u610f\u5177\u6709\u975e\u65e0\u7a77\u5927\u6743\u91cd\u7684\u72b6\u6001\u5c31\u662f\u6700\u7ec8\u72b6\u6001\u3002\u4e0a\u56fe\u4e2d\u72b6\u60010\u52301\u7684\u5f27\uff08 arc / transition \uff09\u8f93\u5165\u6807\u7b7e\u4e3a a \uff0c\u8f93\u51fa\u6807\u7b7e\u4e3a x \uff0c\u6743\u91cd\u4e3a0.5\u3002\u8be5FST\u53ef\u4ee5\u5c06\u5b57\u7b26\u5e8f\u5217\u201cac\u201d\u6620\u5c04\u4e3a\u201cxz\u201d\uff0c\u5bf9\u5e94\u7684\u6743\u91cd\u4e3a \\(0.5+2.5+3.5=6.5\\) \u3002 \u521b\u5efaFST \u53ef\u4ee5\u7528C++\u6216shell\u547d\u4ee4\u521b\u5efa\u4e0a\u8ff0FST\u793a\u4f8b\u3002\u5982\u679c\u5c06\u6807\u7b7e\u8868\u793a\u4e3a\u975e\u8d1f\u6574\u6570\uff0c\u5219\u53ef\u4ee5\u7701\u7565\u7b26\u53f7\u8868\u6587\u4ef6\uff08symbol table files\uff09\uff0c\u8fd9\u4e5f\u662f\u8be5\u793a\u4f8bFST\u7684\u5185\u90e8\u8868\u793a\uff1a cpp\u521b\u5efaFST 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 // \u901a\u7528\u53ef\u53d8FST // A vector FST is a general mutable FST StdVectorFst fst ; // \u5c06\u72b6\u60010\u6dfb\u52a0\u5230\u6700\u521d\u4e3a\u7a7a\u7684FST\uff0c\u4f7f\u5176\u6210\u4e3a\u521d\u59cb\u72b6\u6001 // Adds state 0 to the initially empty FST and make it the start state. fst . AddState (); // 1st state will be state 0 (returned by AddState) fst . SetStart ( 0 ); // arg is state ID // \u6dfb\u52a0\u72b6\u60010\u7684\u4e24\u6761\u5f27 // Adds two arcs exiting state 0. // Arc constructor args: ilabel, olabel, weight, dest state ID. fst . AddArc ( 0 , StdArc ( 1 , 1 , 0.5 , 1 )); // 1st arg is src state ID fst . AddArc ( 0 , StdArc ( 2 , 2 , 1.5 , 1 )); // \u6dfb\u52a0\u72b6\u60011\u548c\u5b83\u7684\u4e00\u6761\u5f27 // Adds state 1 and its arc. fst . AddState (); fst . AddArc ( 1 , StdArc ( 3 , 3 , 2.5 , 2 )); // \u6dfb\u52a0\u72b6\u60012\u5e76\u8bbe\u7f6e\u6700\u7ec8\u6743\u91cd // Adds state 2 and set its final weight. fst . AddState (); fst . SetFinal ( 2 , 3.5 ); // 1st arg is state ID, 2nd arg weight // save this FST to a file fst . Write ( \"binary.fst\" ); shell\u521b\u5efaFST \u4e3a\u793a\u4f8bFST\u521b\u5efa\u6587\u672c\u6587\u4ef6\uff1a 1 2 3 4 5 6 7 8 9 10 # arc format: src dest ilabel olabel [weight] # final state format: state [weight] # lines may occur in any order except initial state must be first line # unspecified weights default to 0.0 (for the library-default Weight type) $ cat >text.fst <<EOF 0 1 a x .5 0 1 b y 1.5 1 2 c z 2.5 2 3.5 EOF FST\u7684\u5185\u90e8\u8868\u793a\u4e3a\u6574\u6570\uff0c\u56e0\u6b64\u5fc5\u987b\u63d0\u4f9b\u7b26\u53f7\u5230\u6574\u6570\u7684\u6620\u5c04\u6587\u4ef6\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 $ cat >isyms.txt <<EOF <eps> 0 a 1 b 2 c 3 EOF $ cat >osyms.txt <<EOF <eps> 0 x 1 y 2 z 3 EOF \u53ef\u4ee5\u4f7f\u7528\u4efb\u610f\u5b57\u7b26\u4e32\u4f5c\u4e3a\u6807\u7b7e\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4efb\u610f\u975e\u8d1f\u6574\u6570\u4f5c\u4e3a\u6807\u7b7eID\u3002\u8f93\u51fa\u7b26\u53f7\u8868\u4e2d <eps> 0 \u8868\u793a\u6807\u7b7e \\(\\epsilon\\) \u7684\u6807\u7b7eID\u4e3a0\uff0c\u5728\u793a\u4f8bFST\u4e2d\u5e76\u672a\u7528\u5230\u3002 \u5c06\u6587\u672c\u6587\u4ef6\u8f6c\u6362\u4e3aFST\u6587\u4ef6\uff0c\u4ee5\u4fbfOpenFST\u7684\u4f7f\u7528\uff1a 1 2 3 4 5 6 # Creates binary Fst from text file. # The symbolic labels will be converted into integers using the symbol table files. $ fstcompile --isymbols = isyms.txt --osymbols = osyms.txt text.fst binary.fst # As above but the symbol tables are stored with the FST. $ fstcompile --isymbols = isyms.txt --osymbols = osyms.txt --keep_isymbols --keep_osymbols text.fst binary.fst \u5173\u4e8eFST I/O\u7684\u8be6\u7ec6\u4fe1\u606f\u53c2\u89c1 FstInputOutput \u8bfb\u53d6FST \u4f7f\u7528cpp\u8bfb\u53d6FST \u4e00\u6761\u5f27\u7684\u6807\u51c6\u8868\u793a\uff1a 1 2 3 4 5 6 7 8 9 10 struct StdArc { typedef int Label ; typedef TropicalWeight Weight ; // see \"FST Weights\" below typedef int StateId ; Label ilabel ; Label olabel ; Weight weight ; StateId nextstate ; }; \u8bfb\u53d6\u793a\u4f8b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 typedef StdArc :: StateId StateId ; # Gets the initial state; if == kNoState => empty FST. StateId initial_state = fst . Start (); # Get state i's final weight; if == Weight::Zero() => non-final. Weight weight = fst . Final ( i ); # \u8fed\u4ee3FST\u72b6\u6001 # Iterates over the FSTs states. for ( StateIterator < StdFst > siter ( fst ); ! siter . Done (); siter . Next ()) StateId state_id = siter . Value (); # \u8fed\u4ee3\u72b6\u6001i\u7684\u5f27 # Iterates over state i's arcs. for ( ArcIterator < StdFst > aiter ( fst , i ); ! aiter . Done (); aiter . Next ()) const StdArc & arc = aiter . Value (); # \u8fed\u4ee3\u72b6\u6001i\u4e2d\u8f93\u5165\u6807\u7b7e\u4e3al\u7684\u5f27 # Iterates over state i's arcs that have input label l (FST must support this # in the simplest cases, true when the input labels are sorted). Matcher < StdFst > matcher ( fst , MATCH_INPUT ); matcher . SetState ( i ); if ( matcher . Find ( l )) for (; ! matcher . Done (); matcher . Next ()) const StdArc & arc = matcher . Value (); \u901a\u8fc7shell\u6253\u5370\u3001\u7ed8\u5236\u3001\u67e5\u770bFST 1 2 3 4 5 6 7 8 9 10 11 12 # \u6253\u5370FST # Print FST using symbol table files. # \u5982\u679c\u6ca1\u6709\u6307\u5b9a\u7b26\u53f7\u8868\uff0c\u4e14\u7b26\u53f7\u8868\u6ca1\u6709\u5b58\u50a8\u5230FST\uff0c\u5219FST\u5c06\u6253\u5370\u6570\u5b57\u6807\u7b7e $ fstprint --isymbols = isyms.txt --osymbols = osyms.txt binary.fst text.fst # \u7ed8\u5236FST # Draw FST using symbol table files and Graphviz dot: $ fstdraw --isymbols = isyms.txt --osymbols = osyms.txt binary.fst binary.dot $ dot -Tps binary.dot >binary.ps # \u67e5\u770bFST\u7684\u8be6\u7ec6\u4fe1\u606f $ fstinfo binary.fst \u64cd\u4f5cFST cpp\u64cd\u4f5cFST \u4ee5\u4e0b\u62bd\u8c61\u7c7b\u6a21\u677f\u6784\u6210FST\u63a5\u53e3\uff1a Fst<Arc> \uff1a\u652f\u6301\u4e0a\u8ff0\u8bfb\u53d6\u64cd\u4f5c\u3002 ExpandedFst<Arc> \uff1a\u989d\u5916\u652f\u6301 NumStates() \u7684 Fst \u3002 MutableFst<Arc> \uff1a\u652f\u6301\u5404\u79cd\u4fee\u6539\u64cd\u4f5c\u6bd4\u5982 AddStates() \u548c SetStart() \u7684 ExpandedFst \u3002 \u7279\u522b\u5730\uff0c\u975e\u62bd\u8c61FST\u5305\u62ec\u4ee5\u4e0b\u7c7b\u6a21\u677f\uff1a VectorFst<Arc> \uff1a\u901a\u7528\u53ef\u53d8FST\u3002 ConstFst<Arc> \uff1a\u901a\u7528\u6269\u5c55\u4e0d\u53ef\u53d8FST\u3002 ComposeFst<Arc> \uff1a\u4e24\u4e2aFST\u7684\u975e\u6269\u5c55\u3001\u5ef6\u8fdf\u590d\u5408\uff08delayed composition\uff09\u3002 \u5728OpenFST\u4e2d\uff0c StdFst \u662f Fst<StdArc> \u7684typedef\uff0c\u4e0a\u8ff0\u7c7b\u6a21\u677f\u5747\u5b58\u5728\u7c7b\u4f3c\u7684typedef\u3002\u5728\u8fed\u4ee3\u65f6\uff0c\u6307\u5b9a\u5177\u4f53\u7684FST\u7c7b\u4f5c\u4e3a\u8fed\u4ee3\u5668\u6a21\u677f\u53c2\u6570\uff0c\u53ef\u4ee5\u83b7\u5f97\u66f4\u597d\u7684\u6027\u80fd\uff0c\u6bd4\u5982\u8fed\u4ee3\u65f6\u4f18\u5148\u4f7f\u7528 ArcIterator<StdVectorFst> \uff0c\u800c\u4e0d\u662f ArcIterator<StdFst> \u3002 shell\u64cd\u4f5cFST shell\u64cd\u4f5cFST\u65f6\uff0c\u901a\u5e38\u8bfb\u53d6\u4e00\u4e2a\u6216\u591a\u4e2aFST\u6587\u4ef6\uff0c\u8c03\u7528\u5185\u90e8cpp\u64cd\u4f5c\uff0c\u6700\u540e\u5199\u5165FST\u6587\u4ef6\u3002\u5982\u679c\u7701\u7565\u8f93\u51fa\u6587\u4ef6\uff0c\u5c06\u4f7f\u7528\u6807\u51c6\u8f93\u51fa\uff1b\u5982\u679c\u8f93\u5165\u6587\u4ef6\u4e5f\u7701\u7565\u6216\u8005\u662f - \uff0c\u5c06\u4f7f\u7528\u6807\u51c6\u8f93\u5165\uff1a 1 2 3 4 5 6 # \u4e00\u5143\u64cd\u4f5c fstunaryop in .fst out.fst fstunaryop < in .fst >out.fst # \u4e8c\u5143\u64cd\u4f5c fstbinaryop in1.fst in2.fst out.fst fstbinaryop - in2.fst <in1.fst >out.fst \u5e94\u7528\u793a\u4f8b \u4ee5\u4e24\u4e2aFST\u590d\u5408\uff08Composition\uff09\u64cd\u4f5c\u4e3a\u4f8b\u3002 \u4f7f\u7528cpp\u590d\u5408 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 #include <fst/fstlib.h> namespace fst { // Reads in an input FST. StdVectorFst * input = StdVectorFst :: Read ( \"input.fst\" ); // Reads in the transduction model. StdVectorFst * model = StdVectorFst :: Read ( \"model.fst\" ); // FST\u9700\u8981\u6309\u7167\u590d\u5408\u7684\u7ef4\u5ea6\u8fdb\u884c\u6392\u5e8f // The FSTs must be sorted along the dimensions they will be joined. // In fact, only one needs to be so sorted. // This could have instead been done for \"model.fst\" when it was created. ArcSort ( input , StdOLabelCompare ()); ArcSort ( model , StdILabelCompare ()); // Container for composition result. StdVectorFst result ; // Creates the composed FST. Compose ( * input , * model , & result ); // Just keeps the output labels. Project ( & result , PROJECT_OUTPUT ); // Writes the result FST to a file. result . Write ( \"result.fst\" ); } \u4f7f\u7528shell\u590d\u5408 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # FST\u9700\u8981\u6309\u7167\u590d\u5408\u7684\u7ef4\u5ea6\u8fdb\u884c\u6392\u5e8f # The FSTs must be sorted along the dimensions they will be joined. # In fact, only one needs to be so sorted. # This could have instead been done for \"model.fst\" when it was created. $ fstarcsort --sort_type = olabel input.fst input_sorted.fst $ fstarcsort --sort_type = ilabel model.fst model_sorted.fst # Creates the composed FST. $ fstcompose input_sorted.fst model_sorted.fst comp.fst # Just keeps the output label $ fstproject --project_output comp.fst result.fst # Do it all in a single command line. $ fstarcsort --sort_type = ilabel model.fst | fstcompose input.fst - | fstproject --project_output result.fst Compose \u590d\u5408\uff08Composition\uff09\u64cd\u4f5c\u5c06\u4e0d\u540c\u7684\u6709\u9650\u72b6\u6001\u673a\u5408\u5e76\u6210\u4e00\u4e2a\u3002 1 2 fstcompose [ --opts ] a.fst b.fst out.fst --connect: Trim output ( def: true ) fsttablecompose \u4e0e fstcompose \u7c7b\u4f3c\uff0c\u4f46\u662f\u524d\u8005\u901f\u5ea6\u66f4\u5feb\u3002 ComposeDoc < FST < TWiki Determine \u786e\u5b9a\u5316\uff08Determinization\uff09\u64cd\u4f5c\u786e\u4fdd\u6bcf\u4e2a\u72b6\u6001\u5bf9\u5e94\u6bcf\u4e2a\u8f93\u5165\u6709\u552f\u4e00\u8f93\u51fa\u3002 1 fstdeterminize a.fst out.fst stdeterminizestar \u4e0e fstdeterminize \u7c7b\u4f3c\uff0c\u4f46\u524d\u8005\u5305\u542b\u53bb\u9664\u7a7a\u8f6c\u79fb\u5904\u7406\u3002 DeterminizeDoc < FST < TWiki Minimize \u6700\u5c0f\u5316\uff08Minimization\uff09\u64cd\u4f5c\u5bf9\u6709\u9650\u72b6\u6001\u673a\u8fdb\u884c\u7cbe\u7b80\u4ee5\u5f97\u5230\u6700\u5c11\u7684\u72b6\u6001\u548c\u8f6c\u79fb\u5f27\u3002 1 2 # \u5982\u679c\u6709\u4e24\u4e2a\u8f93\u51fa\u53c2\u6570\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u8868\u793a\u65b0\u8f93\u51fa\u6807\u7b7e\u5230\u65e7\u8f93\u51fa\u6807\u7b7e\u7684\u6620\u5c04\uff0c\u4e5f\u5373\u662fin=out1\\circ out2 fstminimize in .fst [ out1.fst [ out2.fst ]] fstminimizeencoded \u4e0e fstminimize \u7c7b\u4f3c\uff0c\u4f46\u524d\u8005\u6ca1\u6709\u8fdb\u884c\u6743\u91cd\u63a8\u79fb\u3002 MinimizeDoc < FST < TWiki ArcSort \u6309\u72b6\u6001\u5bf9FST\u4e2d\u7684\u5f27\u8fdb\u884c\u6392\u5e8f\u3002 1 2 3 # \u53ef\u4ee5\u9009\u62e9\u6309\u7167\u5f27\u7684\u8f93\u5165\u6807\u7b7e\u6216\u8f93\u51fa\u6807\u7b7e\u8fdb\u884c\u6392\u5e8f fstarcsort [ --opts ] a.fst out.fst --sort_type: ilabel ( def ) | olabel Replace \u82e5\u5e72\u5b50\u6709\u9650\u72b6\u6001\u673a\uff08SubFST\uff09\u66ff\u6362\u6839\u6709\u9650\u72b6\u6001\u673a\uff08Root FST\uff09\u4e2d\u7684\u69fd\u4f4d\u3002 1 fstreplace [ --epsilon_on_replace ] root.fst rootlabel [ subfst1.fst label1 .... ] [ out.fst ] \u5b9e\u9645\u4e0d\u6307\u5b9a rootlabel \u529f\u80fd\u4e5f\u53ef\u4ee5\u5b9e\u73b0\u7684\uff0c\u4f46\u5728 fstreplace \u6e90\u7801\u4e2d\uff0c\u64cd\u4f5c\u5bf9\u8c61\u662flabel id\u4e0e\u5bf9\u5e94fst\u7684 pair\uff0c\u56e0\u6b64\u4e3a\u4e86\u4fbf\u4e8e\u5904\u7406\uff0c\u9700\u8981\u6307\u5b9a rootlabel \uff0c\u4fbf\u4e8e\u62d3\u5c55\u7684root fst\u3002 ReplaceDoc < FST < TWiki \u793a\u4f8b 1 2 3 4 5 6 7 8 9 10 11 12 13 # \u4ece\u6587\u672c\u6587\u4ef6\u4e2d\u521b\u5efaFST\uff0c\u8f93\u51fa$lang/address_slot.fst fstcompile --isymbols = $lang /words.txt --osymbols = $lang /words.txt \\ $lang /address_slot.txt $lang /address_slot.fst # \u66ff\u6362\u64cd\u4f5c\uff0c\u4f7f\u7528$lang/address_slot.fst\u66ff\u6362$lang/g_with_slot.fst\u4e2d\u7684\u69fd\u4f4d # \u8f93\u51fa$lang/g.fst fstreplace --epsilon_on_replace $lang /g_with_slot.fst $root_label \\ $lang /address_slot.fst $address_slot_label $lang /g.fst # \u590d\u5408->\u786e\u5b9a\u5316->\u6700\u5c0f\u5316->\u5f27\u6392\u5e8f\uff0c\u8f93\u51fa$lang/lg.fst fsttablecompose $lang /L.fst $lang /g.fst | fstdeterminizestar --use-log = true | fstminimizeencoded | fstarcsort --sort_type = ilabel > $lang /lg.fst || exit 1 ; # \u590d\u5408\u64cd\u4f5c\uff0c\u8f93\u51fa$lang/tlg.fst fsttablecompose $lang /T.fst $lang /lg.fst > $lang /tlg.fst || exit 1 ; FstQuickTour < FST < TWiki Available FST Operations AIBigKaldi\uff08\u4e03\uff09| Kaldi\u7684\u89e3\u7801\u56fe\u6784\u9020\uff08\u4e0a\uff09\uff08\u6e90\u7801\u89e3\u6790\uff09 - \u77e5\u4e4e FstAdvancedUsage < FST < TWiki \u98de\u6868AI Studio - \u4e2a\u6027\u5316\u8bed\u97f3\u8bc6\u522b","title":"OpenFST\u57fa\u672c\u64cd\u4f5c"},{"location":"asr/OpenFST%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/#openfst","text":"","title":"OpenFST\u57fa\u672c\u64cd\u4f5c"},{"location":"asr/OpenFST%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/#_1","text":"OpenFST\u662fC++\u6a21\u677f\u5e93\uff0c\u9700\u8981\u5305\u542b\u5934\u6587\u4ef6 <fst/fstlib.h> \uff0c\u52a8\u6001\u94fe\u63a5\u5e93 libfst.so \u4f4d\u4e8e\u5b89\u88c5\u5e93\u76ee\u5f55\uff08installation library directory\uff09\uff0c\u6240\u6709\u7c7b\u548c\u51fd\u6570\u4f4d\u4e8e\u547d\u540d\u7a7a\u95f4 fst \u3002 OpenFST\u540c\u6837\u63d0\u4f9b\u4e86shell\u63a5\u53e3\uff0c\u4f4d\u4e8e\u5b89\u88c5 bin \u76ee\u5f55\u4e0b\uff0c\u53ef\u5bf9FST\u6587\u4ef6\u8fdb\u884c\u64cd\u4f5c\u3002","title":"\u6982\u8ff0"},{"location":"asr/OpenFST%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/#fst","text":"\u4e0b\u56fe\u5b9a\u4e49\u4e86\u4e00\u4e2a\u6709\u9650\u72b6\u6001\u673a\uff08Finite State Transducer\uff0cFST\uff09\uff1a \u4e0a\u56fe\u4e2d\uff0c\u4ec5\u6709\u4e00\u4e2a\u521d\u59cb\u72b6\u6001\uff0c\u521d\u59cb\u72b6\u6001\u4e3a\u6807\u7b7e0\uff1b\u7ed3\u675f\u72b6\u6001\u4e3a\u6807\u7b7e2\uff0c\u6743\u91cd\u4e3a3.5\uff0c\u4efb\u610f\u5177\u6709\u975e\u65e0\u7a77\u5927\u6743\u91cd\u7684\u72b6\u6001\u5c31\u662f\u6700\u7ec8\u72b6\u6001\u3002\u4e0a\u56fe\u4e2d\u72b6\u60010\u52301\u7684\u5f27\uff08 arc / transition \uff09\u8f93\u5165\u6807\u7b7e\u4e3a a \uff0c\u8f93\u51fa\u6807\u7b7e\u4e3a x \uff0c\u6743\u91cd\u4e3a0.5\u3002\u8be5FST\u53ef\u4ee5\u5c06\u5b57\u7b26\u5e8f\u5217\u201cac\u201d\u6620\u5c04\u4e3a\u201cxz\u201d\uff0c\u5bf9\u5e94\u7684\u6743\u91cd\u4e3a \\(0.5+2.5+3.5=6.5\\) \u3002","title":"FST\u793a\u4f8b"},{"location":"asr/OpenFST%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/#fst_1","text":"\u53ef\u4ee5\u7528C++\u6216shell\u547d\u4ee4\u521b\u5efa\u4e0a\u8ff0FST\u793a\u4f8b\u3002\u5982\u679c\u5c06\u6807\u7b7e\u8868\u793a\u4e3a\u975e\u8d1f\u6574\u6570\uff0c\u5219\u53ef\u4ee5\u7701\u7565\u7b26\u53f7\u8868\u6587\u4ef6\uff08symbol table files\uff09\uff0c\u8fd9\u4e5f\u662f\u8be5\u793a\u4f8bFST\u7684\u5185\u90e8\u8868\u793a\uff1a","title":"\u521b\u5efaFST"},{"location":"asr/OpenFST%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/#cppfst","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 // \u901a\u7528\u53ef\u53d8FST // A vector FST is a general mutable FST StdVectorFst fst ; // \u5c06\u72b6\u60010\u6dfb\u52a0\u5230\u6700\u521d\u4e3a\u7a7a\u7684FST\uff0c\u4f7f\u5176\u6210\u4e3a\u521d\u59cb\u72b6\u6001 // Adds state 0 to the initially empty FST and make it the start state. fst . AddState (); // 1st state will be state 0 (returned by AddState) fst . SetStart ( 0 ); // arg is state ID // \u6dfb\u52a0\u72b6\u60010\u7684\u4e24\u6761\u5f27 // Adds two arcs exiting state 0. // Arc constructor args: ilabel, olabel, weight, dest state ID. fst . AddArc ( 0 , StdArc ( 1 , 1 , 0.5 , 1 )); // 1st arg is src state ID fst . AddArc ( 0 , StdArc ( 2 , 2 , 1.5 , 1 )); // \u6dfb\u52a0\u72b6\u60011\u548c\u5b83\u7684\u4e00\u6761\u5f27 // Adds state 1 and its arc. fst . AddState (); fst . AddArc ( 1 , StdArc ( 3 , 3 , 2.5 , 2 )); // \u6dfb\u52a0\u72b6\u60012\u5e76\u8bbe\u7f6e\u6700\u7ec8\u6743\u91cd // Adds state 2 and set its final weight. fst . AddState (); fst . SetFinal ( 2 , 3.5 ); // 1st arg is state ID, 2nd arg weight // save this FST to a file fst . Write ( \"binary.fst\" );","title":"cpp\u521b\u5efaFST"},{"location":"asr/OpenFST%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/#shellfst","text":"\u4e3a\u793a\u4f8bFST\u521b\u5efa\u6587\u672c\u6587\u4ef6\uff1a 1 2 3 4 5 6 7 8 9 10 # arc format: src dest ilabel olabel [weight] # final state format: state [weight] # lines may occur in any order except initial state must be first line # unspecified weights default to 0.0 (for the library-default Weight type) $ cat >text.fst <<EOF 0 1 a x .5 0 1 b y 1.5 1 2 c z 2.5 2 3.5 EOF FST\u7684\u5185\u90e8\u8868\u793a\u4e3a\u6574\u6570\uff0c\u56e0\u6b64\u5fc5\u987b\u63d0\u4f9b\u7b26\u53f7\u5230\u6574\u6570\u7684\u6620\u5c04\u6587\u4ef6\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 $ cat >isyms.txt <<EOF <eps> 0 a 1 b 2 c 3 EOF $ cat >osyms.txt <<EOF <eps> 0 x 1 y 2 z 3 EOF \u53ef\u4ee5\u4f7f\u7528\u4efb\u610f\u5b57\u7b26\u4e32\u4f5c\u4e3a\u6807\u7b7e\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4efb\u610f\u975e\u8d1f\u6574\u6570\u4f5c\u4e3a\u6807\u7b7eID\u3002\u8f93\u51fa\u7b26\u53f7\u8868\u4e2d <eps> 0 \u8868\u793a\u6807\u7b7e \\(\\epsilon\\) \u7684\u6807\u7b7eID\u4e3a0\uff0c\u5728\u793a\u4f8bFST\u4e2d\u5e76\u672a\u7528\u5230\u3002 \u5c06\u6587\u672c\u6587\u4ef6\u8f6c\u6362\u4e3aFST\u6587\u4ef6\uff0c\u4ee5\u4fbfOpenFST\u7684\u4f7f\u7528\uff1a 1 2 3 4 5 6 # Creates binary Fst from text file. # The symbolic labels will be converted into integers using the symbol table files. $ fstcompile --isymbols = isyms.txt --osymbols = osyms.txt text.fst binary.fst # As above but the symbol tables are stored with the FST. $ fstcompile --isymbols = isyms.txt --osymbols = osyms.txt --keep_isymbols --keep_osymbols text.fst binary.fst \u5173\u4e8eFST I/O\u7684\u8be6\u7ec6\u4fe1\u606f\u53c2\u89c1 FstInputOutput","title":"shell\u521b\u5efaFST"},{"location":"asr/OpenFST%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/#fst_2","text":"","title":"\u8bfb\u53d6FST"},{"location":"asr/OpenFST%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/#cppfst_1","text":"\u4e00\u6761\u5f27\u7684\u6807\u51c6\u8868\u793a\uff1a 1 2 3 4 5 6 7 8 9 10 struct StdArc { typedef int Label ; typedef TropicalWeight Weight ; // see \"FST Weights\" below typedef int StateId ; Label ilabel ; Label olabel ; Weight weight ; StateId nextstate ; }; \u8bfb\u53d6\u793a\u4f8b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 typedef StdArc :: StateId StateId ; # Gets the initial state; if == kNoState => empty FST. StateId initial_state = fst . Start (); # Get state i's final weight; if == Weight::Zero() => non-final. Weight weight = fst . Final ( i ); # \u8fed\u4ee3FST\u72b6\u6001 # Iterates over the FSTs states. for ( StateIterator < StdFst > siter ( fst ); ! siter . Done (); siter . Next ()) StateId state_id = siter . Value (); # \u8fed\u4ee3\u72b6\u6001i\u7684\u5f27 # Iterates over state i's arcs. for ( ArcIterator < StdFst > aiter ( fst , i ); ! aiter . Done (); aiter . Next ()) const StdArc & arc = aiter . Value (); # \u8fed\u4ee3\u72b6\u6001i\u4e2d\u8f93\u5165\u6807\u7b7e\u4e3al\u7684\u5f27 # Iterates over state i's arcs that have input label l (FST must support this # in the simplest cases, true when the input labels are sorted). Matcher < StdFst > matcher ( fst , MATCH_INPUT ); matcher . SetState ( i ); if ( matcher . Find ( l )) for (; ! matcher . Done (); matcher . Next ()) const StdArc & arc = matcher . Value ();","title":"\u4f7f\u7528cpp\u8bfb\u53d6FST"},{"location":"asr/OpenFST%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/#shellfst_1","text":"1 2 3 4 5 6 7 8 9 10 11 12 # \u6253\u5370FST # Print FST using symbol table files. # \u5982\u679c\u6ca1\u6709\u6307\u5b9a\u7b26\u53f7\u8868\uff0c\u4e14\u7b26\u53f7\u8868\u6ca1\u6709\u5b58\u50a8\u5230FST\uff0c\u5219FST\u5c06\u6253\u5370\u6570\u5b57\u6807\u7b7e $ fstprint --isymbols = isyms.txt --osymbols = osyms.txt binary.fst text.fst # \u7ed8\u5236FST # Draw FST using symbol table files and Graphviz dot: $ fstdraw --isymbols = isyms.txt --osymbols = osyms.txt binary.fst binary.dot $ dot -Tps binary.dot >binary.ps # \u67e5\u770bFST\u7684\u8be6\u7ec6\u4fe1\u606f $ fstinfo binary.fst","title":"\u901a\u8fc7shell\u6253\u5370\u3001\u7ed8\u5236\u3001\u67e5\u770bFST"},{"location":"asr/OpenFST%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/#fst_3","text":"","title":"\u64cd\u4f5cFST"},{"location":"asr/OpenFST%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/#cppfst_2","text":"\u4ee5\u4e0b\u62bd\u8c61\u7c7b\u6a21\u677f\u6784\u6210FST\u63a5\u53e3\uff1a Fst<Arc> \uff1a\u652f\u6301\u4e0a\u8ff0\u8bfb\u53d6\u64cd\u4f5c\u3002 ExpandedFst<Arc> \uff1a\u989d\u5916\u652f\u6301 NumStates() \u7684 Fst \u3002 MutableFst<Arc> \uff1a\u652f\u6301\u5404\u79cd\u4fee\u6539\u64cd\u4f5c\u6bd4\u5982 AddStates() \u548c SetStart() \u7684 ExpandedFst \u3002 \u7279\u522b\u5730\uff0c\u975e\u62bd\u8c61FST\u5305\u62ec\u4ee5\u4e0b\u7c7b\u6a21\u677f\uff1a VectorFst<Arc> \uff1a\u901a\u7528\u53ef\u53d8FST\u3002 ConstFst<Arc> \uff1a\u901a\u7528\u6269\u5c55\u4e0d\u53ef\u53d8FST\u3002 ComposeFst<Arc> \uff1a\u4e24\u4e2aFST\u7684\u975e\u6269\u5c55\u3001\u5ef6\u8fdf\u590d\u5408\uff08delayed composition\uff09\u3002 \u5728OpenFST\u4e2d\uff0c StdFst \u662f Fst<StdArc> \u7684typedef\uff0c\u4e0a\u8ff0\u7c7b\u6a21\u677f\u5747\u5b58\u5728\u7c7b\u4f3c\u7684typedef\u3002\u5728\u8fed\u4ee3\u65f6\uff0c\u6307\u5b9a\u5177\u4f53\u7684FST\u7c7b\u4f5c\u4e3a\u8fed\u4ee3\u5668\u6a21\u677f\u53c2\u6570\uff0c\u53ef\u4ee5\u83b7\u5f97\u66f4\u597d\u7684\u6027\u80fd\uff0c\u6bd4\u5982\u8fed\u4ee3\u65f6\u4f18\u5148\u4f7f\u7528 ArcIterator<StdVectorFst> \uff0c\u800c\u4e0d\u662f ArcIterator<StdFst> \u3002","title":"cpp\u64cd\u4f5cFST"},{"location":"asr/OpenFST%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/#shellfst_2","text":"shell\u64cd\u4f5cFST\u65f6\uff0c\u901a\u5e38\u8bfb\u53d6\u4e00\u4e2a\u6216\u591a\u4e2aFST\u6587\u4ef6\uff0c\u8c03\u7528\u5185\u90e8cpp\u64cd\u4f5c\uff0c\u6700\u540e\u5199\u5165FST\u6587\u4ef6\u3002\u5982\u679c\u7701\u7565\u8f93\u51fa\u6587\u4ef6\uff0c\u5c06\u4f7f\u7528\u6807\u51c6\u8f93\u51fa\uff1b\u5982\u679c\u8f93\u5165\u6587\u4ef6\u4e5f\u7701\u7565\u6216\u8005\u662f - \uff0c\u5c06\u4f7f\u7528\u6807\u51c6\u8f93\u5165\uff1a 1 2 3 4 5 6 # \u4e00\u5143\u64cd\u4f5c fstunaryop in .fst out.fst fstunaryop < in .fst >out.fst # \u4e8c\u5143\u64cd\u4f5c fstbinaryop in1.fst in2.fst out.fst fstbinaryop - in2.fst <in1.fst >out.fst","title":"shell\u64cd\u4f5cFST"},{"location":"asr/OpenFST%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/#_2","text":"\u4ee5\u4e24\u4e2aFST\u590d\u5408\uff08Composition\uff09\u64cd\u4f5c\u4e3a\u4f8b\u3002","title":"\u5e94\u7528\u793a\u4f8b"},{"location":"asr/OpenFST%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/#cpp","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 #include <fst/fstlib.h> namespace fst { // Reads in an input FST. StdVectorFst * input = StdVectorFst :: Read ( \"input.fst\" ); // Reads in the transduction model. StdVectorFst * model = StdVectorFst :: Read ( \"model.fst\" ); // FST\u9700\u8981\u6309\u7167\u590d\u5408\u7684\u7ef4\u5ea6\u8fdb\u884c\u6392\u5e8f // The FSTs must be sorted along the dimensions they will be joined. // In fact, only one needs to be so sorted. // This could have instead been done for \"model.fst\" when it was created. ArcSort ( input , StdOLabelCompare ()); ArcSort ( model , StdILabelCompare ()); // Container for composition result. StdVectorFst result ; // Creates the composed FST. Compose ( * input , * model , & result ); // Just keeps the output labels. Project ( & result , PROJECT_OUTPUT ); // Writes the result FST to a file. result . Write ( \"result.fst\" ); }","title":"\u4f7f\u7528cpp\u590d\u5408"},{"location":"asr/OpenFST%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/#shell","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # FST\u9700\u8981\u6309\u7167\u590d\u5408\u7684\u7ef4\u5ea6\u8fdb\u884c\u6392\u5e8f # The FSTs must be sorted along the dimensions they will be joined. # In fact, only one needs to be so sorted. # This could have instead been done for \"model.fst\" when it was created. $ fstarcsort --sort_type = olabel input.fst input_sorted.fst $ fstarcsort --sort_type = ilabel model.fst model_sorted.fst # Creates the composed FST. $ fstcompose input_sorted.fst model_sorted.fst comp.fst # Just keeps the output label $ fstproject --project_output comp.fst result.fst # Do it all in a single command line. $ fstarcsort --sort_type = ilabel model.fst | fstcompose input.fst - | fstproject --project_output result.fst","title":"\u4f7f\u7528shell\u590d\u5408"},{"location":"asr/OpenFST%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/#compose","text":"\u590d\u5408\uff08Composition\uff09\u64cd\u4f5c\u5c06\u4e0d\u540c\u7684\u6709\u9650\u72b6\u6001\u673a\u5408\u5e76\u6210\u4e00\u4e2a\u3002 1 2 fstcompose [ --opts ] a.fst b.fst out.fst --connect: Trim output ( def: true ) fsttablecompose \u4e0e fstcompose \u7c7b\u4f3c\uff0c\u4f46\u662f\u524d\u8005\u901f\u5ea6\u66f4\u5feb\u3002 ComposeDoc < FST < TWiki","title":"Compose"},{"location":"asr/OpenFST%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/#determine","text":"\u786e\u5b9a\u5316\uff08Determinization\uff09\u64cd\u4f5c\u786e\u4fdd\u6bcf\u4e2a\u72b6\u6001\u5bf9\u5e94\u6bcf\u4e2a\u8f93\u5165\u6709\u552f\u4e00\u8f93\u51fa\u3002 1 fstdeterminize a.fst out.fst stdeterminizestar \u4e0e fstdeterminize \u7c7b\u4f3c\uff0c\u4f46\u524d\u8005\u5305\u542b\u53bb\u9664\u7a7a\u8f6c\u79fb\u5904\u7406\u3002 DeterminizeDoc < FST < TWiki","title":"Determine"},{"location":"asr/OpenFST%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/#minimize","text":"\u6700\u5c0f\u5316\uff08Minimization\uff09\u64cd\u4f5c\u5bf9\u6709\u9650\u72b6\u6001\u673a\u8fdb\u884c\u7cbe\u7b80\u4ee5\u5f97\u5230\u6700\u5c11\u7684\u72b6\u6001\u548c\u8f6c\u79fb\u5f27\u3002 1 2 # \u5982\u679c\u6709\u4e24\u4e2a\u8f93\u51fa\u53c2\u6570\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u8868\u793a\u65b0\u8f93\u51fa\u6807\u7b7e\u5230\u65e7\u8f93\u51fa\u6807\u7b7e\u7684\u6620\u5c04\uff0c\u4e5f\u5373\u662fin=out1\\circ out2 fstminimize in .fst [ out1.fst [ out2.fst ]] fstminimizeencoded \u4e0e fstminimize \u7c7b\u4f3c\uff0c\u4f46\u524d\u8005\u6ca1\u6709\u8fdb\u884c\u6743\u91cd\u63a8\u79fb\u3002 MinimizeDoc < FST < TWiki","title":"Minimize"},{"location":"asr/OpenFST%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/#arcsort","text":"\u6309\u72b6\u6001\u5bf9FST\u4e2d\u7684\u5f27\u8fdb\u884c\u6392\u5e8f\u3002 1 2 3 # \u53ef\u4ee5\u9009\u62e9\u6309\u7167\u5f27\u7684\u8f93\u5165\u6807\u7b7e\u6216\u8f93\u51fa\u6807\u7b7e\u8fdb\u884c\u6392\u5e8f fstarcsort [ --opts ] a.fst out.fst --sort_type: ilabel ( def ) | olabel","title":"ArcSort"},{"location":"asr/OpenFST%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/#replace","text":"\u82e5\u5e72\u5b50\u6709\u9650\u72b6\u6001\u673a\uff08SubFST\uff09\u66ff\u6362\u6839\u6709\u9650\u72b6\u6001\u673a\uff08Root FST\uff09\u4e2d\u7684\u69fd\u4f4d\u3002 1 fstreplace [ --epsilon_on_replace ] root.fst rootlabel [ subfst1.fst label1 .... ] [ out.fst ] \u5b9e\u9645\u4e0d\u6307\u5b9a rootlabel \u529f\u80fd\u4e5f\u53ef\u4ee5\u5b9e\u73b0\u7684\uff0c\u4f46\u5728 fstreplace \u6e90\u7801\u4e2d\uff0c\u64cd\u4f5c\u5bf9\u8c61\u662flabel id\u4e0e\u5bf9\u5e94fst\u7684 pair\uff0c\u56e0\u6b64\u4e3a\u4e86\u4fbf\u4e8e\u5904\u7406\uff0c\u9700\u8981\u6307\u5b9a rootlabel \uff0c\u4fbf\u4e8e\u62d3\u5c55\u7684root fst\u3002 ReplaceDoc < FST < TWiki","title":"Replace"},{"location":"asr/OpenFST%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/#_3","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 # \u4ece\u6587\u672c\u6587\u4ef6\u4e2d\u521b\u5efaFST\uff0c\u8f93\u51fa$lang/address_slot.fst fstcompile --isymbols = $lang /words.txt --osymbols = $lang /words.txt \\ $lang /address_slot.txt $lang /address_slot.fst # \u66ff\u6362\u64cd\u4f5c\uff0c\u4f7f\u7528$lang/address_slot.fst\u66ff\u6362$lang/g_with_slot.fst\u4e2d\u7684\u69fd\u4f4d # \u8f93\u51fa$lang/g.fst fstreplace --epsilon_on_replace $lang /g_with_slot.fst $root_label \\ $lang /address_slot.fst $address_slot_label $lang /g.fst # \u590d\u5408->\u786e\u5b9a\u5316->\u6700\u5c0f\u5316->\u5f27\u6392\u5e8f\uff0c\u8f93\u51fa$lang/lg.fst fsttablecompose $lang /L.fst $lang /g.fst | fstdeterminizestar --use-log = true | fstminimizeencoded | fstarcsort --sort_type = ilabel > $lang /lg.fst || exit 1 ; # \u590d\u5408\u64cd\u4f5c\uff0c\u8f93\u51fa$lang/tlg.fst fsttablecompose $lang /T.fst $lang /lg.fst > $lang /tlg.fst || exit 1 ; FstQuickTour < FST < TWiki Available FST Operations AIBigKaldi\uff08\u4e03\uff09| Kaldi\u7684\u89e3\u7801\u56fe\u6784\u9020\uff08\u4e0a\uff09\uff08\u6e90\u7801\u89e3\u6790\uff09 - \u77e5\u4e4e FstAdvancedUsage < FST < TWiki \u98de\u6868AI Studio - \u4e2a\u6027\u5316\u8bed\u97f3\u8bc6\u522b","title":"\u793a\u4f8b"},{"location":"asr/arpa2fst%E5%B0%86%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B%E8%BD%AC%E4%B8%BAWFST/","text":"arpa2fst\u5c06\u8bed\u8a00\u6a21\u578b\u8f6c\u4e3aWFST \u6982\u8ff0 \u5728\u57fa\u4e8eWFST\u7684\u8bed\u97f3\u8bc6\u522b\u4e2d\uff0c\u9700\u8981\u5c06HCLG\u6216TLG\u4e0d\u540c\u5c42\u6b21\u7684WFST\u590d\u5408\u5728\u4e00\u8d77\u6784\u6210\u8d85\u5927\u7684\u89e3\u7801\u7f51\u7edc\uff0c\u5176\u4e2dG\u5c31\u662f\u8bed\u97f3\u6a21\u578b\u7684WFST\u8868\u793a\u3002\u4f46\u5e38\u89c1\u7684\u8bed\u8a00\u6a21\u578b\u5e76\u4e0d\u662f\u4ee5WFST\u5f62\u5f0f\u5b58\u5728\uff0c\u800c\u662f\u57fa\u4e8engram\u5b9e\u73b0\uff0c\u5e76\u4ee5arpa\u6587\u4ef6\u5f62\u5f0f\u5b58\u5728\u3002 arpa2fst\u53ef\u4ee5\u5c06\u8bed\u8a00\u6a21\u578barpa\u6587\u4ef6\u8f6c\u6362\u4e3aWFST\uff0c\u4fbf\u4e8e\u540e\u7eed\u89e3\u7801\u56fe\u7684\u6784\u5efa\u3002 \u8bed\u8a00\u6a21\u578b \u8bed\u8a00\u6a21\u578b\u901a\u5e38\u4ee5arpa\u6587\u4ef6\u5f62\u5f0f\u5b58\u5728\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 \\data\\ ngram1=9 ngram2=10 ngram3=2 \\1-grams: -0.7533277 </s> -99 <s> -0.7907404 -0.9294189 \u4eca\u5929 -1.059586 -1.230449 \u5317\u4eac -0.6268836 -0.7533277 \u5929\u6c14 -0.5177391 -0.7533277 \u600e\u4e48 -0.5177391 -1.230449 \u660e\u5929 -0.5688916 -0.7533277 \u6837 -0.5177391 -1.230449 \u7684 -0.5688916 \\2-grams: -0.39794 <s> \u4eca\u5929 -0.3309932 <s> \u660e\u5929 -0.3309932 \u4eca\u5929 \u5317\u4eac -0.3309932 \u4eca\u5929 \u5929\u6c14 -0.1091445 \u5317\u4eac \u7684 -0.1249387 \u5929\u6c14 \u600e\u4e48 0 -0.1249387 \u600e\u4e48 \u6837 0 -0.1091445 \u660e\u5929 \u5929\u6c14 -0.1249387 \u6837 </s> -0.1091445 \u7684 \u5929\u6c14 \\3-grams: -0.1249387\u5929\u6c14 \u600e\u4e48 \u6837 -0.1249387\u600e\u4e48 \u6837 </s> \\end\\ arpa\u6587\u4ef6\u7684\u6bcf\u4e00\u884c\u8868\u793a\u4e00\u4e2a\u6587\u6cd5\u9879\uff0c\u5b83\u901a\u5e38\u5305\u542b\u4e09\u90e8\u5206\u5185\u5bb9\uff1a 1 probability word(s) [backoff probability] \u5176\u4e2d\uff0c probability \u8868\u793a\u8be5\u8bcd\u6216\u8bcd\u7ec4\u53d1\u751f\u7684\u6982\u7387\uff0c word(s) \u8868\u793a\u5177\u4f53\u7684\u8bcd\u6216\u8005\u8bcd\u7ec4\uff0c [backoff probablitiy] \u662f\u53ef\u9009\u9879\uff0c\u8868\u793a\u56de\u9000\u6982\u7387\uff0c\u5f53\u4e0b\u5c42\u6587\u6cd5\u6709\u4ee5\u5f53\u524d\u8bcd\u6216\u8bcd\u7ec4\u4e3a\u524d\u7f00\u7684\u6587\u6cd5\u9879\u65f6\uff0c\u56de\u9000\u6982\u7387\u5b58\u5728\u3002\u4f8b\u5982\u4e0a\u8ff0\u793a\u4f8b\u4e2d\uff0c\u4e8c\u5143\u6587\u6cd5\u9879 \u5929\u6c14 \u600e\u4e48 \u662f\u4e09\u5143\u6587\u6cd5\u9879 \u5929\u6c14 \u600e\u4e48 \u6837 \u7684\u524d\u7f00\uff0c\u6240\u4ee5\u5b83\u5b58\u5728\u56de\u9000\u6982\u7387\uff0c\u5728\u4e0a\u8ff0\u793a\u4f8b\u4e2d\u8be5\u56de\u9000\u6982\u7387\u4e3a0\uff0c\u901a\u5e38\u4e0d\u4e3a0\u3002 \u901a\u8fc7\u4e0a\u8ff0\u7684arpa\u6587\u4ef6\uff0c\u53ef\u4ee5\u8ba1\u7b97\u7ed9\u5b9a\u4e00\u53e5\u8bdd\u7684\u8bed\u8a00\u6a21\u578b\u5f97\u5206\uff0c\u5047\u8bbearpa\u6587\u4ef6\u4e2d\u6700\u9ad8\u5143\u4e3a\u4e09\u5143\uff0c\u5219\u53e5\u5b50 ABCDEF \u53d1\u751f\u7684\u6982\u7387\u4e3a\uff1a \\[ P(ABCDEF)=P(A)\\times P(B|A)\\times P(C|AB)\\times P(D|BC)\\times P(E|CD)\\times P(F|DE) \\] \u5176\u4e2d\uff0c \\(P(A)\\) \u901a\u8fc7\u67e5\u8be2arpa\u6587\u4ef6\u4e2d1-grams\u6587\u6cd5\u9879\u83b7\u5f97\u3002\u5982\u679c2-gram\u5b58\u5728\u8bcd\u7ec4 A B \uff0c\u5219 \\(P(B|A)\\) \u4e5f\u53ef\u4ee5\u901a\u8fc7\u67e5\u8be22-grams\u6587\u6cd5\u9879\u83b7\u5f97\uff1b\u5982\u679c\u8bcd\u7ec4 A B \u57282-grams\u4e2d\u4e0d\u5b58\u5728\uff0c\u5c31\u9700\u8981\u5229\u7528\u56de\u9000\u6982\u7387\u8ba1\u7b97 \\(P(B|A)\\) \uff0c\u8ba1\u7b97\u516c\u5f0f\u4e3a\uff1a \\[ P(B|A)=\\alpha(A)\\times P(B) \\] \u5176\u4e2d\uff0c \\(\\alpha(A)\\) \u8868\u793a A \u7684\u56de\u9000\u6982\u7387\u3002\u7c7b\u4f3c\u5730\uff0c\u4e09\u5143\u8bcd\u7ec4\u6982\u7387\u7684\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b\uff1a \\[ P(C|AB)=P(C|AB)\\quad if\\ A\\ B\\ C\\ exists \\] \\[ P(C|AB)=\\alpha(AB)\\times P(C|B)\\quad if\\ B\\ C\\ exists \\] \\[ P(C|AB)=\\alpha(AB)\\times \\alpha(B) \\times P(C)\\quad other \\] WFSA\u8f6c\u6362\u4e3aWFST WFST\u6bd4WFSA\u591a\u4e86\u8f93\u51fa\u6807\u7b7e\uff0c\u5982\u679c\u4e0d\u8003\u8651\u8bed\u8a00\u6a21\u578b\u548c\u53d1\u97f3\u8bcd\u5178\u7684\u878d\u5408\uff0carpa2fst\u53ea\u9700\u8981\u5c06arpa\u8f6c\u6362\u4e3aWFSA\u5373\u53ef\uff0c\u4f46\u8bed\u97f3\u8bc6\u522b\u4e2d\u8bed\u8a00\u6a21\u578b\u5e76\u975e\u5355\u72ec\u5b58\u5728\uff0c\u800c\u662f\u9700\u8981\u548c\u5176\u5b83\u89e3\u7801\u5668\u56fe\u590d\u5408\uff0c\u6784\u6210\u6700\u7ec8\u7684WFST\u89e3\u7801\u7f51\u7edc\uff0c\u9700\u8981\u8bed\u8a00\u6a21\u578b\u751f\u6210\u7684WFST\u5b58\u5728\u8f93\u5165\u548c\u8f93\u51fa\u7b26\u53f7\u3002\u5bf9\u8bed\u8a00\u6a21\u578b\u6765\u8bf4\uff0cWFSA\u8f6c\u6362\u5230WFST\u975e\u5e38\u5bb9\u6613\uff0c\u53ea\u9700\u8981\u5c06\u6bcf\u6761\u8fb9\u4e0a\u7684\u8f93\u5165\u6807\u7b7e\u590d\u5236\u6210\u8f93\u51fa\u6807\u7b7e\u5373\u53ef\u3002\u5982\u4e0b\u56fe\u4e3a\u8bed\u8a00\u6a21\u578b\u793a\u4f8b\u901a\u8fc7arpa2fst\u751f\u6210\u7684WFST\uff1a \u5982\u4e0a\u56fe\u6240\u793a\uff0c\u8f6c\u79fb\u5f27\u6743\u91cd \\(w\\) \u548c\u8bed\u8a00\u6a21\u578b\u7684\u5bf9\u6570\uff0810\u4e3a\u5e95\uff09\u6982\u7387 \\(L\\) \u4e4b\u95f4\u7684\u8ba1\u7b97\u5173\u7cfb\u4e3a\uff1a \\[ w=-{\\rm ln}(10^L) \\] \u6bd4\u59821-gram\u4e2d\u201c\u4eca\u5929\u201d\u7684\u5bf9\u6570\u6982\u7387\u4e3a-0.9294189\uff0c\u5219\u56fe\u4e2d\u6743\u91cd\u4e3a \\(w=-{\\rm ln}(10^{-0.9294189})=2.1401\\) \u3002\u6982\u7387\u503c\u53d6\u8d1f\u5bf9\u6570\u4f5c\u4e3a\u56fe\u4e2d\u7684\u6743\u91cd\uff0c\u6b64\u65f6\u6743\u91cd\u7684\u610f\u4e49\u4e3a\u8def\u5f84\u4ee3\u4ef7\uff08Cost\uff09\uff0c\u5373\u6743\u91cd\u8d8a\u5927\uff0c\u6982\u7387\u8d8a\u5c0f\u3002\u4e3a\u4e86\u4f7fG\u5728\u53bb\u6389 \\(\\epsilon\\) \u4e4b\u540e\u80fd\u591f\u88ab\u786e\u5b9a\u5316\uff0c\u5728\u6bcf\u4e2a\u56de\u9000\u8df3\u8f6c\u7684\u540e\u9762\u52a0\u5165\u4e00\u4e2a\u7b26\u53f7 #0 \uff0c\u56fe\u4e2d <eps> \u8868\u793a\u7a7a\u6807\u7b7e \\(\\epsilon\\) \u3002\u7ecf\u8fc7\u8fd9\u8fd9\u6837\u7684\u5c55\u5f00\uff0c\u4efb\u610f\u5e8f\u5217\u7684\u8bed\u8a00\u6a21\u578b \u8d1f\u5bf9\u6570\u7d2f\u79ef\u6982\u7387 \u5c31\u7b49\u4e8e\u56fe\u4e2d \u67d0\u8def\u5f84\u7684\u7d2f\u8ba1\u6743\u91cd \u3002 \u67d0\u4e2a\u4e8c\u5143\u8bed\u8a00\u6a21\u578b\u5bf9\u5e94\u7684WFST\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u5176\u4e2d\u6bcf\u4e2a\u8282\u70b9\u8868\u793a\u4e00\u4e2a\u8bcd\uff0c\u8282\u70b9\u4e4b\u95f4\u7684\u8f6c\u79fb\u5f27\u6743\u91cd\u8868\u793a\u524d\u4e00\u4e2a\u8bcd \\(w_1\\) \u4e0e\u540e\u4e00\u4e2a\u8bcd \\(w_2\\) \u4e4b\u95f4\u7684\u6761\u4ef6\u6982\u7387 \\(P(w_2|w_1)\\) \u3002\u4f8b\u5982\uff0c\u8282\u70b91\u8868\u793a\u53e5\u5b50\u7684\u8d77\u59cb <s> \uff0c\u8282\u70b92\u8868\u793a \u4eca\u5929 \uff0c\u4ece\u8282\u70b91\u52302\u7684\u8f6c\u79fb\u5f27\u4e3a \u4eca\u5929:\u4eca\u5929/0.40547 \uff0c\u8f6c\u79fb\u5f27\u4e0a\u7684\u6743\u91cd\uff08\u5373\u6761\u4ef6\u6982\u7387\uff09\u4e0e\u8bed\u8a00\u6a21\u578b\u5bf9\u6570\u6982\u7387\u4e4b\u95f4\u7684\u8ba1\u7b97\u5173\u7cfb\u5982\u4e0a\u5f0f\uff0c\u5373 \\(0.40547=-{\\rm ln}(10^{-0.1760913})\\) \u3002\u5982\u4e0a\u6587\u6240\u8ff0\uff0c\u5982\u679c \\(w_1\\) \u548c \\(w_2\\) \u6784\u6210\u7684\u8bcd\u7ec4\u5728\u8bed\u8a00\u6a21\u578b\u4e2d\u4e0d\u5b58\u5728\uff0c\u5219 \\(w_1\\) \u548c \\(w_2\\) \u4e4b\u95f4\u7684\u6761\u4ef6\u6982\u7387\u7531 \\(w_1\\) \u56de\u9000\u6982\u7387\u548c \\(w_2\\) \u6982\u7387\u76f8\u4e58\u5f97\u5230\u3002\u6bd4\u5982\uff0c\u4e0a\u56fe\u4e2d\u8282\u70b90\u8868\u793a\u56de\u9000\u72b6\u6001\uff0c\u8282\u70b91\u5230\u8282\u70b90\u7684\u8f6c\u79fb\u5f27\u6743\u91cd\u4e3a0.8473\uff0c\u5bf9\u5e94 <s> \u7684\u56de\u9000\u6982\u7387-0.3679768\uff0c\u5373 \\(0.8473=-{\\rm ln}(10^{-0.3679768})\\) \u3002\u8282\u70b92\u5230\u8282\u70b90\u7684\u8f6c\u79fb\u5f27\u6743\u91cd\u4e3a0.69315\uff0c\u5bf9\u5e94 \u4eca\u5929 \u7684\u56de\u9000\u6982\u7387\u4e3a-0.30103\uff0c\u5373 \\(0.69315=-{\\rm ln}(10^{-0.30103})\\) \u3002 arpa2fst \u539f\u7406\u8be6\u89e3_yutianzuijin\u7684\u535a\u5ba2-CSDN\u535a\u5ba2_arpa\u6587\u4ef6 \u6d2a\u9752\u9633-\u300a\u8bed\u97f3\u8bc6\u522b\u539f\u7406\u4e0e\u5b9e\u8df5\u300b-P.168 WFST \u8bed\u8a00\u6a21\u578b - \u7b80\u4e66","title":"arpa2fst\u5c06\u8bed\u8a00\u6a21\u578b\u8f6c\u4e3aWFST"},{"location":"asr/arpa2fst%E5%B0%86%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B%E8%BD%AC%E4%B8%BAWFST/#arpa2fstwfst","text":"","title":"arpa2fst\u5c06\u8bed\u8a00\u6a21\u578b\u8f6c\u4e3aWFST"},{"location":"asr/arpa2fst%E5%B0%86%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B%E8%BD%AC%E4%B8%BAWFST/#_1","text":"\u5728\u57fa\u4e8eWFST\u7684\u8bed\u97f3\u8bc6\u522b\u4e2d\uff0c\u9700\u8981\u5c06HCLG\u6216TLG\u4e0d\u540c\u5c42\u6b21\u7684WFST\u590d\u5408\u5728\u4e00\u8d77\u6784\u6210\u8d85\u5927\u7684\u89e3\u7801\u7f51\u7edc\uff0c\u5176\u4e2dG\u5c31\u662f\u8bed\u97f3\u6a21\u578b\u7684WFST\u8868\u793a\u3002\u4f46\u5e38\u89c1\u7684\u8bed\u8a00\u6a21\u578b\u5e76\u4e0d\u662f\u4ee5WFST\u5f62\u5f0f\u5b58\u5728\uff0c\u800c\u662f\u57fa\u4e8engram\u5b9e\u73b0\uff0c\u5e76\u4ee5arpa\u6587\u4ef6\u5f62\u5f0f\u5b58\u5728\u3002 arpa2fst\u53ef\u4ee5\u5c06\u8bed\u8a00\u6a21\u578barpa\u6587\u4ef6\u8f6c\u6362\u4e3aWFST\uff0c\u4fbf\u4e8e\u540e\u7eed\u89e3\u7801\u56fe\u7684\u6784\u5efa\u3002","title":"\u6982\u8ff0"},{"location":"asr/arpa2fst%E5%B0%86%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B%E8%BD%AC%E4%B8%BAWFST/#_2","text":"\u8bed\u8a00\u6a21\u578b\u901a\u5e38\u4ee5arpa\u6587\u4ef6\u5f62\u5f0f\u5b58\u5728\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 \\data\\ ngram1=9 ngram2=10 ngram3=2 \\1-grams: -0.7533277 </s> -99 <s> -0.7907404 -0.9294189 \u4eca\u5929 -1.059586 -1.230449 \u5317\u4eac -0.6268836 -0.7533277 \u5929\u6c14 -0.5177391 -0.7533277 \u600e\u4e48 -0.5177391 -1.230449 \u660e\u5929 -0.5688916 -0.7533277 \u6837 -0.5177391 -1.230449 \u7684 -0.5688916 \\2-grams: -0.39794 <s> \u4eca\u5929 -0.3309932 <s> \u660e\u5929 -0.3309932 \u4eca\u5929 \u5317\u4eac -0.3309932 \u4eca\u5929 \u5929\u6c14 -0.1091445 \u5317\u4eac \u7684 -0.1249387 \u5929\u6c14 \u600e\u4e48 0 -0.1249387 \u600e\u4e48 \u6837 0 -0.1091445 \u660e\u5929 \u5929\u6c14 -0.1249387 \u6837 </s> -0.1091445 \u7684 \u5929\u6c14 \\3-grams: -0.1249387\u5929\u6c14 \u600e\u4e48 \u6837 -0.1249387\u600e\u4e48 \u6837 </s> \\end\\ arpa\u6587\u4ef6\u7684\u6bcf\u4e00\u884c\u8868\u793a\u4e00\u4e2a\u6587\u6cd5\u9879\uff0c\u5b83\u901a\u5e38\u5305\u542b\u4e09\u90e8\u5206\u5185\u5bb9\uff1a 1 probability word(s) [backoff probability] \u5176\u4e2d\uff0c probability \u8868\u793a\u8be5\u8bcd\u6216\u8bcd\u7ec4\u53d1\u751f\u7684\u6982\u7387\uff0c word(s) \u8868\u793a\u5177\u4f53\u7684\u8bcd\u6216\u8005\u8bcd\u7ec4\uff0c [backoff probablitiy] \u662f\u53ef\u9009\u9879\uff0c\u8868\u793a\u56de\u9000\u6982\u7387\uff0c\u5f53\u4e0b\u5c42\u6587\u6cd5\u6709\u4ee5\u5f53\u524d\u8bcd\u6216\u8bcd\u7ec4\u4e3a\u524d\u7f00\u7684\u6587\u6cd5\u9879\u65f6\uff0c\u56de\u9000\u6982\u7387\u5b58\u5728\u3002\u4f8b\u5982\u4e0a\u8ff0\u793a\u4f8b\u4e2d\uff0c\u4e8c\u5143\u6587\u6cd5\u9879 \u5929\u6c14 \u600e\u4e48 \u662f\u4e09\u5143\u6587\u6cd5\u9879 \u5929\u6c14 \u600e\u4e48 \u6837 \u7684\u524d\u7f00\uff0c\u6240\u4ee5\u5b83\u5b58\u5728\u56de\u9000\u6982\u7387\uff0c\u5728\u4e0a\u8ff0\u793a\u4f8b\u4e2d\u8be5\u56de\u9000\u6982\u7387\u4e3a0\uff0c\u901a\u5e38\u4e0d\u4e3a0\u3002 \u901a\u8fc7\u4e0a\u8ff0\u7684arpa\u6587\u4ef6\uff0c\u53ef\u4ee5\u8ba1\u7b97\u7ed9\u5b9a\u4e00\u53e5\u8bdd\u7684\u8bed\u8a00\u6a21\u578b\u5f97\u5206\uff0c\u5047\u8bbearpa\u6587\u4ef6\u4e2d\u6700\u9ad8\u5143\u4e3a\u4e09\u5143\uff0c\u5219\u53e5\u5b50 ABCDEF \u53d1\u751f\u7684\u6982\u7387\u4e3a\uff1a \\[ P(ABCDEF)=P(A)\\times P(B|A)\\times P(C|AB)\\times P(D|BC)\\times P(E|CD)\\times P(F|DE) \\] \u5176\u4e2d\uff0c \\(P(A)\\) \u901a\u8fc7\u67e5\u8be2arpa\u6587\u4ef6\u4e2d1-grams\u6587\u6cd5\u9879\u83b7\u5f97\u3002\u5982\u679c2-gram\u5b58\u5728\u8bcd\u7ec4 A B \uff0c\u5219 \\(P(B|A)\\) \u4e5f\u53ef\u4ee5\u901a\u8fc7\u67e5\u8be22-grams\u6587\u6cd5\u9879\u83b7\u5f97\uff1b\u5982\u679c\u8bcd\u7ec4 A B \u57282-grams\u4e2d\u4e0d\u5b58\u5728\uff0c\u5c31\u9700\u8981\u5229\u7528\u56de\u9000\u6982\u7387\u8ba1\u7b97 \\(P(B|A)\\) \uff0c\u8ba1\u7b97\u516c\u5f0f\u4e3a\uff1a \\[ P(B|A)=\\alpha(A)\\times P(B) \\] \u5176\u4e2d\uff0c \\(\\alpha(A)\\) \u8868\u793a A \u7684\u56de\u9000\u6982\u7387\u3002\u7c7b\u4f3c\u5730\uff0c\u4e09\u5143\u8bcd\u7ec4\u6982\u7387\u7684\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b\uff1a \\[ P(C|AB)=P(C|AB)\\quad if\\ A\\ B\\ C\\ exists \\] \\[ P(C|AB)=\\alpha(AB)\\times P(C|B)\\quad if\\ B\\ C\\ exists \\] \\[ P(C|AB)=\\alpha(AB)\\times \\alpha(B) \\times P(C)\\quad other \\]","title":"\u8bed\u8a00\u6a21\u578b"},{"location":"asr/arpa2fst%E5%B0%86%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B%E8%BD%AC%E4%B8%BAWFST/#wfsawfst","text":"WFST\u6bd4WFSA\u591a\u4e86\u8f93\u51fa\u6807\u7b7e\uff0c\u5982\u679c\u4e0d\u8003\u8651\u8bed\u8a00\u6a21\u578b\u548c\u53d1\u97f3\u8bcd\u5178\u7684\u878d\u5408\uff0carpa2fst\u53ea\u9700\u8981\u5c06arpa\u8f6c\u6362\u4e3aWFSA\u5373\u53ef\uff0c\u4f46\u8bed\u97f3\u8bc6\u522b\u4e2d\u8bed\u8a00\u6a21\u578b\u5e76\u975e\u5355\u72ec\u5b58\u5728\uff0c\u800c\u662f\u9700\u8981\u548c\u5176\u5b83\u89e3\u7801\u5668\u56fe\u590d\u5408\uff0c\u6784\u6210\u6700\u7ec8\u7684WFST\u89e3\u7801\u7f51\u7edc\uff0c\u9700\u8981\u8bed\u8a00\u6a21\u578b\u751f\u6210\u7684WFST\u5b58\u5728\u8f93\u5165\u548c\u8f93\u51fa\u7b26\u53f7\u3002\u5bf9\u8bed\u8a00\u6a21\u578b\u6765\u8bf4\uff0cWFSA\u8f6c\u6362\u5230WFST\u975e\u5e38\u5bb9\u6613\uff0c\u53ea\u9700\u8981\u5c06\u6bcf\u6761\u8fb9\u4e0a\u7684\u8f93\u5165\u6807\u7b7e\u590d\u5236\u6210\u8f93\u51fa\u6807\u7b7e\u5373\u53ef\u3002\u5982\u4e0b\u56fe\u4e3a\u8bed\u8a00\u6a21\u578b\u793a\u4f8b\u901a\u8fc7arpa2fst\u751f\u6210\u7684WFST\uff1a \u5982\u4e0a\u56fe\u6240\u793a\uff0c\u8f6c\u79fb\u5f27\u6743\u91cd \\(w\\) \u548c\u8bed\u8a00\u6a21\u578b\u7684\u5bf9\u6570\uff0810\u4e3a\u5e95\uff09\u6982\u7387 \\(L\\) \u4e4b\u95f4\u7684\u8ba1\u7b97\u5173\u7cfb\u4e3a\uff1a \\[ w=-{\\rm ln}(10^L) \\] \u6bd4\u59821-gram\u4e2d\u201c\u4eca\u5929\u201d\u7684\u5bf9\u6570\u6982\u7387\u4e3a-0.9294189\uff0c\u5219\u56fe\u4e2d\u6743\u91cd\u4e3a \\(w=-{\\rm ln}(10^{-0.9294189})=2.1401\\) \u3002\u6982\u7387\u503c\u53d6\u8d1f\u5bf9\u6570\u4f5c\u4e3a\u56fe\u4e2d\u7684\u6743\u91cd\uff0c\u6b64\u65f6\u6743\u91cd\u7684\u610f\u4e49\u4e3a\u8def\u5f84\u4ee3\u4ef7\uff08Cost\uff09\uff0c\u5373\u6743\u91cd\u8d8a\u5927\uff0c\u6982\u7387\u8d8a\u5c0f\u3002\u4e3a\u4e86\u4f7fG\u5728\u53bb\u6389 \\(\\epsilon\\) \u4e4b\u540e\u80fd\u591f\u88ab\u786e\u5b9a\u5316\uff0c\u5728\u6bcf\u4e2a\u56de\u9000\u8df3\u8f6c\u7684\u540e\u9762\u52a0\u5165\u4e00\u4e2a\u7b26\u53f7 #0 \uff0c\u56fe\u4e2d <eps> \u8868\u793a\u7a7a\u6807\u7b7e \\(\\epsilon\\) \u3002\u7ecf\u8fc7\u8fd9\u8fd9\u6837\u7684\u5c55\u5f00\uff0c\u4efb\u610f\u5e8f\u5217\u7684\u8bed\u8a00\u6a21\u578b \u8d1f\u5bf9\u6570\u7d2f\u79ef\u6982\u7387 \u5c31\u7b49\u4e8e\u56fe\u4e2d \u67d0\u8def\u5f84\u7684\u7d2f\u8ba1\u6743\u91cd \u3002 \u67d0\u4e2a\u4e8c\u5143\u8bed\u8a00\u6a21\u578b\u5bf9\u5e94\u7684WFST\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u5176\u4e2d\u6bcf\u4e2a\u8282\u70b9\u8868\u793a\u4e00\u4e2a\u8bcd\uff0c\u8282\u70b9\u4e4b\u95f4\u7684\u8f6c\u79fb\u5f27\u6743\u91cd\u8868\u793a\u524d\u4e00\u4e2a\u8bcd \\(w_1\\) \u4e0e\u540e\u4e00\u4e2a\u8bcd \\(w_2\\) \u4e4b\u95f4\u7684\u6761\u4ef6\u6982\u7387 \\(P(w_2|w_1)\\) \u3002\u4f8b\u5982\uff0c\u8282\u70b91\u8868\u793a\u53e5\u5b50\u7684\u8d77\u59cb <s> \uff0c\u8282\u70b92\u8868\u793a \u4eca\u5929 \uff0c\u4ece\u8282\u70b91\u52302\u7684\u8f6c\u79fb\u5f27\u4e3a \u4eca\u5929:\u4eca\u5929/0.40547 \uff0c\u8f6c\u79fb\u5f27\u4e0a\u7684\u6743\u91cd\uff08\u5373\u6761\u4ef6\u6982\u7387\uff09\u4e0e\u8bed\u8a00\u6a21\u578b\u5bf9\u6570\u6982\u7387\u4e4b\u95f4\u7684\u8ba1\u7b97\u5173\u7cfb\u5982\u4e0a\u5f0f\uff0c\u5373 \\(0.40547=-{\\rm ln}(10^{-0.1760913})\\) \u3002\u5982\u4e0a\u6587\u6240\u8ff0\uff0c\u5982\u679c \\(w_1\\) \u548c \\(w_2\\) \u6784\u6210\u7684\u8bcd\u7ec4\u5728\u8bed\u8a00\u6a21\u578b\u4e2d\u4e0d\u5b58\u5728\uff0c\u5219 \\(w_1\\) \u548c \\(w_2\\) \u4e4b\u95f4\u7684\u6761\u4ef6\u6982\u7387\u7531 \\(w_1\\) \u56de\u9000\u6982\u7387\u548c \\(w_2\\) \u6982\u7387\u76f8\u4e58\u5f97\u5230\u3002\u6bd4\u5982\uff0c\u4e0a\u56fe\u4e2d\u8282\u70b90\u8868\u793a\u56de\u9000\u72b6\u6001\uff0c\u8282\u70b91\u5230\u8282\u70b90\u7684\u8f6c\u79fb\u5f27\u6743\u91cd\u4e3a0.8473\uff0c\u5bf9\u5e94 <s> \u7684\u56de\u9000\u6982\u7387-0.3679768\uff0c\u5373 \\(0.8473=-{\\rm ln}(10^{-0.3679768})\\) \u3002\u8282\u70b92\u5230\u8282\u70b90\u7684\u8f6c\u79fb\u5f27\u6743\u91cd\u4e3a0.69315\uff0c\u5bf9\u5e94 \u4eca\u5929 \u7684\u56de\u9000\u6982\u7387\u4e3a-0.30103\uff0c\u5373 \\(0.69315=-{\\rm ln}(10^{-0.30103})\\) \u3002 arpa2fst \u539f\u7406\u8be6\u89e3_yutianzuijin\u7684\u535a\u5ba2-CSDN\u535a\u5ba2_arpa\u6587\u4ef6 \u6d2a\u9752\u9633-\u300a\u8bed\u97f3\u8bc6\u522b\u539f\u7406\u4e0e\u5b9e\u8df5\u300b-P.168 WFST \u8bed\u8a00\u6a21\u578b - \u7b80\u4e66","title":"WFSA\u8f6c\u6362\u4e3aWFST"},{"location":"asr/kaldi%E4%B8%AD%E7%9A%84Simple-Decoder/","text":"kaldi\u4e2d\u7684Simple-Decoder HCLG HCLG\u662fWSFT\u683c\u5f0f\u7684\u8bed\u97f3\u4efb\u52a1\u76f8\u5173\u7684\u8868\u793a\uff0c\u5bf9\u4e8e\u8bed\u97f3\u8bc6\u522b\u4e2d\u7528\u5230\u7684\u9690\u9a6c\u5c14\u79d1\u592b\u6a21\u578b\uff08H\uff09\u3001\u53d1\u97f3\u8bcd\u5178\uff08L\uff09\u3001\u8bed\u8a00\u6a21\u578b\uff08G\uff09\u4ee5\u53ca\u4e0a\u4e0b\u6587\uff08C\uff09\uff0c\u90fd\u53ef\u4ee5\u7528 \u4e00\u4e2a\u52a0\u6743\u6709\u9650\u72b6\u6001\u63a5\u6536\u5668\uff08WFST\uff09\u6765\u8868\u793a\u3002 \u51c6\u5907L \u53d1\u97f3\u8bcd\u5178\u3002 \u6587\u4ef6\u51c6\u5907 \u51c6\u5907\u6587\u4ef6\uff0c\u653e\u5230dict\u76ee\u5f55\u4e0b\uff1a lexicon.txt\u3002\u53d1\u97f3\u8bcd\u5178\u3002\u683c\u5f0f\uff1a\u6587\u672c\\s\u97f3\u7d20\\n\uff0c\u6bd4\u5982\uff1a 1 2 3 4 5 // lexicon.txt <SIL> SIL \u4eca\u5929 j in1 t ian1 \u662f sh ix4 phones.txt\u3002\u97f3\u7d20\u96c6\u5408\u3002\u683c\u5f0f\uff1a\u97f3\u7d20\\n\uff0c\u6bd4\u5982\uff1a 1 2 3 4 5 // phones.txt SIL j in1 ... silence_phones.txt\u3002\u9759\u97f3\u97f3\u7d20\u96c6\u5408\u3002\u683c\u5f0f\uff1a\u97f3\u7d20\\n\uff0c\u6bd4\u5982\uff1a 1 2 3 4 5 // silence_phones.txt SIL // \u9759\u97f3 SPN // \u6709\u58f0\u97f3\u4f46\u65e0\u6cd5\u8bc6\u522b NSN // \u975e\u53e3\u8bed\u566a\u58f0 LAU // \u7b11\u58f0 nonsilence_phones.txt\u3002\u975e\u9759\u97f3\u97f3\u7d20\u96c6\u5408\u3002\u683c\u5f0f\uff1a\u97f3\u7d20\\n\uff0c\u6bd4\u5982\uff1a 1 2 3 4 // nonsilence_phones.txt j in1 ... optional_silence.txt\u3002\u586b\u5145\u8bcd\u4e4b\u95f4\u7684\u9759\u97f3\u97f3\u7d20\u3002\u683c\u5f0f\uff1a\u97f3\u7d20\\n\uff0c\u6bd4\u5982\uff1a 1 2 // optional_silence.txt SIL // \u8bcd\u95f4\u9759\u97f3 \u5de5\u5177\u6784\u5efa \u4f7f\u7528 egs/wsj/s5 \u4e2d\u7684 utils/prepare_lang.sh \uff1a 1 Usage: utils/prepare_lang.sh <dict-src-dir> <oov-dict-entry> <tmp-dir> <lang-dir> \u6bd4\u5982\uff1a 1 utils/prepare_lang.sh <YOUR_DIR>/dict '<SIL>' <YOUR_DIR>/tmp <YOUR_DIR>/lang \u4ea7\u7269\uff1a L.fst\u3002\u672c\u6b65\u9aa4\u4ea7\u751f\u7684L\uff08Lexicon\uff09\u6709\u9650\u72b6\u6001\u8f6c\u5f55\u673a\u3002\u5c06\u6240\u6709\u7684\u97f3\u7d20\u8f6c\u6210\u4e86\u5bf9\u5e94\u5173\u7cfb\uff08\u89e3\u7801\u56fe\uff09\u3002\u8be5\u56fe\u7684\u8f93\u5165\uff1a\u97f3\u7d20\u7ec4\u5408\uff0c\u8f93\u51fa\uff1a\u8bcd\u3002\u662f\u540e\u7eed\u8bad\u7ec3H\u3001C\u3001L\u89e3\u7801\u56fe\u7684\u4e00\u79cd\uff0cG\u8bad\u7ec3\u7684\u65f6\u5019\u8fd8\u7528\u4e0d\u5230\u3002 L_disambig.fst\u3002\u6d88\u9664\u6b67\u4e49\uff0c\u6d88\u9664\u540c\u97f3\u5b57\u5bfc\u81f4\u7684\u6b67\u4e49\uff0c #+\u6570\u5b57 \u533a\u5206\u540c\u4e00\u4e2a\u97f3\u5bf9\u5e94\u7684\u4e0d\u540c\u5b57\u3002 oov.txt\u3002\u96c6\u5916\u8bcd\uff08Out of Vocabulary Words)\uff0coov.int\u662f\u5bf9\u5e94\u7684id\u3002 topo\u3002\u62d3\u6251\u7ed3\u6784\u3002 phone.txt\u5b58\u653e\u4e86\u6240\u6709\u7684\u97f3\u7d20\u53ca\u5176\u7f16\u53f7\uff0c\u5f62\u5982\uff1a <phone> <phone id> \u3002 \u51c6\u5907G \u8bed\u8a00\u6a21\u578b\u3002 \u51c6\u5907\u8bed\u6599 text\u6587\u4ef6\u3002\u9700\u8981\u6839\u636e L \u4e2d\u7684lexicon.txt\u5206\u8bcd\uff0c\u4f8b\u5982\uff1a 1 2 3 // text\u6587\u4ef6 \u4eca\u5929 \u51e0 \u53f7 \u4eca\u5929 \u662f \u51e0 \u53f7 \u5de5\u5177\u6784\u5efa \u51c6\u5907\u8bed\u8a00\u6a21\u578b \u4f8b\u5982\uff0c 1 2 3 4 // order\uff1a\u4e00\u9636 ngram-count -text text -order 1 -w gram.count.1 // \u521b\u5efa\u8bed\u8a00\u6a21\u578b\uff0c\u4ea7\u7269LM_1\uff0c\u91c7\u7528kndiscount\u5e73\u6ed1 ngram-count -read gram.count.1 -order 1 -lm LM_1 -interpolate -kndiscount \u4ea7\u7269\uff1a gram.count.1 LM_1\u3002\u8bed\u8a00\u6a21\u578b\u3002 \u4ea7\u751fG \u4f7f\u7528 egs/wsj/s5 \u4e2d\u7684 utils/format_lm_sri.sh \uff1a 1 Usage: utils/format_lm_sri.sh [options] <lang-dir> <arpa-LM> [<lexicon>] <out-dir> \u6bd4\u5982\u4e0a\u4f8b\u4e2d\uff1a 1 utils/format_lm_sri.sh lang/ gram/LM_1 out_lang/ \u4ea7\u7269\uff1a G.fst\u3002\u672c\u6b65\u9aa4\u4ea7\u751f\u7684G\u6709\u9650\u72b6\u6001\u8f6c\u5f55\u673a\u3002 L.fst\u3002 ... \u51c6\u5907H HMM\u3002\u58f0\u5b66\u6a21\u578b\u3002 \u6587\u4ef6\u51c6\u5907 wav.scp\u3002\u97f3\u9891\u548c\u5bf9\u5e94\u8def\u5f84\u3002\u683c\u5f0f\uff1a\u97f3\u9891\u5e8f\u53f7\\s\u8def\u5f84\\n\u3002 text\u3002\u8bed\u97f3\u6807\u6ce8\u6587\u4ef6\uff0c\u6bd4\u5982text\uff1a 1 2 3 // text\u6587\u4ef6 001 \u4eca\u5929 \u51e0 \u53f7 002 \u4eca\u5929 \u662f \u51e0 \u53f7 \u5de5\u5177\u6784\u5efa \u58f0\u5b66\u53c2\u6570\u51c6\u5907 \u63d0\u58f0\u5b66\u7279\u5f81\uff0c\u4f7f\u7528 egs/wsj/s5 \u4e2d\u7684 steps/make_mfcc.sh \uff1a 1 2 3 4 5 6 7 8 9 Usage: steps/make_mfcc.sh [options] <data-dir> [<log-dir> <mfcc-dir>] Note: <log-dir> defaults to <data-dir>/log <mfcc-dir> defaults to <data-dir>/data Options: --mfcc-config <config-file> # config passed to compute-mfcc-feats. --nj <nj> # number of parallel jobs. --cmd <run.pl|queue.pl <queue opts>> # how to run jobs. --write-utt2num-frames <true|false> # if true, write utt2num_frames file --write-utt2dur <true|false> # if true, write utt2dur file. \u6839\u636e\u4e0a\u8ff0\u63cf\u8ff0\uff0c\u5b9e\u9645\u53ea\u9700\u8981\u6307\u5b9a\u6570\u636e\u8def\u5f84data-dir\u5373\u53ef\u3002 make_mfcc.sh \u5e94\u8be5\u662f\u6839\u636e wav.scp \u8ba1\u7b97\u58f0\u5b66\u53c2\u6570\u4e86\u3002 \u4e4b\u540e\u9700\u8981\u8ba1\u7b97\u5e73\u5747\u503c\u548c\u65b9\u5dee\uff0c\u4f7f\u7528 egs/wsj/s5 \u4e2d\u7684 steps/compute_cmvn_stats.sh \uff1a 1 2 3 Usage: steps/compute_cmvn_stats.sh [options] <data-dir> [<log-dir> <cmvn-dir>] Note: <log-dir> defaults to <data-dir>/log <cmvn-dir> defaults to <data-dir>/data \u540c\u6837\u5730\uff0c compute_cmvn_stats.sh \u5e94\u8be5\u4e5f\u662f\u901a\u8fc7 wav.scp \u8ba1\u7b97\u58f0\u5b66\u53c2\u6570\u7684\u5e73\u5747\u503c\u548c\u65b9\u5dee\uff0c\u4ee5\u4fbf\u8fdb\u884c\u5f52\u4e00\u5316\uff0c\u4e3b\u8981\u76ee\u7684\u662f\u63d0\u9ad8\u58f0\u5b66\u7279\u5f81\u5bf9\u8bf4\u8bdd\u4eba\u3001\u5f55\u97f3\u8bbe\u5907\u3001\u73af\u5883\u3001\u97f3\u91cf\u7b49\u56e0\u7d20\u7684\u9c81\u68d2\u6027\u3002 \u4ea7\u7269\uff1a feats.scp \u3002\u58f0\u5b66\u7279\u5f81scp\u6587\u4ef6\u3002 cmvn.scp \u3002\u58f0\u5b66\u7279\u5f81\u5747\u503c\u65b9\u5deescp\u6587\u4ef6\u3002 utt2num_frames \u3002 make_mfcc.sh \u65f6\u53ef\u9009\u6587\u4ef6\uff0c\u8bb0\u5f55\u6bcf\u6761\u97f3\u9891\u7684\u5e27\u6570\u3002 ... \u8bad\u7ec3\u58f0\u5b66\u6a21\u578b \u8bad\u7ec3\u58f0\u5b66\u6a21\u578b\uff0c\u4f7f\u7528 egs/wsj/s5 \u4e2d\u7684 steps/train_mono.sh \uff1a 1 Usage: steps/train_mono.sh [options] <data-dir> <lang-dir> <exp-dir> \u5176\u4e2d\uff0c <data-dir> \u662f\u653e\u7f6efeats.scp\u3001cmvn.scp\u3001text\u7b49\u6570\u636e\u7684\u76ee\u5f55\uff0c <lang-dir> \u662f\u4e0a\u8ff0\u51c6\u5907 L \u65f6\u7684\u4ea7\u7269\u76ee\u5f55\uff0c <exp-dir> \u662f\u58f0\u5b66\u6a21\u578b\u8f93\u51fa\u76ee\u5f55\u3002 \u4ea7\u7269\uff1a final.mdl \u3002\u58f0\u5b66\u6a21\u578b\u3002 ali.1.gz \u3002\u5bf9\u9f50\u3002 phones.txt \u3002\u97f3\u7d20\u96c6\u5408\u3002 \u83b7\u5f97HCLG \u6784\u56fe \u6240\u9700\u6587\u4ef6\uff1a lang \u3002\u51c6\u5907L\u9636\u6bb5\u7684\u8f93\u51fa\u76ee\u5f55\u3002\u5355\u8bcd\u97f3\u7d20\u3002 exp/mono \u3002\u51c6\u5907H\u9636\u6bb5\u7684\u8f93\u51fa\u76ee\u5f55\u3002\u58f0\u5b66\u6a21\u578b\u3002 \u4f7f\u7528 egs/wsj/s5 \u4e2d\u7684 utils/mkgraph.sh \uff1a 1 utils/mkgraph.sh [options] <lang-dir> <model-dir> <graphdir> \u627f\u63a5\u4e0a\u8ff0\u4f8b\u5b50\uff1a 1 utils/mkgraph.sh lang/ exp/mono/ exp/mono/graph \u4ea7\u7269\uff1a HCLG.fst\u3002 HCLG \u6709\u9650\u72b6\u6001\u8f6c\u5f55\u673a\u3002 HCLG\u53ef\u89c6\u5316 \u4f7f\u7528kaldi\u4e2d\u7684 fstdraw \u5de5\u5177\uff0c\u8be5\u5de5\u5177\u5728kaldi\u5b89\u88c5\u540e\u662f\u5168\u5c40\u5de5\u5177\u3002\u6bd4\u5982\uff1a 1 2 fstdraw HCLG.fst > HCLG.dot dot -Tjpg -Gdpi = 800 HCLG.dot > HCLG.jpg \u7f29\u51cfHCLG \u4e3b\u8981\u601d\u8def\u662f\u7f29\u51cfL\uff0c\u5355\u8bcd\u97f3\u7d20\uff0c\u51cf\u5c11\u97f3\u7d20\u5bf9\u5e94\u7684\u72b6\u6001\u6570\uff1a 1 2 3 4 // \u9ed8\u8ba4\u97f3\u7d20\u72b6\u6001\u6570\u592a\u591a\uff0c\u5bfc\u81f4\u6700\u7ec8\u7684HCLG.fst\u8f83\u4e3a\u590d\u6742 utils/prepare_lang.sh <YOUR_DIR>/dict '<SIL>' <YOUR_DIR>/tmp <YOUR_DIR>/lang // \u7f29\u51cf\u97f3\u7d20\u7684\u72b6\u6001\u6570\uff0c\u4e0d\u9700\u8981\u97f3\u7d20B\uff08\u5f00\u59cb\uff09/I\uff08\u4e2d\u95f4\uff09/E\uff08\u7ed3\u675f\uff09/S\uff08\u9759\u97f3\uff09\u7684\u533a\u5206 utils/prepare_lang.sh --num-sil-states 1 --num-nonsil-states 1 --position-dependent-phones false <YOUR_DIR>/dict '<SIL>' <YOUR_DIR>/tmp <YOUR_DIR>/lang \u5c0f\u7ed3 \u6240\u9700\u6587\u4ef6 \u6587\u4ef6 \u4f5c\u7528 \u5185\u5bb9\u6a21\u5f0f \u793a\u4f8b wav.scp \u8bed\u97f3\u6587\u4ef6id\u5230\u8bed\u97f3wav\u6587\u4ef6\u7684\u6620\u5c04 <uterranceID> <full_path_to_audio_file> sentense_id path_to_wavfile.wav text \u8bed\u97f3\u6587\u4ef6id\u5230\u8bed\u97f3\u5185\u5bb9\u7684\u6620\u5c04 <uterranceID> <text_transcription> sentense_id \u4eca\u5929\u5929\u6c14\u5f88\u597d utt2spk \u8bed\u97f3\u6587\u4ef6id\u5230\u8bf4\u8bdd\u4eba\u7684id\u6620\u5c04 <uterranceID> <speakerID> sentense_id speaker_id spk2utt \u8bf4\u8bdd\u4eba\u7684id \u5230\u8bed\u97f3\u6587\u4ef6id\u7684\u6620\u5c04 <speakerID> <uterranceID_1> <uterranceID_2> <uterranceID_3> \u2026 speaker_id sentense_id1 sentense_id2 sentense_id3 \u6b65\u9aa4\u603b\u7ed3 \u89e3\u7801 \u6240\u9700\u6587\u4ef6 HCLG \u58f0\u5b66\u6a21\u578b\u3002\u6784\u5efaG.fst\u65f6\u4ea7\u751f\u7684transition\u6587\u4ef6\u3002 \u4f7f\u7528 gmm-decode-simple \uff0c\u8fd9\u662fkaldi\u5b89\u88c5\u4e4b\u540e\u7684\u5168\u5c40\u5de5\u5177\uff1a 1 2 3 4 5 6 gmm-decode-simple Decode features using GMM-based model. Viterbi decoding, only produces linear sequence; any lattice produced is linear Usage: gmm-decode-simple [options] <model-in> <fst-in> <features-rspecifier> <words-wspecifier> [<alignments-wspecifier>] [<lattice-wspecifier>] tricks\uff1a vimdiff\u3002\u6587\u672c\u5bf9\u6bd4\u5de5\u5177\uff0c vimdiff <file1> <file2> ll -lh\u3002\u67e5\u770b\u6587\u4ef6\u8be6\u7ec6\u4fe1\u606f\uff0c\u5305\u62ec\u8f6f\u8fde\u63a5\u3002 ln -s <\u5b9e\u9645\u6587\u4ef6\u8def\u5f84> <\u8f6f\u94fe\u63a5\u8def\u5f84> \u3010Kaldi\u89e3\u7801\u539f\u7406\u3011\u6309\u884c\u5206\u6790Simple-Decoder LiJian-kaldi\u642d\u5efa\u5728\u7ebf\u8bed\u97f3\u8bc6\u522b\u7cfb\u7edf \u8d44\u6599\u6c47\u603b LiJian-kaldi\u642d\u5efa\u5728\u7ebf\u8bed\u97f3\u8bc6\u522b\u7cfb\u7edf \u8bed\u97f3\u8d44\u6599\u5206\u4eab\uff08\u66f4\u65b0ing\uff09","title":"kaldi\u4e2d\u7684Simple-Decoder"},{"location":"asr/kaldi%E4%B8%AD%E7%9A%84Simple-Decoder/#kaldisimple-decoder","text":"","title":"kaldi\u4e2d\u7684Simple-Decoder"},{"location":"asr/kaldi%E4%B8%AD%E7%9A%84Simple-Decoder/#hclg","text":"HCLG\u662fWSFT\u683c\u5f0f\u7684\u8bed\u97f3\u4efb\u52a1\u76f8\u5173\u7684\u8868\u793a\uff0c\u5bf9\u4e8e\u8bed\u97f3\u8bc6\u522b\u4e2d\u7528\u5230\u7684\u9690\u9a6c\u5c14\u79d1\u592b\u6a21\u578b\uff08H\uff09\u3001\u53d1\u97f3\u8bcd\u5178\uff08L\uff09\u3001\u8bed\u8a00\u6a21\u578b\uff08G\uff09\u4ee5\u53ca\u4e0a\u4e0b\u6587\uff08C\uff09\uff0c\u90fd\u53ef\u4ee5\u7528 \u4e00\u4e2a\u52a0\u6743\u6709\u9650\u72b6\u6001\u63a5\u6536\u5668\uff08WFST\uff09\u6765\u8868\u793a\u3002","title":"HCLG"},{"location":"asr/kaldi%E4%B8%AD%E7%9A%84Simple-Decoder/#l","text":"\u53d1\u97f3\u8bcd\u5178\u3002","title":"\u51c6\u5907L"},{"location":"asr/kaldi%E4%B8%AD%E7%9A%84Simple-Decoder/#_1","text":"\u51c6\u5907\u6587\u4ef6\uff0c\u653e\u5230dict\u76ee\u5f55\u4e0b\uff1a lexicon.txt\u3002\u53d1\u97f3\u8bcd\u5178\u3002\u683c\u5f0f\uff1a\u6587\u672c\\s\u97f3\u7d20\\n\uff0c\u6bd4\u5982\uff1a 1 2 3 4 5 // lexicon.txt <SIL> SIL \u4eca\u5929 j in1 t ian1 \u662f sh ix4 phones.txt\u3002\u97f3\u7d20\u96c6\u5408\u3002\u683c\u5f0f\uff1a\u97f3\u7d20\\n\uff0c\u6bd4\u5982\uff1a 1 2 3 4 5 // phones.txt SIL j in1 ... silence_phones.txt\u3002\u9759\u97f3\u97f3\u7d20\u96c6\u5408\u3002\u683c\u5f0f\uff1a\u97f3\u7d20\\n\uff0c\u6bd4\u5982\uff1a 1 2 3 4 5 // silence_phones.txt SIL // \u9759\u97f3 SPN // \u6709\u58f0\u97f3\u4f46\u65e0\u6cd5\u8bc6\u522b NSN // \u975e\u53e3\u8bed\u566a\u58f0 LAU // \u7b11\u58f0 nonsilence_phones.txt\u3002\u975e\u9759\u97f3\u97f3\u7d20\u96c6\u5408\u3002\u683c\u5f0f\uff1a\u97f3\u7d20\\n\uff0c\u6bd4\u5982\uff1a 1 2 3 4 // nonsilence_phones.txt j in1 ... optional_silence.txt\u3002\u586b\u5145\u8bcd\u4e4b\u95f4\u7684\u9759\u97f3\u97f3\u7d20\u3002\u683c\u5f0f\uff1a\u97f3\u7d20\\n\uff0c\u6bd4\u5982\uff1a 1 2 // optional_silence.txt SIL // \u8bcd\u95f4\u9759\u97f3","title":"\u6587\u4ef6\u51c6\u5907"},{"location":"asr/kaldi%E4%B8%AD%E7%9A%84Simple-Decoder/#_2","text":"\u4f7f\u7528 egs/wsj/s5 \u4e2d\u7684 utils/prepare_lang.sh \uff1a 1 Usage: utils/prepare_lang.sh <dict-src-dir> <oov-dict-entry> <tmp-dir> <lang-dir> \u6bd4\u5982\uff1a 1 utils/prepare_lang.sh <YOUR_DIR>/dict '<SIL>' <YOUR_DIR>/tmp <YOUR_DIR>/lang \u4ea7\u7269\uff1a L.fst\u3002\u672c\u6b65\u9aa4\u4ea7\u751f\u7684L\uff08Lexicon\uff09\u6709\u9650\u72b6\u6001\u8f6c\u5f55\u673a\u3002\u5c06\u6240\u6709\u7684\u97f3\u7d20\u8f6c\u6210\u4e86\u5bf9\u5e94\u5173\u7cfb\uff08\u89e3\u7801\u56fe\uff09\u3002\u8be5\u56fe\u7684\u8f93\u5165\uff1a\u97f3\u7d20\u7ec4\u5408\uff0c\u8f93\u51fa\uff1a\u8bcd\u3002\u662f\u540e\u7eed\u8bad\u7ec3H\u3001C\u3001L\u89e3\u7801\u56fe\u7684\u4e00\u79cd\uff0cG\u8bad\u7ec3\u7684\u65f6\u5019\u8fd8\u7528\u4e0d\u5230\u3002 L_disambig.fst\u3002\u6d88\u9664\u6b67\u4e49\uff0c\u6d88\u9664\u540c\u97f3\u5b57\u5bfc\u81f4\u7684\u6b67\u4e49\uff0c #+\u6570\u5b57 \u533a\u5206\u540c\u4e00\u4e2a\u97f3\u5bf9\u5e94\u7684\u4e0d\u540c\u5b57\u3002 oov.txt\u3002\u96c6\u5916\u8bcd\uff08Out of Vocabulary Words)\uff0coov.int\u662f\u5bf9\u5e94\u7684id\u3002 topo\u3002\u62d3\u6251\u7ed3\u6784\u3002 phone.txt\u5b58\u653e\u4e86\u6240\u6709\u7684\u97f3\u7d20\u53ca\u5176\u7f16\u53f7\uff0c\u5f62\u5982\uff1a <phone> <phone id> \u3002","title":"\u5de5\u5177\u6784\u5efa"},{"location":"asr/kaldi%E4%B8%AD%E7%9A%84Simple-Decoder/#g","text":"\u8bed\u8a00\u6a21\u578b\u3002","title":"\u51c6\u5907G"},{"location":"asr/kaldi%E4%B8%AD%E7%9A%84Simple-Decoder/#_3","text":"text\u6587\u4ef6\u3002\u9700\u8981\u6839\u636e L \u4e2d\u7684lexicon.txt\u5206\u8bcd\uff0c\u4f8b\u5982\uff1a 1 2 3 // text\u6587\u4ef6 \u4eca\u5929 \u51e0 \u53f7 \u4eca\u5929 \u662f \u51e0 \u53f7","title":"\u51c6\u5907\u8bed\u6599"},{"location":"asr/kaldi%E4%B8%AD%E7%9A%84Simple-Decoder/#_4","text":"\u51c6\u5907\u8bed\u8a00\u6a21\u578b \u4f8b\u5982\uff0c 1 2 3 4 // order\uff1a\u4e00\u9636 ngram-count -text text -order 1 -w gram.count.1 // \u521b\u5efa\u8bed\u8a00\u6a21\u578b\uff0c\u4ea7\u7269LM_1\uff0c\u91c7\u7528kndiscount\u5e73\u6ed1 ngram-count -read gram.count.1 -order 1 -lm LM_1 -interpolate -kndiscount \u4ea7\u7269\uff1a gram.count.1 LM_1\u3002\u8bed\u8a00\u6a21\u578b\u3002 \u4ea7\u751fG \u4f7f\u7528 egs/wsj/s5 \u4e2d\u7684 utils/format_lm_sri.sh \uff1a 1 Usage: utils/format_lm_sri.sh [options] <lang-dir> <arpa-LM> [<lexicon>] <out-dir> \u6bd4\u5982\u4e0a\u4f8b\u4e2d\uff1a 1 utils/format_lm_sri.sh lang/ gram/LM_1 out_lang/ \u4ea7\u7269\uff1a G.fst\u3002\u672c\u6b65\u9aa4\u4ea7\u751f\u7684G\u6709\u9650\u72b6\u6001\u8f6c\u5f55\u673a\u3002 L.fst\u3002 ...","title":"\u5de5\u5177\u6784\u5efa"},{"location":"asr/kaldi%E4%B8%AD%E7%9A%84Simple-Decoder/#h","text":"HMM\u3002\u58f0\u5b66\u6a21\u578b\u3002","title":"\u51c6\u5907H"},{"location":"asr/kaldi%E4%B8%AD%E7%9A%84Simple-Decoder/#_5","text":"wav.scp\u3002\u97f3\u9891\u548c\u5bf9\u5e94\u8def\u5f84\u3002\u683c\u5f0f\uff1a\u97f3\u9891\u5e8f\u53f7\\s\u8def\u5f84\\n\u3002 text\u3002\u8bed\u97f3\u6807\u6ce8\u6587\u4ef6\uff0c\u6bd4\u5982text\uff1a 1 2 3 // text\u6587\u4ef6 001 \u4eca\u5929 \u51e0 \u53f7 002 \u4eca\u5929 \u662f \u51e0 \u53f7","title":"\u6587\u4ef6\u51c6\u5907"},{"location":"asr/kaldi%E4%B8%AD%E7%9A%84Simple-Decoder/#_6","text":"\u58f0\u5b66\u53c2\u6570\u51c6\u5907 \u63d0\u58f0\u5b66\u7279\u5f81\uff0c\u4f7f\u7528 egs/wsj/s5 \u4e2d\u7684 steps/make_mfcc.sh \uff1a 1 2 3 4 5 6 7 8 9 Usage: steps/make_mfcc.sh [options] <data-dir> [<log-dir> <mfcc-dir>] Note: <log-dir> defaults to <data-dir>/log <mfcc-dir> defaults to <data-dir>/data Options: --mfcc-config <config-file> # config passed to compute-mfcc-feats. --nj <nj> # number of parallel jobs. --cmd <run.pl|queue.pl <queue opts>> # how to run jobs. --write-utt2num-frames <true|false> # if true, write utt2num_frames file --write-utt2dur <true|false> # if true, write utt2dur file. \u6839\u636e\u4e0a\u8ff0\u63cf\u8ff0\uff0c\u5b9e\u9645\u53ea\u9700\u8981\u6307\u5b9a\u6570\u636e\u8def\u5f84data-dir\u5373\u53ef\u3002 make_mfcc.sh \u5e94\u8be5\u662f\u6839\u636e wav.scp \u8ba1\u7b97\u58f0\u5b66\u53c2\u6570\u4e86\u3002 \u4e4b\u540e\u9700\u8981\u8ba1\u7b97\u5e73\u5747\u503c\u548c\u65b9\u5dee\uff0c\u4f7f\u7528 egs/wsj/s5 \u4e2d\u7684 steps/compute_cmvn_stats.sh \uff1a 1 2 3 Usage: steps/compute_cmvn_stats.sh [options] <data-dir> [<log-dir> <cmvn-dir>] Note: <log-dir> defaults to <data-dir>/log <cmvn-dir> defaults to <data-dir>/data \u540c\u6837\u5730\uff0c compute_cmvn_stats.sh \u5e94\u8be5\u4e5f\u662f\u901a\u8fc7 wav.scp \u8ba1\u7b97\u58f0\u5b66\u53c2\u6570\u7684\u5e73\u5747\u503c\u548c\u65b9\u5dee\uff0c\u4ee5\u4fbf\u8fdb\u884c\u5f52\u4e00\u5316\uff0c\u4e3b\u8981\u76ee\u7684\u662f\u63d0\u9ad8\u58f0\u5b66\u7279\u5f81\u5bf9\u8bf4\u8bdd\u4eba\u3001\u5f55\u97f3\u8bbe\u5907\u3001\u73af\u5883\u3001\u97f3\u91cf\u7b49\u56e0\u7d20\u7684\u9c81\u68d2\u6027\u3002 \u4ea7\u7269\uff1a feats.scp \u3002\u58f0\u5b66\u7279\u5f81scp\u6587\u4ef6\u3002 cmvn.scp \u3002\u58f0\u5b66\u7279\u5f81\u5747\u503c\u65b9\u5deescp\u6587\u4ef6\u3002 utt2num_frames \u3002 make_mfcc.sh \u65f6\u53ef\u9009\u6587\u4ef6\uff0c\u8bb0\u5f55\u6bcf\u6761\u97f3\u9891\u7684\u5e27\u6570\u3002 ... \u8bad\u7ec3\u58f0\u5b66\u6a21\u578b \u8bad\u7ec3\u58f0\u5b66\u6a21\u578b\uff0c\u4f7f\u7528 egs/wsj/s5 \u4e2d\u7684 steps/train_mono.sh \uff1a 1 Usage: steps/train_mono.sh [options] <data-dir> <lang-dir> <exp-dir> \u5176\u4e2d\uff0c <data-dir> \u662f\u653e\u7f6efeats.scp\u3001cmvn.scp\u3001text\u7b49\u6570\u636e\u7684\u76ee\u5f55\uff0c <lang-dir> \u662f\u4e0a\u8ff0\u51c6\u5907 L \u65f6\u7684\u4ea7\u7269\u76ee\u5f55\uff0c <exp-dir> \u662f\u58f0\u5b66\u6a21\u578b\u8f93\u51fa\u76ee\u5f55\u3002 \u4ea7\u7269\uff1a final.mdl \u3002\u58f0\u5b66\u6a21\u578b\u3002 ali.1.gz \u3002\u5bf9\u9f50\u3002 phones.txt \u3002\u97f3\u7d20\u96c6\u5408\u3002","title":"\u5de5\u5177\u6784\u5efa"},{"location":"asr/kaldi%E4%B8%AD%E7%9A%84Simple-Decoder/#hclg_1","text":"","title":"\u83b7\u5f97HCLG"},{"location":"asr/kaldi%E4%B8%AD%E7%9A%84Simple-Decoder/#_7","text":"\u6240\u9700\u6587\u4ef6\uff1a lang \u3002\u51c6\u5907L\u9636\u6bb5\u7684\u8f93\u51fa\u76ee\u5f55\u3002\u5355\u8bcd\u97f3\u7d20\u3002 exp/mono \u3002\u51c6\u5907H\u9636\u6bb5\u7684\u8f93\u51fa\u76ee\u5f55\u3002\u58f0\u5b66\u6a21\u578b\u3002 \u4f7f\u7528 egs/wsj/s5 \u4e2d\u7684 utils/mkgraph.sh \uff1a 1 utils/mkgraph.sh [options] <lang-dir> <model-dir> <graphdir> \u627f\u63a5\u4e0a\u8ff0\u4f8b\u5b50\uff1a 1 utils/mkgraph.sh lang/ exp/mono/ exp/mono/graph \u4ea7\u7269\uff1a HCLG.fst\u3002 HCLG \u6709\u9650\u72b6\u6001\u8f6c\u5f55\u673a\u3002","title":"\u6784\u56fe"},{"location":"asr/kaldi%E4%B8%AD%E7%9A%84Simple-Decoder/#hclg_2","text":"\u4f7f\u7528kaldi\u4e2d\u7684 fstdraw \u5de5\u5177\uff0c\u8be5\u5de5\u5177\u5728kaldi\u5b89\u88c5\u540e\u662f\u5168\u5c40\u5de5\u5177\u3002\u6bd4\u5982\uff1a 1 2 fstdraw HCLG.fst > HCLG.dot dot -Tjpg -Gdpi = 800 HCLG.dot > HCLG.jpg","title":"HCLG\u53ef\u89c6\u5316"},{"location":"asr/kaldi%E4%B8%AD%E7%9A%84Simple-Decoder/#hclg_3","text":"\u4e3b\u8981\u601d\u8def\u662f\u7f29\u51cfL\uff0c\u5355\u8bcd\u97f3\u7d20\uff0c\u51cf\u5c11\u97f3\u7d20\u5bf9\u5e94\u7684\u72b6\u6001\u6570\uff1a 1 2 3 4 // \u9ed8\u8ba4\u97f3\u7d20\u72b6\u6001\u6570\u592a\u591a\uff0c\u5bfc\u81f4\u6700\u7ec8\u7684HCLG.fst\u8f83\u4e3a\u590d\u6742 utils/prepare_lang.sh <YOUR_DIR>/dict '<SIL>' <YOUR_DIR>/tmp <YOUR_DIR>/lang // \u7f29\u51cf\u97f3\u7d20\u7684\u72b6\u6001\u6570\uff0c\u4e0d\u9700\u8981\u97f3\u7d20B\uff08\u5f00\u59cb\uff09/I\uff08\u4e2d\u95f4\uff09/E\uff08\u7ed3\u675f\uff09/S\uff08\u9759\u97f3\uff09\u7684\u533a\u5206 utils/prepare_lang.sh --num-sil-states 1 --num-nonsil-states 1 --position-dependent-phones false <YOUR_DIR>/dict '<SIL>' <YOUR_DIR>/tmp <YOUR_DIR>/lang","title":"\u7f29\u51cfHCLG"},{"location":"asr/kaldi%E4%B8%AD%E7%9A%84Simple-Decoder/#_8","text":"","title":"\u5c0f\u7ed3"},{"location":"asr/kaldi%E4%B8%AD%E7%9A%84Simple-Decoder/#_9","text":"\u6587\u4ef6 \u4f5c\u7528 \u5185\u5bb9\u6a21\u5f0f \u793a\u4f8b wav.scp \u8bed\u97f3\u6587\u4ef6id\u5230\u8bed\u97f3wav\u6587\u4ef6\u7684\u6620\u5c04 <uterranceID> <full_path_to_audio_file> sentense_id path_to_wavfile.wav text \u8bed\u97f3\u6587\u4ef6id\u5230\u8bed\u97f3\u5185\u5bb9\u7684\u6620\u5c04 <uterranceID> <text_transcription> sentense_id \u4eca\u5929\u5929\u6c14\u5f88\u597d utt2spk \u8bed\u97f3\u6587\u4ef6id\u5230\u8bf4\u8bdd\u4eba\u7684id\u6620\u5c04 <uterranceID> <speakerID> sentense_id speaker_id spk2utt \u8bf4\u8bdd\u4eba\u7684id \u5230\u8bed\u97f3\u6587\u4ef6id\u7684\u6620\u5c04 <speakerID> <uterranceID_1> <uterranceID_2> <uterranceID_3> \u2026 speaker_id sentense_id1 sentense_id2 sentense_id3","title":"\u6240\u9700\u6587\u4ef6"},{"location":"asr/kaldi%E4%B8%AD%E7%9A%84Simple-Decoder/#_10","text":"","title":"\u6b65\u9aa4\u603b\u7ed3"},{"location":"asr/kaldi%E4%B8%AD%E7%9A%84Simple-Decoder/#_11","text":"","title":"\u89e3\u7801"},{"location":"asr/kaldi%E4%B8%AD%E7%9A%84Simple-Decoder/#_12","text":"HCLG \u58f0\u5b66\u6a21\u578b\u3002\u6784\u5efaG.fst\u65f6\u4ea7\u751f\u7684transition\u6587\u4ef6\u3002 \u4f7f\u7528 gmm-decode-simple \uff0c\u8fd9\u662fkaldi\u5b89\u88c5\u4e4b\u540e\u7684\u5168\u5c40\u5de5\u5177\uff1a 1 2 3 4 5 6 gmm-decode-simple Decode features using GMM-based model. Viterbi decoding, only produces linear sequence; any lattice produced is linear Usage: gmm-decode-simple [options] <model-in> <fst-in> <features-rspecifier> <words-wspecifier> [<alignments-wspecifier>] [<lattice-wspecifier>] tricks\uff1a vimdiff\u3002\u6587\u672c\u5bf9\u6bd4\u5de5\u5177\uff0c vimdiff <file1> <file2> ll -lh\u3002\u67e5\u770b\u6587\u4ef6\u8be6\u7ec6\u4fe1\u606f\uff0c\u5305\u62ec\u8f6f\u8fde\u63a5\u3002 ln -s <\u5b9e\u9645\u6587\u4ef6\u8def\u5f84> <\u8f6f\u94fe\u63a5\u8def\u5f84> \u3010Kaldi\u89e3\u7801\u539f\u7406\u3011\u6309\u884c\u5206\u6790Simple-Decoder LiJian-kaldi\u642d\u5efa\u5728\u7ebf\u8bed\u97f3\u8bc6\u522b\u7cfb\u7edf \u8d44\u6599\u6c47\u603b LiJian-kaldi\u642d\u5efa\u5728\u7ebf\u8bed\u97f3\u8bc6\u522b\u7cfb\u7edf \u8bed\u97f3\u8d44\u6599\u5206\u4eab\uff08\u66f4\u65b0ing\uff09","title":"\u6240\u9700\u6587\u4ef6"},{"location":"asr/kaldi%E4%B8%AD%E7%9A%84%E8%A7%A3%E7%A0%81%E8%BF%87%E7%A8%8B/","text":"kaldi\u4e2d\u7684\u89e3\u7801\u8fc7\u7a0b \u8bed\u8a00\u6a21\u578b \u56f0\u60d1\u5ea6 \u8bed\u8a00\u6a21\u578b\u7684\u8bc4\u4ef7\u65b9\u6cd5\u4e3a\u56f0\u60d1\u5ea6\uff08perplexity\uff0cppl\uff09\uff0c\u5927\u5c0f\u8868\u793a\u5f53\u524d\u53e5\u5b50\u7684\u201c\u901a\u987a\u201d\u7a0b\u5ea6\u3002 WeNet\u5229\u7528WFST\u7684\u4e00\u4e9b\u53c2\u6570 max_active \u3002\u548c beam \u53c2\u6570\u5171\u540c\u63a7\u5236beam search\u7684\u6ce2\u675f\u5927\u5c0f\u3002 min_active \u3002 acoustic_scale \u3002\u58f0\u5b66\u6a21\u578b\u7ed9\u51fa\u7684\u4f3c\u7136\u5ea6\u653e\u7f29\u7cfb\u6570\u3002 blank_skip_thresh \u3002\u8df3\u8fc7blank\u7684\u9608\u503c\u3002 nbest \u3002 \u8bed\u97f3\u8bc6\u522b\u7684\u5efa\u6a21\u5355\u5143 \u6574\u53e5\u6587\u672c\u3002\u5982\u201cHello World\u201d\uff0c\u5bf9\u5e94\u7684\u8bed\u97f3\u5efa\u6a21\u5c3a\u5ea6\u4e3a\u6574\u6761\u8bed\u97f3\u3002 \u8bcd\u3002\u5982\u5b64\u7acb\u8bcd\u201cGood\u201d\u3001\u201cWorld\u201d\uff0c\u5bf9\u5e94\u7684\u8bed\u97f3\u5efa\u6a21\u5c3a\u5ea6\u5927\u7ea6\u4e3a\u6bcf\u4e2a\u8bcd\u7684\u53d1\u97f3\u8303\u56f4\u3002 \u97f3\u7d20\u3002\u6bd4\u5982\u5c06\u201cWorld\u201d\u8fdb\u4e00\u6b65\u8868\u793a\u4e3a\u201c/werld/\u201d\uff0c\u5176\u4e2d\u6bcf\u4e2a\u97f3\u7d20\uff08phone\uff09\u4f5c\u4e3a\u57fa\u672c\u5355\u4f4d\uff0c\u5bf9\u5e94\u7684\u8bed\u97f3\u5efa\u6a21\u5c3a\u5ea6\u7f29\u51cf\u4e3a\u6bcf\u4e2a\u97f3\u7d20\u7684\u53d1\u97f3\u8303\u56f4\u3002 \u4e09\u97f3\u7d20\uff0c\u4e5f\u5c31\u662f\u8003\u8651\u4e86\u4e0a\u4e0b\u6587\u7684\u97f3\u7d20\u3002\u5982\u5c06\u97f3\u7d20\u201c/d/\u201d\u8fdb\u4e00\u6b65\u8868\u793a\u4e3a\u201c{/l-d-sil/,/u-d-l/,...}\u201d\uff0c\u5bf9\u5e94\u7684\u8bed\u97f3\u5efa\u6a21\u5c3a\u5ea6\u662f\u6bcf\u4e2a\u4e09\u97f3\u7d20\u7684\u53d1\u97f3\u8303\u56f4\uff0c\u957f\u5ea6\u4e0e\u5355\u97f3\u7d20\u5dee\u4e0d\u591a\u3002 \u9690\u9a6c\u5c14\u79d1\u592b\u6a21\u578b\u72b6\u6001\uff0c\u4e5f\u5c31\u662f\u5c06\u6bcf\u4e2a\u4e09\u97f3\u7d20\uff08triphone\uff09\u90fd\u7528\u4e00\u4e2a\u4e09\u72b6\u6001\u9690\u9a6c\u5c14\u79d1\u592b\u6a21\u578b\u8868\u793a\uff0c\u5e76\u7528\u6bcf\u4e2a\u72b6\u6001\u4f5c\u4e3a\u5efa\u6a21\u7c92\u5ea6\uff0c\u5bf9\u5e94\u7684\u8bed\u97f3\u5efa\u6a21\u5c3a\u5ea6\u5c06\u8fdb\u4e00\u6b65\u7f29\u77ed\u3002 \u4e0a\u56fe\u4e2d\uff0c\u201cDNN-HMM\u201d\u8868\u793a\u6df1\u5ea6\u795e\u7ecf\u7f51\u7edc-\u9690\u9a6c\u5c14\u79d1\u592b\u6a21\u578b\u7ed3\u6784\uff0c\u201cCTC\u201d\u8868\u793a\u57fa\u4e8eCTC\u635f\u5931\u51fd\u6570\u7684\u7aef\u5230\u7aef\u7ed3\u6784\uff0c\u201cAttention\u201d\u8868\u793a\u57fa\u4e8e\u6ce8\u610f\u529b\u673a\u5236\u7684\u7aef\u5230\u7aef\u7ed3\u6784\u3002 \u5982\u4e0a\u56fe\u6240\u793a\uff0c\u5b57\u8bcd\u662f\u7531\u97f3\u7d20\uff08Phone\uff09\u7ec4\u6210\uff1b\u97f3\u7d20\u7684\u4e0a\u4e0b\u6587\u4e0d\u540c\uff0c\u56e0\u6b64\u540c\u4e00\u4e2a\u97f3\u7d20\u5c31\u6709\u4e86\u4e0d\u540c\u7684\u53d8\u4f53\uff0c\u7ed3\u5408\u4e86\u4e0a\u4e0b\u6587\u7684\u97f3\u7d20\u79f0\u4e4b\u4e3a\u4e09\u97f3\u7d20\uff08Triphone\uff09\uff0c\u6bd4\u5982\u5bf9\u4e8e\u97f3\u7d20/d/\uff0c\u4e09\u97f3\u7d20/l-d-sil/\u3001/u-d-l/\u662f\u4e00\u5bf9\u4eb2\u5144\u5f1f\u5374\u662f\u4e24\u5bb6\u5b50\uff1b\u6bcf\u4e2a\u4e09\u97f3\u7d20\u53c8\u53ef\u4ee5\u7528\u4e00\u4e2a\u72ec\u7acb\u7684\u4e09\u72b6\u6001HMM\u5efa\u6a21\u3002\u7531\u4e8e\u5f88\u591a\u4e09\u97f3\u7d20\u5728\u8bed\u6599\u4e2d\u5e76\u672a\u51fa\u73b0\u6216\u8005\u6570\u91cf\u4e0d\u591a\uff0c\u5e76\u4e14\u53ef\u4ee5\u901a\u8fc7\u51b3\u7b56\u6811\uff08Decision Tree\uff09\u5171\u4eab\u4e09\u97f3\u7d20\u7684\u72b6\u6001\uff0c\u6240\u4ee5\u5bf9\u4e8e\u62e5\u6709 \\(N\\) \u4e2a\u97f3\u7d20\u7684\u8bed\u79cd\uff0c\u6700\u7ec8\u4fdd\u7559\u4e0b\u6765\u7684\u4e09\u97f3\u7d20\u72b6\u6001\u6570\u91cf\u8fdc\u5c0f\u4e8e \\(3N^3\\) \uff0c\u4e00\u822c\u4e3a\u51e0\u5343\uff0c\u5176\u88ab\u79f0\u4e3aSenones\u3002\u6bcf\u4e00\u5e27\u4e0e\u6bcf\u4e00\u4e2aSenone\u7684\u5bf9\u5e94\u5173\u7cfb\u8868\u793a\u4e3a\u4e09\u97f3\u7d20HMM\u7684\u53d1\u5c04\u6982\u7387 \\(P(x_i|s_j)\\) \uff0c\u5176\u4e2d\uff0c \\(s_j\\) \u8868\u793a\u7b2c \\(j\\) \u4e2aSenone\uff0c\u5bf9\u5e94\u8bed\u97f3\u5e27 \\(x_i\\) \u7684\u5e27\u957f\u901a\u5e38\u4e3a25ms\uff0c\u5e27\u79fb\u4e3a10ms\u3002 \u4e0a\u56fe\u5c55\u793a\u4e86Phone\u3001Triphone\u3001Senone\u4e09\u8005\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u5176\u4e2dSenone\u662f\u501f\u52a9\u6570\u5b66\u6a21\u578b\u5b9a\u4e49\u51fa\u6765\u7684\u97f3\u7d20\u53d8\u79cd\uff0c\u5e76\u6ca1\u6709\u76f4\u63a5\u7684\u542c\u89c9\u611f\u53d7\uff1b\u97f3\u7d20/sil/\u65e0\u5b9e\u9645\u53d1\u97f3\uff0c\u4ec5\u8868\u793a\u9759\u97f3\u3001\u5b57\u95f4\u505c\u987f\u6216\u8005\u65e0\u610f\u4e49\u7684\u58f0\u97f3\uff0c \\(\\#N\\) \u662fPhone\u7684\u4e2a\u6570\uff0c \\(\\#N^3\\) \u548c \\(\\#3N^3\\) \u5206\u522b\u662fTriphone\u3001Senone\u7684\u53ef\u80fd\u6570\u91cf\u7ea7\uff0c\u771f\u5b9e\u6709\u6548\u6570\u91cf\u8fdc\u5c0f\u4e8e\u6570\u91cf\u7ea7\u3002 \u89e3\u7801\u5668 \u8bed\u97f3\u8bc6\u522b\u5efa\u6a21\u76ee\u6807\u662f\uff1a \\[ P(W|X)=\\frac{P(X|W)P(W)}{P(x)}\\propto P(X|W)P(W) \\] \u5176\u4e2d\uff0c \\(P(X|W)\\) \u4e3a\u58f0\u5b66\u6a21\u578b\uff08Acoustic Model\uff0cAM\uff09\uff0c \\(P(W)\\) \u4e3a\u8bed\u8a00\u6a21\u578b\uff08Language Model\uff0cLM\uff09\u3002\u5316\u6574\u4e3a\u96f6\uff0c\u5404\u4e2a\u51fb\u7834\uff0c\u56e0\u6b64\u5927\u591a\u6570\u7814\u7a76\u5c06\u8bed\u97f3\u8bc6\u522b\u5206\u4e3a\u58f0\u5b66\u6a21\u578b\u548c\u8bed\u8a00\u6a21\u578b\u4e24\u90e8\u5206\uff0c\u5206\u522b\u6c42 \\(P(X|W)\\) \u548c \\(P(W)\\) \u3002\u7aef\u5230\u7aef\uff08End-to-End\uff09\u65b9\u6cd5\u5219\u76f4\u63a5\u8ba1\u7b97 \\(P(W|X)\\) \uff0c\u5c06\u58f0\u5b66\u6a21\u578b\u548c\u8bed\u8a00\u6a21\u578b\u878d\u4e3a\u4e00\u4f53\u3002 \u8bed\u97f3\u8bc6\u522b\u7684\u6700\u7ec8\u76ee\u6807\u662f\u9009\u62e9\u80fd\u4f7f \\(P(W|X)=P(X|W)P(W)\\) \u6700\u5927\u7684 \\(W\\) \uff0c\u56e0\u6b64\u89e3\u7801\u672c\u8d28\u662f\u4e00\u4e2a\u641c\u7d22\u95ee\u9898\uff0c\u5e76\u53ef\u501f\u52a9\u52a0\u6743\u6709\u9650\u72b6\u6001\u8f6c\u5f55\u673a\uff08Weighted Finite State Transducer\uff0cWFST\uff09\u7edf\u4e00\u8fdb\u884c\u6700\u4f18\u8def\u5f84\u641c\u7d22\u3002WFST\u7531\u72b6\u6001\u8282\u70b9\u548c\u8fb9\u7ec4\u6210\uff0c\u4e14\u8fb9\u4e0a\u6709\u5bf9\u5e94\u7684\u8f93\u5165\u3001\u8f93\u51fa\u7b26\u53f7\u53ca\u6743\u91cd\uff0c\u5f62\u5f0f\u4e3a \\(x:y/w\\) \uff0c\u8868\u793a\u8be5\u8fb9\u7684\u8f93\u5165\u7b26\u53f7\u4e3a \\(x\\) \uff0c\u8f93\u51fa\u7b26\u53f7\u4e3a \\(y\\) \uff0c\u6743\u91cd\u4e3a \\(w\\) \uff0c\u6743\u91cd\u53ef\u4ee5\u5b9a\u4e49\u4e3a\u6982\u7387\uff08\u6b64\u65f6\u8d8a\u5927\u8d8a\u597d\uff09\u3001\u6216\u8005\u60e9\u7f5a\uff08\u6b64\u65f6\u8d8a\u5c0f\u8d8a\u597d\uff09\u7b49\uff0c\u4ece\u8d77\u59cb\u5230\u7ed3\u675f\u72b6\u6001\u4e0a\u7684\u6240\u6709\u6743\u91cd\u901a\u5e38\u7d2f\u52a0\u8d77\u6765\uff0c\u8bb0\u4f5c\u8be5\u8def\u5f84\u7684\u5206\u6570\uff0c\u4e00\u6761\u5b8c\u6574\u7684\u8def\u5f84\u5fc5\u987b\u4ece\u8d77\u59cb\u72b6\u6001\u5230\u7ed3\u675f\u72b6\u6001\u3002 \u4e0a\u56fe\u4e2d\uff0c\u7c97\u5706\u8868\u793a\u5f00\u59cb\uff0c\u53cc\u7ebf\u5706\u8868\u793a\u7ed3\u675f\uff0c\u5176\u4f59\u5706\u8868\u793a\u4e2d\u95f4\u72b6\u6001\u3002\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u5b9a\u4e49\u8f93\u5165\u3001\u8f93\u51fa\u5747\u4e3a\u8bcd\u7684WFST\u4e3aG\uff0c\u5b9a\u4e49\u8f93\u5165\u4e3aPhone\u3001\u8f93\u51fa\u4e3a\u8bcd\u7684WFST\u4e3aL\uff0c\u5b9a\u4e49\u8f93\u5165\u4e3aTriphone\u3001\u8f93\u51fa\u4e3aPhone\u7684WFST\u4e3aC\uff0c\u5b9a\u4e49\u8f93\u5165\u4e3aSenone\u3001\u8f93\u51fa\u4e3aTriphone\u7684WFST\u4e3aH\uff0c\u81f3\u6b64\u5f97\u52304\u4e2aWFST\uff0c\u4e5f\u5c31\u662fHCLG\uff1a WFST \u8f6c\u6362\u5bf9\u8c61 \u8f93\u5165 \u8f93\u51fa H HMM Senone\u5e8f\u5217 \u4e09\u97f3\u7d20 C \u4e0a\u4e0b\u6587\u5173\u7cfb \u4e09\u97f3\u7d20\u5e8f\u5217 \u97f3\u7d20\u5e8f\u5217 L \u53d1\u97f3\u8bcd\u5178 \u97f3\u7d20\u5e8f\u5217 \u8bcd G \u8bed\u8a00\u6a21\u578b \u8bcd\u5e8f\u5217 \u8bcd\u5e8f\u5217 \u4e0a\u8868\u4e2d\uff0c\u201c\u8f93\u5165\u201d\u3001\u201c\u8f93\u51fa\u201d\u8868\u793a\u8d70\u5b8c\u4e00\u6761\u5b8c\u6574\u8def\u5f84\u540e\u6574\u4e2aWFST\u7684\u8f93\u5165\u3001\u8f93\u51fa\uff0c\u800c\u4e0d\u662f\u4e00\u6761\u8fb9\u4e0a\u7684\u8f93\u5165\u3001\u8f93\u51fa\uff0c\u53ef\u89c1\u524d\u8005\u7684\u8f93\u51fa\u662f\u540e\u8005\u7684\u8f93\u5165\uff0c\u56e0\u6b64\u53ef\u4ee5\u5c06\u5b83\u4eec\u878d\u5408\uff08Composition\uff09\u6210\u4e00\u6761WFST\uff0c\u5b9e\u73b0\u4e86Senone\u5230Triphone\uff08H\uff09\u3001Triphone\u5230Phone\uff08C\uff09\u3001Phone\u5230Word\uff08L\uff09\u3001Word\u5230Sentence\uff08G\uff09\uff0c\u8fd9\u5c31\u662f\u89e3\u7801\u56fe\uff08Decoding Graph\uff09\u3002 WFST\u7684\u878d\u5408\u4e00\u822c\u4ece\u5927\u5230\u5c0f\uff0c\u4e5f\u5c31\u662f\u5148\u5c06G\u548cL\u878d\u5408\uff0c\u518d\u4f9d\u6b21\u878d\u5408C\u3001H\uff0c\u6bcf\u6b21\u878d\u5408\u90fd\u5c06\u8fdb\u884c\u786e\u5b9a\u5316\uff08Determination\uff09\u548c\u6700\u5c0f\u5316\uff08Minimisation\uff09\u64cd\u4f5c\u3002WFST\u7684\u786e\u5b9a\u5316\u662f\u6307\uff0c\u786e\u4fdd\u7ed9\u5b9a\u67d0\u4e2a\u8f93\u5165\u7b26\u53f7\uff0c\u5bf9\u5e94\u8f93\u51fa\u7b26\u53f7\u662f\u60df\u4e00\u7684\uff1bWFST\u7684\u6700\u5c0f\u5316\u662f\u6307\uff0c\u5c06WFST\u8f6c\u6362\u4e3a\u4e00\u4e2a\u72b6\u6001\u8282\u70b9\u548c\u8fb9\u66f4\u5c11\u7684\u7b49\u4ef7WFST\u3002H\u3001C\u3001L\u3001G\u7684\u878d\u5408\uff0c\u5e38\u89c1\u8fc7\u7a0b\u4e3a\uff1a \\[ HCLG={\\rm min}({\\rm det}(H\\circ {\\rm min}({\\rm det}(C\\circ {\\rm min}({\\rm det}(L\\circ G)))))) \\] \u5176\u4e2dHCLG\u4e3a\u6700\u7ec8\u7684\u89e3\u7801\u56feWFST\uff0c \\(\\circ\\) \u8868\u793aComposition\uff0c \\({\\rm det}\\) \u8868\u793a\u786e\u5b9a\u5316\uff08Determination\uff09\uff0c \\({\\rm min}\\) \u8868\u793a\u6700\u5c0f\u5316\uff08Minimisation\uff09\u3002OpenFST\u7b49\u5de5\u5177\u5b9e\u73b0\u4e86\u8fd9\u4e9b\u64cd\u4f5c\u3002 \u6700\u7ec8\u89e3\u7801\u65f6\uff0c\u7531\u4e8eHMM\u5df2\u7ecf\u5728\u89e3\u7801\u56fe\u4e2d\uff0c\u56e0\u6b64\u53ea\u9700\u8981GMM\u6216\u8005DNN\u5c31\u53ef\u4ee5\u5229\u7528HCLG\u8fdb\u884c\u89e3\u7801\u4e86\u3002\u7ed9\u5b9a\u8bed\u97f3\u7279\u5f81\u5e8f\u5217 \\(X\\) \uff0c\u53ef\u4ee5\u901a\u8fc7GMM\u6216DNN\u8ba1\u7b97\u51fa \\(P(x_i|s_j)\\) \uff0c\u5373HMM\u7684\u53d1\u5c04\u6982\u7387\uff0c\u501f\u52a9\u4e8eHCLG\uff0c \\(P(W|X)\\propto P(X|W)P(W)\\) \u7684\u8ba1\u7b97\u5c06\u53d8\u5f97\u7b80\u5355\uff1a \\[ {\\rm log}P(W|X)\\propto {\\rm log}P(X|W)+{\\rm log}P(W) \\] \u5047\u8bbe\u8def\u5f84\u4e0a\u7684\u6743\u91cd\u5b9a\u4e49\u4e3a\u60e9\u7f5a\uff0c\u5c06W\u8def\u5f84\u4e0a\u7684\u6743\u91cd\u76f8\u52a0\uff0c\u518d\u51cf\u53bb\u5404\u72b6\u6001\u9488\u5bf9\u8f93\u5165\u7684\u53d1\u5c04\u6982\u7387\u5f97\u5230\u6700\u7ec8\u5f97\u5206\uff0c\u8be5\u5206\u6570\u8d8a\u5c0f\uff0c\u5219\u8bf4\u660e\u8be5\u8bed\u97f3X\u8f6c\u5f55\u4e3aW\u7684\u53ef\u80fd\u6027\u8d8a\u5927\u3002\u7531\u4e8eHCLG\u4e2d\u7684\u6743\u91cd\u662f\u56fa\u5b9a\u7684\uff0c\u4e0d\u540c\u7684 \\(P(x_i|s_j)\\) \u5c06\u4f7f\u5f97HCLG\u4e2d\u76f8\u540c\u7684W\u8def\u5f84\u6709\u4e0d\u540c\u7684\u5f97\u5206\u3002\u901a\u8fc7\u6bd4\u8f83\u4e0d\u540c\u8def\u5f84\u7684\u5f97\u5206\uff0c\u53ef\u4ee5\u9009\u62e9\u6700\u4f18\u8def\u5f84\uff0c\u8be5\u8def\u5f84\u5bf9\u5e94\u7684W\u5373\u4e3a\u6700\u7ec8\u7684\u89e3\u7801\u7ed3\u679c\u3002 \u7531\u4e8eHCLG\u641c\u7d22\u7a7a\u95f4\u5de8\u5927\uff0c\u901a\u5e38\u91c7\u7528\u675f\u641c\u7d22\uff08Beam Search\uff09\u65b9\u6cd5\uff0c\u4e5f\u5c31\u662f\u6bcf\u4e00\u6b65\u6839\u636e\u5f53\u524d\u5f97\u5206\u4ec5\u4fdd\u7559\u6307\u5b9a\u6570\u76ee\u7684\u6700\u4f18\u8def\u5f84\uff0c\u4e5f\u5c31\u662fN-best\uff0c\u76f4\u81f3\u8d70\u5230\u7ec8\u70b9\uff0c\u9009\u62e9\u4e00\u6761\u6700\u4f18\u8def\u5f84\u3002 \u8bed\u97f3\u8bc6\u522b\u57fa\u672c\u6cd5 Decoders used in the Kaldi toolkit faster-decoder.h \u4eac\u4e1c\uff1a\u57fa\u4e8eWeNet\u7684\u7aef\u5230\u7aef\u8bed\u97f3\u8bc6\u522b\u4f18\u5316\u65b9\u6848\u4e0e\u843d\u5730 LiJian-kaldi\u642d\u5efa\u5728\u7ebf\u8bed\u97f3\u8bc6\u522b\u7cfb\u7edf/P4 WeNet\u8bad\u7ec3\u521d\u4f53\u9a8c \u8bed\u97f3\u8bc6\u522b\u4e2d\u7684WFST\u548c\u8bed\u8a00\u6a21\u578b \u5982\u4f55\u901a\u4fd7\u7684\u7406\u89e3beam search\uff1f","title":"kaldi\u4e2d\u7684\u89e3\u7801\u8fc7\u7a0b"},{"location":"asr/kaldi%E4%B8%AD%E7%9A%84%E8%A7%A3%E7%A0%81%E8%BF%87%E7%A8%8B/#kaldi","text":"","title":"kaldi\u4e2d\u7684\u89e3\u7801\u8fc7\u7a0b"},{"location":"asr/kaldi%E4%B8%AD%E7%9A%84%E8%A7%A3%E7%A0%81%E8%BF%87%E7%A8%8B/#_1","text":"","title":"\u8bed\u8a00\u6a21\u578b"},{"location":"asr/kaldi%E4%B8%AD%E7%9A%84%E8%A7%A3%E7%A0%81%E8%BF%87%E7%A8%8B/#_2","text":"\u8bed\u8a00\u6a21\u578b\u7684\u8bc4\u4ef7\u65b9\u6cd5\u4e3a\u56f0\u60d1\u5ea6\uff08perplexity\uff0cppl\uff09\uff0c\u5927\u5c0f\u8868\u793a\u5f53\u524d\u53e5\u5b50\u7684\u201c\u901a\u987a\u201d\u7a0b\u5ea6\u3002","title":"\u56f0\u60d1\u5ea6"},{"location":"asr/kaldi%E4%B8%AD%E7%9A%84%E8%A7%A3%E7%A0%81%E8%BF%87%E7%A8%8B/#wenetwfst","text":"max_active \u3002\u548c beam \u53c2\u6570\u5171\u540c\u63a7\u5236beam search\u7684\u6ce2\u675f\u5927\u5c0f\u3002 min_active \u3002 acoustic_scale \u3002\u58f0\u5b66\u6a21\u578b\u7ed9\u51fa\u7684\u4f3c\u7136\u5ea6\u653e\u7f29\u7cfb\u6570\u3002 blank_skip_thresh \u3002\u8df3\u8fc7blank\u7684\u9608\u503c\u3002 nbest \u3002","title":"WeNet\u5229\u7528WFST\u7684\u4e00\u4e9b\u53c2\u6570"},{"location":"asr/kaldi%E4%B8%AD%E7%9A%84%E8%A7%A3%E7%A0%81%E8%BF%87%E7%A8%8B/#_3","text":"\u6574\u53e5\u6587\u672c\u3002\u5982\u201cHello World\u201d\uff0c\u5bf9\u5e94\u7684\u8bed\u97f3\u5efa\u6a21\u5c3a\u5ea6\u4e3a\u6574\u6761\u8bed\u97f3\u3002 \u8bcd\u3002\u5982\u5b64\u7acb\u8bcd\u201cGood\u201d\u3001\u201cWorld\u201d\uff0c\u5bf9\u5e94\u7684\u8bed\u97f3\u5efa\u6a21\u5c3a\u5ea6\u5927\u7ea6\u4e3a\u6bcf\u4e2a\u8bcd\u7684\u53d1\u97f3\u8303\u56f4\u3002 \u97f3\u7d20\u3002\u6bd4\u5982\u5c06\u201cWorld\u201d\u8fdb\u4e00\u6b65\u8868\u793a\u4e3a\u201c/werld/\u201d\uff0c\u5176\u4e2d\u6bcf\u4e2a\u97f3\u7d20\uff08phone\uff09\u4f5c\u4e3a\u57fa\u672c\u5355\u4f4d\uff0c\u5bf9\u5e94\u7684\u8bed\u97f3\u5efa\u6a21\u5c3a\u5ea6\u7f29\u51cf\u4e3a\u6bcf\u4e2a\u97f3\u7d20\u7684\u53d1\u97f3\u8303\u56f4\u3002 \u4e09\u97f3\u7d20\uff0c\u4e5f\u5c31\u662f\u8003\u8651\u4e86\u4e0a\u4e0b\u6587\u7684\u97f3\u7d20\u3002\u5982\u5c06\u97f3\u7d20\u201c/d/\u201d\u8fdb\u4e00\u6b65\u8868\u793a\u4e3a\u201c{/l-d-sil/,/u-d-l/,...}\u201d\uff0c\u5bf9\u5e94\u7684\u8bed\u97f3\u5efa\u6a21\u5c3a\u5ea6\u662f\u6bcf\u4e2a\u4e09\u97f3\u7d20\u7684\u53d1\u97f3\u8303\u56f4\uff0c\u957f\u5ea6\u4e0e\u5355\u97f3\u7d20\u5dee\u4e0d\u591a\u3002 \u9690\u9a6c\u5c14\u79d1\u592b\u6a21\u578b\u72b6\u6001\uff0c\u4e5f\u5c31\u662f\u5c06\u6bcf\u4e2a\u4e09\u97f3\u7d20\uff08triphone\uff09\u90fd\u7528\u4e00\u4e2a\u4e09\u72b6\u6001\u9690\u9a6c\u5c14\u79d1\u592b\u6a21\u578b\u8868\u793a\uff0c\u5e76\u7528\u6bcf\u4e2a\u72b6\u6001\u4f5c\u4e3a\u5efa\u6a21\u7c92\u5ea6\uff0c\u5bf9\u5e94\u7684\u8bed\u97f3\u5efa\u6a21\u5c3a\u5ea6\u5c06\u8fdb\u4e00\u6b65\u7f29\u77ed\u3002 \u4e0a\u56fe\u4e2d\uff0c\u201cDNN-HMM\u201d\u8868\u793a\u6df1\u5ea6\u795e\u7ecf\u7f51\u7edc-\u9690\u9a6c\u5c14\u79d1\u592b\u6a21\u578b\u7ed3\u6784\uff0c\u201cCTC\u201d\u8868\u793a\u57fa\u4e8eCTC\u635f\u5931\u51fd\u6570\u7684\u7aef\u5230\u7aef\u7ed3\u6784\uff0c\u201cAttention\u201d\u8868\u793a\u57fa\u4e8e\u6ce8\u610f\u529b\u673a\u5236\u7684\u7aef\u5230\u7aef\u7ed3\u6784\u3002 \u5982\u4e0a\u56fe\u6240\u793a\uff0c\u5b57\u8bcd\u662f\u7531\u97f3\u7d20\uff08Phone\uff09\u7ec4\u6210\uff1b\u97f3\u7d20\u7684\u4e0a\u4e0b\u6587\u4e0d\u540c\uff0c\u56e0\u6b64\u540c\u4e00\u4e2a\u97f3\u7d20\u5c31\u6709\u4e86\u4e0d\u540c\u7684\u53d8\u4f53\uff0c\u7ed3\u5408\u4e86\u4e0a\u4e0b\u6587\u7684\u97f3\u7d20\u79f0\u4e4b\u4e3a\u4e09\u97f3\u7d20\uff08Triphone\uff09\uff0c\u6bd4\u5982\u5bf9\u4e8e\u97f3\u7d20/d/\uff0c\u4e09\u97f3\u7d20/l-d-sil/\u3001/u-d-l/\u662f\u4e00\u5bf9\u4eb2\u5144\u5f1f\u5374\u662f\u4e24\u5bb6\u5b50\uff1b\u6bcf\u4e2a\u4e09\u97f3\u7d20\u53c8\u53ef\u4ee5\u7528\u4e00\u4e2a\u72ec\u7acb\u7684\u4e09\u72b6\u6001HMM\u5efa\u6a21\u3002\u7531\u4e8e\u5f88\u591a\u4e09\u97f3\u7d20\u5728\u8bed\u6599\u4e2d\u5e76\u672a\u51fa\u73b0\u6216\u8005\u6570\u91cf\u4e0d\u591a\uff0c\u5e76\u4e14\u53ef\u4ee5\u901a\u8fc7\u51b3\u7b56\u6811\uff08Decision Tree\uff09\u5171\u4eab\u4e09\u97f3\u7d20\u7684\u72b6\u6001\uff0c\u6240\u4ee5\u5bf9\u4e8e\u62e5\u6709 \\(N\\) \u4e2a\u97f3\u7d20\u7684\u8bed\u79cd\uff0c\u6700\u7ec8\u4fdd\u7559\u4e0b\u6765\u7684\u4e09\u97f3\u7d20\u72b6\u6001\u6570\u91cf\u8fdc\u5c0f\u4e8e \\(3N^3\\) \uff0c\u4e00\u822c\u4e3a\u51e0\u5343\uff0c\u5176\u88ab\u79f0\u4e3aSenones\u3002\u6bcf\u4e00\u5e27\u4e0e\u6bcf\u4e00\u4e2aSenone\u7684\u5bf9\u5e94\u5173\u7cfb\u8868\u793a\u4e3a\u4e09\u97f3\u7d20HMM\u7684\u53d1\u5c04\u6982\u7387 \\(P(x_i|s_j)\\) \uff0c\u5176\u4e2d\uff0c \\(s_j\\) \u8868\u793a\u7b2c \\(j\\) \u4e2aSenone\uff0c\u5bf9\u5e94\u8bed\u97f3\u5e27 \\(x_i\\) \u7684\u5e27\u957f\u901a\u5e38\u4e3a25ms\uff0c\u5e27\u79fb\u4e3a10ms\u3002 \u4e0a\u56fe\u5c55\u793a\u4e86Phone\u3001Triphone\u3001Senone\u4e09\u8005\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u5176\u4e2dSenone\u662f\u501f\u52a9\u6570\u5b66\u6a21\u578b\u5b9a\u4e49\u51fa\u6765\u7684\u97f3\u7d20\u53d8\u79cd\uff0c\u5e76\u6ca1\u6709\u76f4\u63a5\u7684\u542c\u89c9\u611f\u53d7\uff1b\u97f3\u7d20/sil/\u65e0\u5b9e\u9645\u53d1\u97f3\uff0c\u4ec5\u8868\u793a\u9759\u97f3\u3001\u5b57\u95f4\u505c\u987f\u6216\u8005\u65e0\u610f\u4e49\u7684\u58f0\u97f3\uff0c \\(\\#N\\) \u662fPhone\u7684\u4e2a\u6570\uff0c \\(\\#N^3\\) \u548c \\(\\#3N^3\\) \u5206\u522b\u662fTriphone\u3001Senone\u7684\u53ef\u80fd\u6570\u91cf\u7ea7\uff0c\u771f\u5b9e\u6709\u6548\u6570\u91cf\u8fdc\u5c0f\u4e8e\u6570\u91cf\u7ea7\u3002","title":"\u8bed\u97f3\u8bc6\u522b\u7684\u5efa\u6a21\u5355\u5143"},{"location":"asr/kaldi%E4%B8%AD%E7%9A%84%E8%A7%A3%E7%A0%81%E8%BF%87%E7%A8%8B/#_4","text":"\u8bed\u97f3\u8bc6\u522b\u5efa\u6a21\u76ee\u6807\u662f\uff1a \\[ P(W|X)=\\frac{P(X|W)P(W)}{P(x)}\\propto P(X|W)P(W) \\] \u5176\u4e2d\uff0c \\(P(X|W)\\) \u4e3a\u58f0\u5b66\u6a21\u578b\uff08Acoustic Model\uff0cAM\uff09\uff0c \\(P(W)\\) \u4e3a\u8bed\u8a00\u6a21\u578b\uff08Language Model\uff0cLM\uff09\u3002\u5316\u6574\u4e3a\u96f6\uff0c\u5404\u4e2a\u51fb\u7834\uff0c\u56e0\u6b64\u5927\u591a\u6570\u7814\u7a76\u5c06\u8bed\u97f3\u8bc6\u522b\u5206\u4e3a\u58f0\u5b66\u6a21\u578b\u548c\u8bed\u8a00\u6a21\u578b\u4e24\u90e8\u5206\uff0c\u5206\u522b\u6c42 \\(P(X|W)\\) \u548c \\(P(W)\\) \u3002\u7aef\u5230\u7aef\uff08End-to-End\uff09\u65b9\u6cd5\u5219\u76f4\u63a5\u8ba1\u7b97 \\(P(W|X)\\) \uff0c\u5c06\u58f0\u5b66\u6a21\u578b\u548c\u8bed\u8a00\u6a21\u578b\u878d\u4e3a\u4e00\u4f53\u3002 \u8bed\u97f3\u8bc6\u522b\u7684\u6700\u7ec8\u76ee\u6807\u662f\u9009\u62e9\u80fd\u4f7f \\(P(W|X)=P(X|W)P(W)\\) \u6700\u5927\u7684 \\(W\\) \uff0c\u56e0\u6b64\u89e3\u7801\u672c\u8d28\u662f\u4e00\u4e2a\u641c\u7d22\u95ee\u9898\uff0c\u5e76\u53ef\u501f\u52a9\u52a0\u6743\u6709\u9650\u72b6\u6001\u8f6c\u5f55\u673a\uff08Weighted Finite State Transducer\uff0cWFST\uff09\u7edf\u4e00\u8fdb\u884c\u6700\u4f18\u8def\u5f84\u641c\u7d22\u3002WFST\u7531\u72b6\u6001\u8282\u70b9\u548c\u8fb9\u7ec4\u6210\uff0c\u4e14\u8fb9\u4e0a\u6709\u5bf9\u5e94\u7684\u8f93\u5165\u3001\u8f93\u51fa\u7b26\u53f7\u53ca\u6743\u91cd\uff0c\u5f62\u5f0f\u4e3a \\(x:y/w\\) \uff0c\u8868\u793a\u8be5\u8fb9\u7684\u8f93\u5165\u7b26\u53f7\u4e3a \\(x\\) \uff0c\u8f93\u51fa\u7b26\u53f7\u4e3a \\(y\\) \uff0c\u6743\u91cd\u4e3a \\(w\\) \uff0c\u6743\u91cd\u53ef\u4ee5\u5b9a\u4e49\u4e3a\u6982\u7387\uff08\u6b64\u65f6\u8d8a\u5927\u8d8a\u597d\uff09\u3001\u6216\u8005\u60e9\u7f5a\uff08\u6b64\u65f6\u8d8a\u5c0f\u8d8a\u597d\uff09\u7b49\uff0c\u4ece\u8d77\u59cb\u5230\u7ed3\u675f\u72b6\u6001\u4e0a\u7684\u6240\u6709\u6743\u91cd\u901a\u5e38\u7d2f\u52a0\u8d77\u6765\uff0c\u8bb0\u4f5c\u8be5\u8def\u5f84\u7684\u5206\u6570\uff0c\u4e00\u6761\u5b8c\u6574\u7684\u8def\u5f84\u5fc5\u987b\u4ece\u8d77\u59cb\u72b6\u6001\u5230\u7ed3\u675f\u72b6\u6001\u3002 \u4e0a\u56fe\u4e2d\uff0c\u7c97\u5706\u8868\u793a\u5f00\u59cb\uff0c\u53cc\u7ebf\u5706\u8868\u793a\u7ed3\u675f\uff0c\u5176\u4f59\u5706\u8868\u793a\u4e2d\u95f4\u72b6\u6001\u3002\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u5b9a\u4e49\u8f93\u5165\u3001\u8f93\u51fa\u5747\u4e3a\u8bcd\u7684WFST\u4e3aG\uff0c\u5b9a\u4e49\u8f93\u5165\u4e3aPhone\u3001\u8f93\u51fa\u4e3a\u8bcd\u7684WFST\u4e3aL\uff0c\u5b9a\u4e49\u8f93\u5165\u4e3aTriphone\u3001\u8f93\u51fa\u4e3aPhone\u7684WFST\u4e3aC\uff0c\u5b9a\u4e49\u8f93\u5165\u4e3aSenone\u3001\u8f93\u51fa\u4e3aTriphone\u7684WFST\u4e3aH\uff0c\u81f3\u6b64\u5f97\u52304\u4e2aWFST\uff0c\u4e5f\u5c31\u662fHCLG\uff1a WFST \u8f6c\u6362\u5bf9\u8c61 \u8f93\u5165 \u8f93\u51fa H HMM Senone\u5e8f\u5217 \u4e09\u97f3\u7d20 C \u4e0a\u4e0b\u6587\u5173\u7cfb \u4e09\u97f3\u7d20\u5e8f\u5217 \u97f3\u7d20\u5e8f\u5217 L \u53d1\u97f3\u8bcd\u5178 \u97f3\u7d20\u5e8f\u5217 \u8bcd G \u8bed\u8a00\u6a21\u578b \u8bcd\u5e8f\u5217 \u8bcd\u5e8f\u5217 \u4e0a\u8868\u4e2d\uff0c\u201c\u8f93\u5165\u201d\u3001\u201c\u8f93\u51fa\u201d\u8868\u793a\u8d70\u5b8c\u4e00\u6761\u5b8c\u6574\u8def\u5f84\u540e\u6574\u4e2aWFST\u7684\u8f93\u5165\u3001\u8f93\u51fa\uff0c\u800c\u4e0d\u662f\u4e00\u6761\u8fb9\u4e0a\u7684\u8f93\u5165\u3001\u8f93\u51fa\uff0c\u53ef\u89c1\u524d\u8005\u7684\u8f93\u51fa\u662f\u540e\u8005\u7684\u8f93\u5165\uff0c\u56e0\u6b64\u53ef\u4ee5\u5c06\u5b83\u4eec\u878d\u5408\uff08Composition\uff09\u6210\u4e00\u6761WFST\uff0c\u5b9e\u73b0\u4e86Senone\u5230Triphone\uff08H\uff09\u3001Triphone\u5230Phone\uff08C\uff09\u3001Phone\u5230Word\uff08L\uff09\u3001Word\u5230Sentence\uff08G\uff09\uff0c\u8fd9\u5c31\u662f\u89e3\u7801\u56fe\uff08Decoding Graph\uff09\u3002 WFST\u7684\u878d\u5408\u4e00\u822c\u4ece\u5927\u5230\u5c0f\uff0c\u4e5f\u5c31\u662f\u5148\u5c06G\u548cL\u878d\u5408\uff0c\u518d\u4f9d\u6b21\u878d\u5408C\u3001H\uff0c\u6bcf\u6b21\u878d\u5408\u90fd\u5c06\u8fdb\u884c\u786e\u5b9a\u5316\uff08Determination\uff09\u548c\u6700\u5c0f\u5316\uff08Minimisation\uff09\u64cd\u4f5c\u3002WFST\u7684\u786e\u5b9a\u5316\u662f\u6307\uff0c\u786e\u4fdd\u7ed9\u5b9a\u67d0\u4e2a\u8f93\u5165\u7b26\u53f7\uff0c\u5bf9\u5e94\u8f93\u51fa\u7b26\u53f7\u662f\u60df\u4e00\u7684\uff1bWFST\u7684\u6700\u5c0f\u5316\u662f\u6307\uff0c\u5c06WFST\u8f6c\u6362\u4e3a\u4e00\u4e2a\u72b6\u6001\u8282\u70b9\u548c\u8fb9\u66f4\u5c11\u7684\u7b49\u4ef7WFST\u3002H\u3001C\u3001L\u3001G\u7684\u878d\u5408\uff0c\u5e38\u89c1\u8fc7\u7a0b\u4e3a\uff1a \\[ HCLG={\\rm min}({\\rm det}(H\\circ {\\rm min}({\\rm det}(C\\circ {\\rm min}({\\rm det}(L\\circ G)))))) \\] \u5176\u4e2dHCLG\u4e3a\u6700\u7ec8\u7684\u89e3\u7801\u56feWFST\uff0c \\(\\circ\\) \u8868\u793aComposition\uff0c \\({\\rm det}\\) \u8868\u793a\u786e\u5b9a\u5316\uff08Determination\uff09\uff0c \\({\\rm min}\\) \u8868\u793a\u6700\u5c0f\u5316\uff08Minimisation\uff09\u3002OpenFST\u7b49\u5de5\u5177\u5b9e\u73b0\u4e86\u8fd9\u4e9b\u64cd\u4f5c\u3002 \u6700\u7ec8\u89e3\u7801\u65f6\uff0c\u7531\u4e8eHMM\u5df2\u7ecf\u5728\u89e3\u7801\u56fe\u4e2d\uff0c\u56e0\u6b64\u53ea\u9700\u8981GMM\u6216\u8005DNN\u5c31\u53ef\u4ee5\u5229\u7528HCLG\u8fdb\u884c\u89e3\u7801\u4e86\u3002\u7ed9\u5b9a\u8bed\u97f3\u7279\u5f81\u5e8f\u5217 \\(X\\) \uff0c\u53ef\u4ee5\u901a\u8fc7GMM\u6216DNN\u8ba1\u7b97\u51fa \\(P(x_i|s_j)\\) \uff0c\u5373HMM\u7684\u53d1\u5c04\u6982\u7387\uff0c\u501f\u52a9\u4e8eHCLG\uff0c \\(P(W|X)\\propto P(X|W)P(W)\\) \u7684\u8ba1\u7b97\u5c06\u53d8\u5f97\u7b80\u5355\uff1a \\[ {\\rm log}P(W|X)\\propto {\\rm log}P(X|W)+{\\rm log}P(W) \\] \u5047\u8bbe\u8def\u5f84\u4e0a\u7684\u6743\u91cd\u5b9a\u4e49\u4e3a\u60e9\u7f5a\uff0c\u5c06W\u8def\u5f84\u4e0a\u7684\u6743\u91cd\u76f8\u52a0\uff0c\u518d\u51cf\u53bb\u5404\u72b6\u6001\u9488\u5bf9\u8f93\u5165\u7684\u53d1\u5c04\u6982\u7387\u5f97\u5230\u6700\u7ec8\u5f97\u5206\uff0c\u8be5\u5206\u6570\u8d8a\u5c0f\uff0c\u5219\u8bf4\u660e\u8be5\u8bed\u97f3X\u8f6c\u5f55\u4e3aW\u7684\u53ef\u80fd\u6027\u8d8a\u5927\u3002\u7531\u4e8eHCLG\u4e2d\u7684\u6743\u91cd\u662f\u56fa\u5b9a\u7684\uff0c\u4e0d\u540c\u7684 \\(P(x_i|s_j)\\) \u5c06\u4f7f\u5f97HCLG\u4e2d\u76f8\u540c\u7684W\u8def\u5f84\u6709\u4e0d\u540c\u7684\u5f97\u5206\u3002\u901a\u8fc7\u6bd4\u8f83\u4e0d\u540c\u8def\u5f84\u7684\u5f97\u5206\uff0c\u53ef\u4ee5\u9009\u62e9\u6700\u4f18\u8def\u5f84\uff0c\u8be5\u8def\u5f84\u5bf9\u5e94\u7684W\u5373\u4e3a\u6700\u7ec8\u7684\u89e3\u7801\u7ed3\u679c\u3002 \u7531\u4e8eHCLG\u641c\u7d22\u7a7a\u95f4\u5de8\u5927\uff0c\u901a\u5e38\u91c7\u7528\u675f\u641c\u7d22\uff08Beam Search\uff09\u65b9\u6cd5\uff0c\u4e5f\u5c31\u662f\u6bcf\u4e00\u6b65\u6839\u636e\u5f53\u524d\u5f97\u5206\u4ec5\u4fdd\u7559\u6307\u5b9a\u6570\u76ee\u7684\u6700\u4f18\u8def\u5f84\uff0c\u4e5f\u5c31\u662fN-best\uff0c\u76f4\u81f3\u8d70\u5230\u7ec8\u70b9\uff0c\u9009\u62e9\u4e00\u6761\u6700\u4f18\u8def\u5f84\u3002 \u8bed\u97f3\u8bc6\u522b\u57fa\u672c\u6cd5 Decoders used in the Kaldi toolkit faster-decoder.h \u4eac\u4e1c\uff1a\u57fa\u4e8eWeNet\u7684\u7aef\u5230\u7aef\u8bed\u97f3\u8bc6\u522b\u4f18\u5316\u65b9\u6848\u4e0e\u843d\u5730 LiJian-kaldi\u642d\u5efa\u5728\u7ebf\u8bed\u97f3\u8bc6\u522b\u7cfb\u7edf/P4 WeNet\u8bad\u7ec3\u521d\u4f53\u9a8c \u8bed\u97f3\u8bc6\u522b\u4e2d\u7684WFST\u548c\u8bed\u8a00\u6a21\u578b \u5982\u4f55\u901a\u4fd7\u7684\u7406\u89e3beam search\uff1f","title":"\u89e3\u7801\u5668"},{"location":"asr/wenet_kaitang-ssl-train%E7%9F%A5%E8%AF%86%E7%82%B9/","text":"wenet_kaitang-ssl-train\u77e5\u8bc6\u70b9 Python \u76f8\u5173\u73af\u5883\u53d8\u91cf\u8bbe\u7f6e PYTHONIOENCODING \u8bbe\u7f6ePython\u8f93\u5165\u8f93\u51fa\u7684\u7f16\u7801\u683c\u5f0f\u4e3aUTF-8\uff0c\u9632\u6b62\u5728\u4e00\u4e9b\u60c5\u51b5\u4e0b\u53d1\u751f\u5b57\u7b26\u7f16\u89e3\u7801\u5931\u8d25\u3002 1 2 # use utf-8 in python to avoid UnicodeDecodeError when LC_ALL=C export PYTHONIOENCODING = UTF-8 PYTHONPATH 1 export PATHONPATH = ../../../: $PATHONPATH \u8bbe\u7f6ePython\u67e5\u627e\u6a21\u5757\u7684\u8def\u5f84\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u6709\u4e24\u79cd\u9014\u5f84\uff1a PYTHONPATH 1 export PATHONPATH = ...: $PATHONPATH \u8be5\u65b9\u6cd5\u8bbe\u7f6e\u7684Python\u6a21\u5757\u8def\u5f84\uff0c\u5728\u7a97\u53e3\u5173\u95ed\u4e4b\u540e\u5931\u6548\u3002 sys.path.append('...') 1 import sys ; sys . path . append ( '...' ) \u8be5\u65b9\u6cd5\u8bbe\u7f6e\u7684\u6a21\u5757\u8def\u5f84\uff0c\u5728Python\u89e3\u91ca\u5668\u9000\u51fa\u4e4b\u540e\u5931\u6548\u3002\u76f8\u6bd4\u4e0a\u4e00\u79cd\uff0c\u751f\u547d\u5468\u671f\u66f4\u5c11\u4e00\u4e9b\u3002 https://blog.csdn.net/qq_40586364/article/details/103466499 shell\u4e2d\u7684\u903b\u8f91\u8fd0\u7b97\u7b26 1 . ./path.sh || exit 1 ; |\u8fd0\u7b97\u7b26 1 command1 | command2 \u628a\u7b2c\u4e00\u4e2a\u547d\u4ee4command1\u6267\u884c\u7684\u7ed3\u679c\u4f5c\u4e3acommand2\u7684\u8f93\u5165\u4f20\u7ed9command2\u3002 \u4f8b\u5982\uff1a 1 ls -s | sort -nr &&\u8fd0\u7b97\u7b26 1 command1 && command2 &&\u5de6\u8fb9\u7684\u547d\u4ee4\uff08\u547d\u4ee41\uff09\u8fd4\u56de\u771f(\u5373\u8fd4\u56de0\uff0c\u6210\u529f\u88ab\u6267\u884c\uff09\u540e\uff0c&&\u53f3\u8fb9\u7684\u547d\u4ee4\uff08\u547d\u4ee42\uff09\u624d\u80fd\u591f\u88ab\u6267\u884c\uff1b\u6362\u53e5\u8bdd\u8bf4\uff0c\u201c\u5982\u679c\u8fd9\u4e2a\u547d\u4ee4\u6267\u884c\u6210\u529f&&\u90a3\u4e48\u6267\u884c\u8fd9\u4e2a\u547d\u4ee4\u201d\u3002 ||\u8fd0\u7b97\u7b26 1 command1 || command2 ||\u5219\u4e0e&&\u76f8\u53cd\u3002\u5982\u679c||\u5de6\u8fb9\u7684\u547d\u4ee4\uff08command1\uff09\u672a\u6267\u884c\u6210\u529f\uff0c\u90a3\u4e48\u5c31\u6267\u884c||\u53f3\u8fb9\u7684\u547d\u4ee4\uff08command2\uff09\uff1b\u6216\u8005\u6362\u53e5\u8bdd\u8bf4\uff0c\u201c\u5982\u679c\u8fd9\u4e2a\u547d\u4ee4\u6267\u884c\u5931\u8d25\u4e86||\u90a3\u4e48\u5c31\u6267\u884c\u8fd9\u4e2a\u547d\u4ee4\u3002 https://www.cnblogs.com/aaronlinux/p/8340281.html https://www.runoob.com/linux/linux-shell-basic-operators.html shell\u5220\u9664\u6587\u672c\u6587\u4ef6\u4e2d\u7684\u7a7a\u683c Todo 1 2 3 4 # Remove the space in text paste -d \" \" < ( cut -f 1 -d \" \" data/ ${ x } /text.org ) < ( cut -f 2 - -d \" \" data/ ${ x } /text.org | tr -d \" \" ) \\ > data/ ${ x } /text shell\u547d\u4ee4\u4f5c\u4e3a\u53d8\u91cf 1 mkdir -p $( dirname $dict ) \u5229\u7528 $(...) \u53ef\u4ee5\u6267\u884c\u547d\u4ee4\uff0c\u5e76\u5c06\u547d\u4ee4\u6267\u884c\u7ed3\u679c\u4f5c\u4e3a\u53d8\u91cf\u3002 shell\u83b7\u53d6\u7edd\u5bf9\u5730\u5740 1 2 3 tools/make_shard_list.py --num_utts_per_shard $num_utts_per_shard \\ --num_threads 16 data/ $x /wav.scp data/ $x /text \\ $( realpath data/ $x /shards ) data/ $x /data.list \u53ef\u4ee5\u901a\u8fc7 realpath \u83b7\u53d6\u7edd\u5bf9\u5730\u5740\u3002 https://baike.baidu.com/item/realpath/2895213 shell\u67e5\u627e\u7b26\u53f7\u94fe\u63a5\u6307\u5411\u4f4d\u7f6e 1 init_method = file:// $( readlink -f $INIT_FILE ) readlink \u627e\u51fa\u7b26\u53f7\u94fe\u63a5\u6240\u6307\u5411\u7684\u4f4d\u7f6e\u3002\u9009\u9879 -f \u8868\u793a\u4e00\u76f4\u8ddf\u968f\u7b26\u53f7\u94fe\u63a5\uff0c\u76f4\u5230\u76f4\u5230\u975e\u7b26\u53f7\u94fe\u63a5\u7684\u6587\u4ef6\u4f4d\u7f6e\uff0c\u9650\u5236\u662f\u6700\u540e\u5fc5\u987b\u5b58\u5728\u4e00\u4e2a\u975e\u7b26\u53f7\u94fe\u63a5\u7684\u6587\u4ef6\u3002 \u6587\u672c\u5904\u7406awk 1 2 3 4 5 tools/text2token.py -s 1 -n 1 data/ ${ train_set } /text | cut -f 2 - -d \" \" | tr \" \" \"\\n\" | sort | uniq | grep -a -v -e '^\\s*$' | awk '{print $0 \" \" NR+1}' >> ${ dict } ... num_gpus = $( echo $CUDA_VISIBLE_DEVICES | awk -F \",\" '{print NF}' ) ... etc. NF\u5217\u6570 NR\u884c\u6570 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 [ root@localhost test ] # awk '{print \"\u5b57\u6bb5\u6570\uff1a\" NF}' test \u5b57\u6bb5\u6570\uff1a4 \u5b57\u6bb5\u6570\uff1a4 \u5b57\u6bb5\u6570\uff1a3 \u5b57\u6bb5\u6570\uff1a4 \u5b57\u6bb5\u6570\uff1a4 [ root@localhost test ] # cat test a aa aaa 1 b bb bbb 2 c cc ccc d dd ddd 4 e ee eee 5 [ root@localhost test ] # awk '{print \"\u884c\u53f7\u4e3a\uff1a\" NR}' test \u884c\u53f7\u4e3a\uff1a1 \u884c\u53f7\u4e3a\uff1a2 \u884c\u53f7\u4e3a\uff1a3 \u884c\u53f7\u4e3a\uff1a4 \u884c\u53f7\u4e3a\uff1a5 [ root@localhost test ] # cat test a aa aaa 1 b bb bbb 2 c cc ccc d dd ddd 4 e ee eee 5 FNR \u8bfb\u53d6\u884c\u53f7\uff0c\u4ece1\u5f00\u59cb\uff0c\u4e0e NR \u4e0d\u540c\uff0c\u65b0\u7684\u6587\u4ef6\u91cd\u65b0\u4ece1\u5f00\u59cb\u8ba1\u6570 -F\u5236\u5b9a\u5206\u9694\u7b26 1 awk -F ':|,' '{print $2, $4, $6}' log \u4e0a\u8ff0\u547d\u4ee4\u4e2d\uff0c\u6307\u5b9a\u5192\u53f7(:)\u548c\u9017\u53f7(,)\u540c\u65f6\u4f5c\u4e3a\u5206\u9694\u7b26\u3002 https://blog.csdn.net/tabactivity/article/details/111474085 https://blog.csdn.net/weixin_36213081/article/details/112127488 shell\u5b57\u7b26\u4e32\u64cd\u4f5c 1 ${ bpemodel :+--bpe_model ${ bpemodel } .model } :+ \u5982\u679c\u975e\u7a7a\uff0c\u5219\u8fd4\u56de :+ \u540e\u9762\u7684\u503c\uff1a 1 ${ file :+my.file.txt } \uff1a\u82e5 $file\u4e3a\u975e\u7a7a\u503c \uff0c\u5219\u4f7f\u7528my.file.txt\u4f5c\u4f20\u56de\u503c\u3002 \u5728\u4e0a\u8ff0\u7684\u4f8b\u5b50\u4e2d\uff0c\u5982\u679c bpemodel= \u5219\u8be5\u53d8\u91cf\u4e3a\u7a7a\uff0c\u5982\u679c bpemodel=xxx \uff0c\u5219\u8be5\u53d8\u91cf\u4e3a --bpe_model xxx.model \u3002 shell\u4e2d ${}, ##, %%, :-\uff0c:+, ? \u7684\u4f7f\u7528 shell\u4e2d\u7684\u811a\u672c\u914d\u7f6e\u9009\u9879 set -euxo pipefail set -e \uff1a\u811a\u672c\u51fa\u73b0\u9519\u8bef\u65f6\u9a6c\u4e0a\u9000\u51fa\uff0c\u540e\u7eed\u547d\u4ee4\u4e0d\u518d\u6267\u884c\u3002 set -u \uff1a\u6240\u6709\u672a\u8d4b\u503c\u7684\u53d8\u91cf\u5747\u89c6\u4e3a\u9519\u8bef\u3002 set -o pipefail \uff1a\u9ed8\u8ba4\u60c5\u51b5\u4e0bBash\u53ea\u4f1a\u68c0\u67e5\u7ba1\u9053\uff08pipeline\uff09\u64cd\u4f5c\u6700\u540e\u4e00\u4e2a\u547d\u4ee4\u7684\u8fd4\u56de\u503c\uff0c\u5047\u5982\u6700\u53f3\u8fb9\u7684\u547d\u4ee4\u6210\u529f\u90a3\u4e48\u5b83\u5c31\u8ba4\u4e3a\u8fd9\u4e2a\u8bed\u53e5\u6b63\u786e\u3002 set -o pipefail \u8868\u793a\u5728\u7ba1\u9053\u8fde\u63a5\u7684\u547d\u4ee4\u4e2d\uff0c\u53ea\u8981\u6709\u4efb\u4f55\u4e00\u4e2a\u547d\u4ee4\u5931\u8d25\uff08\u8fd4\u56de\u503c\u975e0\uff09\uff0c\u5219\u6574\u4e2a\u7ba1\u9053\u64cd\u4f5c\u88ab\u89c6\u4e3a\u5931\u8d25\u3002\u53ea\u6709\u7ba1\u9053\u4e2d\u6240\u6709\u547d\u4ee4\u90fd\u6210\u529f\u6267\u884c\u4e86\u8fd9\u4e2a\u7ba1\u9053\u624d\u7b97\u6210\u529f\u6267\u884c\u3002 set -x \u53ef\u4ee5\u8ba9Bash\u628a\u6bcf\u4e2a\u547d\u4ee4\u5728\u6267\u884c\u4e4b\u524d\u5148\u6253\u5370\u51fa\u6765\uff0c\u53ef\u4ee5\u8ba4\u4e3a\u8fd9\u662fBash\u7684Debug\u5f00\u5173\u3002 Bash \u811a\u672c\u4e2d\u7684 set -euxo pipefail wenet\u8bad\u7ec3\u4e3b\u51fd\u6570wenet/bin/train.py\u914d\u7f6e\u9879 data_type \uff0c\u53ef\u9009\u9879\u4e3a raw \u3001 shard \uff0c raw \u4e3a\u5b58\u50a8\u539f\u59cb\u6570\u636e\uff0c\u9002\u7528\u4e8e\u6570\u636e\u91cf\u8f83\u5c11\uff0c\u97f3\u9891\u65f6\u957f\u4f4e\u4e8e\u4e00\u5343\u5c0f\u65f6\u7684\u573a\u666f\uff0c shard \u76f8\u5f53\u4e8e\u6570\u636e\u6253\u5305\uff1b\u9002\u7528\u4e8e\u6570\u636e\u91cf\u8f83\u5927\uff0c\u97f3\u9891\u65f6\u957f\u9ad8\u4e8e\u4e00\u5343\u5c0f\u65f6\u7684\u573a\u666f\u3002 gpu \uff0c\u672c\u5730GPU\u5e8f\u53f7 ddp.rank \uff0c\u5206\u5e03\u5f0f\u8bad\u7ec3\u7684\u5168\u5c40GPU\u5e8f\u53f7 ddp.world_size \uff0c\u5206\u5e03\u5f0f\u8bad\u7ec3\u4e2dGPU/\u8fdb\u7a0b\u603b\u6570 ddp.dist_backend \uff0c\u53ef\u9009\u9879\u4e3a nccl \u3001 gloo \uff0c\u5206\u5e03\u5f0f\u8bad\u7ec3\u540e\u7aef ddp.init_method \uff0c\u5206\u5e03\u5f0f\u8bad\u7ec3\u7684\u521d\u59cb\u5316\u65b9\u5f0f\uff0c\u53ef\u4ee5\u4e3atcp\u3001file\u7b49\u65b9\u5f0f num_workers \uff0c\u7528\u4e8e\u6570\u636e\u8bfb\u53d6\u7684\u5b50\u8fdb\u7a0b\u6570 pin_memory \uff0c\u6307\u5b9a\u5373\u4e3a true \uff0c\u4f7f\u7528\u6570\u636e\u8bfb\u53d6\u7684\u56fa\u5b9a\u5185\u5b58\u7f13\u5b58\u533a\uff0c\u53ef\u52a0\u901f\u6570\u636e\u8bfb\u53d6\uff0c\u4f46\u4f1a\u589e\u5927\u663e\u5b58\u5360\u7528 use_amp \uff0c\u6307\u5b9a\u5373\u4e3a true \uff0c\u542f\u52a8\u81ea\u52a8\u6df7\u5408\u7cbe\u5ea6\u8bad\u7ec3 fp16_grad_sync \uff0c\u6307\u5b9a\u5373\u4e3a true \uff0c\u542f\u7528fp16\u5206\u5e03\u5f0f\u8bad\u7ec3\u68af\u5ea6\u540c\u6b65 symbol_table \uff0c\u8bcd\u5178 prefetch \uff0c\u8bfb\u53d6\u6570\u636e\u9884\u53d6\u4e2a\u6570\uff0c\u9ed8\u8ba4100 enc_init \uff0c\u521d\u59cb\u5316\u7f16\u7801\u5668\u7684\u9884\u8bad\u7ec3\u6a21\u578b enc_init_mods \uff0c\u7528\u9884\u8bad\u7ec3\u6a21\u578b\u521d\u59cb\u5316\u7684\u7f16\u7801\u5668\u6a21\u5757\uff0c\u7528\u9017\u53f7 , \u9694\u5f00 wenet\u652f\u6301\u975e\u8bed\u8a00\u8bc6\u522b wenet\u652f\u6301\u975e\u8bed\u8a00\u6807\u7b7e\u8bc6\u522b\uff0c\u6bd4\u5982\u566a\u97f3\u3001\u505c\u987f\u3001\u7b11\u58f0\u7b49\u3002 1. \u8fd9\u4e9b\u6807\u7b7e\u7684\u8bcd\u5178\u8def\u5f84\u7531\u53c2\u6570 --non_lang_syms \u6307\u5b9a\uff0c\u6bcf\u884c\u4e00\u4e2a\u6807\u7b7e\u3002\u7c7b\u4f3c\u4e8e\uff1a 1 2 3 {NOISE}\\n {BRK}\\n ... 2. \u6807\u7b7e\u683c\u5f0f\u4e3a {xxx} \u6216 <xxx> \u6216 [xxx] \u3002\u6bd4\u5982\uff1a - [xxx] for swithboard and fisher - <xxx> for wsj and chime4 https://github.com/wenet-e2e/wenet/pull/819 \u76f8\u5173\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 # wenet/bin/train.py non_lang_syms = read_non_lang_symbols ( args . non_lang_syms ) # wenet/utils/file_utils.py def read_non_lang_symbols ( non_lang_sym_path ): \"\"\"read non-linguistic symbol from file. The file format is like below: {NOISE}\\n {BRK}\\n ... Args: non_lang_sym_path: non-linguistic symbol file path, None means no any syms. \"\"\" if non_lang_sym_path is None : return None else : syms = read_lists ( non_lang_sym_path ) non_lang_syms_pattern = re . compile ( r \"(\\[[^\\[\\]]+\\]|<[^<>]+>|{[^ {} ]+})\" ) for sym in syms : if non_lang_syms_pattern . fullmatch ( sym ) is None : class BadSymbolFormat ( Exception ): pass raise BadSymbolFormat ( \"Non-linguistic symbols should be \" \"formatted in {xxx} /<xxx>/[xxx], consider\" \" modify ' %s ' to meet the requirment. \" \"More details can be found in discussions here : \" \"https://github.com/wenet-e2e/wenet/pull/819\" % ( sym )) return syms wenet\u4e2d\u7684\u6570\u636e\u52a0\u8f7d \u5206\u5e03\u5f0f\u91c7\u6837\u5668 1 2 3 4 5 6 7 8 # wenet/dataset/dataset.py class DistributedSampler : def __init__ ( self , shuffle = True , partition = True ): self . epoch = - 1 self . update () self . shuffle = shuffle self . partition = partition \u4e0a\u8ff0\u521d\u59cb\u5316\u51fd\u6570\u4e2d\uff0c - shuffle \uff1a\u6bcf\u4e00\u8f6e\u91c7\u6837\u4e4b\u524d\u662f\u5426\u6253\u4e71\u6570\u636e\uff0c\u6253\u4e71\u987a\u5e8f\u7684\u968f\u673a\u6570\u79cd\u5b50\u4e3a self.epoch - partition \uff1a\u662f\u5426\u5206\u7247\u3002\u5982\u679c\u8bbe\u7f6e\u4e3a True \uff0c\u5219\u6bcf\u4e2aGPU\u5206\u914d\u5230\u4e0d\u540c\u6570\u636e\uff1b\u8bbe\u7f6e\u4e3a False \uff0c\u5219\u6bcf\u53f0\u673a\u5668\u5206\u914d\u5230\u4e0d\u540c\u6570\u636e\uff1a 1 2 3 4 5 if self . partition : if self . shuffle : random . Random ( self . epoch ) . shuffle ( data ) data = data [ self . rank :: self . world_size ] data = data [ self . worker_id :: self . num_workers ] torch.Tensor\u548ctorch.tensor\u4e4b\u95f4\u7684\u533a\u522b torch.Tensor \u662f\u6240\u6709\u5f20\u91cf\u7c7b\u578b\u7684 \u7236\u7c7b \uff0c\u6240\u6709\u7684\u5f20\u91cf\u5747\u662f torch.Tensor \u7684\u5b9e\u4f8b\uff0c\u5f53\u6267\u884c torch.Tensor() \u65f6\u5c06\u4f1a\u8fd4\u56de\u4e00\u4e2a\u6ca1\u6709\u4efb\u4f55 data \u7684\u7a7a Tensor \u3002 \u800c torch.tensor \u662f\u4e00\u4e2a\u5229\u7528\u5fc5\u987b\u5229\u7528 data \u6784\u5efa\u6ca1\u6709\u68af\u5ea6\u56de\u4f20\u5386\u53f2\u7684\u5f20\u91cf\u7684 \u51fd\u6570 \uff1a 1 torch . tensor ( data , * , dtype = None , device = None , requires_grad = False , pin_memory = False ) \u2192 Tensor https://pytorch.org/docs/master/tensors.html#torch.Tensor https://pytorch.org/docs/master/generated/torch.tensor.html#torch.tensor \u76f8\u5bf9\u4f4d\u7f6e\u7f16\u7801\u548c\u76f8\u5bf9\u591a\u5934\u6ce8\u610f\u529b \u76f8\u6bd4\u4e8eRNN\uff0cTransformer\u65e0\u6cd5\u4ece\u7f51\u7edc\u7ed3\u6784\u4e0a\u5bf9\u4f4d\u7f6e\u4fe1\u606f\u8fdb\u884c\u5904\u7406\u3002\u539f\u59cbTransformer\u91c7\u7528\u7edd\u5bf9\u4f4d\u7f6e\u7f16\u7801\uff0c\u5e76\u4e14\u4ec5\u4ec5\u5c06\u4f4d\u7f6e\u4fe1\u606f\u52a0\u5165\u5230\u8f93\u5165\u5c42\u3002\u800c\u76f8\u5bf9\u4f4d\u7f6e\u7f16\u7801\u89e3\u51b3\u8fd9\u4e00\u7f3a\u9677\u7684\u65b9\u6cd5\u662f \u5c06\u76f8\u5bf9\u4f4d\u7f6e\u7f16\u7801\u52a0\u5165\u5230self-attention\u5185\u90e8\u3002 \u76f8\u5bf9\u4f4d\u7f6e\u7f16\u7801\u5728\u8ba1\u7b97\u7b2c \\(i\\) \u548c\u7b2c \\(j\\) \u4e2a\u5143\u7d20\u4e4b\u95f4\u6ce8\u610f\u529b\u7684key\u548cvalue\u65f6\uff0c\u52a0\u5165 \\(i\\) \u548c \\(j\\) \u4e4b\u95f4\u7684\u4f4d\u7f6e\u7f16\u7801\uff0c\u5e76\u4e14\u52a0\u5165\u7684\u662f \\(i\\) \u548c \\(j\\) \u4e4b\u95f4\u7684\u76f8\u5bf9\u4f4d\u7f6e\u5173\u7cfb\u3002\u76f8\u5bf9\u4f4d\u7f6e\u7f16\u7801\u5728\u81ea\u6ce8\u610f\u529b\u7684\u8ba1\u7b97\u4e2d\u52a0\u5165\u4e86\u4e24\u4e2a\u53ef\u5b66\u4e60\u53d8\u91cf \\(a_{i,j}^V\\) \u548c \\(a_{i,j}^K\\) \u3002 \u539f\u59cb\u6ce8\u610f\u529b \u539f\u59cb\u81ea\u6ce8\u610f\u529b\u4e0a\u4e0b\u6587\u5411\u91cf \\(z_i\\) \uff1a \\[ z_i=\\sum_{j=1}^{n}\\alpha_{i,j}(x_jW^V) \\] \u5176\u4e2d\uff0c \\(W^V\\) \u662f\u53ef\u5b66\u4e60\u5f20\u91cf\uff0c\u6743\u91cd\u5f20\u91cf \\(\\alpha_{i,j}\\) \u901a\u8fc7softmax\u8ba1\u7b97\u5f97\u5230\uff1a \\[ \\alpha_{i,j}=\\frac{{\\rm exp}e_{i,j}}{\\sum_{k=1}^n{\\rm exp}e_{i,k}} \\] \u5176\u4e2d\uff0c \\(e_{i,j}\\) \u5219\u662f\u5229\u7528query\u548ckey\u8ba1\u7b97\u5f97\u5230\uff1a \\[ e_{i,j}=\\frac{(x_iW^Q)(x_jW^K)^T}{\\sqrt{d_k}} \\] \u5176\u4e2d\uff0c \\(W^Q,W^K\\) \u4e3a\u53ef\u5b66\u4e60\u5f20\u91cf\u3002 \u76f8\u5bf9\u6ce8\u610f\u529b \u76f8\u5bf9\u6ce8\u610f\u529b\u4e0a\u4e0b\u6587\u5411\u91cf \\(z_i\\) \u7684\u8ba1\u7b97\u65b9\u6cd5\u6539\u4e3a\uff1a \\[ z_i=\\sum_{j=1}^n\\alpha_{i,j}(x_jW^V+a_{i,j}^V) \\] \u6ce8\u610f\u5230\u4e0a\u5f0f\u4e2d\uff0c\u65b0\u589e\u7684 \\(a_{i,j}^V\\) \u4e3a\u52a0\u5165\u7684\u76f8\u4f4d\u4f4d\u7f6e\u4fe1\u606f\u3002\u6743\u91cd\u5f20\u91cf \\(\\alpha_{i,j}\\) \u7684\u8ba1\u7b97\u65b9\u6cd5\u4e0d\u53d8\uff0c\u800c \\(e_{i,j}\\) \u7684\u8ba1\u7b97\u65b9\u6cd5\u6539\u4e3a\uff1a \\[ e_{i,j}=\\frac{(x_iW^Q)(x_jW^K+a_{i,j}^K)^T}{\\sqrt{d_k}} \\] \u4e0a\u5f0f\u4e2d\uff0c\u65b0\u589e\u7684 \\(a_{i,j}^K\\) \u540c\u6837\u662f\u52a0\u5165\u7684\u76f8\u5bf9\u4f4d\u7f6e\u4fe1\u606f\u3002 \\(a_{i,j}^K\\) \u548c \\(a_{i,j}^V\\) \u7684\u8ba1\u7b97\u65b9\u6cd5\u76f8\u540c\uff0c\u4e5f\u5c31\u662f\u5728 \\([-k,k]\\) \u7684\u8303\u56f4\u5185\u8ba1\u7b97\u76f8\u5bf9\u8ddd\u79bb\uff0c\u8d85\u51fa\u8303\u56f4\u7684\u75280\u6216\u8005 \\(k\\) \u8fdb\u884c\u622a\u65ad\uff1a \\[ a_{i,j}^K=w_{{\\rm clip}(j-i,k)}^K \\] \\[ a_{i,j}^V=w_{{\\rm clip}(j-i,k)}^V \\] \\[ {\\rm clip}(x,k)={\\rm max}(-k,{\\rm min}(k,x)) \\] \u8be6\u89e3Transformer-XL Self-Attention with Relative Position Representations Transformer-XL: Attentive Language Models Beyond a Fixed-Length Context Depthwise\u548cPointwise\u5377\u79ef Depthwise\u5377\u79ef\uff1a\u4e00\u4e2a\u5377\u79ef\u6838\u8d1f\u8d23\u4e00\u4e2a\u901a\u9053\uff0c\u4e00\u4e2a\u901a\u9053\u53ea\u88ab\u4e00\u4e2a\u5377\u79ef\u6838\u5377\u79ef\u3002 Pointwise\u5377\u79ef\uff1a\u5377\u79ef\u6838\u7684\u5c3a\u5bf8\u4e3a 1\u00d71\u00d7M \uff0c M \u4e3a\u4e0a\u4e00\u5c42\u7684\u901a\u9053\u6570\u3002\u6240\u4ee5\u8fd9\u91cc\u7684\u5377\u79ef\u8fd0\u7b97\u4f1a\u5c06\u4e0a\u4e00\u6b65\u7684feature map\u5728\u6df1\u5ea6\u65b9\u5411\u4e0a\u8fdb\u884c\u52a0\u6743\u7ec4\u5408\uff0c\u751f\u6210\u65b0\u7684Feature map\u3002 Depthwise\u5377\u79ef\u4e0ePointwise\u5377\u79ef \u68af\u5ea6\u7f29\u653e 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # wenet/wav2vec/grad_multiply.py class GradMultiply ( torch . autograd . Function ): @staticmethod def forward ( ctx , x , scale ): ctx . scale = scale res = x . new ( x ) return res @staticmethod def backward ( ctx , grad ): return grad * ctx . scale , None # wenet/wav2vec/wav2vec2_model.py if self . encoder_grad_mult != 1.0 : encoder_out = GradMultiply . apply ( encoder_out , self . encoder_grad_mult ) encoder_mask = GradMultiply . apply ( encoder_mask , self . encoder_grad_mult ) \u5bf9\u4e8e\u591a\u5934\u6ce8\u610f\u529b\u7684\u89e3\u7801\u5668\uff0c\u53ef\u4ee5\u5bf9\u7f16\u7801\u5668\u7684\u68af\u5ea6\u8fdb\u884c\u7f29\u653e\uff0c\u4ece\u800c\u7a33\u5b9a\u8bad\u7ec3\u3002 https://github.com/pytorch/fairseq/issues/13 Convolutional Sequence to Sequence Learning wenet\u89e3\u7801 \u4e00\u5171\u67094\u4e2a\u8d1f\u8d23\u63a8\u65ad\u7684\u51fd\u6570\uff1a recognize \uff1aattention\u89e3\u7801\u5668+beam search\uff08\u96c6\u675f\u641c\u7d22\uff09 ctc_greedy_search \uff1actc+greedy search\uff08\u8d2a\u5a6a\u641c\u7d22\uff09\u3002greedy search\u53ef\u4ee5\u8ba4\u4e3a\u662f beam size=1 \u7684beam search\u7279\u4f8b\u3002 ctc_prefix_beam_search \uff1actc+beam search\u3002 attention_rescoring \uff1a\u6ce8\u610f\u529b\u91cd\u6392\u5e8f\u89e3\u7801\uff0c\u9996\u5148\u4f7f\u7528ctc+beam search\u83b7\u5f97n-best\u7684\u7ed3\u679c\uff0c\u4e4b\u540e\u5229\u7528attention\u89e3\u7801\u5668\u5bf9n-best\u8fdb\u884c\u91cd\u6392\u5e8f\uff0c\u4ee5\u83b7\u5f97\u66f4\u51c6\u786e\u7684\u7ed3\u679c\u3002 \u9664\u6b64\u4e4b\u5916\uff0c\u5305\u62ec\u82e5\u5e72\u4ee5 _ \u5f00\u5934\u7684\u5185\u90e8\u51fd\u6570\uff0c\u4ee5\u53ca @torch.jit.export \u7684C++\u8c03\u7528\u5bfc\u51fa\u63a5\u53e3\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 # wenet/wav2vec/wav2vec2_model.py def recognize ( self , speech : torch . Tensor , speech_lengths : torch . Tensor , beam_size : int = 10 , decoding_chunk_size : int = - 1 , num_decoding_left_chunks : int = - 1 , simulate_streaming : bool = False , ) -> torch . Tensor : pass def ctc_greedy_search ( self , speech : torch . Tensor , speech_lengths : torch . Tensor , decoding_chunk_size : int = - 1 , num_decoding_left_chunks : int = - 1 , simulate_streaming : bool = False , ) -> List [ List [ int ]]: pass def ctc_prefix_beam_search ( self , speech : torch . Tensor , speech_lengths : torch . Tensor , beam_size : int , decoding_chunk_size : int = - 1 , num_decoding_left_chunks : int = - 1 , simulate_streaming : bool = False , ) -> List [ int ]: pass def attention_rescoring ( self , speech : torch . Tensor , speech_lengths : torch . Tensor , beam_size : int , decoding_chunk_size : int = - 1 , num_decoding_left_chunks : int = - 1 , ctc_weight : float = 0.0 , simulate_streaming : bool = False , reverse_weight : float = 0.0 , ) -> List [ int ]: pass","title":"wenet_kaitang-ssl-train\u77e5\u8bc6\u70b9"},{"location":"asr/wenet_kaitang-ssl-train%E7%9F%A5%E8%AF%86%E7%82%B9/#wenet_kaitang-ssl-train","text":"","title":"wenet_kaitang-ssl-train\u77e5\u8bc6\u70b9"},{"location":"asr/wenet_kaitang-ssl-train%E7%9F%A5%E8%AF%86%E7%82%B9/#python","text":"","title":"Python \u76f8\u5173\u73af\u5883\u53d8\u91cf\u8bbe\u7f6e"},{"location":"asr/wenet_kaitang-ssl-train%E7%9F%A5%E8%AF%86%E7%82%B9/#pythonioencoding","text":"\u8bbe\u7f6ePython\u8f93\u5165\u8f93\u51fa\u7684\u7f16\u7801\u683c\u5f0f\u4e3aUTF-8\uff0c\u9632\u6b62\u5728\u4e00\u4e9b\u60c5\u51b5\u4e0b\u53d1\u751f\u5b57\u7b26\u7f16\u89e3\u7801\u5931\u8d25\u3002 1 2 # use utf-8 in python to avoid UnicodeDecodeError when LC_ALL=C export PYTHONIOENCODING = UTF-8","title":"PYTHONIOENCODING"},{"location":"asr/wenet_kaitang-ssl-train%E7%9F%A5%E8%AF%86%E7%82%B9/#pythonpath","text":"1 export PATHONPATH = ../../../: $PATHONPATH \u8bbe\u7f6ePython\u67e5\u627e\u6a21\u5757\u7684\u8def\u5f84\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u6709\u4e24\u79cd\u9014\u5f84\uff1a PYTHONPATH 1 export PATHONPATH = ...: $PATHONPATH \u8be5\u65b9\u6cd5\u8bbe\u7f6e\u7684Python\u6a21\u5757\u8def\u5f84\uff0c\u5728\u7a97\u53e3\u5173\u95ed\u4e4b\u540e\u5931\u6548\u3002 sys.path.append('...') 1 import sys ; sys . path . append ( '...' ) \u8be5\u65b9\u6cd5\u8bbe\u7f6e\u7684\u6a21\u5757\u8def\u5f84\uff0c\u5728Python\u89e3\u91ca\u5668\u9000\u51fa\u4e4b\u540e\u5931\u6548\u3002\u76f8\u6bd4\u4e0a\u4e00\u79cd\uff0c\u751f\u547d\u5468\u671f\u66f4\u5c11\u4e00\u4e9b\u3002 https://blog.csdn.net/qq_40586364/article/details/103466499","title":"PYTHONPATH"},{"location":"asr/wenet_kaitang-ssl-train%E7%9F%A5%E8%AF%86%E7%82%B9/#shell","text":"1 . ./path.sh || exit 1 ;","title":"shell\u4e2d\u7684\u903b\u8f91\u8fd0\u7b97\u7b26"},{"location":"asr/wenet_kaitang-ssl-train%E7%9F%A5%E8%AF%86%E7%82%B9/#_1","text":"1 command1 | command2 \u628a\u7b2c\u4e00\u4e2a\u547d\u4ee4command1\u6267\u884c\u7684\u7ed3\u679c\u4f5c\u4e3acommand2\u7684\u8f93\u5165\u4f20\u7ed9command2\u3002 \u4f8b\u5982\uff1a 1 ls -s | sort -nr","title":"|\u8fd0\u7b97\u7b26"},{"location":"asr/wenet_kaitang-ssl-train%E7%9F%A5%E8%AF%86%E7%82%B9/#_2","text":"1 command1 && command2 &&\u5de6\u8fb9\u7684\u547d\u4ee4\uff08\u547d\u4ee41\uff09\u8fd4\u56de\u771f(\u5373\u8fd4\u56de0\uff0c\u6210\u529f\u88ab\u6267\u884c\uff09\u540e\uff0c&&\u53f3\u8fb9\u7684\u547d\u4ee4\uff08\u547d\u4ee42\uff09\u624d\u80fd\u591f\u88ab\u6267\u884c\uff1b\u6362\u53e5\u8bdd\u8bf4\uff0c\u201c\u5982\u679c\u8fd9\u4e2a\u547d\u4ee4\u6267\u884c\u6210\u529f&&\u90a3\u4e48\u6267\u884c\u8fd9\u4e2a\u547d\u4ee4\u201d\u3002","title":"&amp;&amp;\u8fd0\u7b97\u7b26"},{"location":"asr/wenet_kaitang-ssl-train%E7%9F%A5%E8%AF%86%E7%82%B9/#_3","text":"1 command1 || command2 ||\u5219\u4e0e&&\u76f8\u53cd\u3002\u5982\u679c||\u5de6\u8fb9\u7684\u547d\u4ee4\uff08command1\uff09\u672a\u6267\u884c\u6210\u529f\uff0c\u90a3\u4e48\u5c31\u6267\u884c||\u53f3\u8fb9\u7684\u547d\u4ee4\uff08command2\uff09\uff1b\u6216\u8005\u6362\u53e5\u8bdd\u8bf4\uff0c\u201c\u5982\u679c\u8fd9\u4e2a\u547d\u4ee4\u6267\u884c\u5931\u8d25\u4e86||\u90a3\u4e48\u5c31\u6267\u884c\u8fd9\u4e2a\u547d\u4ee4\u3002 https://www.cnblogs.com/aaronlinux/p/8340281.html https://www.runoob.com/linux/linux-shell-basic-operators.html","title":"||\u8fd0\u7b97\u7b26"},{"location":"asr/wenet_kaitang-ssl-train%E7%9F%A5%E8%AF%86%E7%82%B9/#shell_1","text":"Todo 1 2 3 4 # Remove the space in text paste -d \" \" < ( cut -f 1 -d \" \" data/ ${ x } /text.org ) < ( cut -f 2 - -d \" \" data/ ${ x } /text.org | tr -d \" \" ) \\ > data/ ${ x } /text","title":"shell\u5220\u9664\u6587\u672c\u6587\u4ef6\u4e2d\u7684\u7a7a\u683c"},{"location":"asr/wenet_kaitang-ssl-train%E7%9F%A5%E8%AF%86%E7%82%B9/#shell_2","text":"1 mkdir -p $( dirname $dict ) \u5229\u7528 $(...) \u53ef\u4ee5\u6267\u884c\u547d\u4ee4\uff0c\u5e76\u5c06\u547d\u4ee4\u6267\u884c\u7ed3\u679c\u4f5c\u4e3a\u53d8\u91cf\u3002","title":"shell\u547d\u4ee4\u4f5c\u4e3a\u53d8\u91cf"},{"location":"asr/wenet_kaitang-ssl-train%E7%9F%A5%E8%AF%86%E7%82%B9/#shell_3","text":"1 2 3 tools/make_shard_list.py --num_utts_per_shard $num_utts_per_shard \\ --num_threads 16 data/ $x /wav.scp data/ $x /text \\ $( realpath data/ $x /shards ) data/ $x /data.list \u53ef\u4ee5\u901a\u8fc7 realpath \u83b7\u53d6\u7edd\u5bf9\u5730\u5740\u3002 https://baike.baidu.com/item/realpath/2895213","title":"shell\u83b7\u53d6\u7edd\u5bf9\u5730\u5740"},{"location":"asr/wenet_kaitang-ssl-train%E7%9F%A5%E8%AF%86%E7%82%B9/#shell_4","text":"1 init_method = file:// $( readlink -f $INIT_FILE ) readlink \u627e\u51fa\u7b26\u53f7\u94fe\u63a5\u6240\u6307\u5411\u7684\u4f4d\u7f6e\u3002\u9009\u9879 -f \u8868\u793a\u4e00\u76f4\u8ddf\u968f\u7b26\u53f7\u94fe\u63a5\uff0c\u76f4\u5230\u76f4\u5230\u975e\u7b26\u53f7\u94fe\u63a5\u7684\u6587\u4ef6\u4f4d\u7f6e\uff0c\u9650\u5236\u662f\u6700\u540e\u5fc5\u987b\u5b58\u5728\u4e00\u4e2a\u975e\u7b26\u53f7\u94fe\u63a5\u7684\u6587\u4ef6\u3002","title":"shell\u67e5\u627e\u7b26\u53f7\u94fe\u63a5\u6307\u5411\u4f4d\u7f6e"},{"location":"asr/wenet_kaitang-ssl-train%E7%9F%A5%E8%AF%86%E7%82%B9/#awk","text":"1 2 3 4 5 tools/text2token.py -s 1 -n 1 data/ ${ train_set } /text | cut -f 2 - -d \" \" | tr \" \" \"\\n\" | sort | uniq | grep -a -v -e '^\\s*$' | awk '{print $0 \" \" NR+1}' >> ${ dict } ... num_gpus = $( echo $CUDA_VISIBLE_DEVICES | awk -F \",\" '{print NF}' ) ... etc. NF\u5217\u6570 NR\u884c\u6570 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 [ root@localhost test ] # awk '{print \"\u5b57\u6bb5\u6570\uff1a\" NF}' test \u5b57\u6bb5\u6570\uff1a4 \u5b57\u6bb5\u6570\uff1a4 \u5b57\u6bb5\u6570\uff1a3 \u5b57\u6bb5\u6570\uff1a4 \u5b57\u6bb5\u6570\uff1a4 [ root@localhost test ] # cat test a aa aaa 1 b bb bbb 2 c cc ccc d dd ddd 4 e ee eee 5 [ root@localhost test ] # awk '{print \"\u884c\u53f7\u4e3a\uff1a\" NR}' test \u884c\u53f7\u4e3a\uff1a1 \u884c\u53f7\u4e3a\uff1a2 \u884c\u53f7\u4e3a\uff1a3 \u884c\u53f7\u4e3a\uff1a4 \u884c\u53f7\u4e3a\uff1a5 [ root@localhost test ] # cat test a aa aaa 1 b bb bbb 2 c cc ccc d dd ddd 4 e ee eee 5 FNR \u8bfb\u53d6\u884c\u53f7\uff0c\u4ece1\u5f00\u59cb\uff0c\u4e0e NR \u4e0d\u540c\uff0c\u65b0\u7684\u6587\u4ef6\u91cd\u65b0\u4ece1\u5f00\u59cb\u8ba1\u6570 -F\u5236\u5b9a\u5206\u9694\u7b26 1 awk -F ':|,' '{print $2, $4, $6}' log \u4e0a\u8ff0\u547d\u4ee4\u4e2d\uff0c\u6307\u5b9a\u5192\u53f7(:)\u548c\u9017\u53f7(,)\u540c\u65f6\u4f5c\u4e3a\u5206\u9694\u7b26\u3002 https://blog.csdn.net/tabactivity/article/details/111474085 https://blog.csdn.net/weixin_36213081/article/details/112127488","title":"\u6587\u672c\u5904\u7406awk"},{"location":"asr/wenet_kaitang-ssl-train%E7%9F%A5%E8%AF%86%E7%82%B9/#shell_5","text":"1 ${ bpemodel :+--bpe_model ${ bpemodel } .model } :+ \u5982\u679c\u975e\u7a7a\uff0c\u5219\u8fd4\u56de :+ \u540e\u9762\u7684\u503c\uff1a 1 ${ file :+my.file.txt } \uff1a\u82e5 $file\u4e3a\u975e\u7a7a\u503c \uff0c\u5219\u4f7f\u7528my.file.txt\u4f5c\u4f20\u56de\u503c\u3002 \u5728\u4e0a\u8ff0\u7684\u4f8b\u5b50\u4e2d\uff0c\u5982\u679c bpemodel= \u5219\u8be5\u53d8\u91cf\u4e3a\u7a7a\uff0c\u5982\u679c bpemodel=xxx \uff0c\u5219\u8be5\u53d8\u91cf\u4e3a --bpe_model xxx.model \u3002 shell\u4e2d ${}, ##, %%, :-\uff0c:+, ? \u7684\u4f7f\u7528","title":"shell\u5b57\u7b26\u4e32\u64cd\u4f5c"},{"location":"asr/wenet_kaitang-ssl-train%E7%9F%A5%E8%AF%86%E7%82%B9/#shellset-euxo-pipefail","text":"set -e \uff1a\u811a\u672c\u51fa\u73b0\u9519\u8bef\u65f6\u9a6c\u4e0a\u9000\u51fa\uff0c\u540e\u7eed\u547d\u4ee4\u4e0d\u518d\u6267\u884c\u3002 set -u \uff1a\u6240\u6709\u672a\u8d4b\u503c\u7684\u53d8\u91cf\u5747\u89c6\u4e3a\u9519\u8bef\u3002 set -o pipefail \uff1a\u9ed8\u8ba4\u60c5\u51b5\u4e0bBash\u53ea\u4f1a\u68c0\u67e5\u7ba1\u9053\uff08pipeline\uff09\u64cd\u4f5c\u6700\u540e\u4e00\u4e2a\u547d\u4ee4\u7684\u8fd4\u56de\u503c\uff0c\u5047\u5982\u6700\u53f3\u8fb9\u7684\u547d\u4ee4\u6210\u529f\u90a3\u4e48\u5b83\u5c31\u8ba4\u4e3a\u8fd9\u4e2a\u8bed\u53e5\u6b63\u786e\u3002 set -o pipefail \u8868\u793a\u5728\u7ba1\u9053\u8fde\u63a5\u7684\u547d\u4ee4\u4e2d\uff0c\u53ea\u8981\u6709\u4efb\u4f55\u4e00\u4e2a\u547d\u4ee4\u5931\u8d25\uff08\u8fd4\u56de\u503c\u975e0\uff09\uff0c\u5219\u6574\u4e2a\u7ba1\u9053\u64cd\u4f5c\u88ab\u89c6\u4e3a\u5931\u8d25\u3002\u53ea\u6709\u7ba1\u9053\u4e2d\u6240\u6709\u547d\u4ee4\u90fd\u6210\u529f\u6267\u884c\u4e86\u8fd9\u4e2a\u7ba1\u9053\u624d\u7b97\u6210\u529f\u6267\u884c\u3002 set -x \u53ef\u4ee5\u8ba9Bash\u628a\u6bcf\u4e2a\u547d\u4ee4\u5728\u6267\u884c\u4e4b\u524d\u5148\u6253\u5370\u51fa\u6765\uff0c\u53ef\u4ee5\u8ba4\u4e3a\u8fd9\u662fBash\u7684Debug\u5f00\u5173\u3002 Bash \u811a\u672c\u4e2d\u7684 set -euxo pipefail","title":"shell\u4e2d\u7684\u811a\u672c\u914d\u7f6e\u9009\u9879set -euxo pipefail"},{"location":"asr/wenet_kaitang-ssl-train%E7%9F%A5%E8%AF%86%E7%82%B9/#wenetwenetbintrainpy","text":"data_type \uff0c\u53ef\u9009\u9879\u4e3a raw \u3001 shard \uff0c raw \u4e3a\u5b58\u50a8\u539f\u59cb\u6570\u636e\uff0c\u9002\u7528\u4e8e\u6570\u636e\u91cf\u8f83\u5c11\uff0c\u97f3\u9891\u65f6\u957f\u4f4e\u4e8e\u4e00\u5343\u5c0f\u65f6\u7684\u573a\u666f\uff0c shard \u76f8\u5f53\u4e8e\u6570\u636e\u6253\u5305\uff1b\u9002\u7528\u4e8e\u6570\u636e\u91cf\u8f83\u5927\uff0c\u97f3\u9891\u65f6\u957f\u9ad8\u4e8e\u4e00\u5343\u5c0f\u65f6\u7684\u573a\u666f\u3002 gpu \uff0c\u672c\u5730GPU\u5e8f\u53f7 ddp.rank \uff0c\u5206\u5e03\u5f0f\u8bad\u7ec3\u7684\u5168\u5c40GPU\u5e8f\u53f7 ddp.world_size \uff0c\u5206\u5e03\u5f0f\u8bad\u7ec3\u4e2dGPU/\u8fdb\u7a0b\u603b\u6570 ddp.dist_backend \uff0c\u53ef\u9009\u9879\u4e3a nccl \u3001 gloo \uff0c\u5206\u5e03\u5f0f\u8bad\u7ec3\u540e\u7aef ddp.init_method \uff0c\u5206\u5e03\u5f0f\u8bad\u7ec3\u7684\u521d\u59cb\u5316\u65b9\u5f0f\uff0c\u53ef\u4ee5\u4e3atcp\u3001file\u7b49\u65b9\u5f0f num_workers \uff0c\u7528\u4e8e\u6570\u636e\u8bfb\u53d6\u7684\u5b50\u8fdb\u7a0b\u6570 pin_memory \uff0c\u6307\u5b9a\u5373\u4e3a true \uff0c\u4f7f\u7528\u6570\u636e\u8bfb\u53d6\u7684\u56fa\u5b9a\u5185\u5b58\u7f13\u5b58\u533a\uff0c\u53ef\u52a0\u901f\u6570\u636e\u8bfb\u53d6\uff0c\u4f46\u4f1a\u589e\u5927\u663e\u5b58\u5360\u7528 use_amp \uff0c\u6307\u5b9a\u5373\u4e3a true \uff0c\u542f\u52a8\u81ea\u52a8\u6df7\u5408\u7cbe\u5ea6\u8bad\u7ec3 fp16_grad_sync \uff0c\u6307\u5b9a\u5373\u4e3a true \uff0c\u542f\u7528fp16\u5206\u5e03\u5f0f\u8bad\u7ec3\u68af\u5ea6\u540c\u6b65 symbol_table \uff0c\u8bcd\u5178 prefetch \uff0c\u8bfb\u53d6\u6570\u636e\u9884\u53d6\u4e2a\u6570\uff0c\u9ed8\u8ba4100 enc_init \uff0c\u521d\u59cb\u5316\u7f16\u7801\u5668\u7684\u9884\u8bad\u7ec3\u6a21\u578b enc_init_mods \uff0c\u7528\u9884\u8bad\u7ec3\u6a21\u578b\u521d\u59cb\u5316\u7684\u7f16\u7801\u5668\u6a21\u5757\uff0c\u7528\u9017\u53f7 , \u9694\u5f00","title":"wenet\u8bad\u7ec3\u4e3b\u51fd\u6570wenet/bin/train.py\u914d\u7f6e\u9879"},{"location":"asr/wenet_kaitang-ssl-train%E7%9F%A5%E8%AF%86%E7%82%B9/#wenet","text":"wenet\u652f\u6301\u975e\u8bed\u8a00\u6807\u7b7e\u8bc6\u522b\uff0c\u6bd4\u5982\u566a\u97f3\u3001\u505c\u987f\u3001\u7b11\u58f0\u7b49\u3002 1. \u8fd9\u4e9b\u6807\u7b7e\u7684\u8bcd\u5178\u8def\u5f84\u7531\u53c2\u6570 --non_lang_syms \u6307\u5b9a\uff0c\u6bcf\u884c\u4e00\u4e2a\u6807\u7b7e\u3002\u7c7b\u4f3c\u4e8e\uff1a 1 2 3 {NOISE}\\n {BRK}\\n ... 2. \u6807\u7b7e\u683c\u5f0f\u4e3a {xxx} \u6216 <xxx> \u6216 [xxx] \u3002\u6bd4\u5982\uff1a - [xxx] for swithboard and fisher - <xxx> for wsj and chime4 https://github.com/wenet-e2e/wenet/pull/819 \u76f8\u5173\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 # wenet/bin/train.py non_lang_syms = read_non_lang_symbols ( args . non_lang_syms ) # wenet/utils/file_utils.py def read_non_lang_symbols ( non_lang_sym_path ): \"\"\"read non-linguistic symbol from file. The file format is like below: {NOISE}\\n {BRK}\\n ... Args: non_lang_sym_path: non-linguistic symbol file path, None means no any syms. \"\"\" if non_lang_sym_path is None : return None else : syms = read_lists ( non_lang_sym_path ) non_lang_syms_pattern = re . compile ( r \"(\\[[^\\[\\]]+\\]|<[^<>]+>|{[^ {} ]+})\" ) for sym in syms : if non_lang_syms_pattern . fullmatch ( sym ) is None : class BadSymbolFormat ( Exception ): pass raise BadSymbolFormat ( \"Non-linguistic symbols should be \" \"formatted in {xxx} /<xxx>/[xxx], consider\" \" modify ' %s ' to meet the requirment. \" \"More details can be found in discussions here : \" \"https://github.com/wenet-e2e/wenet/pull/819\" % ( sym )) return syms","title":"wenet\u652f\u6301\u975e\u8bed\u8a00\u8bc6\u522b"},{"location":"asr/wenet_kaitang-ssl-train%E7%9F%A5%E8%AF%86%E7%82%B9/#wenet_1","text":"","title":"wenet\u4e2d\u7684\u6570\u636e\u52a0\u8f7d"},{"location":"asr/wenet_kaitang-ssl-train%E7%9F%A5%E8%AF%86%E7%82%B9/#_4","text":"1 2 3 4 5 6 7 8 # wenet/dataset/dataset.py class DistributedSampler : def __init__ ( self , shuffle = True , partition = True ): self . epoch = - 1 self . update () self . shuffle = shuffle self . partition = partition \u4e0a\u8ff0\u521d\u59cb\u5316\u51fd\u6570\u4e2d\uff0c - shuffle \uff1a\u6bcf\u4e00\u8f6e\u91c7\u6837\u4e4b\u524d\u662f\u5426\u6253\u4e71\u6570\u636e\uff0c\u6253\u4e71\u987a\u5e8f\u7684\u968f\u673a\u6570\u79cd\u5b50\u4e3a self.epoch - partition \uff1a\u662f\u5426\u5206\u7247\u3002\u5982\u679c\u8bbe\u7f6e\u4e3a True \uff0c\u5219\u6bcf\u4e2aGPU\u5206\u914d\u5230\u4e0d\u540c\u6570\u636e\uff1b\u8bbe\u7f6e\u4e3a False \uff0c\u5219\u6bcf\u53f0\u673a\u5668\u5206\u914d\u5230\u4e0d\u540c\u6570\u636e\uff1a 1 2 3 4 5 if self . partition : if self . shuffle : random . Random ( self . epoch ) . shuffle ( data ) data = data [ self . rank :: self . world_size ] data = data [ self . worker_id :: self . num_workers ]","title":"\u5206\u5e03\u5f0f\u91c7\u6837\u5668"},{"location":"asr/wenet_kaitang-ssl-train%E7%9F%A5%E8%AF%86%E7%82%B9/#torchtensortorchtensor","text":"torch.Tensor \u662f\u6240\u6709\u5f20\u91cf\u7c7b\u578b\u7684 \u7236\u7c7b \uff0c\u6240\u6709\u7684\u5f20\u91cf\u5747\u662f torch.Tensor \u7684\u5b9e\u4f8b\uff0c\u5f53\u6267\u884c torch.Tensor() \u65f6\u5c06\u4f1a\u8fd4\u56de\u4e00\u4e2a\u6ca1\u6709\u4efb\u4f55 data \u7684\u7a7a Tensor \u3002 \u800c torch.tensor \u662f\u4e00\u4e2a\u5229\u7528\u5fc5\u987b\u5229\u7528 data \u6784\u5efa\u6ca1\u6709\u68af\u5ea6\u56de\u4f20\u5386\u53f2\u7684\u5f20\u91cf\u7684 \u51fd\u6570 \uff1a 1 torch . tensor ( data , * , dtype = None , device = None , requires_grad = False , pin_memory = False ) \u2192 Tensor https://pytorch.org/docs/master/tensors.html#torch.Tensor https://pytorch.org/docs/master/generated/torch.tensor.html#torch.tensor","title":"torch.Tensor\u548ctorch.tensor\u4e4b\u95f4\u7684\u533a\u522b"},{"location":"asr/wenet_kaitang-ssl-train%E7%9F%A5%E8%AF%86%E7%82%B9/#_5","text":"\u76f8\u6bd4\u4e8eRNN\uff0cTransformer\u65e0\u6cd5\u4ece\u7f51\u7edc\u7ed3\u6784\u4e0a\u5bf9\u4f4d\u7f6e\u4fe1\u606f\u8fdb\u884c\u5904\u7406\u3002\u539f\u59cbTransformer\u91c7\u7528\u7edd\u5bf9\u4f4d\u7f6e\u7f16\u7801\uff0c\u5e76\u4e14\u4ec5\u4ec5\u5c06\u4f4d\u7f6e\u4fe1\u606f\u52a0\u5165\u5230\u8f93\u5165\u5c42\u3002\u800c\u76f8\u5bf9\u4f4d\u7f6e\u7f16\u7801\u89e3\u51b3\u8fd9\u4e00\u7f3a\u9677\u7684\u65b9\u6cd5\u662f \u5c06\u76f8\u5bf9\u4f4d\u7f6e\u7f16\u7801\u52a0\u5165\u5230self-attention\u5185\u90e8\u3002 \u76f8\u5bf9\u4f4d\u7f6e\u7f16\u7801\u5728\u8ba1\u7b97\u7b2c \\(i\\) \u548c\u7b2c \\(j\\) \u4e2a\u5143\u7d20\u4e4b\u95f4\u6ce8\u610f\u529b\u7684key\u548cvalue\u65f6\uff0c\u52a0\u5165 \\(i\\) \u548c \\(j\\) \u4e4b\u95f4\u7684\u4f4d\u7f6e\u7f16\u7801\uff0c\u5e76\u4e14\u52a0\u5165\u7684\u662f \\(i\\) \u548c \\(j\\) \u4e4b\u95f4\u7684\u76f8\u5bf9\u4f4d\u7f6e\u5173\u7cfb\u3002\u76f8\u5bf9\u4f4d\u7f6e\u7f16\u7801\u5728\u81ea\u6ce8\u610f\u529b\u7684\u8ba1\u7b97\u4e2d\u52a0\u5165\u4e86\u4e24\u4e2a\u53ef\u5b66\u4e60\u53d8\u91cf \\(a_{i,j}^V\\) \u548c \\(a_{i,j}^K\\) \u3002","title":"\u76f8\u5bf9\u4f4d\u7f6e\u7f16\u7801\u548c\u76f8\u5bf9\u591a\u5934\u6ce8\u610f\u529b"},{"location":"asr/wenet_kaitang-ssl-train%E7%9F%A5%E8%AF%86%E7%82%B9/#_6","text":"\u539f\u59cb\u81ea\u6ce8\u610f\u529b\u4e0a\u4e0b\u6587\u5411\u91cf \\(z_i\\) \uff1a \\[ z_i=\\sum_{j=1}^{n}\\alpha_{i,j}(x_jW^V) \\] \u5176\u4e2d\uff0c \\(W^V\\) \u662f\u53ef\u5b66\u4e60\u5f20\u91cf\uff0c\u6743\u91cd\u5f20\u91cf \\(\\alpha_{i,j}\\) \u901a\u8fc7softmax\u8ba1\u7b97\u5f97\u5230\uff1a \\[ \\alpha_{i,j}=\\frac{{\\rm exp}e_{i,j}}{\\sum_{k=1}^n{\\rm exp}e_{i,k}} \\] \u5176\u4e2d\uff0c \\(e_{i,j}\\) \u5219\u662f\u5229\u7528query\u548ckey\u8ba1\u7b97\u5f97\u5230\uff1a \\[ e_{i,j}=\\frac{(x_iW^Q)(x_jW^K)^T}{\\sqrt{d_k}} \\] \u5176\u4e2d\uff0c \\(W^Q,W^K\\) \u4e3a\u53ef\u5b66\u4e60\u5f20\u91cf\u3002","title":"\u539f\u59cb\u6ce8\u610f\u529b"},{"location":"asr/wenet_kaitang-ssl-train%E7%9F%A5%E8%AF%86%E7%82%B9/#_7","text":"\u76f8\u5bf9\u6ce8\u610f\u529b\u4e0a\u4e0b\u6587\u5411\u91cf \\(z_i\\) \u7684\u8ba1\u7b97\u65b9\u6cd5\u6539\u4e3a\uff1a \\[ z_i=\\sum_{j=1}^n\\alpha_{i,j}(x_jW^V+a_{i,j}^V) \\] \u6ce8\u610f\u5230\u4e0a\u5f0f\u4e2d\uff0c\u65b0\u589e\u7684 \\(a_{i,j}^V\\) \u4e3a\u52a0\u5165\u7684\u76f8\u4f4d\u4f4d\u7f6e\u4fe1\u606f\u3002\u6743\u91cd\u5f20\u91cf \\(\\alpha_{i,j}\\) \u7684\u8ba1\u7b97\u65b9\u6cd5\u4e0d\u53d8\uff0c\u800c \\(e_{i,j}\\) \u7684\u8ba1\u7b97\u65b9\u6cd5\u6539\u4e3a\uff1a \\[ e_{i,j}=\\frac{(x_iW^Q)(x_jW^K+a_{i,j}^K)^T}{\\sqrt{d_k}} \\] \u4e0a\u5f0f\u4e2d\uff0c\u65b0\u589e\u7684 \\(a_{i,j}^K\\) \u540c\u6837\u662f\u52a0\u5165\u7684\u76f8\u5bf9\u4f4d\u7f6e\u4fe1\u606f\u3002 \\(a_{i,j}^K\\) \u548c \\(a_{i,j}^V\\) \u7684\u8ba1\u7b97\u65b9\u6cd5\u76f8\u540c\uff0c\u4e5f\u5c31\u662f\u5728 \\([-k,k]\\) \u7684\u8303\u56f4\u5185\u8ba1\u7b97\u76f8\u5bf9\u8ddd\u79bb\uff0c\u8d85\u51fa\u8303\u56f4\u7684\u75280\u6216\u8005 \\(k\\) \u8fdb\u884c\u622a\u65ad\uff1a \\[ a_{i,j}^K=w_{{\\rm clip}(j-i,k)}^K \\] \\[ a_{i,j}^V=w_{{\\rm clip}(j-i,k)}^V \\] \\[ {\\rm clip}(x,k)={\\rm max}(-k,{\\rm min}(k,x)) \\] \u8be6\u89e3Transformer-XL Self-Attention with Relative Position Representations Transformer-XL: Attentive Language Models Beyond a Fixed-Length Context","title":"\u76f8\u5bf9\u6ce8\u610f\u529b"},{"location":"asr/wenet_kaitang-ssl-train%E7%9F%A5%E8%AF%86%E7%82%B9/#depthwisepointwise","text":"Depthwise\u5377\u79ef\uff1a\u4e00\u4e2a\u5377\u79ef\u6838\u8d1f\u8d23\u4e00\u4e2a\u901a\u9053\uff0c\u4e00\u4e2a\u901a\u9053\u53ea\u88ab\u4e00\u4e2a\u5377\u79ef\u6838\u5377\u79ef\u3002 Pointwise\u5377\u79ef\uff1a\u5377\u79ef\u6838\u7684\u5c3a\u5bf8\u4e3a 1\u00d71\u00d7M \uff0c M \u4e3a\u4e0a\u4e00\u5c42\u7684\u901a\u9053\u6570\u3002\u6240\u4ee5\u8fd9\u91cc\u7684\u5377\u79ef\u8fd0\u7b97\u4f1a\u5c06\u4e0a\u4e00\u6b65\u7684feature map\u5728\u6df1\u5ea6\u65b9\u5411\u4e0a\u8fdb\u884c\u52a0\u6743\u7ec4\u5408\uff0c\u751f\u6210\u65b0\u7684Feature map\u3002 Depthwise\u5377\u79ef\u4e0ePointwise\u5377\u79ef","title":"Depthwise\u548cPointwise\u5377\u79ef"},{"location":"asr/wenet_kaitang-ssl-train%E7%9F%A5%E8%AF%86%E7%82%B9/#_8","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # wenet/wav2vec/grad_multiply.py class GradMultiply ( torch . autograd . Function ): @staticmethod def forward ( ctx , x , scale ): ctx . scale = scale res = x . new ( x ) return res @staticmethod def backward ( ctx , grad ): return grad * ctx . scale , None # wenet/wav2vec/wav2vec2_model.py if self . encoder_grad_mult != 1.0 : encoder_out = GradMultiply . apply ( encoder_out , self . encoder_grad_mult ) encoder_mask = GradMultiply . apply ( encoder_mask , self . encoder_grad_mult ) \u5bf9\u4e8e\u591a\u5934\u6ce8\u610f\u529b\u7684\u89e3\u7801\u5668\uff0c\u53ef\u4ee5\u5bf9\u7f16\u7801\u5668\u7684\u68af\u5ea6\u8fdb\u884c\u7f29\u653e\uff0c\u4ece\u800c\u7a33\u5b9a\u8bad\u7ec3\u3002 https://github.com/pytorch/fairseq/issues/13 Convolutional Sequence to Sequence Learning","title":"\u68af\u5ea6\u7f29\u653e"},{"location":"asr/wenet_kaitang-ssl-train%E7%9F%A5%E8%AF%86%E7%82%B9/#wenet_2","text":"\u4e00\u5171\u67094\u4e2a\u8d1f\u8d23\u63a8\u65ad\u7684\u51fd\u6570\uff1a recognize \uff1aattention\u89e3\u7801\u5668+beam search\uff08\u96c6\u675f\u641c\u7d22\uff09 ctc_greedy_search \uff1actc+greedy search\uff08\u8d2a\u5a6a\u641c\u7d22\uff09\u3002greedy search\u53ef\u4ee5\u8ba4\u4e3a\u662f beam size=1 \u7684beam search\u7279\u4f8b\u3002 ctc_prefix_beam_search \uff1actc+beam search\u3002 attention_rescoring \uff1a\u6ce8\u610f\u529b\u91cd\u6392\u5e8f\u89e3\u7801\uff0c\u9996\u5148\u4f7f\u7528ctc+beam search\u83b7\u5f97n-best\u7684\u7ed3\u679c\uff0c\u4e4b\u540e\u5229\u7528attention\u89e3\u7801\u5668\u5bf9n-best\u8fdb\u884c\u91cd\u6392\u5e8f\uff0c\u4ee5\u83b7\u5f97\u66f4\u51c6\u786e\u7684\u7ed3\u679c\u3002 \u9664\u6b64\u4e4b\u5916\uff0c\u5305\u62ec\u82e5\u5e72\u4ee5 _ \u5f00\u5934\u7684\u5185\u90e8\u51fd\u6570\uff0c\u4ee5\u53ca @torch.jit.export \u7684C++\u8c03\u7528\u5bfc\u51fa\u63a5\u53e3\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 # wenet/wav2vec/wav2vec2_model.py def recognize ( self , speech : torch . Tensor , speech_lengths : torch . Tensor , beam_size : int = 10 , decoding_chunk_size : int = - 1 , num_decoding_left_chunks : int = - 1 , simulate_streaming : bool = False , ) -> torch . Tensor : pass def ctc_greedy_search ( self , speech : torch . Tensor , speech_lengths : torch . Tensor , decoding_chunk_size : int = - 1 , num_decoding_left_chunks : int = - 1 , simulate_streaming : bool = False , ) -> List [ List [ int ]]: pass def ctc_prefix_beam_search ( self , speech : torch . Tensor , speech_lengths : torch . Tensor , beam_size : int , decoding_chunk_size : int = - 1 , num_decoding_left_chunks : int = - 1 , simulate_streaming : bool = False , ) -> List [ int ]: pass def attention_rescoring ( self , speech : torch . Tensor , speech_lengths : torch . Tensor , beam_size : int , decoding_chunk_size : int = - 1 , num_decoding_left_chunks : int = - 1 , ctc_weight : float = 0.0 , simulate_streaming : bool = False , reverse_weight : float = 0.0 , ) -> List [ int ]: pass","title":"wenet\u89e3\u7801"},{"location":"asr/wenet_runtime%E7%9F%A5%E8%AF%86%E7%82%B9/","text":"WeNet runtime\u77e5\u8bc6\u70b9 \u5934\u6587\u4ef6\u4e2d\u7684define 1 2 3 4 5 6 #ifndef DECODER_PARAMS_H_ #define DECODER_PARAMS_H_ #include <memory> ... #endif // DECODER_PARAMS_H_ \u8fd9\u662fC++\u9879\u76ee\u4e2d\u5934\u6587\u4ef6\u7684\u60ef\u5e38\u505a\u6cd5\uff0c #ifndef/#define/#endif \u9632\u6b62\u91cd\u590d\u5b9a\u4e49\u9519\u8bef\u3002 #define \u9884\u5904\u7406\u6307\u4ee4\u7528\u4e8e\u521b\u5efa\u5b8f\u3002\u6307\u4ee4\u7684\u4e00\u822c\u5f62\u5f0f\u662f\uff1a 1 #define macro-name replacement-text \u6240\u6709\u5934\u6587\u4ef6\u90fd\u5e94\u8be5\u6709 #define \u4fdd\u62a4\u6765\u9632\u6b62\u5934\u6587\u4ef6\u88ab\u591a\u91cd\u5305\u542b\uff0c\u5e76\u4e14\u4e3a\u4e86\u4e3a\u4fdd\u8bc1\u552f\u4e00\u6027\uff0c\u547d\u540d\u683c\u5f0f\u5f53\u662f\uff1a <PROJECT>_<PATH>_<FILE>_H_ \u3002\u5f53\u7136WeNet\u6ca1\u6709\u5b8c\u5168\u9075\u4eceC++\u4ee3\u7801\u89c4\u8303\uff0cWeNet\u91c7\u7528\u7684\u5934\u6587\u4ef6\u547d\u540d\u683c\u5f0f\u4e3a <PATH>_H_ \u3002 C++\u98ce\u683c\u6307\u5357-#define\u4fdd\u62a4 C++\u8bed\u6cd5\u57fa\u7840 GEMM 1 DEFINE_int32 ( num_threads , 1 , \"num threads for GEMM\" ); GEMM \u5e94\u4e3aKaldi\u4e2d\u77e9\u9635\u4e58\u6cd5\u52a0\u901f\u5e93\u3002 kaldi Namespace Reference TLG.fst \u8f93\u5165 \u8f93\u51fa T(token) \u5e27\u7ea7\u522b\u7684CTC\u6807\u7b7e\u5e8f\u5217 lexicon\u5efa\u6a21\u5355\u5143 L(lexicon) lexicon\u5efa\u6a21\u5355\u5143 \u8bcd G(grammer) \u8bcd \u8bcd Token \u5c06\u5e27\u7ea7\u522b\u7684CTC\u6807\u7b7e\u6620\u5c04\u5230\u5355\u4e2alexicon\u5355\u5143\u3002\u6bd4\u5982\uff0c\u6709\u5982\u4e0b\u51e0\u4e2a\u6807\u7b7e\u5e8f\u5217\uff1a \\(A\\ A\\ A\\ A\\ A\\) \\(\\phi\\ \\phi\\ A\\ A\\ \\phi\\) \\(\\phi\\ A\\ A\\ A\\ \\phi\\) token WFST\u5c06\u8fd9\u51e0\u4e2a\u6807\u7b7e\u5e8f\u5217\u5747\u6620\u5c04\u5230\u5355\u4e2alexicon\u5355\u5143\uff0c\u4e5f\u5c31\u662f A \u3002\u641c\u7d22\u56fe \\(S\\) \u53ef\u4ee5\u8868\u793a\u4e3a\uff1a \\[ S=T\\circ{\\rm min}({\\rm det}(L\\circ G)) \\] \u5176\u4e2d\uff0c \\(\\circ\\) \u8868\u793a\u5408\u5e76\uff0c \\({\\rm min}\\) \u8868\u793a\u6700\u5c0f\u5316\uff0c \\({\\rm det}\\) \u8868\u793a\u786e\u5b9a\u5316\u3002\u641c\u7d22\u56fe\u7684\u8f93\u5165\u662f\u5e27\u7ea7\u522b\u7684CTC\u6807\u7b7e\u5e8f\u5217\uff0c\u8f93\u51fa\u662flexicon\u5efa\u6a21\u5355\u5143\u3002 Lexicon \u5c06lexicon\u5efa\u6a21\u5355\u5143\u5e8f\u5217\uff08\u5b57\u7b26\uff09\u6620\u5c04\u4e3a\u8bcd\uff0c\u5bf9\u4e8e\u7aef\u5230\u7aef\u58f0\u5b66\u6a21\u578b\u800c\u8a00\uff0clexicon WFST\u5c31\u662f\u628alexicon unit\uff08\u5b57\u7b26\uff09\u62fc\u6210word\uff08\u8bcd\uff09\u3002 Grammer \u5c06\u5355\u8bcd\u7ec4\u5408\u6210\u53ef\u80fd\u7684\u8bcd\u5e8f\u5217\uff0c\u4e5f\u5c31\u662f\u8bcd\u7ea7\u522b\u7684\u8bed\u8a00\u6a21\u578b\u3002 \u5c0f\u767d\u7684WFST\u4e4b\u8def EESEN: End-to-End Speech Recognition using Deep RNN Models and WFST-based Decoding \u89e3\u7801\u9009\u9879 chunk_size \u7ed3\u6784\u4f53 DecodeOptions \u4e2d\u7684 chunk_size \u9009\u9879\u6307\u7684\u662f\u7ecf\u8fc7\u4e0b\u91c7\u6837\u4e4b\u540e\uff0c\u89e3\u7801\u5e27\u7684\u5927\u5c0f\u3002 final_score \\[ final\\_score = rescoring\\_weight \\times rescoring\\_score + ctc\\_weight \\times ctc\\_score \\] \u5176\u4e2d\uff0c \\[ rescoring\\_score = left\\_to\\_right\\_score \\times (1 - reverse\\_weight) + right\\_to\\_left\\_score \\times reverse\\_weight \\] ctc_score \u5728\u4e0b\u9762\u4e24\u79cd\u641c\u7d22\u65b9\u6cd5\u4e2d\u662f\u4e0d\u540c\u7684\uff1a CtcPrefixBeamSearch : \\(ctc\\_score={\\rm sum}(prefix)\\) CtcWfstBeamSearch : \\(ctc\\_score={\\rm max}(viterbi\\_path)\\) \u56e0\u6b64\u8981\u6839\u636e\u641c\u7d22\u65b9\u6cd5\u8bbe\u7f6e ctc_weight \u3002 WeNet\u4e2d\u7684\u54c8\u5e0c\u51fd\u6570 \u5728CTC Prefix Beam Search\u7b97\u6cd5\u4e2d\uff0c\u91c7\u7528HashMap\u4fdd\u5b58\u89e3\u7801\u8fc7\u7a0b\u4e2d\u4ea7\u751f\u7684\u524d\u7f00\u4e32\u53ca\u5176\u5bf9\u5e94\u7684\u5206\u6570\u4fe1\u606f\uff0c\u5e76\u5229\u7528BK&DR\u7b97\u6cd5\u6c42\u54c8\u5e0c\u503c\u4ee5\u51cf\u5c11\u78b0\u649e\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 // \u5229\u7528BK&DR\u7b97\u6cd5\u6c42\u54c8\u5e0c\u503c\u4ee5\u51cf\u5c11\u78b0\u649e // wenet/runtime/core/decoder/ctc_prefix_beam_search.h struct PrefixHash { size_t operator ()( const std :: vector < int >& prefix ) const { size_t hash_code = 0 ; // \u6b64\u5904\u6ce8\u91ca\u6709\u8bef\uff0c\u5e94\u4e3aBK&DR hash code // here we use KB&DR hash code for ( int id : prefix ) { hash_code = id + 31 * hash_code ; } return hash_code ; } }; // \u4f7f\u7528PrefixHash // wenet/runtime/core/decoder/ctc_prefix_beam_search.cc std :: unordered_map < std :: vector < int > , PrefixScore , PrefixHash > next_hyps ; \u54c8\u5e0c\u8868\u4e4bbkdrhash\u7b97\u6cd5\u89e3\u6790\u53ca\u6269\u5c55 BKDRhash.c cpp\u7eaf\u865a\u51fd\u6570\u548c\u62bd\u8c61\u7c7b \u5728WeNet\u4e2d\uff0c\u89e3\u7801\u641c\u7d22\u7b97\u6cd5\u90fd\u7ee7\u627f\u81ea\u62bd\u8c61\u7c7b SearchInterface \uff0c\u5411\u5916\u63d0\u4f9b\u7edf\u4e00\u63a5\u53e3\u3002\u62bd\u8c61\u7c7b SearchInterface \u5b9a\u4e49\u4e3a\uff1a 1 2 3 4 5 6 7 8 class SearchInterface { public : virtual ~ SearchInterface () {} virtual void Search ( const torch :: Tensor & logp ) = 0 ; virtual void Reset () = 0 ; virtual void FinalizeSearch () = 0 ; ... }; \u5728C++\u4e2d\uff0c\u53ef\u4ee5\u5c06\u865a\u51fd\u6570\u58f0\u660e\u4e3a\u7eaf\u865a\u51fd\u6570\uff0c\u8bed\u6cd5\u683c\u5f0f\u4e3a\uff1a 1 virtual \u8fd4\u56de\u503c\u7c7b\u578b \u51fd\u6570\u540d ( \u51fd\u6570\u53c2\u6570 ) = 0 ; \u5305\u542b\u7eaf\u865a\u51fd\u6570\u7684\u7c7b\u79f0\u4e3a\u62bd\u8c61\u7c7b\uff08Abstract Class\uff09\u3002\u62bd\u8c61\u7c7b\u901a\u5e38\u662f\u4f5c\u4e3a\u57fa\u7c7b\uff0c\u8ba9\u6d3e\u751f\u7c7b\u53bb\u5b9e\u73b0\u7eaf\u865a\u51fd\u6570\u3002 \u6d3e\u751f\u7c7b\u5fc5\u987b\u5b9e\u73b0\u7eaf\u865a\u51fd\u6570\u624d\u80fd\u88ab\u5b9e\u4f8b\u5316\u3002 \u5b9a\u4e49\u865a\u51fd\u6570\u53ea\u662f\u4e3a\u4e86\u5141\u8bb8\u57fa\u7c7b\u6307\u9488\u8c03\u7528\u5b50\u7c7b\u7684\u8fd9\u4e2a\u51fd\u6570\u3002 C++\u7eaf\u865a\u51fd\u6570\u548c\u62bd\u8c61\u7c7b\u8be6\u89e3 cpp\u7c7b\u7684\u7279\u6b8a\u6210\u5458\u51fd\u6570\u53cadefault\u548cdelete\u7279\u6027 \u7c7b\u7684\u7279\u6b8a\u6210\u5458\u51fd\u6570 C++\u7c7b\u6709\u56db\u79cd\u7279\u6b8a\u6210\u5458\u51fd\u6570\uff0c\u5206\u522b\u662f\uff1a \u9ed8\u8ba4\u6784\u9020\u51fd\u6570\uff1a\u521b\u5efa\u65b0\u5bf9\u8c61\u3002 \u6790\u6784\u51fd\u6570\uff1a\u9500\u6bc1\u5bf9\u8c61\u3002 \u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff1a\u521b\u5efa\u65b0\u5bf9\u8c61\u5e76\u5229\u7528\u7c7b\u5bf9\u8c61\u521d\u59cb\u5316\u3002 \u62f7\u8d1d\u8d4b\u503c\u51fd\u6570\uff1a\u5229\u7528\u7c7b\u5bf9\u8c61\u5bf9\u4e00\u4e2a\u5df2\u5b58\u5728\u7684\u5bf9\u8c61\u8d4b\u503c\u3002 1 2 3 4 5 6 7 8 9 10 11 // sample class class Test { private : int _val ; public : Test ( int val ); // \u6784\u9020\u51fd\u6570 ~ Test (); // \u6790\u6784\u51fd\u6570 Test ( const Test & test ); // \u62f7\u8d1d\u6784\u9020\u51fd\u6570 Test & operator = ( const Test & test ); // \u62f7\u8d1d\u8d4b\u503c\u51fd\u6570 }; \u8fd9\u56db\u79cd\u7279\u6b8a\u6210\u5458\u51fd\u6570\u5982\u679c\u6ca1\u6709\u663e\u5f0f\u4e3a\u4e00\u4e2a\u7c7b\u5b9a\u4e49\uff0c\u800c\u53c8\u9700\u8981\u7528\u5230\u8be5\u7279\u6b8a\u6210\u5458\u51fd\u6570\u65f6\uff0c\u5219\u7f16\u8bd1\u5668\u4f1a\u9690\u5f0f\u4e3a\u8fd9\u4e2a\u7c7b\u751f\u6210\u4e00\u4e2a\u9ed8\u8ba4\u7684\u7279\u6b8a\u6210\u5458\u51fd\u6570\uff0c\u5e76\u4e14\u9690\u5f0f\u521b\u5efa\u6bd4\u663e\u5f0f\u521b\u5efa\u7684\u6267\u884c\u6548\u7387\u9ad8\u3002 \u6784\u9020\u51fd\u6570\u548c\u62f7\u8d1d\u6784\u9020\u51fd\u6570 \u6784\u9020\u51fd\u6570\u548c\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u90fd\u662f\u7528\u6765\u8fdb\u884c\u7c7b\u5b9e\u4f8b\u5316\uff0cC++\u7c7b\u8fdb\u884c\u521d\u59cb\u5316\u6709\u5982\u4e0b\u4e24\u79cd\u65b9\u5f0f\uff1a 1 2 Test t1 ( 2 ); // \u8c03\u7528\u5b9e\u53c2\u5339\u914d\u7684\u6784\u9020\u51fd\u6570 Test t2 = t1 ; // \u8c03\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff0c\u5229\u7528t1\u5bf9t2\u8fdb\u884c\u521d\u59cb\u5316 \u5176\u4e2d\uff0c\u8c03\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u7684\u4f5c\u7528\u4e3b\u8981\u662f\u590d\u5236\u5bf9\u8c61\uff0c\u8c03\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u7684\u60c5\u51b5\u6709\uff1a \u590d\u5236\u5bf9\u8c61\uff0c\u5e76\u901a\u8fc7\u51fd\u6570\u8fd4\u56de\u590d\u5236\u540e\u7684\u5bf9\u8c61\u3002 \u4e00\u4e2a\u5bf9\u8c61\u4ee5 \u503c\u4f20\u9012 \u7684\u65b9\u5f0f\u4f20\u5165\u51fd\u6570\uff0c\u6b64\u65f6\u5fc5\u5b9a\u8c03\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u3002 \u4e00\u4e2a\u5bf9\u8c61\u901a\u8fc7\u53e6\u4e00\u4e2a\u5bf9\u8c61\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u6bd4\u5982 Test t2 = t1; \u62f7\u8d1d\u65f6\u5c24\u5176\u9700\u8981\u6ce8\u610f\u6307\u9488\u548c\u52a8\u6001\u5206\u914d\u7684\u8d44\u6e90\uff0c\u5426\u5219\u5f88\u5bb9\u6613\u9020\u6210\u62f7\u8d1d\u53d8\u6210 \u6d45\u62f7\u8d1d \uff0c\u4e5f\u5c31\u662f\u590d\u5236\u524d\u540e\u7684\u5bf9\u8c61\u90fd\u6307\u5411\u540c\u4e00\u5757\u5185\u5b58\u533a\u57df\u3002\u56e0\u6b64\u5982\u679c\u7c7b\u7684\u6210\u5458\u53d8\u91cf\u4e2d\u5305\u542b\u6307\u9488\u7c7b\u578b\uff0c\u6216\u8005\u5bf9\u8c61\u5b58\u5728\u6784\u9020\u51fd\u6570\u4e2d\u5206\u914d\u7684\u5176\u5b83\u8d44\u6e90\uff0c\u6b64\u65f6\u5fc5\u987b\u663e\u5f0f\u5b9a\u4e49\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u3002 \u62f7\u8d1d\u8d4b\u503c\u51fd\u6570 \u901a\u8fc7\u5b9a\u4e49 \u62f7\u8d1d\u8d4b\u503c\u8fd0\u7b97\u7b26 \u5b9e\u73b0\u7c7b\u5bf9\u8c61\u4e4b\u95f4\u7684\u62f7\u8d1d\u8fd0\u7b97\u3002\u5b9a\u4e49\u62f7\u8d1d\u8d4b\u503c\u8fd0\u7b97\u7b26\u7684\u901a\u5e38\u5f62\u5f0f\u4e3a\uff1a 1 classname & operator = ( const classname & a ) \u62f7\u8d1d\u6784\u9020\u51fd\u6570 \u548c \u62f7\u8d1d\u8d4b\u503c\u51fd\u6570 \u7684\u4e0d\u540c\u4e4b\u5904\u5982\u4e0b\uff1a 1 2 3 Test t2 = t1 ; // \u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff0c\u5373\u521b\u5efa\u65f6\u8fdb\u884c\u521d\u59cb\u5316 Test t3 ; t3 = t1 ; // \u62f7\u8d1d\u8d4b\u503c\u51fd\u6570\uff0c\u56e0\u4e3a\u5e76\u4e0d\u662f\u5b9e\u4f8b\u5316\u7c7b\u5bf9\u8c61\u65f6\u8fdb\u884c\u521d\u59cb\u5316 C++11\u7279\u6027\u4e4bdefault\u548cdelete \u53ea\u9700\u5728\u51fd\u6570\u58f0\u660e\u540e\u52a0\u4e0a =default; \u5c31\u53ef\u4ee5\u5c06\u8be5\u51fd\u6570\u58f0\u660e\u4e3a default \u51fd\u6570\uff0c\u7f16\u8bd1\u5668\u5c06\u4e3a\u663e\u5f0f\u58f0\u660e =default; \u7684\u51fd\u6570\u81ea\u52a8\u751f\u6210\u51fd\u6570\u4f53\uff0c\u4ee5\u83b7\u5f97\u66f4\u9ad8\u7684\u6267\u884c\u6548\u7387\u3002 \u4f46\u6709\u4e9b\u65f6\u5019\uff0c\u53ef\u4ee5\u901a\u8fc7 =delete; \u7981\u7528\u67d0\u4e9b\u51fd\u6570\uff0c\u5c06\u8be5\u51fd\u6570\u53d8\u5f97\u4e0d\u53ef\u8c03\u7528\u3002 =delete; \u4e0d\u4ec5\u53ef\u4ee5\u7981\u7528\u7c7b\u5185\u7684\u7279\u6b8a\u6210\u5458\u51fd\u6570\uff0c\u4e5f\u53ef\u4ee5\u7981\u7528\u4e00\u822c\u51fd\u6570\u3002 1 2 3 4 5 6 7 8 9 10 11 12 // sample class class Test { private : int _val ; public : Test () = default ; // \u5b9a\u4e49\u9ed8\u8ba4\u6784\u9020\u51fd\u6570 Test ( int val ); // \u6784\u9020\u51fd\u6570 ~ Test (); // \u6790\u6784\u51fd\u6570 Test ( const Test & test ) = delete ; // \u4e0d\u53ef\u8c03\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff0cTest t2=t1;\u5c06\u4e0d\u53ef\u7528 Test & operator = ( const Test & test ); // \u62f7\u8d1d\u8d4b\u503c\u51fd\u6570 }; \u5728C++11\u6807\u51c6\u4e4b\u524d\uff0c\u4e3a\u4e86\u963b\u6b62\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u548c\u62f7\u8d1d\u8d4b\u503c\u8fd0\u7b97\u7b26\uff0c\u53ef\u5c06\u5176\u58f0\u660e\u4e3a private \u6765\u963b\u6b62\u62f7\u8d1d\u3002\u5982\u4e0b\uff0c\u7531\u4e8e\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u548c\u62f7\u8d1d\u8d4b\u503c\u8fd0\u7b97\u7b26\u90fd\u88ab\u5b9a\u4e49\u4e3a private \uff0c\u8fd9\u4e24\u4e2a\u51fd\u6570\u65e0\u6cd5\u88ab\u5916\u90e8\u8bbf\u95ee\uff0c\u56e0\u6b64\u4e5f\u5c31\u65e0\u6cd5\u8fdb\u884c\u7c7b\u4e4b\u95f4\u7684\u62f7\u8d1d\u4e86\uff1a 1 2 3 4 5 6 7 8 9 10 11 // sample class class Test { private : int _val ; Test ( const Test & test ); // \u62f7\u8d1d\u6784\u9020\u51fd\u6570 Test & operator = ( const Test & test ); // \u62f7\u8d1d\u8d4b\u503c\u51fd\u6570 public : Test ( int val ); // \u6784\u9020\u51fd\u6570 ~ Test (); // \u6790\u6784\u51fd\u6570 }; \u5f53\u7136\uff0c\u5982\u679c\u4f7f\u7528C++11\u6807\u51c6\uff0c \u5e0c\u671b\u963b\u6b62\u62f7\u8d1d\u7684\u7c7b \u63a8\u8350\u4f7f\u7528 =delete \u5b9a\u4e49\u81ea\u5df1\u7684\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u548c\u62f7\u8d1d\u8d4b\u503c\u8fd0\u7b97\u7b26\uff0c\u800c\u4e0d\u662f\u5c06\u5176\u58f0\u660e\u4e3a private \u3002 C++\u7c7b\u7684\u7279\u6b8a\u6210\u5458\u51fd\u6570\u53cadefault/delete\u7279\u6027 C++:73---C++11\u6807\u51c6\uff08\u7c7b\u7684\u5220\u9664\u51fd\u6570\uff1a=delete\u5173\u952e\u5b57\u3001\u963b\u6b62\u6784\u9020\u3001\u963b\u6b62\u62f7\u8d1d\u3001private\u963b\u6b62\u62f7\u8d1d\u63a7\u5236\uff09 cpp\u7684\u667a\u80fd\u6307\u9488 \u4f20\u7edfC++\u4e2d\u9700\u8981\u4f7f\u7528 new \u548c delete \u624b\u52a8\u7533\u8bf7\u548c\u91ca\u653e\u8d44\u6e90\uff0cC++11\u4e2d\u5f15\u5165\u667a\u80fd\u6307\u9488\uff0c\u4f7f\u7528\u5f15\u7528\u8ba1\u6570\uff0c\u53ef\u201c\u81ea\u52a8\u201d\u7ba1\u7406\u8d44\u6e90\u3002\u667a\u80fd\u6307\u9488\u5305\u62ec std::unique_ptr / std::shared_ptr / std::weak_ptr \uff0c\u4f7f\u7528\u65f6\u9700\u8981\u5305\u62ec\u5934\u6587\u4ef6 <memory> \u3002 unique_ptr \u72ec\u5360\u6307\u9488\uff0c\u7531 unique_ptr \u7ba1\u7406\u7684\u5185\u5b58\uff0c\u53ea\u80fd\u88ab\u4e00\u4e2a\u5bf9\u8c61\u6301\u6709\u3002 unique_ptr\u53ea\u6709\u79fb\u52a8\u6784\u9020\u51fd\u6570\uff0c\u56e0\u6b64\u53ea\u80fd\u79fb\u52a8\uff08\u8f6c\u79fb\u5185\u90e8\u5bf9\u8c61\u6240\u6709\u6743\uff0c\u6216\u79f0\u6d45\u62f7\u8d1d\uff09\uff0c\u4e0d\u80fd\u62f7\u8d1d\uff08\u6df1\u62f7\u8d1d\uff09\u3002\u56e0\u6b64 unique_ptr \u4e0d\u652f\u6301\u590d\u5236\u548c\u8d4b\u503c\uff0c\u53ea\u652f\u6301\u79fb\u52a8\u3002 1 2 3 auto w = std :: make_unique < MyClass > (); auto w2 = w ; // \u7f16\u8bd1\u9519\u8bef auto w2 = std :: move ( w ); // \u4f7f\u7528std::move\u8f6c\u79fb\u5bf9\u8c61\u6240\u6709\u6743\uff0c\u6267\u884c\u540ew\u53d8\u4e3anullptr shared_ptr \u9700\u8981\u989d\u5916\u7ef4\u62a4\u5f15\u7528\u8ba1\u6570\uff0c\u56e0\u6b64\u5185\u5b58\u5360\u7528\u8f83\u9ad8\uff1b\u5e76\u4e14\u5f15\u7528\u8ba1\u6570\u5fc5\u987b\u662f\u539f\u5b50\u64cd\u4f5c\uff0c\u800c\u539f\u5b50\u64cd\u4f5c\u6027\u80fd\u8f83\u4f4e\u3002\u5f53\u7b26\u5408\u79fb\u52a8\u8bed\u4e49\u65f6\uff0c\u53ef\u4ee5\u91c7\u7528 std::move \u8f6c\u79fb\u6240\u6709\u6743\uff0c\u907f\u514d\u590d\u5236\uff0c\u4ece\u800c\u63d0\u9ad8\u6027\u80fd\u3002 shared_ptr \u5171\u4eab\u6307\u9488\uff0c shared_ptr \u80fd\u591f\u8bb0\u5f55\u6709\u591a\u5c11\u4e2a\u5171\u4eab\u6307\u9488\u6307\u5411\u4e00\u4e2a\u5bf9\u8c61\uff0c shared_ptr \u5185\u90e8\u4f7f\u7528\u5f15\u7528\u8ba1\u6570\u5b9e\u73b0\u5185\u5b58\u7684\u81ea\u52a8\u7ba1\u7406\uff0c\u6bcf\u5f53\u590d\u5236\u4e00\u4e2a shared_ptr \uff0c\u5f15\u7528\u8ba1\u6570\u5c31\u4f1a\u52a0\u4e00\uff0c\u5f53\u5f15\u7528\u8ba1\u6570\u53d8\u4e3a\u96f6\u540e\u5c31\u4f1a\u5c06\u5bf9\u8c61\u81ea\u52a8\u5220\u9664\u3002\u53ef\u4ee5\u901a\u8fc7 use_count() \u67e5\u770b\u4e00\u4e2a\u5bf9\u8c61\u7684\u5f15\u7528\u8ba1\u6570\uff0c get() \u83b7\u53d6\u539f\u59cb\u6307\u9488\uff0c reset() \u51cf\u5c11\u4e00\u4e2a\u5f15\u7528\u8ba1\u6570\u3002 \u5176\u4e2d\uff0c\u8c03\u7528 reset() \u4f1a\u4f7f\u5f15\u7528\u8ba1\u6570\u51cf1\u3002\u5982\u679c\u5411 reset() \u4f20\u5165\u7c7b\u5bf9\u8c61\uff0c\u6bd4\u5982 reset(new xxx()) \u65f6\uff0c\u667a\u80fd\u6307\u9488\u9996\u5148\u751f\u6210\u65b0\u5bf9\u8c61\uff0c\u7136\u540e\u5c06\u5c31\u5bf9\u8c61\u7684\u5f15\u7528\u8ba1\u6570\u51cf1\uff0c\u5982\u679c\u53d1\u73b0\u5f15\u7528\u8ba1\u6570\u4e3a0\u65f6\uff0c\u5219\u6790\u6784\u65e7\u5bf9\u8c61\uff0c\u6700\u540e\u5c06\u65b0\u5bf9\u8c61\u7684\u6307\u9488\u4ea4\u7ed9\u667a\u80fd\u6307\u9488\u4fdd\u7ba1\u3002 1 2 3 4 5 6 7 8 9 auto w = std :: make_shared < MyClass > (); { auto w2 = w ; // shared_pt\u5141\u8bb8\u590d\u5236 cout << w . use_count () << endl ; // \u6b64\u65f6\uff0c\u5bf9\u8c61w\u7684\u5f15\u7528\u8ba1\u6570\u4e3a2 } // \u79bb\u5f00\u4f5c\u7528\u57df\uff0c\u5f15\u7528\u8ba1\u6570\u51cf\u4e00\uff0c\u6b64\u65f6\u8f93\u51fa\u4e3a1\uff0c\u5f53\u5f15\u7528\u8ba1\u6570\u4e3a0\u65f6\uff0cdelete\u5185\u5b58 cout << w . use_count () << endl ; // shared_ptr\u652f\u6301\u79fb\u52a8\uff0c\u6267\u884c\u540ew\u4e3anullptr\uff0cw3.use_count()\u7b49\u4e8e1 auto w3 = std :: move ( w ); weak_ptr weak_ptr \u7528\u4e8e\u89e3\u51b3 shared_ptr \u5faa\u73af\u5f15\u7528\u7684\u95ee\u9898\u3002 weak_ptr \u4e0d\u4f1a\u589e\u52a0\u5f15\u7528\u8ba1\u6570\uff0c\u56e0\u6b64\u53ef\u4ee5\u6253\u7834 shared_ptr \u7684\u5faa\u73af\u5f15\u7528\u3002\u4e00\u822c\u7236\u7c7b\u6301\u6709\u5b50\u7c7b\u7684 shared_ptr \uff0c\u5b50\u7c7b\u6301\u6709\u7236\u7c7b\u7684 weak_ptr \u3002 1 2 3 4 5 6 7 8 9 10 11 12 class B ; struct A { shared_ptr < B > b ; }; struct B { weak_ptr < A > a ; // \u4e0d\u53ef\u4ee5\u91c7\u7528shared<A> a; \u5426\u5219\u4f1a\u9020\u6210\u5faa\u73af\u5f15\u7528 }; auto pa = make_shared < A > (); auto pb = make_shared < B > (); // \u5faa\u73af\u5f15\u7528\u65f6\uff0cpa\u548cpb\u90fd\u65e0\u6cd5\u6b63\u5e38\u91ca\u653e pa -> b = pb ; pb -> a = pa ; C++ \u667a\u80fd\u6307\u9488\u7684\u6b63\u786e\u4f7f\u7528\u65b9\u5f0f \u7b2c 5 \u7ae0 \u667a\u80fd\u6307\u9488\u4e0e\u5185\u5b58\u7ba1\u7406 cpp\u5173\u952e\u5b57explicit \u5728C++\u4e2d\uff0c explicit \u5173\u952e\u5b57\u7528\u6765\u4fee\u9970\u7c7b\u7684\u6784\u9020\u51fd\u6570\uff0c\u963b\u6b62\u9690\u5f0f\u7c7b\u578b\u8f6c\u6362\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class MyClass { public : int size_ ; char p_ ; // \u6784\u9020\u51fd\u6570\u4e00\u4e2a\u53c2\u6570\uff0c\u4e14\u6ca1\u6709\u4f7f\u7528explicit\u4fee\u9970\uff0c\u9ed8\u8ba4\u652f\u6301\u9690\u5f0f\u7c7b\u578b\u8f6c\u6362 MyClass ( int size ) : size_ ( size ){} // \u6784\u9020\u51fd\u6570\u4e24\u4e2a\u53c2\u6570\uff0c\u4e0d\u7ba1\u662f\u5426\u4f7f\u7528explicit\uff0c\u90fd\u65e0\u6cd5\u8fdb\u884c\u9690\u5f0f\u7c7b\u578b\u8f6c\u6362 MyClass ( int size , const char * p ) : size_ ( size ), p_ ( p ) {} }; class MyClass2 { public : int size_ ; // \u6784\u9020\u51fd\u6570\u4e00\u4e2a\u53c2\u6570\uff0c\u5e76\u4f7f\u7528explicit\u4fee\u9970\uff0c\u963b\u6b62\u9690\u5f0f\u7c7b\u578b\u8f6c\u6362 MyClass2 ( int size ) : size_ ( size ){} }; // \u4f7f\u7528 MyClass c1 ( 10 ); // \u7f16\u8bd1\u901a\u8fc7\uff0c\u663e\u5f0f\u8c03\u7528 MyClass c2 = 10 ; // \u7f16\u8bd1\u901a\u8fc7\uff0c\u9690\u5f0f\u7c7b\u578b\u8f6c\u6362 MyClass2 c3 = 10 ; // \u7f16\u8bd1\u5931\u8d25\uff0cexplicit\u963b\u6b62MyClass2\u8fdb\u884c\u9690\u5f0f\u7c7b\u578b\u8f6c\u6362 C++ explicit\u7684\u4f5c\u7528 \u8be6\u89e3 c++ \u5173\u952e\u5b57 explicit torch.jit\u52a0\u8f7d\u6a21\u578b 1 2 // wenet/runtime/core/decoder/torch_asr_model.cc torch :: jit :: script :: Module model = torch :: jit :: load ( model_path ); WeNet\u63a8\u65ad\u65f6\u6bcf\u6b21\u4e00\u4e2a\u6837\u672c WeNet runtime\u6bcf\u6b21\u8f93\u5165\u4e00\u4e2a\u6837\u672c\u8fdb\u884c\u63a8\u7406\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // wenet/runtime/core/decoder/torch_asr_model.cc void TorchAsrModel::ForwardEncoderFunc ( const std :: vector < std :: vector < float >>& chunk_feats , std :: vector < std :: vector < float >> * out_prob ) { // \u6267\u884c\u7f16\u7801\u5668chunk\u7ea7\u522b\u7684\u4e00\u6b21\u63a8\u65ad\uff0c\u6bcf\u6b21\u8f93\u5165\u4e00\u6761\u97f3\u9891\u7684\u82e5\u5e72\u5e27\u7ec4\u6210\u7684chunk // \u8f93\u5165\u53c2\u6570chunk_feats\uff1a[frames,feature_dim]\uff0c\u548c\u7f13\u5b58cached_feature_\u5171\u540c\u7ec4\u6210\u8f93\u5165 // \u8f93\u51fa\u53c2\u6570out_prob\uff1a[num_frames,vocab_size]\uff0clog softmax\u4e4b\u540eCTC\u4e4b\u524d\u7684\u7f16\u7801\u5668\u8f93\u51fa // 1. Prepare libtorch required data, splice cached_feature_ and chunk_feats // The first dimension is for batchsize, which is 1. int num_frames = cached_feature_ . size () + chunk_feats . size (); const int feature_dim = chunk_feats [ 0 ]. size (); torch :: Tensor feats = torch :: zeros ({ 1 , num_frames , feature_dim }, torch :: kFloat ); ... } WeNet\u5bf9CTC\u8f93\u51faN-best\u8fdb\u884c\u91cd\u6253\u5206 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 // wenet/wenet/transformer/decoder.py def forward ( self , memory : torch . Tensor , memory_mask : torch . Tensor , ys_in_pad : torch . Tensor , ys_in_lens : torch . Tensor , r_ys_in_pad : torch . Tensor , reverse_weight : float = 0.0 , ) -> Tuple [ torch . Tensor , torch . Tensor , torch . Tensor ] : \"\"\"Forward decoder. Args : memory : encoded memory , float32 ( batch , maxlen_in , feat ) memory_mask : encoder memory mask , ( batch , 1 , maxlen_in ) ys_in_pad : padded input token ids , int64 ( batch , maxlen_out ) ys_in_lens : input lengths of this batch ( batch ) r_ys_in_pad : padded input token ids , int64 ( batch , maxlen_out ), used for right to left decoder reverse_weight : used for right to left decoder Returns : ( tuple ) : tuple containing : x : decoded token score before softmax ( batch , maxlen_out , vocab_size ) if use_output_layer is True , r_x : x : decoded token score ( right to left decoder ) before softmax ( batch , maxlen_out , vocab_size ) if use_output_layer is True , olens : ( batch , ) \"\"\" ... // wenet/runtime/core/decoder/torch_asr_model.cc float TorchAsrModel :: ComputeAttentionScore ( const torch :: Tensor & prob , const std :: vector < int >& hyp , int eos ) { // \u5bf9hyp\u8868\u793a\u7684\u4e00\u6761\u89e3\u7801\u8def\u5f84\u8fdb\u884c\u6253\u5206 // \u5206\u6570\u4e3aAttention\u89e3\u7801\u5668\u8f93\u51fa\u7684\uff0c\u89e3\u7801\u8def\u5f84\u5bf9\u5e94\u7684log softmax\u6982\u7387\u4e4b\u548c // \u8f93\u5165\u53c2\u6570prob\uff1a[max_text_len,vocab_size]\uff0cAttention\u89e3\u7801\u5668\u8f93\u51fa\u5206\u6570 // \u8f93\u5165\u53c2\u6570hyp\uff1a[text_len,]\uff0cCTC\u89e3\u7801\u7ed3\u679c // \u8f93\u51fa\uff1aAttention\u89e3\u7801\u5668\u5bf9hyp\u8868\u793a\u7684\u89e3\u7801\u8def\u5f84\u7684\u6253\u5206 float score = 0.0f ; auto accessor = prob . accessor < float , 2 > (); for ( size_t j = 0 ; j < hyp . size (); ++ j ) { score += accessor [ j ][ hyp [ j ]]; } score += accessor [ hyp . size ()][ eos ]; return score ; } // wenet/runtime/core/decoder/torch_asr_model.cc void TorchAsrModel::AttentionRescoring ( const std :: vector < std :: vector < int >>& hyps , float reverse_weight , std :: vector < float >* rescoring_score ) { // \u5bf9CTC\u8f93\u51fa\u7684N-best\u89e3\u7801\u7ed3\u679c\u8fdb\u884c\u91cd\u6253\u5206 // \u8f93\u5165\u53c2\u6570hyps: [num_best,text_len]\uff0cCTC\u8f93\u51fa\u7684\u89e3\u7801\u7ed3\u679c\uff0c\u5b58\u50a8token id // \u8f93\u5165\u53c2\u6570reverse_weight\uff1ascaler\uff0c\u5982\u679c\u91c7\u7528\u53cc\u5411\u89e3\u7801\u5668\u624d\u6709\u6548\uff0c\u8868\u793a\u9006\u5411\u89e3\u7801\u5668\u6743\u91cd // \u8f93\u51fa\u53c2\u6570rescoring_score\uff1a[num_best,]\uff0c\u5bf9CTC\u8f93\u51faN-best\u7684\u6253\u5206 ... } WeNet runtime\u6570\u636e\u961f\u5217 WeNet runtime\u4f7f\u7528 FeaturePipeline \u8ba1\u7b97\u6885\u5c14\u9891\u8c31\uff0c\u5e76\u5c06\u5176\u9001\u5165\u6a21\u578b\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u4e24\u4e2a\u7ebf\u7a0b\u6267\u884c FeaturePipeline \uff1a\u7ebf\u7a0bA\u8c03\u7528 AcceptWaveform() \u6dfb\u52a0\u539f\u59cb\u97f3\u9891\u6570\u636e\u5e76\u901a\u8fc7 set_input_finished() \u901a\u77e5\u8f93\u5165\u97f3\u9891\u7684\u7ed3\u675f\uff1b\u7ebf\u7a0bB\uff08\u89e3\u7801\u5668\u7ebf\u7a0b\uff09\u8c03\u7528 Read() \u6d88\u8d39\u58f0\u5b66\u7279\u5f81\u3002\u56e0\u6b64 BlockingQueue \u7528\u6765\u786e\u4fdd\u7c7b FeaturePipeline \u7684\u7ebf\u7a0b\u5b89\u5168\u3002 \u5f53\u961f\u5217 feature_queue_ \u4e2d\u6ca1\u6709\u58f0\u5b66\u7279\u5f81\u5e76\u4e14\u8f93\u5165\u5c1a\u672a\u7ed3\u675f\u65f6\uff0c Read() \u5c06\u4f1a\u963b\u585e\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 // wenet/runtime/core/frontend/feature_pipline.h class FeaturePipeline { public : explicit FeaturePipeline ( const FeaturePipelineConfig & config ); // The feature extraction is done in AcceptWaveform(). void AcceptWaveform ( const float * pcm , const int size ); void AcceptWaveform ( const int16_t * pcm , const int size ); ... // The caller should call this method when speech input is end. // Never call AcceptWaveform() after calling set_input_finished() ! void set_input_finished (); bool input_finished () const { return input_finished_ ; } ... // Read #num_frames frame features. // Return False if less then #num_frames features are read and the // input is finished. // Return True if #num_frames features are read. // This function is a blocking method when there is no feature // in feature_queue_ and the input is not finished. bool Read ( int num_frames , std :: vector < std :: vector < float >>* feats ); ... }; WeNet\u6570\u636e\u961f\u5217\u5e76\u53d1\u903b\u8f91 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 // wenet/runtime/core/frontend/feature_pipeline.cc bool FeaturePipeline::ReadOne ( std :: vector < float >* feat ) { if ( ! feature_queue_ . Empty ()) { // \u6700\u666e\u904d\u7684\u60c5\u5f62\uff0c\u6570\u636e\u961f\u5217\u4e0d\u4e3a\u7a7a\uff0c\u76f4\u63a5\u4ece\u961f\u5217\u4e2d\u53d6\u51fa\u4e00\u5e27\u58f0\u5b66\u7279\u5f81\u8fd4\u56de * feat = std :: move ( feature_queue_ . Pop ()); return true ; } else { // \u6570\u636e\u961f\u5217\u4e3a\u7a7a\uff0c\u52a0\u9501\u6302\u8d77\u672c\u7ebf\u7a0b\uff0c\u7b49\u5f85\u6570\u636e\u5b58\u5165\u961f\u5217 std :: unique_lock < std :: mutex > lock ( mutex_ ); while ( ! input_finished_ ) { // \u6b64\u65f6\u8f93\u5165\u5c1a\u672a\u7ed3\u675f\uff0c\u91ca\u653e\u4e92\u65a5\u9501\uff0c\u7b49\u5f85condition_variable\u901a\u77e5\u5e76\u5524\u9192\u672c\u7ebf\u7a0b // This will release the lock and wait for notify_one() // from AcceptWaveform() or set_input_finished() finish_condition_ . wait ( lock ); // \u672c\u7ebf\u7a0b\u88ab\u5524\u9192\uff0c\u67e5\u770b\u6b64\u65f6\u6570\u636e\u961f\u5217\u662f\u5426\u4e3a\u7a7a if ( ! feature_queue_ . Empty ()) { // \u4e0d\u4e3a\u7a7a\u5219\u4ece\u961f\u5217\u4e2d\u53d6\u51fa\u4e00\u5e27\u58f0\u5b66\u7279\u5f81\u5e76\u8fd4\u56de * feat = std :: move ( feature_queue_ . Pop ()); return true ; } } CHECK ( input_finished_ ); // \u539f\u59cb\u4ee3\u7801\u5982\u4e0b\uff1a // CHECK(feature_queue_.Empty()); // return false; // \u4e0a\u8ff0\u4ee3\u7801\u5728\u5982\u4e0b\u65f6\u5e8f\u65f6\u4f1a\u53d1\u751f\u95ee\u9898\uff1a // 1. \u8bfb\u7ebf\u7a0b\u5224\u65adfeature_queue_.Empty()\u4e3atrue\uff0c\u8fdb\u5165else\uff0c\u8bfb\u7ebf\u7a0b\u6302\u8d77 // 2. \u5199\u7ebf\u7a0b\u6267\u884cAcceptWaveform\u5e76\u8bbe\u7f6einput_finished_\u4e3atrue // 3. \u8bfb\u7ebf\u7a0b\u5f00\u59cb\u6267\u884celse\u90e8\u5206\uff0c\u6b64\u65f6input_finished_\u4e3atrue\uff0c\u56e0\u6b64\u4e0d\u4f1a\u6267\u884cwhile\u5faa\u73af\u4f53\uff0c // \u6b64\u65f6CHECK(feature_queue_.Empty())\u5931\u8d25 // \u4e5f\u5c31\u662f\u5199\u7ebf\u7a0b\u5199\u5165\u6700\u540e\u4e00\u5e27\uff0c\u5e76\u5c06input_finished_\u8bbe\u7f6e\u4e3atrue\uff0c\u6b64\u65f6\u961f\u5217\u5b9e\u9645\u8fd8\u6709\u6570\u636e\uff0c // \u4f46\u8bfb\u7ebf\u7a0b\u6839\u636einput_finished_\u5224\u65ad\u6b64\u65f6\u5df2\u7ecf\u7ed3\u675f\uff0c\u76f4\u63a5\u65e0\u6cd5\u8fdb\u5165while // \u56e0\u6b64\u4e0d\u80fdCHECK(feature_queue_.Empty())\uff0c\u5e76\u4e14double check\u6570\u636e\u961f\u5217\u662f\u5426\u4e3a\u7a7a // Double check queue.empty, see issue#893 for detailed discussions. // https://github.com/wenet-e2e/wenet/issues/893 if ( ! feature_queue_ . Empty ()) { * feat = std :: move ( feature_queue_ . Pop ()); return true ; } else { return false ; } } } \u89e3\u7801\u914d\u7f6e\u9879 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 struct DecodeOptions { // chunk_size\u4e3a\u7ecf\u8fc7\u4e0b\u91c7\u6837\u4e4b\u540e\u7684\u89e3\u7801\u5e27\u5e27\u6570\uff0c\u800c\u975e\u539f\u59cb\u97f3\u9891\u5e27 int chunk_size = 16 ; // \u5de6\u4fa7\u5168\u89c6\u91ce int num_left_chunks = -1 ; // final_score = rescoring_weight * rescoring_score + ctc_weight * ctc_score; // rescoring_score = left_to_right_score * (1 - reverse_weight) + // right_to_left_score * reverse_weight // ctc_score\u5728\u4e0d\u540c\u7684\u641c\u7d22\u65b9\u5f0f\u4e2d\u542b\u4e49\u4e0d\u540c\uff1a // CtcPrefixBeamSearch: ctc_score = sum(prefix) score + context score // CtcWfstBeamSearch: ctc_score = a max(viterbi) path score + context score // \u56e0\u6b64\u9700\u8981\u6839\u636e\u641c\u7d22\u65b9\u5f0f\u8bbe\u7f6ectc_weight float ctc_weight = 0.5 ; float rescoring_weight = 1.0 ; float reverse_weight = 0.0 ; CtcEndpointConfig ctc_endpoint_config ; CtcPrefixBeamSearchOptions ctc_prefix_search_opts ; CtcWfstBeamSearchOptions ctc_wfst_search_opts ; }; wenet\u8bcd\u8868 1 2 3 4 5 6 7 8 9 10 11 class AsrDecoder { ... private : // \u8f93\u51fa\u8bcd\u8868 // output symbol table std :: shared_ptr < fst :: SymbolTable > symbol_table_ ; // \u7aef\u5230\u7aef\u58f0\u5b66\u6a21\u578b\u8bcd\u8868 // e2e unit symbol table std :: shared_ptr < fst :: SymbolTable > unit_table_ = nullptr ; ... }; wenet\u7684\u4e0a\u4e0b\u6587\u504f\u7f6e\uff08context biasing\uff09 \u5728ASR\u7684\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u5e38\u7528\u8bcd\u7684\u8bc6\u522b\u6548\u679c\u8f83\u597d\uff0c\u4f46\u5bf9\u4e8e\u4e00\u4e9b\u7279\u6b8a\u7684\u8bcd\uff0c\u8bc6\u522b\u7cbe\u5ea6\u53ef\u80fd\u4f1a\u964d\u4f4e\u3002\u4e0a\u4e0b\u6587\u504f\u5dee\uff08Context Biasing\uff09\u662f\u6307\u5728\u63a8\u7406\u8fc7\u7a0b\u4e2d\u5c06\u5148\u9a8c\u77e5\u8bc6\u6ce8\u5165ASR\uff0c\u4f8b\u5982\u7528\u6237\u559c\u6b22\u7684\u6b4c\u66f2\u3001\u8054\u7cfb\u4eba\u3001\u5e94\u7528\u7a0b\u5e8f\u6216\u4f4d\u7f6e\u3002\u4f20\u7edf\u7684ASR\u901a\u8fc7\u4ece\u504f\u7f6e\u77ed\u8bed\u5217\u8868\u4e2d\u6784\u5efa\u4e00\u4e2an-gram\u6709\u9650\u72b6\u6001\u8f6c\u5f55\u673a\uff08Finite State Transducer\uff0cFST\uff09\u6765\u8fdb\u884c\u4e0a\u4e0b\u6587\u504f\u7f6e\uff0c\u8be5\u504f\u7f6e\u77ed\u8bed\u5217\u8868\u5728\u89e3\u7801\u8fc7\u7a0b\u4e2d\u4e0e\u89e3\u7801\u56fe\u52a8\u6001\u7ec4\u5408\uff0c\u8fd9\u6709\u52a9\u4e8e\u5c06\u8bc6\u522b\u7ed3\u679c\u504f\u5411\u4e8e\u4e0a\u4e0b\u6587\u6709\u9650\u72b6\u6001\u8f6c\u5f55\u673a\u4e2d\u5305\u542b\u7684n-gram\uff0c\u4ece\u800c\u63d0\u9ad8\u7279\u5b9a\u573a\u666f\u4e2d\u7684\u8bc6\u522b\u51c6\u786e\u6027\u3002 \u65e0\u8bba\u662fCTC Prefix Beam Search\u8fd8\u662fCTC WFST Beam Search\u90fd\u53ef\u4ee5\u5f15\u5165\u4e0a\u4e0b\u6587\u504f\u7f6e\uff08context biasing\uff09\uff0c\u4ee5\u4fbf\u9002\u7528\u7279\u6b8a\u573a\u666f\uff1a 1 2 3 4 5 6 7 // wenet/runtime/core/decoder/asr_decoder.cc if ( nullptr == fst_ ) { searcher_ . reset ( new CtcPrefixBeamSearch ( opts . ctc_prefix_search_opts , resource -> context_graph )); } else { searcher_ . reset ( new CtcWfstBeamSearch ( * fst_ , opts . ctc_wfst_search_opts , resource -> context_graph )); \u6ce8\u610f\uff0c\u4e0a\u4e0b\u6587\u504f\u7f6e\u4e0d\u540c\u4e8e\u8bed\u8a00\u6a21\u578b\uff0c\u53ea\u4e0d\u8fc7\u504f\u7f6e\u77ed\u8bed\u5217\u8868\u548c\u8bed\u8a00\u6a21\u578b\u90fd\u662f\u7528\u6709\u9650\u72b6\u6001\u8f6c\u5f55\u673a\uff08FST\uff09\u5b9e\u73b0\uff0c\u8bed\u8a00\u6a21\u578b\u53ea\u9002\u7528\u4e8eCTC WFST Beam Search\u3002 wenet/context.md at main \u00b7 wenet-e2e/wenet \u00b7 GitHub WeNet\u65f6\u95f4\u6233\u7684\u540e\u5904\u7406\u7b56\u7565\uff08\u201dwenet\u7684ctc_prefix_beam_search\u201c\u8865\u5145\uff0c\u5f85\u5408\u5e76\uff09 \u4e3a\u4e86\u907f\u514d\u8f93\u51fa\u7684\u5355\u8bcd\u65f6\u95f4\u6233\u90fd\u9ecf\u8fde\u5728\u4e00\u8d77\uff0c\u5f15\u5165\u6700\u5c0f\u5355\u8bcd\u95f4\u9694\uff0c\u4e24\u4e2a\u8bcd\u65f6\u95f4\u6233\u4e4b\u95f4\u7684\u95f4\u9694\u81f3\u5c11\u5927\u4e8e\u8be5\u503c\uff0c\u9ed8\u8ba4100ms\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 // wenet/runtime/core/decoder/asr_decoder.h const int time_stamp_gap_ = 100 ; // timestamp gap between words in a sentence // wenet/runtime/core/decoder/asr_decoder.cc // \u65f6\u95f4\u6233\u4ec5\u5728\u8f93\u5165\u5b8c\u6bd5\uff0c\u51c6\u5907\u8f93\u51fa\u6700\u7ec8\u7ed3\u679c\u65f6\u4ea7\u751f // \u91c7\u7528\u58f0\u5b66\u6a21\u578b\u89e3\u7801\u65f6\u4ea7\u751f\u7684\u65f6\u95f4\u6233\uff0c\u540c\u65f6\u6b64\u5904\u4e5f\u9700\u8981e2e\u6a21\u578b\u7684\u8bcd\u8868 // TimeStamp is only supported in final result // TimeStamp of the output of CtcWfstBeamSearch may be inaccurate due to // various FST operations when building the decoding graph. So here we use // time stamp of the input(e2e model unit), which is more accurate, and it // requires the symbol table of the e2e model used in training. if ( unit_table_ != nullptr && finish ) { const std :: vector < int >& input = inputs [ i ]; const std :: vector < int >& time_stamp = times [ i ]; CHECK_EQ ( input . size (), time_stamp . size ()); for ( size_t j = 0 ; j < input . size (); j ++ ) { std :: string word = unit_table_ -> Find ( input [ j ]); int start = time_stamp [ j ] * frame_shift_in_ms () - time_stamp_gap_ > 0 ? time_stamp [ j ] * frame_shift_in_ms () - time_stamp_gap_ : 0 ; if ( j > 0 ) { // \u5982\u679c\u672c\u65f6\u523b\u5355\u8bcd\u4e0e\u4e0a\u4e00\u4e2a\u65f6\u523b\u5355\u8bcd\u7684\u65f6\u95f4\u95f4\u9694\u5c0f\u4e8e\u201c\u6700\u5c0f\u5355\u8bcd\u95f4\u9694\u201d\uff08time_stamp_gap_\uff09\uff0c // \u5219\u8be5\u5355\u8bcd\u7684\u5f00\u59cb\u65f6\u523bstart\u53d6\u4e0a\u4e00\u4e2a\u5355\u8bcd\u548c\u672c\u65f6\u523b\u5355\u8bcd\u7684\u4e2d\u95f4\u65f6\u523b start = ( time_stamp [ j ] - time_stamp [ j - 1 ]) * frame_shift_in_ms () < time_stamp_gap_ ? ( time_stamp [ j - 1 ] + time_stamp [ j ]) / 2 * frame_shift_in_ms () : start ; } int end = time_stamp [ j ] * frame_shift_in_ms (); if ( j < input . size () - 1 ) { // \u5982\u679c\u672c\u65f6\u523b\u5355\u8bcd\u4e0e\u4e0b\u4e00\u65f6\u523b\u5355\u8bcd\u7684\u65f6\u95f4\u95f4\u9694\u5c0f\u4e8e\u201c\u6700\u5c0f\u5355\u8bcd\u95f4\u9694\u201d\uff08time_stamp_gap_\uff09\uff0c // \u5219\u8be5\u5355\u8bcd\u7684\u7ed3\u675f\u65f6\u523bend\u53d6\u4e0b\u4e00\u4e2a\u5355\u8bcd\u548c\u672c\u65f6\u523b\u5355\u8bcd\u7684\u4e2d\u95f4\u65f6\u523b end = ( time_stamp [ j + 1 ] - time_stamp [ j ]) * frame_shift_in_ms () < time_stamp_gap_ ? ( time_stamp [ j + 1 ] + time_stamp [ j ]) / 2 * frame_shift_in_ms () : end ; } WordPiece word_piece ( word , offset + start , offset + end ); path . word_pieces . emplace_back ( word_piece ); } } AsrModel\u548cAsrDecoder\u7684\u8c03\u7528\u5173\u7cfb AsrModel \u7ba1\u7406\u58f0\u5b66\u6a21\u578b\u3001\u8bed\u8a00\u6a21\u578b\u7684\u8d44\u6e90\u3001\u914d\u7f6e\u7b49\uff0c\u8c03\u7528\u7f16\u89e3\u7801\u5668\u5b9e\u73b0\u63a8\u7406\u3002 AsrDecoder \u901a\u8fc7 FeaturePipeline \u8f93\u5165\u6570\u636e\uff0c\u8c03\u7528 AsrModel \u4ea7\u751f\u89e3\u7801\u7ed3\u679c\u3002\u8ba1\u7b97\u63a8\u7406\u8017\u65f6\uff0c\u4ea7\u751f\u6700\u7ec8\u7684\u65f6\u95f4\u6233\uff0c\u540e\u5904\u7406\u89e3\u7801\u7ed3\u679c\u7b49\u3002 CtcPrefixBeamSearch/CtcPrefixBeamSearch -> TorchAsrModel/OnnxAsrModel ( AsrModel \u7684\u5b50\u7c7b)-> AsrDecoder WeNet\u5bf9\u7a7a\u683c\u7684\u5904\u7406 \u65e0\u8bed\u8a00\u6a21\u578b\u7684\u89e3\u7801\u3002\u8bad\u7ec3\u65f6\uff0c _ \u8868\u793a\u7a7a\u683c\uff0c\u56e0\u6b64\u76f4\u63a5\u62fc\u63a5\u8f93\u51fa\u5355\u5143\u5e76\u5c06 _ \u66ff\u6362\u4e3a\u7a7a\u683c\uff0c\u7b49\u540c\u4e8e\uff1a detokenized = ''.join(pieces).replace('_', ' ') \u3002 \u6709\u8bed\u8a00\u6a21\u578b\u7684\u89e3\u7801\u3002\u6b64\u65f6\u8f93\u51fa\u4e2d\u6ca1\u6709 _ \uff0c\u8f93\u51fa\u5355\u4f4d\u4e3a\u5b57\uff0c\u56e0\u6b64\u7528\u7a7a\u683c\u62fc\u63a5\u8f93\u51fa\u5355\u5143\uff0c\u7b49\u540c\u4e8e detokenized = ' '.join(pieces) \u3002 \u6700\u540e\uff0cWeNet\u901a\u8fc7\u540e\u5904\u7406\u7b56\u7565 PostProcessor \u7edf\u4e00\u53bb\u9664\u4e0d\u9700\u8981\u7684\u7a7a\u683c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // wenet/runtime/core/decoder/asr_decoder.cc for ( size_t j = 0 ; j < hypothesis . size (); j ++ ) { std :: string word = symbol_table_ -> Find ( hypothesis [ j ]); // A detailed explanation of this if-else branch can be found in // https://github.com/wenet-e2e/wenet/issues/583#issuecomment-907994058 if ( searcher_ -> Type () == kWfstBeamSearch ) { path . sentence += ( ' ' + word ); } else { path . sentence += ( word ); } } ... // \u540e\u5904\u7406\u7b56\u7565\uff0c\u76ee\u524d\u4e3b\u8981\u529f\u80fd\u662f\u53bb\u9664\u4e0d\u9700\u8981\u7684\u7a7a\u683c\u3002 // example1: \u201c\u6211 \u7231 \u4f60\u201d==> \u201c\u6211\u7231\u4f60\u201d // example2: \u201c i love wenet\u201d ==> \u201ci love wenet\u201d // example3: \u201c\u6211 \u7231 wenet very much\u201d ==> \u201c\u6211\u7231wenet very much\u201d // example4: \u201caa \u00e4\u00e4 xx yy\u201d ==> \u201caa \u00e4\u00e4 xx yy\u201d if ( post_processor_ != nullptr ) { path . sentence = post_processor_ -> Process ( path . sentence , finish ); } Runtime: words containing non-ASCII characters are concatenated without space \u00b7 Issue #583 \u00b7 wenet-e2e/wenet \u00b7 GitHub","title":"WeNet runtime\u77e5\u8bc6\u70b9"},{"location":"asr/wenet_runtime%E7%9F%A5%E8%AF%86%E7%82%B9/#wenet-runtime","text":"","title":"WeNet runtime\u77e5\u8bc6\u70b9"},{"location":"asr/wenet_runtime%E7%9F%A5%E8%AF%86%E7%82%B9/#define","text":"1 2 3 4 5 6 #ifndef DECODER_PARAMS_H_ #define DECODER_PARAMS_H_ #include <memory> ... #endif // DECODER_PARAMS_H_ \u8fd9\u662fC++\u9879\u76ee\u4e2d\u5934\u6587\u4ef6\u7684\u60ef\u5e38\u505a\u6cd5\uff0c #ifndef/#define/#endif \u9632\u6b62\u91cd\u590d\u5b9a\u4e49\u9519\u8bef\u3002 #define \u9884\u5904\u7406\u6307\u4ee4\u7528\u4e8e\u521b\u5efa\u5b8f\u3002\u6307\u4ee4\u7684\u4e00\u822c\u5f62\u5f0f\u662f\uff1a 1 #define macro-name replacement-text \u6240\u6709\u5934\u6587\u4ef6\u90fd\u5e94\u8be5\u6709 #define \u4fdd\u62a4\u6765\u9632\u6b62\u5934\u6587\u4ef6\u88ab\u591a\u91cd\u5305\u542b\uff0c\u5e76\u4e14\u4e3a\u4e86\u4e3a\u4fdd\u8bc1\u552f\u4e00\u6027\uff0c\u547d\u540d\u683c\u5f0f\u5f53\u662f\uff1a <PROJECT>_<PATH>_<FILE>_H_ \u3002\u5f53\u7136WeNet\u6ca1\u6709\u5b8c\u5168\u9075\u4eceC++\u4ee3\u7801\u89c4\u8303\uff0cWeNet\u91c7\u7528\u7684\u5934\u6587\u4ef6\u547d\u540d\u683c\u5f0f\u4e3a <PATH>_H_ \u3002 C++\u98ce\u683c\u6307\u5357-#define\u4fdd\u62a4 C++\u8bed\u6cd5\u57fa\u7840","title":"\u5934\u6587\u4ef6\u4e2d\u7684define"},{"location":"asr/wenet_runtime%E7%9F%A5%E8%AF%86%E7%82%B9/#gemm","text":"1 DEFINE_int32 ( num_threads , 1 , \"num threads for GEMM\" ); GEMM \u5e94\u4e3aKaldi\u4e2d\u77e9\u9635\u4e58\u6cd5\u52a0\u901f\u5e93\u3002 kaldi Namespace Reference","title":"GEMM"},{"location":"asr/wenet_runtime%E7%9F%A5%E8%AF%86%E7%82%B9/#tlgfst","text":"\u8f93\u5165 \u8f93\u51fa T(token) \u5e27\u7ea7\u522b\u7684CTC\u6807\u7b7e\u5e8f\u5217 lexicon\u5efa\u6a21\u5355\u5143 L(lexicon) lexicon\u5efa\u6a21\u5355\u5143 \u8bcd G(grammer) \u8bcd \u8bcd","title":"TLG.fst"},{"location":"asr/wenet_runtime%E7%9F%A5%E8%AF%86%E7%82%B9/#token","text":"\u5c06\u5e27\u7ea7\u522b\u7684CTC\u6807\u7b7e\u6620\u5c04\u5230\u5355\u4e2alexicon\u5355\u5143\u3002\u6bd4\u5982\uff0c\u6709\u5982\u4e0b\u51e0\u4e2a\u6807\u7b7e\u5e8f\u5217\uff1a \\(A\\ A\\ A\\ A\\ A\\) \\(\\phi\\ \\phi\\ A\\ A\\ \\phi\\) \\(\\phi\\ A\\ A\\ A\\ \\phi\\) token WFST\u5c06\u8fd9\u51e0\u4e2a\u6807\u7b7e\u5e8f\u5217\u5747\u6620\u5c04\u5230\u5355\u4e2alexicon\u5355\u5143\uff0c\u4e5f\u5c31\u662f A \u3002\u641c\u7d22\u56fe \\(S\\) \u53ef\u4ee5\u8868\u793a\u4e3a\uff1a \\[ S=T\\circ{\\rm min}({\\rm det}(L\\circ G)) \\] \u5176\u4e2d\uff0c \\(\\circ\\) \u8868\u793a\u5408\u5e76\uff0c \\({\\rm min}\\) \u8868\u793a\u6700\u5c0f\u5316\uff0c \\({\\rm det}\\) \u8868\u793a\u786e\u5b9a\u5316\u3002\u641c\u7d22\u56fe\u7684\u8f93\u5165\u662f\u5e27\u7ea7\u522b\u7684CTC\u6807\u7b7e\u5e8f\u5217\uff0c\u8f93\u51fa\u662flexicon\u5efa\u6a21\u5355\u5143\u3002","title":"Token"},{"location":"asr/wenet_runtime%E7%9F%A5%E8%AF%86%E7%82%B9/#lexicon","text":"\u5c06lexicon\u5efa\u6a21\u5355\u5143\u5e8f\u5217\uff08\u5b57\u7b26\uff09\u6620\u5c04\u4e3a\u8bcd\uff0c\u5bf9\u4e8e\u7aef\u5230\u7aef\u58f0\u5b66\u6a21\u578b\u800c\u8a00\uff0clexicon WFST\u5c31\u662f\u628alexicon unit\uff08\u5b57\u7b26\uff09\u62fc\u6210word\uff08\u8bcd\uff09\u3002","title":"Lexicon"},{"location":"asr/wenet_runtime%E7%9F%A5%E8%AF%86%E7%82%B9/#grammer","text":"\u5c06\u5355\u8bcd\u7ec4\u5408\u6210\u53ef\u80fd\u7684\u8bcd\u5e8f\u5217\uff0c\u4e5f\u5c31\u662f\u8bcd\u7ea7\u522b\u7684\u8bed\u8a00\u6a21\u578b\u3002 \u5c0f\u767d\u7684WFST\u4e4b\u8def EESEN: End-to-End Speech Recognition using Deep RNN Models and WFST-based Decoding","title":"Grammer"},{"location":"asr/wenet_runtime%E7%9F%A5%E8%AF%86%E7%82%B9/#_1","text":"","title":"\u89e3\u7801\u9009\u9879"},{"location":"asr/wenet_runtime%E7%9F%A5%E8%AF%86%E7%82%B9/#chunk_size","text":"\u7ed3\u6784\u4f53 DecodeOptions \u4e2d\u7684 chunk_size \u9009\u9879\u6307\u7684\u662f\u7ecf\u8fc7\u4e0b\u91c7\u6837\u4e4b\u540e\uff0c\u89e3\u7801\u5e27\u7684\u5927\u5c0f\u3002","title":"chunk_size"},{"location":"asr/wenet_runtime%E7%9F%A5%E8%AF%86%E7%82%B9/#final_score","text":"\\[ final\\_score = rescoring\\_weight \\times rescoring\\_score + ctc\\_weight \\times ctc\\_score \\] \u5176\u4e2d\uff0c \\[ rescoring\\_score = left\\_to\\_right\\_score \\times (1 - reverse\\_weight) + right\\_to\\_left\\_score \\times reverse\\_weight \\] ctc_score \u5728\u4e0b\u9762\u4e24\u79cd\u641c\u7d22\u65b9\u6cd5\u4e2d\u662f\u4e0d\u540c\u7684\uff1a CtcPrefixBeamSearch : \\(ctc\\_score={\\rm sum}(prefix)\\) CtcWfstBeamSearch : \\(ctc\\_score={\\rm max}(viterbi\\_path)\\) \u56e0\u6b64\u8981\u6839\u636e\u641c\u7d22\u65b9\u6cd5\u8bbe\u7f6e ctc_weight \u3002","title":"final_score"},{"location":"asr/wenet_runtime%E7%9F%A5%E8%AF%86%E7%82%B9/#wenet","text":"\u5728CTC Prefix Beam Search\u7b97\u6cd5\u4e2d\uff0c\u91c7\u7528HashMap\u4fdd\u5b58\u89e3\u7801\u8fc7\u7a0b\u4e2d\u4ea7\u751f\u7684\u524d\u7f00\u4e32\u53ca\u5176\u5bf9\u5e94\u7684\u5206\u6570\u4fe1\u606f\uff0c\u5e76\u5229\u7528BK&DR\u7b97\u6cd5\u6c42\u54c8\u5e0c\u503c\u4ee5\u51cf\u5c11\u78b0\u649e\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 // \u5229\u7528BK&DR\u7b97\u6cd5\u6c42\u54c8\u5e0c\u503c\u4ee5\u51cf\u5c11\u78b0\u649e // wenet/runtime/core/decoder/ctc_prefix_beam_search.h struct PrefixHash { size_t operator ()( const std :: vector < int >& prefix ) const { size_t hash_code = 0 ; // \u6b64\u5904\u6ce8\u91ca\u6709\u8bef\uff0c\u5e94\u4e3aBK&DR hash code // here we use KB&DR hash code for ( int id : prefix ) { hash_code = id + 31 * hash_code ; } return hash_code ; } }; // \u4f7f\u7528PrefixHash // wenet/runtime/core/decoder/ctc_prefix_beam_search.cc std :: unordered_map < std :: vector < int > , PrefixScore , PrefixHash > next_hyps ; \u54c8\u5e0c\u8868\u4e4bbkdrhash\u7b97\u6cd5\u89e3\u6790\u53ca\u6269\u5c55 BKDRhash.c","title":"WeNet\u4e2d\u7684\u54c8\u5e0c\u51fd\u6570"},{"location":"asr/wenet_runtime%E7%9F%A5%E8%AF%86%E7%82%B9/#cpp","text":"\u5728WeNet\u4e2d\uff0c\u89e3\u7801\u641c\u7d22\u7b97\u6cd5\u90fd\u7ee7\u627f\u81ea\u62bd\u8c61\u7c7b SearchInterface \uff0c\u5411\u5916\u63d0\u4f9b\u7edf\u4e00\u63a5\u53e3\u3002\u62bd\u8c61\u7c7b SearchInterface \u5b9a\u4e49\u4e3a\uff1a 1 2 3 4 5 6 7 8 class SearchInterface { public : virtual ~ SearchInterface () {} virtual void Search ( const torch :: Tensor & logp ) = 0 ; virtual void Reset () = 0 ; virtual void FinalizeSearch () = 0 ; ... }; \u5728C++\u4e2d\uff0c\u53ef\u4ee5\u5c06\u865a\u51fd\u6570\u58f0\u660e\u4e3a\u7eaf\u865a\u51fd\u6570\uff0c\u8bed\u6cd5\u683c\u5f0f\u4e3a\uff1a 1 virtual \u8fd4\u56de\u503c\u7c7b\u578b \u51fd\u6570\u540d ( \u51fd\u6570\u53c2\u6570 ) = 0 ; \u5305\u542b\u7eaf\u865a\u51fd\u6570\u7684\u7c7b\u79f0\u4e3a\u62bd\u8c61\u7c7b\uff08Abstract Class\uff09\u3002\u62bd\u8c61\u7c7b\u901a\u5e38\u662f\u4f5c\u4e3a\u57fa\u7c7b\uff0c\u8ba9\u6d3e\u751f\u7c7b\u53bb\u5b9e\u73b0\u7eaf\u865a\u51fd\u6570\u3002 \u6d3e\u751f\u7c7b\u5fc5\u987b\u5b9e\u73b0\u7eaf\u865a\u51fd\u6570\u624d\u80fd\u88ab\u5b9e\u4f8b\u5316\u3002 \u5b9a\u4e49\u865a\u51fd\u6570\u53ea\u662f\u4e3a\u4e86\u5141\u8bb8\u57fa\u7c7b\u6307\u9488\u8c03\u7528\u5b50\u7c7b\u7684\u8fd9\u4e2a\u51fd\u6570\u3002 C++\u7eaf\u865a\u51fd\u6570\u548c\u62bd\u8c61\u7c7b\u8be6\u89e3","title":"cpp\u7eaf\u865a\u51fd\u6570\u548c\u62bd\u8c61\u7c7b"},{"location":"asr/wenet_runtime%E7%9F%A5%E8%AF%86%E7%82%B9/#cppdefaultdelete","text":"","title":"cpp\u7c7b\u7684\u7279\u6b8a\u6210\u5458\u51fd\u6570\u53cadefault\u548cdelete\u7279\u6027"},{"location":"asr/wenet_runtime%E7%9F%A5%E8%AF%86%E7%82%B9/#_2","text":"C++\u7c7b\u6709\u56db\u79cd\u7279\u6b8a\u6210\u5458\u51fd\u6570\uff0c\u5206\u522b\u662f\uff1a \u9ed8\u8ba4\u6784\u9020\u51fd\u6570\uff1a\u521b\u5efa\u65b0\u5bf9\u8c61\u3002 \u6790\u6784\u51fd\u6570\uff1a\u9500\u6bc1\u5bf9\u8c61\u3002 \u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff1a\u521b\u5efa\u65b0\u5bf9\u8c61\u5e76\u5229\u7528\u7c7b\u5bf9\u8c61\u521d\u59cb\u5316\u3002 \u62f7\u8d1d\u8d4b\u503c\u51fd\u6570\uff1a\u5229\u7528\u7c7b\u5bf9\u8c61\u5bf9\u4e00\u4e2a\u5df2\u5b58\u5728\u7684\u5bf9\u8c61\u8d4b\u503c\u3002 1 2 3 4 5 6 7 8 9 10 11 // sample class class Test { private : int _val ; public : Test ( int val ); // \u6784\u9020\u51fd\u6570 ~ Test (); // \u6790\u6784\u51fd\u6570 Test ( const Test & test ); // \u62f7\u8d1d\u6784\u9020\u51fd\u6570 Test & operator = ( const Test & test ); // \u62f7\u8d1d\u8d4b\u503c\u51fd\u6570 }; \u8fd9\u56db\u79cd\u7279\u6b8a\u6210\u5458\u51fd\u6570\u5982\u679c\u6ca1\u6709\u663e\u5f0f\u4e3a\u4e00\u4e2a\u7c7b\u5b9a\u4e49\uff0c\u800c\u53c8\u9700\u8981\u7528\u5230\u8be5\u7279\u6b8a\u6210\u5458\u51fd\u6570\u65f6\uff0c\u5219\u7f16\u8bd1\u5668\u4f1a\u9690\u5f0f\u4e3a\u8fd9\u4e2a\u7c7b\u751f\u6210\u4e00\u4e2a\u9ed8\u8ba4\u7684\u7279\u6b8a\u6210\u5458\u51fd\u6570\uff0c\u5e76\u4e14\u9690\u5f0f\u521b\u5efa\u6bd4\u663e\u5f0f\u521b\u5efa\u7684\u6267\u884c\u6548\u7387\u9ad8\u3002","title":"\u7c7b\u7684\u7279\u6b8a\u6210\u5458\u51fd\u6570"},{"location":"asr/wenet_runtime%E7%9F%A5%E8%AF%86%E7%82%B9/#_3","text":"\u6784\u9020\u51fd\u6570\u548c\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u90fd\u662f\u7528\u6765\u8fdb\u884c\u7c7b\u5b9e\u4f8b\u5316\uff0cC++\u7c7b\u8fdb\u884c\u521d\u59cb\u5316\u6709\u5982\u4e0b\u4e24\u79cd\u65b9\u5f0f\uff1a 1 2 Test t1 ( 2 ); // \u8c03\u7528\u5b9e\u53c2\u5339\u914d\u7684\u6784\u9020\u51fd\u6570 Test t2 = t1 ; // \u8c03\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff0c\u5229\u7528t1\u5bf9t2\u8fdb\u884c\u521d\u59cb\u5316 \u5176\u4e2d\uff0c\u8c03\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u7684\u4f5c\u7528\u4e3b\u8981\u662f\u590d\u5236\u5bf9\u8c61\uff0c\u8c03\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u7684\u60c5\u51b5\u6709\uff1a \u590d\u5236\u5bf9\u8c61\uff0c\u5e76\u901a\u8fc7\u51fd\u6570\u8fd4\u56de\u590d\u5236\u540e\u7684\u5bf9\u8c61\u3002 \u4e00\u4e2a\u5bf9\u8c61\u4ee5 \u503c\u4f20\u9012 \u7684\u65b9\u5f0f\u4f20\u5165\u51fd\u6570\uff0c\u6b64\u65f6\u5fc5\u5b9a\u8c03\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u3002 \u4e00\u4e2a\u5bf9\u8c61\u901a\u8fc7\u53e6\u4e00\u4e2a\u5bf9\u8c61\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u6bd4\u5982 Test t2 = t1; \u62f7\u8d1d\u65f6\u5c24\u5176\u9700\u8981\u6ce8\u610f\u6307\u9488\u548c\u52a8\u6001\u5206\u914d\u7684\u8d44\u6e90\uff0c\u5426\u5219\u5f88\u5bb9\u6613\u9020\u6210\u62f7\u8d1d\u53d8\u6210 \u6d45\u62f7\u8d1d \uff0c\u4e5f\u5c31\u662f\u590d\u5236\u524d\u540e\u7684\u5bf9\u8c61\u90fd\u6307\u5411\u540c\u4e00\u5757\u5185\u5b58\u533a\u57df\u3002\u56e0\u6b64\u5982\u679c\u7c7b\u7684\u6210\u5458\u53d8\u91cf\u4e2d\u5305\u542b\u6307\u9488\u7c7b\u578b\uff0c\u6216\u8005\u5bf9\u8c61\u5b58\u5728\u6784\u9020\u51fd\u6570\u4e2d\u5206\u914d\u7684\u5176\u5b83\u8d44\u6e90\uff0c\u6b64\u65f6\u5fc5\u987b\u663e\u5f0f\u5b9a\u4e49\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u3002","title":"\u6784\u9020\u51fd\u6570\u548c\u62f7\u8d1d\u6784\u9020\u51fd\u6570"},{"location":"asr/wenet_runtime%E7%9F%A5%E8%AF%86%E7%82%B9/#_4","text":"\u901a\u8fc7\u5b9a\u4e49 \u62f7\u8d1d\u8d4b\u503c\u8fd0\u7b97\u7b26 \u5b9e\u73b0\u7c7b\u5bf9\u8c61\u4e4b\u95f4\u7684\u62f7\u8d1d\u8fd0\u7b97\u3002\u5b9a\u4e49\u62f7\u8d1d\u8d4b\u503c\u8fd0\u7b97\u7b26\u7684\u901a\u5e38\u5f62\u5f0f\u4e3a\uff1a 1 classname & operator = ( const classname & a ) \u62f7\u8d1d\u6784\u9020\u51fd\u6570 \u548c \u62f7\u8d1d\u8d4b\u503c\u51fd\u6570 \u7684\u4e0d\u540c\u4e4b\u5904\u5982\u4e0b\uff1a 1 2 3 Test t2 = t1 ; // \u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff0c\u5373\u521b\u5efa\u65f6\u8fdb\u884c\u521d\u59cb\u5316 Test t3 ; t3 = t1 ; // \u62f7\u8d1d\u8d4b\u503c\u51fd\u6570\uff0c\u56e0\u4e3a\u5e76\u4e0d\u662f\u5b9e\u4f8b\u5316\u7c7b\u5bf9\u8c61\u65f6\u8fdb\u884c\u521d\u59cb\u5316","title":"\u62f7\u8d1d\u8d4b\u503c\u51fd\u6570"},{"location":"asr/wenet_runtime%E7%9F%A5%E8%AF%86%E7%82%B9/#c11defaultdelete","text":"\u53ea\u9700\u5728\u51fd\u6570\u58f0\u660e\u540e\u52a0\u4e0a =default; \u5c31\u53ef\u4ee5\u5c06\u8be5\u51fd\u6570\u58f0\u660e\u4e3a default \u51fd\u6570\uff0c\u7f16\u8bd1\u5668\u5c06\u4e3a\u663e\u5f0f\u58f0\u660e =default; \u7684\u51fd\u6570\u81ea\u52a8\u751f\u6210\u51fd\u6570\u4f53\uff0c\u4ee5\u83b7\u5f97\u66f4\u9ad8\u7684\u6267\u884c\u6548\u7387\u3002 \u4f46\u6709\u4e9b\u65f6\u5019\uff0c\u53ef\u4ee5\u901a\u8fc7 =delete; \u7981\u7528\u67d0\u4e9b\u51fd\u6570\uff0c\u5c06\u8be5\u51fd\u6570\u53d8\u5f97\u4e0d\u53ef\u8c03\u7528\u3002 =delete; \u4e0d\u4ec5\u53ef\u4ee5\u7981\u7528\u7c7b\u5185\u7684\u7279\u6b8a\u6210\u5458\u51fd\u6570\uff0c\u4e5f\u53ef\u4ee5\u7981\u7528\u4e00\u822c\u51fd\u6570\u3002 1 2 3 4 5 6 7 8 9 10 11 12 // sample class class Test { private : int _val ; public : Test () = default ; // \u5b9a\u4e49\u9ed8\u8ba4\u6784\u9020\u51fd\u6570 Test ( int val ); // \u6784\u9020\u51fd\u6570 ~ Test (); // \u6790\u6784\u51fd\u6570 Test ( const Test & test ) = delete ; // \u4e0d\u53ef\u8c03\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff0cTest t2=t1;\u5c06\u4e0d\u53ef\u7528 Test & operator = ( const Test & test ); // \u62f7\u8d1d\u8d4b\u503c\u51fd\u6570 }; \u5728C++11\u6807\u51c6\u4e4b\u524d\uff0c\u4e3a\u4e86\u963b\u6b62\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u548c\u62f7\u8d1d\u8d4b\u503c\u8fd0\u7b97\u7b26\uff0c\u53ef\u5c06\u5176\u58f0\u660e\u4e3a private \u6765\u963b\u6b62\u62f7\u8d1d\u3002\u5982\u4e0b\uff0c\u7531\u4e8e\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u548c\u62f7\u8d1d\u8d4b\u503c\u8fd0\u7b97\u7b26\u90fd\u88ab\u5b9a\u4e49\u4e3a private \uff0c\u8fd9\u4e24\u4e2a\u51fd\u6570\u65e0\u6cd5\u88ab\u5916\u90e8\u8bbf\u95ee\uff0c\u56e0\u6b64\u4e5f\u5c31\u65e0\u6cd5\u8fdb\u884c\u7c7b\u4e4b\u95f4\u7684\u62f7\u8d1d\u4e86\uff1a 1 2 3 4 5 6 7 8 9 10 11 // sample class class Test { private : int _val ; Test ( const Test & test ); // \u62f7\u8d1d\u6784\u9020\u51fd\u6570 Test & operator = ( const Test & test ); // \u62f7\u8d1d\u8d4b\u503c\u51fd\u6570 public : Test ( int val ); // \u6784\u9020\u51fd\u6570 ~ Test (); // \u6790\u6784\u51fd\u6570 }; \u5f53\u7136\uff0c\u5982\u679c\u4f7f\u7528C++11\u6807\u51c6\uff0c \u5e0c\u671b\u963b\u6b62\u62f7\u8d1d\u7684\u7c7b \u63a8\u8350\u4f7f\u7528 =delete \u5b9a\u4e49\u81ea\u5df1\u7684\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u548c\u62f7\u8d1d\u8d4b\u503c\u8fd0\u7b97\u7b26\uff0c\u800c\u4e0d\u662f\u5c06\u5176\u58f0\u660e\u4e3a private \u3002 C++\u7c7b\u7684\u7279\u6b8a\u6210\u5458\u51fd\u6570\u53cadefault/delete\u7279\u6027 C++:73---C++11\u6807\u51c6\uff08\u7c7b\u7684\u5220\u9664\u51fd\u6570\uff1a=delete\u5173\u952e\u5b57\u3001\u963b\u6b62\u6784\u9020\u3001\u963b\u6b62\u62f7\u8d1d\u3001private\u963b\u6b62\u62f7\u8d1d\u63a7\u5236\uff09","title":"C++11\u7279\u6027\u4e4bdefault\u548cdelete"},{"location":"asr/wenet_runtime%E7%9F%A5%E8%AF%86%E7%82%B9/#cpp_1","text":"\u4f20\u7edfC++\u4e2d\u9700\u8981\u4f7f\u7528 new \u548c delete \u624b\u52a8\u7533\u8bf7\u548c\u91ca\u653e\u8d44\u6e90\uff0cC++11\u4e2d\u5f15\u5165\u667a\u80fd\u6307\u9488\uff0c\u4f7f\u7528\u5f15\u7528\u8ba1\u6570\uff0c\u53ef\u201c\u81ea\u52a8\u201d\u7ba1\u7406\u8d44\u6e90\u3002\u667a\u80fd\u6307\u9488\u5305\u62ec std::unique_ptr / std::shared_ptr / std::weak_ptr \uff0c\u4f7f\u7528\u65f6\u9700\u8981\u5305\u62ec\u5934\u6587\u4ef6 <memory> \u3002","title":"cpp\u7684\u667a\u80fd\u6307\u9488"},{"location":"asr/wenet_runtime%E7%9F%A5%E8%AF%86%E7%82%B9/#unique_ptr","text":"\u72ec\u5360\u6307\u9488\uff0c\u7531 unique_ptr \u7ba1\u7406\u7684\u5185\u5b58\uff0c\u53ea\u80fd\u88ab\u4e00\u4e2a\u5bf9\u8c61\u6301\u6709\u3002 unique_ptr\u53ea\u6709\u79fb\u52a8\u6784\u9020\u51fd\u6570\uff0c\u56e0\u6b64\u53ea\u80fd\u79fb\u52a8\uff08\u8f6c\u79fb\u5185\u90e8\u5bf9\u8c61\u6240\u6709\u6743\uff0c\u6216\u79f0\u6d45\u62f7\u8d1d\uff09\uff0c\u4e0d\u80fd\u62f7\u8d1d\uff08\u6df1\u62f7\u8d1d\uff09\u3002\u56e0\u6b64 unique_ptr \u4e0d\u652f\u6301\u590d\u5236\u548c\u8d4b\u503c\uff0c\u53ea\u652f\u6301\u79fb\u52a8\u3002 1 2 3 auto w = std :: make_unique < MyClass > (); auto w2 = w ; // \u7f16\u8bd1\u9519\u8bef auto w2 = std :: move ( w ); // \u4f7f\u7528std::move\u8f6c\u79fb\u5bf9\u8c61\u6240\u6709\u6743\uff0c\u6267\u884c\u540ew\u53d8\u4e3anullptr shared_ptr \u9700\u8981\u989d\u5916\u7ef4\u62a4\u5f15\u7528\u8ba1\u6570\uff0c\u56e0\u6b64\u5185\u5b58\u5360\u7528\u8f83\u9ad8\uff1b\u5e76\u4e14\u5f15\u7528\u8ba1\u6570\u5fc5\u987b\u662f\u539f\u5b50\u64cd\u4f5c\uff0c\u800c\u539f\u5b50\u64cd\u4f5c\u6027\u80fd\u8f83\u4f4e\u3002\u5f53\u7b26\u5408\u79fb\u52a8\u8bed\u4e49\u65f6\uff0c\u53ef\u4ee5\u91c7\u7528 std::move \u8f6c\u79fb\u6240\u6709\u6743\uff0c\u907f\u514d\u590d\u5236\uff0c\u4ece\u800c\u63d0\u9ad8\u6027\u80fd\u3002","title":"unique_ptr"},{"location":"asr/wenet_runtime%E7%9F%A5%E8%AF%86%E7%82%B9/#shared_ptr","text":"\u5171\u4eab\u6307\u9488\uff0c shared_ptr \u80fd\u591f\u8bb0\u5f55\u6709\u591a\u5c11\u4e2a\u5171\u4eab\u6307\u9488\u6307\u5411\u4e00\u4e2a\u5bf9\u8c61\uff0c shared_ptr \u5185\u90e8\u4f7f\u7528\u5f15\u7528\u8ba1\u6570\u5b9e\u73b0\u5185\u5b58\u7684\u81ea\u52a8\u7ba1\u7406\uff0c\u6bcf\u5f53\u590d\u5236\u4e00\u4e2a shared_ptr \uff0c\u5f15\u7528\u8ba1\u6570\u5c31\u4f1a\u52a0\u4e00\uff0c\u5f53\u5f15\u7528\u8ba1\u6570\u53d8\u4e3a\u96f6\u540e\u5c31\u4f1a\u5c06\u5bf9\u8c61\u81ea\u52a8\u5220\u9664\u3002\u53ef\u4ee5\u901a\u8fc7 use_count() \u67e5\u770b\u4e00\u4e2a\u5bf9\u8c61\u7684\u5f15\u7528\u8ba1\u6570\uff0c get() \u83b7\u53d6\u539f\u59cb\u6307\u9488\uff0c reset() \u51cf\u5c11\u4e00\u4e2a\u5f15\u7528\u8ba1\u6570\u3002 \u5176\u4e2d\uff0c\u8c03\u7528 reset() \u4f1a\u4f7f\u5f15\u7528\u8ba1\u6570\u51cf1\u3002\u5982\u679c\u5411 reset() \u4f20\u5165\u7c7b\u5bf9\u8c61\uff0c\u6bd4\u5982 reset(new xxx()) \u65f6\uff0c\u667a\u80fd\u6307\u9488\u9996\u5148\u751f\u6210\u65b0\u5bf9\u8c61\uff0c\u7136\u540e\u5c06\u5c31\u5bf9\u8c61\u7684\u5f15\u7528\u8ba1\u6570\u51cf1\uff0c\u5982\u679c\u53d1\u73b0\u5f15\u7528\u8ba1\u6570\u4e3a0\u65f6\uff0c\u5219\u6790\u6784\u65e7\u5bf9\u8c61\uff0c\u6700\u540e\u5c06\u65b0\u5bf9\u8c61\u7684\u6307\u9488\u4ea4\u7ed9\u667a\u80fd\u6307\u9488\u4fdd\u7ba1\u3002 1 2 3 4 5 6 7 8 9 auto w = std :: make_shared < MyClass > (); { auto w2 = w ; // shared_pt\u5141\u8bb8\u590d\u5236 cout << w . use_count () << endl ; // \u6b64\u65f6\uff0c\u5bf9\u8c61w\u7684\u5f15\u7528\u8ba1\u6570\u4e3a2 } // \u79bb\u5f00\u4f5c\u7528\u57df\uff0c\u5f15\u7528\u8ba1\u6570\u51cf\u4e00\uff0c\u6b64\u65f6\u8f93\u51fa\u4e3a1\uff0c\u5f53\u5f15\u7528\u8ba1\u6570\u4e3a0\u65f6\uff0cdelete\u5185\u5b58 cout << w . use_count () << endl ; // shared_ptr\u652f\u6301\u79fb\u52a8\uff0c\u6267\u884c\u540ew\u4e3anullptr\uff0cw3.use_count()\u7b49\u4e8e1 auto w3 = std :: move ( w );","title":"shared_ptr"},{"location":"asr/wenet_runtime%E7%9F%A5%E8%AF%86%E7%82%B9/#weak_ptr","text":"weak_ptr \u7528\u4e8e\u89e3\u51b3 shared_ptr \u5faa\u73af\u5f15\u7528\u7684\u95ee\u9898\u3002 weak_ptr \u4e0d\u4f1a\u589e\u52a0\u5f15\u7528\u8ba1\u6570\uff0c\u56e0\u6b64\u53ef\u4ee5\u6253\u7834 shared_ptr \u7684\u5faa\u73af\u5f15\u7528\u3002\u4e00\u822c\u7236\u7c7b\u6301\u6709\u5b50\u7c7b\u7684 shared_ptr \uff0c\u5b50\u7c7b\u6301\u6709\u7236\u7c7b\u7684 weak_ptr \u3002 1 2 3 4 5 6 7 8 9 10 11 12 class B ; struct A { shared_ptr < B > b ; }; struct B { weak_ptr < A > a ; // \u4e0d\u53ef\u4ee5\u91c7\u7528shared<A> a; \u5426\u5219\u4f1a\u9020\u6210\u5faa\u73af\u5f15\u7528 }; auto pa = make_shared < A > (); auto pb = make_shared < B > (); // \u5faa\u73af\u5f15\u7528\u65f6\uff0cpa\u548cpb\u90fd\u65e0\u6cd5\u6b63\u5e38\u91ca\u653e pa -> b = pb ; pb -> a = pa ; C++ \u667a\u80fd\u6307\u9488\u7684\u6b63\u786e\u4f7f\u7528\u65b9\u5f0f \u7b2c 5 \u7ae0 \u667a\u80fd\u6307\u9488\u4e0e\u5185\u5b58\u7ba1\u7406","title":"weak_ptr"},{"location":"asr/wenet_runtime%E7%9F%A5%E8%AF%86%E7%82%B9/#cppexplicit","text":"\u5728C++\u4e2d\uff0c explicit \u5173\u952e\u5b57\u7528\u6765\u4fee\u9970\u7c7b\u7684\u6784\u9020\u51fd\u6570\uff0c\u963b\u6b62\u9690\u5f0f\u7c7b\u578b\u8f6c\u6362\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class MyClass { public : int size_ ; char p_ ; // \u6784\u9020\u51fd\u6570\u4e00\u4e2a\u53c2\u6570\uff0c\u4e14\u6ca1\u6709\u4f7f\u7528explicit\u4fee\u9970\uff0c\u9ed8\u8ba4\u652f\u6301\u9690\u5f0f\u7c7b\u578b\u8f6c\u6362 MyClass ( int size ) : size_ ( size ){} // \u6784\u9020\u51fd\u6570\u4e24\u4e2a\u53c2\u6570\uff0c\u4e0d\u7ba1\u662f\u5426\u4f7f\u7528explicit\uff0c\u90fd\u65e0\u6cd5\u8fdb\u884c\u9690\u5f0f\u7c7b\u578b\u8f6c\u6362 MyClass ( int size , const char * p ) : size_ ( size ), p_ ( p ) {} }; class MyClass2 { public : int size_ ; // \u6784\u9020\u51fd\u6570\u4e00\u4e2a\u53c2\u6570\uff0c\u5e76\u4f7f\u7528explicit\u4fee\u9970\uff0c\u963b\u6b62\u9690\u5f0f\u7c7b\u578b\u8f6c\u6362 MyClass2 ( int size ) : size_ ( size ){} }; // \u4f7f\u7528 MyClass c1 ( 10 ); // \u7f16\u8bd1\u901a\u8fc7\uff0c\u663e\u5f0f\u8c03\u7528 MyClass c2 = 10 ; // \u7f16\u8bd1\u901a\u8fc7\uff0c\u9690\u5f0f\u7c7b\u578b\u8f6c\u6362 MyClass2 c3 = 10 ; // \u7f16\u8bd1\u5931\u8d25\uff0cexplicit\u963b\u6b62MyClass2\u8fdb\u884c\u9690\u5f0f\u7c7b\u578b\u8f6c\u6362 C++ explicit\u7684\u4f5c\u7528 \u8be6\u89e3 c++ \u5173\u952e\u5b57 explicit","title":"cpp\u5173\u952e\u5b57explicit"},{"location":"asr/wenet_runtime%E7%9F%A5%E8%AF%86%E7%82%B9/#torchjit","text":"1 2 // wenet/runtime/core/decoder/torch_asr_model.cc torch :: jit :: script :: Module model = torch :: jit :: load ( model_path );","title":"torch.jit\u52a0\u8f7d\u6a21\u578b"},{"location":"asr/wenet_runtime%E7%9F%A5%E8%AF%86%E7%82%B9/#wenet_1","text":"WeNet runtime\u6bcf\u6b21\u8f93\u5165\u4e00\u4e2a\u6837\u672c\u8fdb\u884c\u63a8\u7406\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // wenet/runtime/core/decoder/torch_asr_model.cc void TorchAsrModel::ForwardEncoderFunc ( const std :: vector < std :: vector < float >>& chunk_feats , std :: vector < std :: vector < float >> * out_prob ) { // \u6267\u884c\u7f16\u7801\u5668chunk\u7ea7\u522b\u7684\u4e00\u6b21\u63a8\u65ad\uff0c\u6bcf\u6b21\u8f93\u5165\u4e00\u6761\u97f3\u9891\u7684\u82e5\u5e72\u5e27\u7ec4\u6210\u7684chunk // \u8f93\u5165\u53c2\u6570chunk_feats\uff1a[frames,feature_dim]\uff0c\u548c\u7f13\u5b58cached_feature_\u5171\u540c\u7ec4\u6210\u8f93\u5165 // \u8f93\u51fa\u53c2\u6570out_prob\uff1a[num_frames,vocab_size]\uff0clog softmax\u4e4b\u540eCTC\u4e4b\u524d\u7684\u7f16\u7801\u5668\u8f93\u51fa // 1. Prepare libtorch required data, splice cached_feature_ and chunk_feats // The first dimension is for batchsize, which is 1. int num_frames = cached_feature_ . size () + chunk_feats . size (); const int feature_dim = chunk_feats [ 0 ]. size (); torch :: Tensor feats = torch :: zeros ({ 1 , num_frames , feature_dim }, torch :: kFloat ); ... }","title":"WeNet\u63a8\u65ad\u65f6\u6bcf\u6b21\u4e00\u4e2a\u6837\u672c"},{"location":"asr/wenet_runtime%E7%9F%A5%E8%AF%86%E7%82%B9/#wenetctcn-best","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 // wenet/wenet/transformer/decoder.py def forward ( self , memory : torch . Tensor , memory_mask : torch . Tensor , ys_in_pad : torch . Tensor , ys_in_lens : torch . Tensor , r_ys_in_pad : torch . Tensor , reverse_weight : float = 0.0 , ) -> Tuple [ torch . Tensor , torch . Tensor , torch . Tensor ] : \"\"\"Forward decoder. Args : memory : encoded memory , float32 ( batch , maxlen_in , feat ) memory_mask : encoder memory mask , ( batch , 1 , maxlen_in ) ys_in_pad : padded input token ids , int64 ( batch , maxlen_out ) ys_in_lens : input lengths of this batch ( batch ) r_ys_in_pad : padded input token ids , int64 ( batch , maxlen_out ), used for right to left decoder reverse_weight : used for right to left decoder Returns : ( tuple ) : tuple containing : x : decoded token score before softmax ( batch , maxlen_out , vocab_size ) if use_output_layer is True , r_x : x : decoded token score ( right to left decoder ) before softmax ( batch , maxlen_out , vocab_size ) if use_output_layer is True , olens : ( batch , ) \"\"\" ... // wenet/runtime/core/decoder/torch_asr_model.cc float TorchAsrModel :: ComputeAttentionScore ( const torch :: Tensor & prob , const std :: vector < int >& hyp , int eos ) { // \u5bf9hyp\u8868\u793a\u7684\u4e00\u6761\u89e3\u7801\u8def\u5f84\u8fdb\u884c\u6253\u5206 // \u5206\u6570\u4e3aAttention\u89e3\u7801\u5668\u8f93\u51fa\u7684\uff0c\u89e3\u7801\u8def\u5f84\u5bf9\u5e94\u7684log softmax\u6982\u7387\u4e4b\u548c // \u8f93\u5165\u53c2\u6570prob\uff1a[max_text_len,vocab_size]\uff0cAttention\u89e3\u7801\u5668\u8f93\u51fa\u5206\u6570 // \u8f93\u5165\u53c2\u6570hyp\uff1a[text_len,]\uff0cCTC\u89e3\u7801\u7ed3\u679c // \u8f93\u51fa\uff1aAttention\u89e3\u7801\u5668\u5bf9hyp\u8868\u793a\u7684\u89e3\u7801\u8def\u5f84\u7684\u6253\u5206 float score = 0.0f ; auto accessor = prob . accessor < float , 2 > (); for ( size_t j = 0 ; j < hyp . size (); ++ j ) { score += accessor [ j ][ hyp [ j ]]; } score += accessor [ hyp . size ()][ eos ]; return score ; } // wenet/runtime/core/decoder/torch_asr_model.cc void TorchAsrModel::AttentionRescoring ( const std :: vector < std :: vector < int >>& hyps , float reverse_weight , std :: vector < float >* rescoring_score ) { // \u5bf9CTC\u8f93\u51fa\u7684N-best\u89e3\u7801\u7ed3\u679c\u8fdb\u884c\u91cd\u6253\u5206 // \u8f93\u5165\u53c2\u6570hyps: [num_best,text_len]\uff0cCTC\u8f93\u51fa\u7684\u89e3\u7801\u7ed3\u679c\uff0c\u5b58\u50a8token id // \u8f93\u5165\u53c2\u6570reverse_weight\uff1ascaler\uff0c\u5982\u679c\u91c7\u7528\u53cc\u5411\u89e3\u7801\u5668\u624d\u6709\u6548\uff0c\u8868\u793a\u9006\u5411\u89e3\u7801\u5668\u6743\u91cd // \u8f93\u51fa\u53c2\u6570rescoring_score\uff1a[num_best,]\uff0c\u5bf9CTC\u8f93\u51faN-best\u7684\u6253\u5206 ... }","title":"WeNet\u5bf9CTC\u8f93\u51faN-best\u8fdb\u884c\u91cd\u6253\u5206"},{"location":"asr/wenet_runtime%E7%9F%A5%E8%AF%86%E7%82%B9/#wenet-runtime_1","text":"WeNet runtime\u4f7f\u7528 FeaturePipeline \u8ba1\u7b97\u6885\u5c14\u9891\u8c31\uff0c\u5e76\u5c06\u5176\u9001\u5165\u6a21\u578b\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u4e24\u4e2a\u7ebf\u7a0b\u6267\u884c FeaturePipeline \uff1a\u7ebf\u7a0bA\u8c03\u7528 AcceptWaveform() \u6dfb\u52a0\u539f\u59cb\u97f3\u9891\u6570\u636e\u5e76\u901a\u8fc7 set_input_finished() \u901a\u77e5\u8f93\u5165\u97f3\u9891\u7684\u7ed3\u675f\uff1b\u7ebf\u7a0bB\uff08\u89e3\u7801\u5668\u7ebf\u7a0b\uff09\u8c03\u7528 Read() \u6d88\u8d39\u58f0\u5b66\u7279\u5f81\u3002\u56e0\u6b64 BlockingQueue \u7528\u6765\u786e\u4fdd\u7c7b FeaturePipeline \u7684\u7ebf\u7a0b\u5b89\u5168\u3002 \u5f53\u961f\u5217 feature_queue_ \u4e2d\u6ca1\u6709\u58f0\u5b66\u7279\u5f81\u5e76\u4e14\u8f93\u5165\u5c1a\u672a\u7ed3\u675f\u65f6\uff0c Read() \u5c06\u4f1a\u963b\u585e\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 // wenet/runtime/core/frontend/feature_pipline.h class FeaturePipeline { public : explicit FeaturePipeline ( const FeaturePipelineConfig & config ); // The feature extraction is done in AcceptWaveform(). void AcceptWaveform ( const float * pcm , const int size ); void AcceptWaveform ( const int16_t * pcm , const int size ); ... // The caller should call this method when speech input is end. // Never call AcceptWaveform() after calling set_input_finished() ! void set_input_finished (); bool input_finished () const { return input_finished_ ; } ... // Read #num_frames frame features. // Return False if less then #num_frames features are read and the // input is finished. // Return True if #num_frames features are read. // This function is a blocking method when there is no feature // in feature_queue_ and the input is not finished. bool Read ( int num_frames , std :: vector < std :: vector < float >>* feats ); ... };","title":"WeNet runtime\u6570\u636e\u961f\u5217"},{"location":"asr/wenet_runtime%E7%9F%A5%E8%AF%86%E7%82%B9/#wenet_2","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 // wenet/runtime/core/frontend/feature_pipeline.cc bool FeaturePipeline::ReadOne ( std :: vector < float >* feat ) { if ( ! feature_queue_ . Empty ()) { // \u6700\u666e\u904d\u7684\u60c5\u5f62\uff0c\u6570\u636e\u961f\u5217\u4e0d\u4e3a\u7a7a\uff0c\u76f4\u63a5\u4ece\u961f\u5217\u4e2d\u53d6\u51fa\u4e00\u5e27\u58f0\u5b66\u7279\u5f81\u8fd4\u56de * feat = std :: move ( feature_queue_ . Pop ()); return true ; } else { // \u6570\u636e\u961f\u5217\u4e3a\u7a7a\uff0c\u52a0\u9501\u6302\u8d77\u672c\u7ebf\u7a0b\uff0c\u7b49\u5f85\u6570\u636e\u5b58\u5165\u961f\u5217 std :: unique_lock < std :: mutex > lock ( mutex_ ); while ( ! input_finished_ ) { // \u6b64\u65f6\u8f93\u5165\u5c1a\u672a\u7ed3\u675f\uff0c\u91ca\u653e\u4e92\u65a5\u9501\uff0c\u7b49\u5f85condition_variable\u901a\u77e5\u5e76\u5524\u9192\u672c\u7ebf\u7a0b // This will release the lock and wait for notify_one() // from AcceptWaveform() or set_input_finished() finish_condition_ . wait ( lock ); // \u672c\u7ebf\u7a0b\u88ab\u5524\u9192\uff0c\u67e5\u770b\u6b64\u65f6\u6570\u636e\u961f\u5217\u662f\u5426\u4e3a\u7a7a if ( ! feature_queue_ . Empty ()) { // \u4e0d\u4e3a\u7a7a\u5219\u4ece\u961f\u5217\u4e2d\u53d6\u51fa\u4e00\u5e27\u58f0\u5b66\u7279\u5f81\u5e76\u8fd4\u56de * feat = std :: move ( feature_queue_ . Pop ()); return true ; } } CHECK ( input_finished_ ); // \u539f\u59cb\u4ee3\u7801\u5982\u4e0b\uff1a // CHECK(feature_queue_.Empty()); // return false; // \u4e0a\u8ff0\u4ee3\u7801\u5728\u5982\u4e0b\u65f6\u5e8f\u65f6\u4f1a\u53d1\u751f\u95ee\u9898\uff1a // 1. \u8bfb\u7ebf\u7a0b\u5224\u65adfeature_queue_.Empty()\u4e3atrue\uff0c\u8fdb\u5165else\uff0c\u8bfb\u7ebf\u7a0b\u6302\u8d77 // 2. \u5199\u7ebf\u7a0b\u6267\u884cAcceptWaveform\u5e76\u8bbe\u7f6einput_finished_\u4e3atrue // 3. \u8bfb\u7ebf\u7a0b\u5f00\u59cb\u6267\u884celse\u90e8\u5206\uff0c\u6b64\u65f6input_finished_\u4e3atrue\uff0c\u56e0\u6b64\u4e0d\u4f1a\u6267\u884cwhile\u5faa\u73af\u4f53\uff0c // \u6b64\u65f6CHECK(feature_queue_.Empty())\u5931\u8d25 // \u4e5f\u5c31\u662f\u5199\u7ebf\u7a0b\u5199\u5165\u6700\u540e\u4e00\u5e27\uff0c\u5e76\u5c06input_finished_\u8bbe\u7f6e\u4e3atrue\uff0c\u6b64\u65f6\u961f\u5217\u5b9e\u9645\u8fd8\u6709\u6570\u636e\uff0c // \u4f46\u8bfb\u7ebf\u7a0b\u6839\u636einput_finished_\u5224\u65ad\u6b64\u65f6\u5df2\u7ecf\u7ed3\u675f\uff0c\u76f4\u63a5\u65e0\u6cd5\u8fdb\u5165while // \u56e0\u6b64\u4e0d\u80fdCHECK(feature_queue_.Empty())\uff0c\u5e76\u4e14double check\u6570\u636e\u961f\u5217\u662f\u5426\u4e3a\u7a7a // Double check queue.empty, see issue#893 for detailed discussions. // https://github.com/wenet-e2e/wenet/issues/893 if ( ! feature_queue_ . Empty ()) { * feat = std :: move ( feature_queue_ . Pop ()); return true ; } else { return false ; } } }","title":"WeNet\u6570\u636e\u961f\u5217\u5e76\u53d1\u903b\u8f91"},{"location":"asr/wenet_runtime%E7%9F%A5%E8%AF%86%E7%82%B9/#_5","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 struct DecodeOptions { // chunk_size\u4e3a\u7ecf\u8fc7\u4e0b\u91c7\u6837\u4e4b\u540e\u7684\u89e3\u7801\u5e27\u5e27\u6570\uff0c\u800c\u975e\u539f\u59cb\u97f3\u9891\u5e27 int chunk_size = 16 ; // \u5de6\u4fa7\u5168\u89c6\u91ce int num_left_chunks = -1 ; // final_score = rescoring_weight * rescoring_score + ctc_weight * ctc_score; // rescoring_score = left_to_right_score * (1 - reverse_weight) + // right_to_left_score * reverse_weight // ctc_score\u5728\u4e0d\u540c\u7684\u641c\u7d22\u65b9\u5f0f\u4e2d\u542b\u4e49\u4e0d\u540c\uff1a // CtcPrefixBeamSearch: ctc_score = sum(prefix) score + context score // CtcWfstBeamSearch: ctc_score = a max(viterbi) path score + context score // \u56e0\u6b64\u9700\u8981\u6839\u636e\u641c\u7d22\u65b9\u5f0f\u8bbe\u7f6ectc_weight float ctc_weight = 0.5 ; float rescoring_weight = 1.0 ; float reverse_weight = 0.0 ; CtcEndpointConfig ctc_endpoint_config ; CtcPrefixBeamSearchOptions ctc_prefix_search_opts ; CtcWfstBeamSearchOptions ctc_wfst_search_opts ; };","title":"\u89e3\u7801\u914d\u7f6e\u9879"},{"location":"asr/wenet_runtime%E7%9F%A5%E8%AF%86%E7%82%B9/#wenet_3","text":"1 2 3 4 5 6 7 8 9 10 11 class AsrDecoder { ... private : // \u8f93\u51fa\u8bcd\u8868 // output symbol table std :: shared_ptr < fst :: SymbolTable > symbol_table_ ; // \u7aef\u5230\u7aef\u58f0\u5b66\u6a21\u578b\u8bcd\u8868 // e2e unit symbol table std :: shared_ptr < fst :: SymbolTable > unit_table_ = nullptr ; ... };","title":"wenet\u8bcd\u8868"},{"location":"asr/wenet_runtime%E7%9F%A5%E8%AF%86%E7%82%B9/#wenetcontext-biasing","text":"\u5728ASR\u7684\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u5e38\u7528\u8bcd\u7684\u8bc6\u522b\u6548\u679c\u8f83\u597d\uff0c\u4f46\u5bf9\u4e8e\u4e00\u4e9b\u7279\u6b8a\u7684\u8bcd\uff0c\u8bc6\u522b\u7cbe\u5ea6\u53ef\u80fd\u4f1a\u964d\u4f4e\u3002\u4e0a\u4e0b\u6587\u504f\u5dee\uff08Context Biasing\uff09\u662f\u6307\u5728\u63a8\u7406\u8fc7\u7a0b\u4e2d\u5c06\u5148\u9a8c\u77e5\u8bc6\u6ce8\u5165ASR\uff0c\u4f8b\u5982\u7528\u6237\u559c\u6b22\u7684\u6b4c\u66f2\u3001\u8054\u7cfb\u4eba\u3001\u5e94\u7528\u7a0b\u5e8f\u6216\u4f4d\u7f6e\u3002\u4f20\u7edf\u7684ASR\u901a\u8fc7\u4ece\u504f\u7f6e\u77ed\u8bed\u5217\u8868\u4e2d\u6784\u5efa\u4e00\u4e2an-gram\u6709\u9650\u72b6\u6001\u8f6c\u5f55\u673a\uff08Finite State Transducer\uff0cFST\uff09\u6765\u8fdb\u884c\u4e0a\u4e0b\u6587\u504f\u7f6e\uff0c\u8be5\u504f\u7f6e\u77ed\u8bed\u5217\u8868\u5728\u89e3\u7801\u8fc7\u7a0b\u4e2d\u4e0e\u89e3\u7801\u56fe\u52a8\u6001\u7ec4\u5408\uff0c\u8fd9\u6709\u52a9\u4e8e\u5c06\u8bc6\u522b\u7ed3\u679c\u504f\u5411\u4e8e\u4e0a\u4e0b\u6587\u6709\u9650\u72b6\u6001\u8f6c\u5f55\u673a\u4e2d\u5305\u542b\u7684n-gram\uff0c\u4ece\u800c\u63d0\u9ad8\u7279\u5b9a\u573a\u666f\u4e2d\u7684\u8bc6\u522b\u51c6\u786e\u6027\u3002 \u65e0\u8bba\u662fCTC Prefix Beam Search\u8fd8\u662fCTC WFST Beam Search\u90fd\u53ef\u4ee5\u5f15\u5165\u4e0a\u4e0b\u6587\u504f\u7f6e\uff08context biasing\uff09\uff0c\u4ee5\u4fbf\u9002\u7528\u7279\u6b8a\u573a\u666f\uff1a 1 2 3 4 5 6 7 // wenet/runtime/core/decoder/asr_decoder.cc if ( nullptr == fst_ ) { searcher_ . reset ( new CtcPrefixBeamSearch ( opts . ctc_prefix_search_opts , resource -> context_graph )); } else { searcher_ . reset ( new CtcWfstBeamSearch ( * fst_ , opts . ctc_wfst_search_opts , resource -> context_graph )); \u6ce8\u610f\uff0c\u4e0a\u4e0b\u6587\u504f\u7f6e\u4e0d\u540c\u4e8e\u8bed\u8a00\u6a21\u578b\uff0c\u53ea\u4e0d\u8fc7\u504f\u7f6e\u77ed\u8bed\u5217\u8868\u548c\u8bed\u8a00\u6a21\u578b\u90fd\u662f\u7528\u6709\u9650\u72b6\u6001\u8f6c\u5f55\u673a\uff08FST\uff09\u5b9e\u73b0\uff0c\u8bed\u8a00\u6a21\u578b\u53ea\u9002\u7528\u4e8eCTC WFST Beam Search\u3002 wenet/context.md at main \u00b7 wenet-e2e/wenet \u00b7 GitHub","title":"wenet\u7684\u4e0a\u4e0b\u6587\u504f\u7f6e\uff08context biasing\uff09"},{"location":"asr/wenet_runtime%E7%9F%A5%E8%AF%86%E7%82%B9/#wenetwenetctc_prefix_beam_search","text":"\u4e3a\u4e86\u907f\u514d\u8f93\u51fa\u7684\u5355\u8bcd\u65f6\u95f4\u6233\u90fd\u9ecf\u8fde\u5728\u4e00\u8d77\uff0c\u5f15\u5165\u6700\u5c0f\u5355\u8bcd\u95f4\u9694\uff0c\u4e24\u4e2a\u8bcd\u65f6\u95f4\u6233\u4e4b\u95f4\u7684\u95f4\u9694\u81f3\u5c11\u5927\u4e8e\u8be5\u503c\uff0c\u9ed8\u8ba4100ms\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 // wenet/runtime/core/decoder/asr_decoder.h const int time_stamp_gap_ = 100 ; // timestamp gap between words in a sentence // wenet/runtime/core/decoder/asr_decoder.cc // \u65f6\u95f4\u6233\u4ec5\u5728\u8f93\u5165\u5b8c\u6bd5\uff0c\u51c6\u5907\u8f93\u51fa\u6700\u7ec8\u7ed3\u679c\u65f6\u4ea7\u751f // \u91c7\u7528\u58f0\u5b66\u6a21\u578b\u89e3\u7801\u65f6\u4ea7\u751f\u7684\u65f6\u95f4\u6233\uff0c\u540c\u65f6\u6b64\u5904\u4e5f\u9700\u8981e2e\u6a21\u578b\u7684\u8bcd\u8868 // TimeStamp is only supported in final result // TimeStamp of the output of CtcWfstBeamSearch may be inaccurate due to // various FST operations when building the decoding graph. So here we use // time stamp of the input(e2e model unit), which is more accurate, and it // requires the symbol table of the e2e model used in training. if ( unit_table_ != nullptr && finish ) { const std :: vector < int >& input = inputs [ i ]; const std :: vector < int >& time_stamp = times [ i ]; CHECK_EQ ( input . size (), time_stamp . size ()); for ( size_t j = 0 ; j < input . size (); j ++ ) { std :: string word = unit_table_ -> Find ( input [ j ]); int start = time_stamp [ j ] * frame_shift_in_ms () - time_stamp_gap_ > 0 ? time_stamp [ j ] * frame_shift_in_ms () - time_stamp_gap_ : 0 ; if ( j > 0 ) { // \u5982\u679c\u672c\u65f6\u523b\u5355\u8bcd\u4e0e\u4e0a\u4e00\u4e2a\u65f6\u523b\u5355\u8bcd\u7684\u65f6\u95f4\u95f4\u9694\u5c0f\u4e8e\u201c\u6700\u5c0f\u5355\u8bcd\u95f4\u9694\u201d\uff08time_stamp_gap_\uff09\uff0c // \u5219\u8be5\u5355\u8bcd\u7684\u5f00\u59cb\u65f6\u523bstart\u53d6\u4e0a\u4e00\u4e2a\u5355\u8bcd\u548c\u672c\u65f6\u523b\u5355\u8bcd\u7684\u4e2d\u95f4\u65f6\u523b start = ( time_stamp [ j ] - time_stamp [ j - 1 ]) * frame_shift_in_ms () < time_stamp_gap_ ? ( time_stamp [ j - 1 ] + time_stamp [ j ]) / 2 * frame_shift_in_ms () : start ; } int end = time_stamp [ j ] * frame_shift_in_ms (); if ( j < input . size () - 1 ) { // \u5982\u679c\u672c\u65f6\u523b\u5355\u8bcd\u4e0e\u4e0b\u4e00\u65f6\u523b\u5355\u8bcd\u7684\u65f6\u95f4\u95f4\u9694\u5c0f\u4e8e\u201c\u6700\u5c0f\u5355\u8bcd\u95f4\u9694\u201d\uff08time_stamp_gap_\uff09\uff0c // \u5219\u8be5\u5355\u8bcd\u7684\u7ed3\u675f\u65f6\u523bend\u53d6\u4e0b\u4e00\u4e2a\u5355\u8bcd\u548c\u672c\u65f6\u523b\u5355\u8bcd\u7684\u4e2d\u95f4\u65f6\u523b end = ( time_stamp [ j + 1 ] - time_stamp [ j ]) * frame_shift_in_ms () < time_stamp_gap_ ? ( time_stamp [ j + 1 ] + time_stamp [ j ]) / 2 * frame_shift_in_ms () : end ; } WordPiece word_piece ( word , offset + start , offset + end ); path . word_pieces . emplace_back ( word_piece ); } }","title":"WeNet\u65f6\u95f4\u6233\u7684\u540e\u5904\u7406\u7b56\u7565\uff08\u201dwenet\u7684ctc_prefix_beam_search\u201c\u8865\u5145\uff0c\u5f85\u5408\u5e76\uff09"},{"location":"asr/wenet_runtime%E7%9F%A5%E8%AF%86%E7%82%B9/#asrmodelasrdecoder","text":"AsrModel \u7ba1\u7406\u58f0\u5b66\u6a21\u578b\u3001\u8bed\u8a00\u6a21\u578b\u7684\u8d44\u6e90\u3001\u914d\u7f6e\u7b49\uff0c\u8c03\u7528\u7f16\u89e3\u7801\u5668\u5b9e\u73b0\u63a8\u7406\u3002 AsrDecoder \u901a\u8fc7 FeaturePipeline \u8f93\u5165\u6570\u636e\uff0c\u8c03\u7528 AsrModel \u4ea7\u751f\u89e3\u7801\u7ed3\u679c\u3002\u8ba1\u7b97\u63a8\u7406\u8017\u65f6\uff0c\u4ea7\u751f\u6700\u7ec8\u7684\u65f6\u95f4\u6233\uff0c\u540e\u5904\u7406\u89e3\u7801\u7ed3\u679c\u7b49\u3002 CtcPrefixBeamSearch/CtcPrefixBeamSearch -> TorchAsrModel/OnnxAsrModel ( AsrModel \u7684\u5b50\u7c7b)-> AsrDecoder","title":"AsrModel\u548cAsrDecoder\u7684\u8c03\u7528\u5173\u7cfb"},{"location":"asr/wenet_runtime%E7%9F%A5%E8%AF%86%E7%82%B9/#wenet_4","text":"\u65e0\u8bed\u8a00\u6a21\u578b\u7684\u89e3\u7801\u3002\u8bad\u7ec3\u65f6\uff0c _ \u8868\u793a\u7a7a\u683c\uff0c\u56e0\u6b64\u76f4\u63a5\u62fc\u63a5\u8f93\u51fa\u5355\u5143\u5e76\u5c06 _ \u66ff\u6362\u4e3a\u7a7a\u683c\uff0c\u7b49\u540c\u4e8e\uff1a detokenized = ''.join(pieces).replace('_', ' ') \u3002 \u6709\u8bed\u8a00\u6a21\u578b\u7684\u89e3\u7801\u3002\u6b64\u65f6\u8f93\u51fa\u4e2d\u6ca1\u6709 _ \uff0c\u8f93\u51fa\u5355\u4f4d\u4e3a\u5b57\uff0c\u56e0\u6b64\u7528\u7a7a\u683c\u62fc\u63a5\u8f93\u51fa\u5355\u5143\uff0c\u7b49\u540c\u4e8e detokenized = ' '.join(pieces) \u3002 \u6700\u540e\uff0cWeNet\u901a\u8fc7\u540e\u5904\u7406\u7b56\u7565 PostProcessor \u7edf\u4e00\u53bb\u9664\u4e0d\u9700\u8981\u7684\u7a7a\u683c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // wenet/runtime/core/decoder/asr_decoder.cc for ( size_t j = 0 ; j < hypothesis . size (); j ++ ) { std :: string word = symbol_table_ -> Find ( hypothesis [ j ]); // A detailed explanation of this if-else branch can be found in // https://github.com/wenet-e2e/wenet/issues/583#issuecomment-907994058 if ( searcher_ -> Type () == kWfstBeamSearch ) { path . sentence += ( ' ' + word ); } else { path . sentence += ( word ); } } ... // \u540e\u5904\u7406\u7b56\u7565\uff0c\u76ee\u524d\u4e3b\u8981\u529f\u80fd\u662f\u53bb\u9664\u4e0d\u9700\u8981\u7684\u7a7a\u683c\u3002 // example1: \u201c\u6211 \u7231 \u4f60\u201d==> \u201c\u6211\u7231\u4f60\u201d // example2: \u201c i love wenet\u201d ==> \u201ci love wenet\u201d // example3: \u201c\u6211 \u7231 wenet very much\u201d ==> \u201c\u6211\u7231wenet very much\u201d // example4: \u201caa \u00e4\u00e4 xx yy\u201d ==> \u201caa \u00e4\u00e4 xx yy\u201d if ( post_processor_ != nullptr ) { path . sentence = post_processor_ -> Process ( path . sentence , finish ); } Runtime: words containing non-ASCII characters are concatenated without space \u00b7 Issue #583 \u00b7 wenet-e2e/wenet \u00b7 GitHub","title":"WeNet\u5bf9\u7a7a\u683c\u7684\u5904\u7406"},{"location":"asr/wenet%E4%B8%ADendpoint%E6%A3%80%E6%B5%8B/","text":"wenet\u4e2dendpoint\u68c0\u6d4b \u65ad\u70b9\uff08Endpoint\uff09\u68c0\u6d4b\u7684\u4efb\u52a1\u662f\u786e\u5b9a\u7528\u6237\u4f55\u65f6\u7ed3\u675f\u8bb2\u8bdd\uff0c\u8fd9\u5bf9\u4e8e\u5b9e\u65f6\u957f\u8bed\u97f3\u8f6c\u5199\u548c\u8bed\u97f3\u641c\u7d22\u7b49\u4ea4\u4e92\u5f0f\u8bed\u97f3\u5e94\u7528\u5341\u5206\u91cd\u8981\u3002 EndPoint\u539f\u7406 Endpoint\u68c0\u6d4b\u7684\u5b9e\u73b0\u4e3b\u8981\u6709\u4e24\u79cd\u601d\u8def\uff0c\u4e00\u662f\u7aef\u5230\u7aef\u76f4\u63a5\u5728\u58f0\u5b66\u6a21\u578b\u4e2d\u5bf9Endpoint\u8fdb\u884c\u5efa\u6a21\uff1b\u4e8c\u662f\u5236\u5b9a\u89c4\u5219\uff0c\u68c0\u6d4b\u5230\u6301\u7eed\u9759\u97f3\u5219\u8ba4\u4e3a\u662fEndpoint\u3002 kaldi-Endpoint\u539f\u7406 kaldi\u901a\u8fc7\u89c4\u5219\u68c0\u6d4bEndpoint\uff0c\u6ee1\u8db3\u4ee5\u4e0b5\u6761\u4e2d\u4efb\u610f\u4e00\u6761\uff0c\u5219\u8ba4\u4e3a\u662f\u68c0\u6d4b\u5230\u4e86Endpoint\uff1a \u8bc6\u522b\u51fa\u6587\u5b57\u4e4b\u524d\uff0c\u68c0\u6d4b\u52305\u79d2\u7684\u9759\u97f3 \u8bc6\u522b\u51fa\u6587\u5b57\u4e4b\u540e\uff0c\u68c0\u6d4b\u52302\u79d2\u7684\u9759\u97f3 \u89e3\u7801\u51fa\u6982\u7387\u8f83\u5c0f\u7684final state\uff0c\u4e14\u68c0\u6d4b\u52301\u79d2\u7684\u9759\u97f3 \u89e3\u7801\u51fa\u6982\u7387\u8f83\u5927\u7684final state\uff0c\u4e14\u68c0\u6d4b\u52300.5\u79d2\u7684\u9759\u97f3 \u5df2\u7ecf\u89e3\u7801\u4e8620\u79d2\u7684\u97f3\u9891 WeNet-Endpoint\u539f\u7406 WeNet\u57fa\u4e8eCTC\u7ed3\u6784\u5b9e\u73b0\u4e86Endpoint\u68c0\u6d4b\uff0c\u8fd9\u79cd\u5b9e\u73b0\u6613\u4e8e\u63a7\u5236Endpoint\u8d85\u53c2\u6570\uff0c\u5e76\u4e14\u4e0d\u9700\u8981\u8bad\u7ec3\u989d\u5916\u7684\u6a21\u578b\u3002WeNet\u5c06\u8fde\u7eed\u7684\u957fblank\u6807\u7b7e\u770b\u4f5c\u975e\u8bed\u97f3\u533a\u57df\uff0c\u975e\u8bed\u97f3\u533a\u57df\u6ee1\u8db3\u4e00\u5b9a\u6761\u4ef6\uff0c\u5373\u53ef\u8ba4\u4e3a\u68c0\u6d4b\u5230Endpoint\u3002WeNet\u4e2d\u6ee1\u8db3\u4ee5\u4e0b3\u6761\u89c4\u5219\u4e2d\u4efb\u610f\u4e00\u6761\uff0c\u5219\u8ba4\u4e3a\u68c0\u6d4b\u5230\u4e86Endpoint\uff1a \u8bc6\u522b\u51fa\u6587\u5b57\u4e4b\u524d\uff0c\u68c0\u6d4b\u52305\u79d2\u7684\u9759\u97f3 \u8bc6\u522b\u51fa\u6587\u5b57\u4e4b\u540e\uff0c\u68c0\u6d4b\u52301\u79d2\u7684\u9759\u97f3 \u5df2\u7ecf\u89e3\u7801\u4e8620\u79d2\u7684\u97f3\u9891 WeNet\u4e2dEndpoint\u68c0\u6d4b\u7684\u5b9e\u73b0 \u4e3b\u8981\u5b9e\u73b0\u4f4d\u4e8e wenet/runtime/core/decoder/ctc_endpoint.h \u548c wenet/runtime/core/decoder/ctc_endpoint.cc \u3002 \u53c2\u6570\u8bf4\u660e 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 // wenet/runtime/core/decoder/ctc_endpoint.h struct CtcEndpointRule { // `must_decoded_sth`\u7528\u6765\u533a\u5206\u8bc6\u522b\u51fa\u6587\u5b57\u4e4b\u524d/\u4e4b\u540e\u4e24\u4e2a\u573a\u666f // `must_decoded_sth`==false\u8868\u793a\u9002\u7528\u4e8e\u8bc6\u522b\u51fa\u6587\u5b57\u4e4b\u524d bool must_decoded_sth ; // \u6700\u5c0f\u9759\u97f3\u6bb5\u957f\u5ea6\uff0c\u5355\u4f4dms int min_trailing_silence ; // \u6700\u5c0f\u53e5\u5b50\u957f\u5ea6\uff0c\u5355\u4f4dms int min_utterance_length ; ... }; struct CtcEndpointConfig { /// \u5728Endpoint\u68c0\u6d4b\u4e2d\uff0c\u5c06\u89e3\u7801\u4e2d\u7684blank\u7edf\u4e00\u8ba4\u4e3a\u662f\u9759\u97f3silence int blank = 0 ; // blank id float blank_threshold = 0.8 ; // blank threshold to be silence /// \u53ef\u4ee5\u624b\u52a8\u6dfb\u52a0\u66f4\u591a\u89c4\u5219\uff0c\u6216\u8005\u4fee\u6539\u89c4\u5219\u4e2d\u7684\u65f6\u95f4 /// \u5982\u679c\u5e0c\u671b\u53d6\u6d88\u67d0\u4e00\u6761\u89c4\u5219\uff0c\u76f4\u63a5\u5c06CtcEndpointRule\u6784\u9020\u51fd\u6570\u4e2d\u7684`min_trailing_silence` /// \u8bbe\u7f6e\u4e3a\u975e\u5e38\u5927\u7684\u503c\u5373\u53ef /// \u89c4\u52191\uff1a\u8bc6\u522b\u51fa\u6587\u5b57\u4e4b\u524d\uff0c\u68c0\u6d4b\u52305\u79d2\u7684\u9759\u97f3 CtcEndpointRule rule1 ; /// \u89c4\u52192\uff1a\u8bc6\u522b\u51fa\u6587\u5b57\u4e4b\u540e\uff0c\u68c0\u6d4b\u52301\u79d2\u7684\u9759\u97f3 CtcEndpointRule rule2 ; /// \u89c4\u52193\uff1a\u5df2\u7ecf\u89e3\u7801\u4e8620\u79d2\u7684\u97f3\u9891 CtcEndpointRule rule3 ; CtcEndpointConfig () : rule1 ( false , 5000 , 0 ), rule2 ( true , 1000 , 0 ), rule3 ( false , 0 , 20000 ) {} }; \u5b9e\u73b0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 static bool RuleActivated ( const CtcEndpointRule & rule , const std :: string & rule_name , bool decoded_sth , int trailing_silence , int utterance_length ) { // `decoded_sth`\u8868\u793a\u662f\u5426\u89e3\u7801\u51fa\u6587\u5b57\uff0c`decoded_sth`==true\u8868\u793a\u5df2\u7ecf\u89e3\u7801\u51fa\u6587\u5b57 // \u901a\u8fc7`(decoded_sth || !rule.must_decoded_sth)`\u6307\u793a // \u5f53\u524d\u89e3\u7801\u72b6\u6001`decoded_sth`\u662f\u5426\u9002\u7528\u4e8e\u8be5\u89c4\u5219 bool ans = ( decoded_sth || ! rule . must_decoded_sth ) && trailing_silence >= rule . min_trailing_silence && utterance_length >= rule . min_utterance_length ; ... return ans ; } bool CtcEndpoint::IsEndpoint ( const torch :: Tensor & ctc_log_probs , bool decoded_something ) { // \u904d\u5386\u6bcf\u4e00\u4e2a\u65f6\u95f4\u6b65 for ( int t = 0 ; t < ctc_log_probs . size ( 0 ); ++ t ) { torch :: Tensor logp_t = ctc_log_probs [ t ]; // \u83b7\u53d6\u5f53\u524d\u65f6\u95f4\u6b65\u7684blank\u6807\u7b7e\u6982\u7387 float blank_prob = expf ( logp_t [ config_ . blank ]. item < float > ()); // \u89e3\u7801\u5e27\u6570\u52a0\u4e00 num_frames_decoded_ ++ ; // \u5224\u65adblank\u6807\u7b7e\u7684\u6982\u7387\u662f\u5426\u5927\u4e8e\u9608\u503c\uff0c\u9ed8\u8ba40.8 if ( blank_prob > config_ . blank_threshold ) { // \u53ef\u4ee5\u8ba4\u5b9a\u4e3aEndpoint\u4e2d\u6240\u8c13\u7684\u201c\u9759\u97f3\u5e27\u201d\uff0c\u5219\u5c3e\u90e8blank\u6807\u7b7e\u7684\u5e27\u6570\u52a0\u4e00 num_frames_trailing_blank_ ++ ; } else { // \u4e0d\u662f\u6240\u8c13\u7684\u201c\u9759\u97f3\u5e27\u201d\uff0c\u5c3e\u90e8blank\u6807\u7b7e\u7684\u5e27\u6570\u7f6e0 num_frames_trailing_blank_ = 0 ; } } ... if ( RuleActivated ( config_ . rule1 , \"rule1\" , decoded_something , trailing_silence , utterance_length )) return true ; ... return false ; } WeNet\u5b9e\u65f6\u957f\u8bed\u97f3\u8f6c\u5199 \u5927\u591a\u6570\u7aef\u5230\u7aef\u8bed\u97f3\u8bc6\u522b\u90fd\u5047\u8bbe\u8f93\u5165\u97f3\u9891\u5df2\u7ecf\u88ab\u9002\u5f53\u5730\u5207\u5206\u4e3a\u77ed\u97f3\u9891\uff0c\u8be5\u5047\u8bbe\u4e0d\u9002\u7528\u4e8e\u957f\u8bed\u97f3\u8f6c\u5199\u3002\u4f7f\u7528Endpoint\u68c0\u6d4b\uff0c\u5728\u8fdb\u884c\u5b9e\u65f6\u957f\u8bed\u97f3\u8f6c\u5199\u65f6\uff0c\u68c0\u6d4b\u5230Endpoint\u65f6\u5c31\u53ef\u4ee5\u5bf9\u5f53\u524d\u5019\u9009\u7ed3\u679c\u8fdb\u884c\u91cd\u6253\u5206\uff0c\u5e76\u91cd\u7f6e\u89e3\u7801\u72b6\u6001\u3002\u7136\u540e\u7ee7\u7eed\u8f6c\u5199\u540e\u7eed\u5185\u5bb9\uff0c\u91cd\u590d\u4ee5\u4e0a\u6b65\u9aa4\u3002 WeNet\u4f7f\u7528\u5b9e\u65f6\u957f\u8bed\u97f3\u8f6c\u5199\uff0c\u53ea\u9700\u8981\u5728\u542f\u52a8\u5ba2\u6237\u7aef\u7684\u65f6\u5019\uff0c\u52a0\u4e0a\u53c2\u6570 --continuous_decoding=true \u5373\u53ef\u3002 WeNet \u66f4\u65b0\uff1a\u652f\u6301 Endpoint \u68c0\u6d4b kaldi-endpoint End-to-End Automatic Speech Recognition Integrated with CTC-Based Voice Activity Detection","title":"wenet\u4e2dendpoint\u68c0\u6d4b"},{"location":"asr/wenet%E4%B8%ADendpoint%E6%A3%80%E6%B5%8B/#wenetendpoint","text":"\u65ad\u70b9\uff08Endpoint\uff09\u68c0\u6d4b\u7684\u4efb\u52a1\u662f\u786e\u5b9a\u7528\u6237\u4f55\u65f6\u7ed3\u675f\u8bb2\u8bdd\uff0c\u8fd9\u5bf9\u4e8e\u5b9e\u65f6\u957f\u8bed\u97f3\u8f6c\u5199\u548c\u8bed\u97f3\u641c\u7d22\u7b49\u4ea4\u4e92\u5f0f\u8bed\u97f3\u5e94\u7528\u5341\u5206\u91cd\u8981\u3002","title":"wenet\u4e2dendpoint\u68c0\u6d4b"},{"location":"asr/wenet%E4%B8%ADendpoint%E6%A3%80%E6%B5%8B/#endpoint","text":"Endpoint\u68c0\u6d4b\u7684\u5b9e\u73b0\u4e3b\u8981\u6709\u4e24\u79cd\u601d\u8def\uff0c\u4e00\u662f\u7aef\u5230\u7aef\u76f4\u63a5\u5728\u58f0\u5b66\u6a21\u578b\u4e2d\u5bf9Endpoint\u8fdb\u884c\u5efa\u6a21\uff1b\u4e8c\u662f\u5236\u5b9a\u89c4\u5219\uff0c\u68c0\u6d4b\u5230\u6301\u7eed\u9759\u97f3\u5219\u8ba4\u4e3a\u662fEndpoint\u3002","title":"EndPoint\u539f\u7406"},{"location":"asr/wenet%E4%B8%ADendpoint%E6%A3%80%E6%B5%8B/#kaldi-endpoint","text":"kaldi\u901a\u8fc7\u89c4\u5219\u68c0\u6d4bEndpoint\uff0c\u6ee1\u8db3\u4ee5\u4e0b5\u6761\u4e2d\u4efb\u610f\u4e00\u6761\uff0c\u5219\u8ba4\u4e3a\u662f\u68c0\u6d4b\u5230\u4e86Endpoint\uff1a \u8bc6\u522b\u51fa\u6587\u5b57\u4e4b\u524d\uff0c\u68c0\u6d4b\u52305\u79d2\u7684\u9759\u97f3 \u8bc6\u522b\u51fa\u6587\u5b57\u4e4b\u540e\uff0c\u68c0\u6d4b\u52302\u79d2\u7684\u9759\u97f3 \u89e3\u7801\u51fa\u6982\u7387\u8f83\u5c0f\u7684final state\uff0c\u4e14\u68c0\u6d4b\u52301\u79d2\u7684\u9759\u97f3 \u89e3\u7801\u51fa\u6982\u7387\u8f83\u5927\u7684final state\uff0c\u4e14\u68c0\u6d4b\u52300.5\u79d2\u7684\u9759\u97f3 \u5df2\u7ecf\u89e3\u7801\u4e8620\u79d2\u7684\u97f3\u9891","title":"kaldi-Endpoint\u539f\u7406"},{"location":"asr/wenet%E4%B8%ADendpoint%E6%A3%80%E6%B5%8B/#wenet-endpoint","text":"WeNet\u57fa\u4e8eCTC\u7ed3\u6784\u5b9e\u73b0\u4e86Endpoint\u68c0\u6d4b\uff0c\u8fd9\u79cd\u5b9e\u73b0\u6613\u4e8e\u63a7\u5236Endpoint\u8d85\u53c2\u6570\uff0c\u5e76\u4e14\u4e0d\u9700\u8981\u8bad\u7ec3\u989d\u5916\u7684\u6a21\u578b\u3002WeNet\u5c06\u8fde\u7eed\u7684\u957fblank\u6807\u7b7e\u770b\u4f5c\u975e\u8bed\u97f3\u533a\u57df\uff0c\u975e\u8bed\u97f3\u533a\u57df\u6ee1\u8db3\u4e00\u5b9a\u6761\u4ef6\uff0c\u5373\u53ef\u8ba4\u4e3a\u68c0\u6d4b\u5230Endpoint\u3002WeNet\u4e2d\u6ee1\u8db3\u4ee5\u4e0b3\u6761\u89c4\u5219\u4e2d\u4efb\u610f\u4e00\u6761\uff0c\u5219\u8ba4\u4e3a\u68c0\u6d4b\u5230\u4e86Endpoint\uff1a \u8bc6\u522b\u51fa\u6587\u5b57\u4e4b\u524d\uff0c\u68c0\u6d4b\u52305\u79d2\u7684\u9759\u97f3 \u8bc6\u522b\u51fa\u6587\u5b57\u4e4b\u540e\uff0c\u68c0\u6d4b\u52301\u79d2\u7684\u9759\u97f3 \u5df2\u7ecf\u89e3\u7801\u4e8620\u79d2\u7684\u97f3\u9891","title":"WeNet-Endpoint\u539f\u7406"},{"location":"asr/wenet%E4%B8%ADendpoint%E6%A3%80%E6%B5%8B/#wenetendpoint_1","text":"\u4e3b\u8981\u5b9e\u73b0\u4f4d\u4e8e wenet/runtime/core/decoder/ctc_endpoint.h \u548c wenet/runtime/core/decoder/ctc_endpoint.cc \u3002","title":"WeNet\u4e2dEndpoint\u68c0\u6d4b\u7684\u5b9e\u73b0"},{"location":"asr/wenet%E4%B8%ADendpoint%E6%A3%80%E6%B5%8B/#_1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 // wenet/runtime/core/decoder/ctc_endpoint.h struct CtcEndpointRule { // `must_decoded_sth`\u7528\u6765\u533a\u5206\u8bc6\u522b\u51fa\u6587\u5b57\u4e4b\u524d/\u4e4b\u540e\u4e24\u4e2a\u573a\u666f // `must_decoded_sth`==false\u8868\u793a\u9002\u7528\u4e8e\u8bc6\u522b\u51fa\u6587\u5b57\u4e4b\u524d bool must_decoded_sth ; // \u6700\u5c0f\u9759\u97f3\u6bb5\u957f\u5ea6\uff0c\u5355\u4f4dms int min_trailing_silence ; // \u6700\u5c0f\u53e5\u5b50\u957f\u5ea6\uff0c\u5355\u4f4dms int min_utterance_length ; ... }; struct CtcEndpointConfig { /// \u5728Endpoint\u68c0\u6d4b\u4e2d\uff0c\u5c06\u89e3\u7801\u4e2d\u7684blank\u7edf\u4e00\u8ba4\u4e3a\u662f\u9759\u97f3silence int blank = 0 ; // blank id float blank_threshold = 0.8 ; // blank threshold to be silence /// \u53ef\u4ee5\u624b\u52a8\u6dfb\u52a0\u66f4\u591a\u89c4\u5219\uff0c\u6216\u8005\u4fee\u6539\u89c4\u5219\u4e2d\u7684\u65f6\u95f4 /// \u5982\u679c\u5e0c\u671b\u53d6\u6d88\u67d0\u4e00\u6761\u89c4\u5219\uff0c\u76f4\u63a5\u5c06CtcEndpointRule\u6784\u9020\u51fd\u6570\u4e2d\u7684`min_trailing_silence` /// \u8bbe\u7f6e\u4e3a\u975e\u5e38\u5927\u7684\u503c\u5373\u53ef /// \u89c4\u52191\uff1a\u8bc6\u522b\u51fa\u6587\u5b57\u4e4b\u524d\uff0c\u68c0\u6d4b\u52305\u79d2\u7684\u9759\u97f3 CtcEndpointRule rule1 ; /// \u89c4\u52192\uff1a\u8bc6\u522b\u51fa\u6587\u5b57\u4e4b\u540e\uff0c\u68c0\u6d4b\u52301\u79d2\u7684\u9759\u97f3 CtcEndpointRule rule2 ; /// \u89c4\u52193\uff1a\u5df2\u7ecf\u89e3\u7801\u4e8620\u79d2\u7684\u97f3\u9891 CtcEndpointRule rule3 ; CtcEndpointConfig () : rule1 ( false , 5000 , 0 ), rule2 ( true , 1000 , 0 ), rule3 ( false , 0 , 20000 ) {} };","title":"\u53c2\u6570\u8bf4\u660e"},{"location":"asr/wenet%E4%B8%ADendpoint%E6%A3%80%E6%B5%8B/#_2","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 static bool RuleActivated ( const CtcEndpointRule & rule , const std :: string & rule_name , bool decoded_sth , int trailing_silence , int utterance_length ) { // `decoded_sth`\u8868\u793a\u662f\u5426\u89e3\u7801\u51fa\u6587\u5b57\uff0c`decoded_sth`==true\u8868\u793a\u5df2\u7ecf\u89e3\u7801\u51fa\u6587\u5b57 // \u901a\u8fc7`(decoded_sth || !rule.must_decoded_sth)`\u6307\u793a // \u5f53\u524d\u89e3\u7801\u72b6\u6001`decoded_sth`\u662f\u5426\u9002\u7528\u4e8e\u8be5\u89c4\u5219 bool ans = ( decoded_sth || ! rule . must_decoded_sth ) && trailing_silence >= rule . min_trailing_silence && utterance_length >= rule . min_utterance_length ; ... return ans ; } bool CtcEndpoint::IsEndpoint ( const torch :: Tensor & ctc_log_probs , bool decoded_something ) { // \u904d\u5386\u6bcf\u4e00\u4e2a\u65f6\u95f4\u6b65 for ( int t = 0 ; t < ctc_log_probs . size ( 0 ); ++ t ) { torch :: Tensor logp_t = ctc_log_probs [ t ]; // \u83b7\u53d6\u5f53\u524d\u65f6\u95f4\u6b65\u7684blank\u6807\u7b7e\u6982\u7387 float blank_prob = expf ( logp_t [ config_ . blank ]. item < float > ()); // \u89e3\u7801\u5e27\u6570\u52a0\u4e00 num_frames_decoded_ ++ ; // \u5224\u65adblank\u6807\u7b7e\u7684\u6982\u7387\u662f\u5426\u5927\u4e8e\u9608\u503c\uff0c\u9ed8\u8ba40.8 if ( blank_prob > config_ . blank_threshold ) { // \u53ef\u4ee5\u8ba4\u5b9a\u4e3aEndpoint\u4e2d\u6240\u8c13\u7684\u201c\u9759\u97f3\u5e27\u201d\uff0c\u5219\u5c3e\u90e8blank\u6807\u7b7e\u7684\u5e27\u6570\u52a0\u4e00 num_frames_trailing_blank_ ++ ; } else { // \u4e0d\u662f\u6240\u8c13\u7684\u201c\u9759\u97f3\u5e27\u201d\uff0c\u5c3e\u90e8blank\u6807\u7b7e\u7684\u5e27\u6570\u7f6e0 num_frames_trailing_blank_ = 0 ; } } ... if ( RuleActivated ( config_ . rule1 , \"rule1\" , decoded_something , trailing_silence , utterance_length )) return true ; ... return false ; }","title":"\u5b9e\u73b0"},{"location":"asr/wenet%E4%B8%ADendpoint%E6%A3%80%E6%B5%8B/#wenet","text":"\u5927\u591a\u6570\u7aef\u5230\u7aef\u8bed\u97f3\u8bc6\u522b\u90fd\u5047\u8bbe\u8f93\u5165\u97f3\u9891\u5df2\u7ecf\u88ab\u9002\u5f53\u5730\u5207\u5206\u4e3a\u77ed\u97f3\u9891\uff0c\u8be5\u5047\u8bbe\u4e0d\u9002\u7528\u4e8e\u957f\u8bed\u97f3\u8f6c\u5199\u3002\u4f7f\u7528Endpoint\u68c0\u6d4b\uff0c\u5728\u8fdb\u884c\u5b9e\u65f6\u957f\u8bed\u97f3\u8f6c\u5199\u65f6\uff0c\u68c0\u6d4b\u5230Endpoint\u65f6\u5c31\u53ef\u4ee5\u5bf9\u5f53\u524d\u5019\u9009\u7ed3\u679c\u8fdb\u884c\u91cd\u6253\u5206\uff0c\u5e76\u91cd\u7f6e\u89e3\u7801\u72b6\u6001\u3002\u7136\u540e\u7ee7\u7eed\u8f6c\u5199\u540e\u7eed\u5185\u5bb9\uff0c\u91cd\u590d\u4ee5\u4e0a\u6b65\u9aa4\u3002 WeNet\u4f7f\u7528\u5b9e\u65f6\u957f\u8bed\u97f3\u8f6c\u5199\uff0c\u53ea\u9700\u8981\u5728\u542f\u52a8\u5ba2\u6237\u7aef\u7684\u65f6\u5019\uff0c\u52a0\u4e0a\u53c2\u6570 --continuous_decoding=true \u5373\u53ef\u3002 WeNet \u66f4\u65b0\uff1a\u652f\u6301 Endpoint \u68c0\u6d4b kaldi-endpoint End-to-End Automatic Speech Recognition Integrated with CTC-Based Voice Activity Detection","title":"WeNet\u5b9e\u65f6\u957f\u8bed\u97f3\u8f6c\u5199"},{"location":"asr/wenet%E5%AF%B9onnx%E7%9A%84%E6%94%AF%E6%8C%81/","text":"wenet\u5bf9onnx\u7684\u652f\u6301 Pytorch\u8f6cONNX Pytorch\u8f6cONNX\u5b9e\u9645\u4e0a\u662f\u5c06\u6a21\u578b\u7684\u6bcf\u4e00\u4e2aop\u8f6c\u5316\u4e3aONNX\u5b9a\u4e49\u7684\u67d0\u4e00\u4e2a\u7b97\u5b50\uff0c\u6bd4\u5982\u5bf9\u4e8ePytorch\u4e2d\u7684 nn.Upsample() \u548c F.interpolate() \uff0c\u5728\u8f6c\u6362\u4e3aONNX\u540e\u6700\u7ec8\u90fd\u4f1a\u6210\u4e3aONNX\u7684 Resize \u7b97\u5b50\u3002\u901a\u8fc7\u4fee\u6539\u7ee7\u627f\u81ea torch.autograd.Function \u7b97\u5b50\u7684 symbolic \u65b9\u6cd5\uff0c\u53ef\u4ee5\u6539\u53d8\u8be5\u7b97\u5b50\u6620\u5c04\u5230ONNX\u7b97\u5b50\u7684\u884c\u4e3a\u3002 \u6a21\u578b\u90e8\u7f72\u5165\u95e8\u6559\u7a0b\uff08\u4e8c\uff09\uff1a\u89e3\u51b3\u6a21\u578b\u90e8\u7f72\u4e2d\u7684\u96be\u9898 - \u77e5\u4e4e torch.onnx \u2014 PyTorch master documentation Pytorch\u8f6cONNX\u683c\u5f0f\u7684 torch.onnx.export() \u51fd\u6570\u9700\u8981 torch.jit.ScriptModule \uff0c\u800c\u4e0d\u662f torch.nn.Module \uff0c\u5982\u679c\u4f20\u5165\u7684\u6a21\u578b\u4e0d\u662f ScriptModule \u5f62\u5f0f\uff0c\u8be5\u51fd\u6570\u4f1a\u5229\u7528tracing\u65b9\u5f0f\uff0c\u8ffd\u8e2a\u6d41\u5165tensor\u7684\u6d41\u5411\uff0c\u6765\u8bb0\u5f55\u6a21\u578b\u8fd0\u7b97\u65f6\u7684\u6240\u6709\u64cd\u4f5c\u5e76\u8f6c\u4e3aScriptModule\uff1a \u8ddf\u8e2a\u6cd5\u53ea\u80fd\u901a\u8fc7\u5b9e\u9645\u8fd0\u884c\u4e00\u904d\u6a21\u578b\u7684\u65b9\u6cd5\u5bfc\u51fa\u6a21\u578b\u7684\u9759\u6001\u56fe\uff0c\u65e0\u6cd5\u8bc6\u522b\u51fa\u6a21\u578b\u4e2d\u7684\u63a7\u5236\u6d41\uff08\u5982\u5faa\u73af\uff09\u548c\u8fd0\u884c\u65f6\u7684\u52a8\u6001\u53d8\u5316\uff1b\u8bb0\u5f55\u6cd5\u5219\u80fd\u901a\u8fc7\u89e3\u6790\u6a21\u578b\u6765\u6b63\u786e\u8bb0\u5f55\u6240\u6709\u7684\u63a7\u5236\u6d41\u3002 \u6a21\u578b\u90e8\u7f72\u5165\u95e8\u6559\u7a0b\uff08\u4e09\uff09\uff1aPyTorch \u8f6c ONNX \u8be6\u89e3 - \u77e5\u4e4e tracing\u65b9\u5f0f\u7684\u8f6c\u6362\u4f1a\u5bfc\u81f4\u6a21\u578b\u65e0\u6cd5\u5bf9\u52a8\u6001\u7684\u64cd\u4f5c\u8fdb\u884c\u6355\u83b7\uff0c\u6bd4\u5982\u5bf9torch.tensor\u7684\u52a8\u6001\u5207\u7247\u64cd\u4f5c\u4f1a\u88ab\u5f53\u505a\u56fa\u5b9a\u7684\u957f\u5ea6\u5207\u7247\uff0c\u4e00\u65e6\u5207\u7247\u7684\u957f\u5ea6\u53d1\u751f\u53d8\u5316\u5c31\u4f1a\u89e6\u53d1\u9519\u8bef\u3002\u4e3a\u4e86\u5bf9\u8fd9\u4e9b\u52a8\u6001\u64cd\u4f5c\u8fdb\u884c\u4fdd\u5b58\uff0c\u53ef\u4ee5\u4f7f\u7528scripting\u7684\u65b9\u5f0f\uff0c\u76f4\u63a5\u5c06\u52a8\u6001\u64cd\u4f5c\u6d41\u6539\u5199\u4e3aScriptModule\u3002 \u5bfc\u51faONNX torch.onnx.export 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 # wenet/wenet/bin/export_onnx_cpu.py encoder = asr_model . encoder ... inputs = ( chunk , offset , required_cache_size , att_cache , cnn_cache , att_mask ) ... encoder_outpath = os . path . join ( args [ 'output_dir' ], 'encoder.onnx' ) ... dynamic_axes = { 'chunk' : { 1 : 'T' }, # chunk\u5f20\u91cf\u5728axis=1\u4e0a\u662f\u53ef\u53d8\u7684\uff0c\u8be5axis=1\u7ef4\u5ea6\u540d\u4e3aT 'att_cache' : { 2 : 'T_CACHE' }, 'att_mask' : { 2 : 'T_ADD_T_CACHE' }, 'output' : { 1 : 'T' }, 'r_att_cache' : { 2 : 'T_CACHE' }, } ... torch . onnx . export ( encoder , # model (torch.nn.Module, torch.jit.ScriptModule or torch.jit.ScriptFunction) inputs , # \u6a21\u578b\u8f93\u5165\u53c2\u6570\u3002\u5bfc\u51fa\u65f6\u53ef\u4ee5\u6784\u5efa\u968f\u673a\u7b49\u5927\u7684\u5f20\u91cf\u4f5c\u4e3a\u8f93\u5165\u53c2\u6570\uff0c\u7528\u4e8e\u6a21\u578b\u7684\u5f20\u91cf\u8ddf\u8e2a encoder_outpath , # \u5bfc\u51faonnx\u6587\u4ef6\u7684\u8def\u5f84 opset_version = 13 , # \u8f6c\u6362\u65f6\u53c2\u8003\u54ea\u4e2aONNX\u7b97\u5b50\u96c6\u7248\u672c export_params = True , # \u662f\u5426\u5bfc\u51fa\u6a21\u578b\u7684\u53c2\u6570 do_constant_folding = True , # \u5e38\u6570\u6298\u53e0\u4f18\u5316\uff0c\u5bf9\u4ec5\u8f93\u51fa\u5e38\u6570\u7684op\u76f4\u63a5\u7528\u5e38\u6570\u4ee3\u66ff input_names = [ 'chunk' , 'offset' , 'required_cache_size' , 'att_cache' , 'cnn_cache' , 'att_mask' ], # \u5206\u914d\u7ed9\u8ba1\u7b97\u56fe\u8f93\u5165\u8282\u70b9\u7684\u540d\u79f0\uff0c\u9700\u8981\u548c`inputs`\u987a\u5e8f\u4e00\u81f4 output_names = [ 'output' , 'r_att_cache' , 'r_cnn_cache' ], # \u5206\u914d\u7ed9\u8ba1\u7b97\u56fe\u8f93\u51fa\u8282\u70b9\u7684\u540d\u79f0\uff0c\u6709\u5e8f dynamic_axes = dynamic_axes , # \u6307\u5b9a\u5f20\u91cf\u7684\u53ef\u53d8\u7ef4\u5ea6 verbose = False ) # \u6253\u5370\u8f93\u51fa\u6a21\u578b\u7684\u63cf\u8ff0 torch.onnx.export() \u4e2d dynamic_axes \u53c2\u6570\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e9b\u5f20\u91cf\u7684\u53ef\u53d8\u7ef4\u5ea6\uff0c\u5f62\u5f0f\u4e3a dict<string, dict<python:int, string>> or dict<string, list(int)>, default empty dict \u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5bfc\u51fa\u7684\u6a21\u578b\u5c06\u6240\u6709\u8f93\u5165\u8f93\u51fa\u5f20\u91cf\u7684\u5927\u5c0f\u5747\u8bbe\u7f6e\u4e3a\u7ed9\u5b9a\u5f20\u91cf\u7684\u5927\u5c0f\uff0c\u4e3a\u4e86\u6307\u5b9a\u5f20\u91cf\u7684\u4e00\u4e9b\u7ef4\u5ea6\u662f\u52a8\u6001\u53ef\u53d8\u7684\uff0c\u53ef\u4ee5\u8bbe\u7f6e dynamic_axes \uff0c\u5176\u4e2d\uff1a KEY(str) \uff1a\u5927\u5c0f\u53ef\u53d8\u7684\u8f93\u5165/\u8f93\u51fa\u5f20\u91cf\u540d\uff0c\u5f20\u91cf\u540d\u9700\u8981\u5728 input_names \u548c output_names \u4e2d\u3002 VALUE (dict or list) \uff1a\u5982\u679c\u662f dict \uff0c key \u662f\u53ef\u53d8\u5927\u5c0f\u5bf9\u5e94\u7684\u7ef4\u5ea6\uff0c value \u662f\u5bf9\u5e94\u7ef4\u5ea6\u540d\uff1b\u5982\u679c\u662f list \uff0c\u6bcf\u4e2a\u5143\u7d20\u8868\u793a\u53ef\u53d8\u5927\u5c0f\u5bf9\u5e94\u7684\u7ef4\u5ea6\u3002 \u53c2\u6570 opset_version \u6307\u5b9a\u7684ONNX\u7b97\u5b50\u96c6\u7248\u672c\u53ef\u53c2\u8003 onnx/Operators.md at main \u00b7 onnx/onnx \u00b7 GitHub \u3002\u5728Pytorch\u4e2d\uff0c\u548cONNX\u6709\u5173\u7684\u5b9a\u4e49\u5b58\u653e\u5728 pytorch/torch/onnx at master \u00b7 pytorch/pytorch \u00b7 GitHub \uff1a \u5176\u4e2d\uff0c symbolic_opset{n}.py \uff08\u7b26\u53f7\u8868\u6587\u4ef6\uff09\u8868\u793a Pytorch \u5728\u652f\u6301\u7b2c n \u7248 ONNX \u7b97\u5b50\u96c6\u65f6\u65b0\u52a0\u5165\u7684\u5185\u5bb9\uff0c\u53ef\u4ee5\u5728\u8be5\u76ee\u5f55\u4e0b\u67e5\u627ePytorch\u5230ONNX\u7b97\u5b50\u7684\u6620\u5c04\u3002 \u5728\u5b9e\u9645\u5e94\u7528\u65f6\u53ef\u4ee5\u5728 torch.onnx.export() \u7684 opset_version \u4e2d\u5148\u9884\u8bbe\u4e00\u4e2a\u7248\u672c\u53f7\uff0c\u78b0\u5230\u95ee\u9898\u5c31\u53bb\u5bf9\u5e94\u7684Pytorch\u7b26\u53f7\u8868\u6587\u4ef6\u91cc\u53bb\u67e5\u3002\u5982\u679c\u67d0\u7b97\u5b50\u786e\u5b9e\u4e0d\u5b58\u5728\uff0c\u6216\u8005\u7b97\u5b50\u7684\u6620\u5c04\u5173\u7cfb\u4e0d\u6ee1\u8db3\u8981\u6c42\uff0c\u5c31\u53ef\u80fd\u9700\u8981\u5229\u7528\u5176\u5b83\u7b97\u5b50\u7ed5\u8fc7\u53bb\uff0c\u6216\u8005\u81ea\u5b9a\u4e49\u7b97\u5b50\u3002 onnx/Operators.md at main \u00b7 onnx/onnx \u00b7 GitHub \u6a21\u578b\u90e8\u7f72\u5165\u95e8\u6559\u7a0b\uff08\u4e09\uff09\uff1aPyTorch \u8f6c ONNX \u8be6\u89e3 - \u77e5\u4e4e NoneType\u7c7b\u578b\u53c2\u6570 \u5728\u6d41\u5f0f\u89e3\u7801\u65f6\uff0c\u521a\u5f00\u59cb\u7684\u82e5\u5e72chunk\u4e2d\u7f16\u7801\u5668\u7684cache\u4e3a\u7a7a\u3002ONNX\u8f6c\u5199\u7684\u6a21\u578b\u4e0d\u652f\u6301NoneType\u8f93\u5165\uff0c\u4f46Torch\u548cONNX\u5747\u53ef\u4ee5\u63a5\u53d7\u7ef4\u5ea6\u4e2d\u5b58\u57280\u7684tensor\uff0c\u4e14\u53ef\u4ee5\u5bf9\u8fd9\u79cdtensor\u8fdb\u884c\u5e38\u89c4\u7684\u5207\u7247\u548c\u62fc\u63a5\u64cd\u4f5c\uff0c\u6bd4\u5982\uff1a 1 2 3 4 5 6 a = torch . ones (( 1 , 2 , 0 , 4 )) # \u7ef4\u5ea6\u4e2d\u5b58\u57280\u7684tensor b = torch . ones (( 1 , 2 , 3 , 4 )) c = torch . cat (( a , b ), dim = 2 ) torch . equal ( b , c ) # True d = torch . split ( a , 2 , dim =- 1 ) torch . equal ( d [ 0 ], d [ 1 ]) # True \u56e0\u6b64\u53ef\u4ee5\u5f15\u5165\u957f\u5ea6\u4e3a0\u3001\u5143\u7d20\u503c\u4e3a0\u7684dummy\u5f20\u91cf\u4ee3\u66ffNoneType\u3002 cache\u4e2d\u7684\u52a8\u6001\u53d8\u5316 torch.onnx.export() \u5229\u7528tracing\u65b9\u5f0f\u8ffd\u8e2atensor\u6d41\u5411\u65f6\uff0c\u65e0\u6cd5\u6355\u83b7\u52a8\u6001\u64cd\u4f5c\u3002\u5728\u7f16\u7801\u5668\u66f4\u65b0\u7f13\u5b58\u65f6\uff0c\u9700\u8981\u5229\u7528 next_cache_start \u5bf9\u4e0a\u4e00\u65f6\u523b\u7684\u8ba1\u7b97\u4ea7\u7269\u8fdb\u884c\u5207\u7247\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # wenet/wenet/transformer/encoder.py # required_cache_size < 0\uff0816 chunksize / -1 leftchunks\uff09 if required_cache_size < 0 : # \u8be5\u5206\u652f\u4e0b\uff0cnext_cache_start\u59cb\u7ec8\u4e3a0 next_cache_start = 0 # required_cache_size == 0\uff0816 chunksize / 0 leftchunks\uff09 elif required_cache_size == 0 : # \u8be5\u5206\u652f\u4e0b\uff0cnext_cache_start\u59cb\u7ec8\u4e3aattention_key_size # \u800cattention_key_size\u662f\u8d85\u53c2\u6570\u8ba1\u7b97\u51fa\u6765\u7684\u5b9a\u503c next_cache_start = attention_key_size # required_cache_size > 0\uff0816 chunksize / 4 leftchunks\uff09 else : # \u8be5\u5206\u652f\u4e0b\uff0cnext_cache_start\u52a8\u6001\u53d8\u5316 next_cache_start = max ( attention_key_size - required_cache_size , 0 ) \u572816/-1\u548c16/0\u7684\u89e3\u7801\u914d\u7f6e\u4e0b\uff0c\u4e0d\u4f1a\u4ea7\u751f\u52a8\u6001\u64cd\u4f5c\u3002\u4f46\u662f\u572816/4\u7684\u89e3\u7801\u914d\u7f6e\u4e0b\uff0c\u5982\u679c\u5bf9\u7b2c\u4e00\u4e2achunk\u9001\u5165\u957f\u5ea6\u4e3a0\u7684cache\uff0c\u90a3\u4e48\u524d4\u4e2achunk\u7684 next_cache_start \u5747\u4e3a0\uff0c\u800c\u5bf9\u7b2c5\u4e2a\u53ca\u5176\u4e4b\u540e\u7684chunk\uff0c\u7531\u4e8e next_cache_start \u5c06\u53d8\u4e3a attention_key_size - required_cache_size \uff0c\u8ba1\u7b97\u5f97\u5230\u7684 next_cache_start \u4e0d\u518d\u662f0\uff0c\u8fd9\u5c31\u662f\u6240\u8c13\u7684\u52a8\u6001\u53d8\u5316\u3002 att_cache \u7f13\u5b58\u591a\u5934\u6ce8\u610f\u529b\u7684key\u548cvalue\uff0c next_cache_start \u8868\u793a\u4e0b\u4e00\u4e2a att_cache \u5728\u65f6\u95f4\u7ef4\u5ea6\u4e0a\u8d77\u59cb\u70b9\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 # wenet/wenet/transformer/encoder.py # new_att_cache\u662f\u8ba1\u7b97\u5b8c\u6210\u591a\u5934\u6ce8\u610f\u529b\u4f46\u5c1a\u672a\u5229\u7528new_cache_start\u8fdb\u884c\u5207\u7247\u5e76\u66f4\u65b0\u7684\u6ce8\u610f\u529b\u7f13\u5b58 # \u6240\u8c13\u7684\u6ce8\u610f\u529b\u7f13\u5b58`att_cache`\u5b9e\u9645\u4e0a\u5c31\u662f\u7f13\u5b58\u4e0a\u4e00\u4e2achunk\u4e2d\u7684\u591a\u5934\u6ce8\u610f\u529b\u7684key\u548cvalue # new_att_cache\u662f\u5bf9key\u548cvalue\u8fdb\u884cconcat: new_att_cache=torch.cat((k, v),dim=-1) # \u56e0\u6b64new_att_cache\u7684\u6700\u540e\u4e00\u4e2a\u7ef4\u5ea6\u9700\u8981\u4e58\u4ee52 # shape(new_att_cache) is (1, head, attention_key_size, d_k * 2) # attention_key_size = cache_t1 + chunk_size # cache_t1 = required_cache_size = chunk_size * num_decoding_left_chunks # So, shape(new_att_cache[:, :, next_cache_start:, :]) in 16/4 # always be (1, head, chunk_size * num_decoding_left_chunks, d_k * 2) r_att_cache . append ( new_att_cache [:, :, next_cache_start :, :]) \u4e3a\u4e86\u4fdd\u8bc1\u572816/4\u914d\u7f6e\u4e0b next_cache_start \u7684\u503c\u5728\u63a8\u7406\u7684\u5168\u8fc7\u7a0b\u4e2d\u7ef4\u6301\u4e0d\u53d8\uff0c\u5bf9\u7b2c\u4e00\u4e2achunk \u9001\u5165\u957f\u5ea6\u4e3a required_cache_size \u800c\u975e\u957f\u5ea6\u4e3a0\u7684cache\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u4ece\u7b2c\u4e00\u4e2a chunk \u5f00\u59cb\u5c31\u9001\u5165\u201c\u771f\u5b9e\u201d\u7684 cache\uff0c\u53ea\u662f\u8be5cache\u7684\u5143\u7d20\u503c\u5747\u4e3a0\uff0c\u5e76\u5229\u7528 att_mask \u6307\u793a\u8be5\u90e8\u5206\u7684cache\u4e3aFalse\uff0c\u6b64\u65f6 next_cache_start == attention_key_size - required_cache_size \u6052\u6210\u7acb\uff0c\u4e5f\u5373\u5bf9\u4e8e\u7b2c\u4e00\u4e2a\u53ca\u4e4b\u540e\u7684chunk\uff0c next_cache_start == chunk_size \u6052\u6210\u7acb\u3002 \u52a8\u6001\u5207\u7247 \u5982\u679c\u4f7f\u7528tracing\u65b9\u5f0f\u8f6c\u5199\u6210ONNX\uff0c\u5bf9 torch.tensor \u7684\u5207\u7247\u53ea\u80fd\u662f\u9759\u6001\u5207\u7247\uff0c\u6bd4\u5982 data[\uff1a3] = new_data \uff0c\u8fd9\u91cc\u76843\u53ea\u80fd\u662f\u56fa\u5b9a\u503c3\uff0c\u4e0d\u80fd\u662f\u4f20\u5165\u7684tensor\uff0c\u6bd4\u5982 data[:data.shape[0]] \u5728ONNX\u7684opset<13\u65f6\u662f\u4e0d\u652f\u6301\u7684\u3002 \u53ef\u4ee5\u4f9d\u9760\u4f20\u5165\u7684 torch.tensor \u4f5c\u4e3aindex\uff0c\u5b9e\u73b0tracing\u65b9\u5f0f\u4e0b\u5bf9\u5f20\u91cf\u7684\u52a8\u6001\u5207\u7247\uff0c\u6bd4\u5982 data[torch.tensor([1,2])] \u3002WeNet\u6d41\u5f0f\u89e3\u7801\u65f6\uff0c\u6bcf\u4e2a\u65f6\u523b\u90fd\u9700\u8981\u7f16\u7801\u5668\u5bf9\u8f93\u5165\u7684cache\u8fdb\u884c\u5207\u7247\uff0c\u6bcf\u6b21\u5747\u4f20\u5165\u5207\u7247index\u4f1a\u5c06\u6a21\u578b\u53d8\u5f97\u590d\u6742\u3002\u6b64\u65f6\u5c06\u9700\u8981\u52a8\u6001\u5207\u7247\u7684\u64cd\u4f5c\u901a\u8fc7scripting\u65b9\u5f0f\u76f4\u63a5\u6539\u5199\u4e3aScriptModule\u662f\u66f4\u4f18\u7b56\u7565\uff0c\u6bd4\u5982\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 @torch . jit . script def slice_helper ( x , offset ): return x [:, - offset : , : ] chunk = x . size ( 1 ) - output_cache . size ( 1 ) # x_q = x[:, -chunk:, :] # residual = residual[:, -chunk:, :] # mask = mask[:, -chunk:, :] # \u66f4\u6539\u4e3a\uff1a x_q = slice_helper ( x , chunk ) residual = slice_helper ( residual , chunk ) mask = slice_helper ( mask , chunk ) \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u5c06 torch.nn.Module \u8f6c\u4e3a torch.jit.ScriptModule \uff0c\u6a21\u578b\u65e0\u6cd5\u8fdb\u884c\u8bad\u7ec3\uff0c\u6b64\u65f6\u53ef\u4ee5\u5c06\u8bad\u7ec3\u4ee3\u7801\u548c\u8f6c\u5199\u4ee3\u7801\u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u5b9e\u9645\u4e0a\u4e5f\u53ef\u4ee5\u7b80\u5355\u5730\u5728\u4f7f\u7528\u5230scripting\u7684\u6a21\u5757\u4e2d\uff0c\u6dfb\u52a0bool\u5c5e\u6027onnx_mode\uff0c\u5728\u8bad\u7ec3\u65f6\u8bbe\u7f6e\u4e3aFalse\uff0c\u8f6c\u5199\u65f6\u8bbe\u7f6e\u4e3aTrue\u5373\u53ef\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 @torch . jit . script def slice_helper ( x , offset ): return x [:, - offset : , : ] chunk = x . size ( 1 ) - output_cache . size ( 1 ) if onnx_mode : x_q = slice_helper ( x , chunk ) residual = slice_helper ( residual , chunk ) mask = slice_helper ( mask , chunk ) else : x_q = x [:, - chunk :, :] residual = residual [:, - chunk :, :] mask = mask [:, - chunk :, :] \u5f53\u7136\uff0copset>=13 \u65f6\uff0cONNX\u5df2\u7ecf\u76f4\u63a5\u652f\u6301\u4e0a\u8ff0\u7684\u52a8\u6001\u5207\u7247\u64cd\u4f5c\uff1a 1 2 3 4 5 6 7 8 9 10 # \u5728\u5bfc\u51fa\u65f6\uff0c\u5c06opset\u8bbe\u7f6e\u4e3a13\uff0c\u5373\u53ef\u76f4\u63a5\u652f\u6301\u52a8\u6001\u5207\u7247\uff0c\u65e0\u9700\u4efb\u4f55\u4ee3\u7801\u5c42\u9762\u7684\u6539\u52a8 torch . onnx . export ( encoder , inputs , encoder_outpath , opset_version = 13 , export_params = True , do_constant_folding = True , input_names = [ 'chunk' , 'offset' , 'required_cache_size' , 'att_cache' , 'cnn_cache' , 'att_mask' ], output_names = [ 'output' , 'r_att_cache' , 'r_cnn_cache' ], dynamic_axes = dynamic_axes , verbose = False ) tracing\u53ea\u8ffd\u8e2atensor tracing\u65b9\u5f0f\u53ea\u80fd\u901a\u8fc7\u8ffd\u8e2a tensor \u6d41\u5411\u6765\u5b9a\u4f4d\u53c2\u4e0e\u7684\u8fd0\u7b97\uff0c\u800c\u65e0\u6cd5\u8ffd\u8e2a\u5176\u5b83\u7c7b\u578b\u6bd4\u5982 List[tensor] \u3002\u56e0\u6b64encoder\u6a21\u5757\u4e2d\u7684 forward_chunk() \u51fd\u6570\u5404\u4e2a\u5c42\u7684cache\u4e0d\u80fd\u4f7f\u7528 list \u6765\u4fdd\u5b58\uff0c\u800c\u5fc5\u987b\u901a\u8fc7 torch.cat() \u51fd\u6570\u5408\u5e76\u6210tensor\uff0c\u5426\u5219\u5728\u8c03\u7528ONNX\u6a21\u578b\u65f6\uff0c\u5bf9\u6a21\u578b\u8f93\u51fa\u7684\u7d22\u5f15\u5c06\u4f1a\u51fa\u9519\u3002\u6bd4\u5982\uff1a 1 r_conformer_cnn_cache . append ( new_cnn_cache ) \u8f93\u51fa\u5bf9\u5e94\u7d22\u5f15\u4f4d\u7f6e\u7684\u503c\uff0c\u4e0d\u662f r_conformer_cnn_cache \uff0c\u800c\u662f r_conformer_cnn_cache[0] \u3002\u56e0\u6b64\u5e94\u6539\u4e3a\uff1a 1 r_conformer_cnn_cache = torch . cat (( r_conformer_cnn_cache , new_cnn_cache . unsqueeze ( 0 )), 0 ) ONNX\u4e0d\u652f\u6301pad_sequence \u91cd\u65b0\u8bbe\u8ba1\u4e86\u4e00\u4e2a\u4e0e pad_sequence() \u7b49\u4ef7\u4e14\u80fd\u88abONNX\u611f\u77e5\u5230shape\u53d8\u5316\u7684\u51fd\u6570\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 # https://github.com/wenet-e2e/wenet/blob/main/wenet/transformer/asr_model.py#L683-L721 # `pad_sequence` is not supported by ONNX, it is used # in `reverse_pad_list` thus we have to refine the below code. # Issue: https://github.com/wenet-e2e/wenet/issues/1113 # Equal to: # >>> r_hyps = reverse_pad_list(r_hyps, r_hyps_lens, float(self.ignore_id)) # >>> r_hyps, _ = add_sos_eos(r_hyps, self.sos, self.eos, self.ignore_id) max_len = torch . max ( r_hyps_lens ) index_range = torch . arange ( 0 , max_len , 1 ) . to ( encoder_out . device ) seq_len_expand = r_hyps_lens . unsqueeze ( 1 ) seq_mask = seq_len_expand > index_range # (beam, max_len) # >>> seq_mask # >>> tensor([[ True, True, True], # >>> [ True, True, True], # >>> [ True, False, False]]) index = ( seq_len_expand - 1 ) - index_range # (beam, max_len) # >>> index # >>> tensor([[ 2, 1, 0], # >>> [ 2, 1, 0], # >>> [ 0, -1, -2]]) index = index * seq_mask # >>> index # >>> tensor([[2, 1, 0], # >>> [2, 1, 0], # >>> [0, 0, 0]]) r_hyps = torch . gather ( r_hyps , 1 , index ) # >>> r_hyps # >>> tensor([[3, 2, 1], # >>> [4, 8, 9], # >>> [2, 2, 2]]) r_hyps = torch . where ( seq_mask , r_hyps , self . eos ) # >>> r_hyps # >>> tensor([[3, 2, 1], # >>> [4, 8, 9], # >>> [2, eos, eos]]) r_hyps = torch . cat ([ hyps [:, 0 : 1 ], r_hyps ], dim = 1 ) # >>> r_hyps # >>> tensor([[sos, 3, 2, 1], # >>> [sos, 4, 8, 9], # >>> [sos, 2, eos, eos]]) \u8d85\u53c2\u6570\u8bfb\u5199 \u901a\u8fc7ONNX\u7684metadata\u63a5\u53e3\uff0c\u5b9e\u73b0\u5c06\u8d85\u53c2\u6570\u5168\u90e8\u5b58\u5165ONNX\u6a21\u578b\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # wenet/wenet/bin/export_onnx_cpu.py # \u5199\u5165\uff08python\u7248\u672c\uff09 onnx_encoder = onnx . load ( encoder_outpath ) for ( k , v ) in args . items (): meta = onnx_encoder . metadata_props . add () meta . key , meta . value = str ( k ), str ( v ) onnx . save ( onnx_encoder , encoder_outpath ) # python\u7248\u672c\u7684\u8bfb\u53d6 ort_session = onnxruntime . InferenceSession ( encoder_outpath ) meta = ort_session . get_modelmeta () print ( \" \\t\\t custom_metadata_map= {} \" . format ( meta . custom_metadata_map )) // cpp\u7248\u672c\u7684\u8bfb\u53d6 // wenet / runtime / core / decoder / onnx_asr_model . cc auto model_metadata = encoder_session_ -> GetModelMetadata (); Ort :: AllocatorWithDefaultOptions allocator ; encoder_output_size_ = std :: move ( atoi ( model_metadata . LookupCustomMetadataMap ( \"output_size\" , allocator ))); \u5176\u5b83 \u901a\u8fc7tracing\u8ffd\u8e2a\u6a21\u578b\uff0c\u5982\u679c\u6a21\u578b\u4f20\u5165\u7684tensor\u6ca1\u6709\u88ab\u4f7f\u7528\uff0c\u5bfc\u51fa\u7684\u6a21\u578b\u5c06\u4f1a\u8ba4\u4e3a\u4e0d\u4f1a\u8f93\u5165\u8be5\u53c2\u6570\uff0c\u5982\u679c\u540e\u7eed\u8f93\u5165\u8be5\u53c2\u6570\u5c06\u4f1a\u5bfc\u81f4\u62a5\u9519\u3002 ONNX\u4e0d\u652f\u6301tensor\u8f6cbool\u7684\u64cd\u4f5c\uff0c\u8bad\u7ec3\u65f6python\u811a\u672c\u4e2d\u5927\u91cf\u7684assert\u5c06\u65e0\u6cd5\u4f7f\u7528\u3002 ONNX\u63a8\u7406 ONNX Runtime \u662f\u7531\u5fae\u8f6f\u7ef4\u62a4\u7684\u8de8\u5e73\u53f0\u673a\u5668\u5b66\u4e60\u63a8\u7406\u52a0\u901f\u5668\uff0c\u4e5f\u5373\u201d\u63a8\u7406\u5f15\u64ce\u201c\uff0c\u53ef\u5b9e\u73b0Pytorch->ONNX->ONNX Runtime\u8fd9\u6761\u90e8\u7f72\u6d41\u6c34\u7ebf\u3002WeNet ONNX\u63a8\u7406\u6d41\u7a0b\u4e3a\uff1a\u52a0\u8f7d\u6a21\u578b\u548c\u8d85\u53c2\u6570->\u521d\u59cb\u5316cache->encoder\u63a8\u7406->CTC\u63a8\u7406->attention rescoring\u63a8\u7406\u3002 onnx_asr_model \u548c torch_asr_model \u5747\u7ee7\u627f\u81ea asr_model \uff0c asr_model \u4e2d\u5b9a\u4e49\u4e86 Reset() \u3001 ForwardEncoderFunc() \u548c AttentionRescoring() \u4e09\u4e2a\u7eaf\u865a\u51fd\u6570\uff1a Reset() \u5b9e\u73b0\u4e86 offset_ \u3001 att_cache_ \u7b49cache\u7684\u521d\u59cb\u5316\u3002 ForwardEncoderFunc() \u5305\u542b\u4e86encoder\u548cCTC\u63a8\u7406\u3002 AttentionRescoring() \u5bf9\u8bc6\u522b\u7ed3\u679c\u505a\u91cd\u6253\u5206\u3002 [C++ ONNX Runtime APIs]\u5747\u5b9a\u4e49\u5728 Ort \u547d\u540d\u7a7a\u95f4\u4e0b\u3002 ONNX\u7ebf\u7a0b\u6570\u7684\u914d\u7f6e ONNX\u9ed8\u8ba4\u91c7\u7528\u591a\u6838\u52a0\u901f\u89e3\u7801\uff0c\u8bbe\u7f6eONNX\u7ebf\u7a0b\u6570\u7684\u4ee3\u7801\u4e3a\uff1a 1 2 3 4 5 6 7 8 9 10 // wenet/runtime/core/decoder/onnx_asr_model.cc Ort :: SessionOptions OnnxAsrModel :: session_options_ = Ort :: SessionOptions (); ... // \u4f1a\u8bdd\u7ebf\u7a0b\u6570\u7684\u914d\u7f6e session_options_ . SetIntraOpNumThreads ( num_threads ); session_options_ . SetInterOpNumThreads ( num_threads ); ... // \u4f7f\u7528\u914d\u7f6e\u542f\u52a8\u4f1a\u8bdd encoder_session_ = std :: make_shared < Ort :: Session > ( env_ , encoder_onnx_path . c_str (), session_options_ ); \u7f16\u7801\u5668\u7684\u5165\u53c2\u4e2a\u6570\u4e0d\u786e\u5b9a \u7531\u4e8e\u5bfc\u51faONNX\u65f6\uff0c\u5b58\u5728\u4e0d\u540c\u7684 chunk_size/num_decoding_left_chunks \u914d\u7f6e\uff0c\u6b64\u65f6ONNX\u4f1a\u81ea\u52a8\u4f18\u5316\u6389\u65e0\u7528\u53c2\u6570\uff0c\u8fd9\u5c06\u5bfc\u81f4\u6a21\u578b encoder.onnx \u7684\u5165\u53c2\u4e0d\u4e00\u6837\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u5f53\u4f7f\u7528 16/-1 \u3001 -1/-1 \u548c 16/0 \u65f6\uff0c next_cache_start \u5c06\u4f1a\u88abONNX\u786c\u7f16\u7801\u4e3a0\u6216 chunk_size \uff0c\u56e0\u6b64\u4e0d\u518d\u9700\u8981 required_cache_size \u548c att_mask \uff0c\u8fd9\u4e24\u4e2a\u53c2\u6570\u4e5f\u5c06\u4f1a\u88abONNX\u81ea\u52a8\u79fb\u9664\u3002 \u7531\u4e8e\u7f16\u7801\u5668\u7684\u5165\u53c2\u4f1a\u53d1\u751f\u53d8\u5316\uff0c\u5bf9\u4e8e encoder.onnx \uff0c\u4f1a\u5148\u83b7\u53d6\u8f93\u5165\u53c2\u6570\u540d\u5217\u8868\uff0c\u5728\u51c6\u5907\u7f16\u7801\u5668\u7684\u8f93\u5165\u65f6\uff0c\u6839\u636e\u53c2\u6570\u540d\u5217\u8868\uff0c\u6311\u9009\u76f8\u5e94\u53d8\u91cf\u4f5c\u4e3a\u8f93\u5165\u3002\u800c\u5bf9\u4e8e\u7f16\u7801\u5668\u7684\u8f93\u51fa\u3001CTC\u548c\u89e3\u7801\u5668\u7684\u8f93\u5165\u548c\u8f93\u51fa\uff0c\u4e5f\u5168\u90e8\u91c7\u7528\u4ece\u6a21\u578b\u8bfb\u53d6\u53c2\u6570\u540d\u5217\u8868\u7684\u65b9\u5f0f\uff0c\u907f\u514d\u624b\u5de5\u5b9a\u4e49\u53c2\u6570\u540d\u5217\u8868\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 // wenet/runtime/core/decoder/onnx_asr_model.cc //\u6839\u636eencoder_in_names_\u51c6\u5907\u8f93\u5165 std :: vector < Ort :: Value > inputs ; for ( auto name : encoder_in_names_ ) { if ( ! strcmp ( name , \"chunk\" )) { inputs . emplace_back ( std :: move ( feats_ort )); } else if ( ! strcmp ( name , \"offset\" )) { inputs . emplace_back ( std :: move ( offset_ort )); } else if ( ! strcmp ( name , \"required_cache_size\" )) { inputs . emplace_back ( std :: move ( required_cache_size_ort )); } else if ( ! strcmp ( name , \"att_cache\" )) { inputs . emplace_back ( std :: move ( att_cache_ort_ )); } else if ( ! strcmp ( name , \"cnn_cache\" )) { inputs . emplace_back ( std :: move ( cnn_cache_ort_ )); } else if ( ! strcmp ( name , \"att_mask\" )) { inputs . emplace_back ( std :: move ( att_mask_ort )); } } int\u7c7b\u578b\u53c2\u6570 \u5728runtime\u9636\u6bb5\uff0c\u6784\u9020int\u7c7b\u578b\u7684\u5f20\u91cf\u9700\u8981\u8fdb\u884c\u7279\u6b8a\u5904\u7406\u3002\u521b\u5efa\u5f20\u91cf\u7684 CreateTensor() \u51fd\u6570\u7b7e\u540d\u4e3a\uff1a 1 2 3 4 5 static Value Ort::Value::CreateTensor(const OrtMemoryInfo * info, T * p_data, size_t p_data_element_count, const int64_t * shape, size_t shape_len) \u5176\u4e2d\uff1a info \uff1a\u7528\u6237\u7f13\u51b2\u533a\u6240\u5728\u7684\u5185\u5b58\u63cf\u8ff0\uff0c\u6bd4\u5982CPU\u6216GPU\u3002 p_data \uff1a\u6307\u5411\u7528\u6237\u63d0\u4f9b\u7684\u7f13\u51b2\u533a\u6307\u9488\u3002 p_data_element_count \uff1a\u7528\u6237\u7f13\u51b2\u533a\u7684\u5143\u7d20\u4e2a\u6570\u3002 shape \uff1a\u7528\u6237\u7f13\u51b2\u533a\u7684\u5f20\u91cf\u5927\u5c0f\u3002 shape_len \uff1a\u5f20\u91cf\u5927\u5c0f shape \u7684\u7ef4\u5ea6\u4e2a\u6570\u3002 \u5728\u6784\u9020int\u7c7b\u578b\u7684\u5f20\u91cf\u65f6\uff0c CreateTensor() \u51fd\u6570\u91cc shape \u548c shape_len \u4e24\u4e2a\u5f62\u53c2\u5e94\u5206\u522b\u4f20\u5165\u7a7a\u6307\u9488\u548c0\uff1a 1 2 3 4 5 6 7 8 9 10 11 // wenet/runtime/core/decoder/onnx_asr_model.cc // \u4e00\u822c\u5f20\u91cf\u7684\u6784\u9020 // chunk const int64_t feats_shape [ 3 ] = { 1 , num_frames , feature_dim }; Ort :: Value feats_ort = Ort :: Value :: CreateTensor < float > ( memory_info , feats . data (), feats . size (), feats_shape , 3 ); // int\u7c7b\u578b\u5f20\u91cf\u7684\u6784\u9020 // offset int64_t offset_int64 = static_cast < int64_t > ( offset_ ); Ort :: Value offset_ort = Ort :: Value :: CreateTensor < int64_t > ( memory_info , & offset_int64 , 1 , std :: vector < int64_t > {}. data (), 0 ); Ort\u73af\u5883\u53d8\u91cf Ort\u73af\u5883\u53d8\u91cf\u4fdd\u5b58\u7740\u5176\u5b83\u5bf9\u8c61\u4f7f\u7528\u7684\u65e5\u5fd7\u72b6\u6001\uff0c\u5fc5\u987b\u5728\u4f7f\u7528ONNXRuntime\u7684\u5176\u5b83\u51fd\u6570\u4e4b\u524d\u521b\u5efa\u597d\u73af\u5883\u53d8\u91cf\uff0c\u8de8\u7ebf\u7a0b\u5171\u4eab\u73af\u5883\uff0c\u5e76\u4e14\u5e94\u5c06\u5176\u8bbe\u7f6e\u4e3a\u5168\u5c40\u53d8\u91cf\u3002 1 2 3 4 5 6 7 8 // sessions // NOTE(Mddct): The Env holds the logging state used by all other objects. // One Env must be created before using any other Onnxruntime functionality. static Ort :: Env env_ ; // shared environment across threads. static Ort :: SessionOptions session_options_ ; std :: shared_ptr < Ort :: Session > encoder_session_ = nullptr ; std :: shared_ptr < Ort :: Session > rescore_session_ = nullptr ; std :: shared_ptr < Ort :: Session > ctc_session_ = nullptr ; \u5168\u5c40\u53d8\u91cf\u548c\u5c40\u90e8\u53d8\u91cf \u7528\u4e8e\u6784\u9020 att_cache_ort_ \u7684 att_cache_ \u5e94\u8bbe\u7f6e\u4e3a\u5168\u5c40\u53d8\u91cf\uff0c\u8fd9\u662f\u56e0\u4e3aONNXRuntime\u5728\u6784\u5efa\u5f20\u91cf att_cache_ort_ \u65f6\u4e0d\u4f1a\u5bf9 att_cache_ \u91cc\u9762\u7684\u6570\u636e\u8fdb\u884c\u62f7\u8d1d\uff0c\u800c\u53ea\u662f\u7ef4\u62a4\u4e86\u6307\u5411 att_cache_ \u7684\u6307\u9488\uff0c\u5982\u679c\u5728 Reset() \u51fd\u6570\u4e2d\u5c06 att_cache_ \u58f0\u660e\u4e3a\u5c40\u90e8\u53d8\u91cf\uff0c\u5e76\u7528\u4e8e\u6784\u9020 att_cache_ort_ \uff0c\u5728\u8bc6\u522b\u65f6\u4f1a\u51fa\u73b0\u8fd0\u884c\u65f6\u7a81\u7136\u5d29\u6e83\u7684\u73b0\u8c61\uff0c\u4e3b\u8981\u539f\u56e0\u662f att_cache_ \u4f5c\u4e3a\u5c40\u90e8\u53d8\u91cf\uff0c\u5185\u5b58\u4f1a\u88ab\u7cfb\u7edf\u56de\u6536\uff0c cnn_cache_ \u58f0\u660e\u4e3a\u5168\u5c40\u53d8\u91cf\u7684\u539f\u56e0\u7c7b\u4f3c\u3002 \u800c att_mask_ort \u9700\u8981\u8bbe\u7f6e\u6210\u5c40\u90e8\u53d8\u91cf\u4e3b\u8981\u6709\u4e09\u4e2a\u539f\u56e0\uff1a - att_mask_ort \u9700\u6839\u636e offset_ \u52a8\u6001\u8bbe\u7f6e\u5143\u7d20\u7684\u503c\u3002 - \u6784\u9020\u7f16\u7801\u5668\u7684\u8f93\u5165\u65f6\u4f1a\u901a\u8fc7 std::move \u628a att_mask_ort \u6e05\u7a7a\u3002 - Reset() \u51fd\u6570\u4e0d\u9700\u5bf9 att_mask_ort \u8fdb\u884c\u521d\u59cb\u5316\u3002 \u5e38\u7528\u51fd\u6570 Ort::AllocatorWithDefaultOptions \u5185\u5b58\u5206\u914d\u63a5\u53e3\uff0c\u53ef\u7528\u4e8e\u7528\u6237\u81ea\u5b9a\u4e49\u5185\u5b58\u5206\u914d\u5668\u3002\u5728\u9500\u6bc1\u5185\u5b58\u5206\u914d\u5668\u4e4b\u524d\uff0c\u5fc5\u987b\u786e\u4fdd\u4f7f\u7528\u8be5\u5206\u914d\u5668\u7684\u5bf9\u8c61\u5df2\u7ecf\u5168\u90e8\u88ab\u9500\u6bc1\u3002 OnnxRuntime: OrtAllocator Struct Reference OnnxRuntime: Ort::AllocatorWithDefaultOptions Struct Reference session->GetOutputName(i, allocator) \u83b7\u53d6\u6a21\u578b\u8f93\u51fa\u8282\u70b9\u540d\u79f0\u3002 \u7b2c\u4e00\u4e2a\u5165\u53c2 i \u7c7b\u578b\u4e3aint\uff0c\u8868\u793a\u8f93\u51fa\u8282\u70b9\u7684\u5e8f\u53f7\u3002 \u7b2c\u4e8c\u4e2a\u5165\u53c2 allocator \u5b9a\u4e49\u5185\u5b58\u5206\u914d\u5668\uff0c\u53ef\u7528\u4e8e\u7528\u6237\u81ea\u5b9a\u4e49\u5185\u5b58\u5206\u914d\u5668\u3002 std::make_shared<Ort::Session>(env_, encoder_onnx_path.c_str(), session_options_) \u521b\u5efa\u4f1a\u8bdd\u5bf9\u8c61\uff0c\u548c Tensorflow 1.x \u7c7b\u4f3c\uff0c\u53ea\u6709\u4f1a\u8bdd\u5bf9\u8c61\u624d\u53ef\u4ee5\u6267\u884c\u6a21\u578b\u63a8\u7406\u3002 env_ \u7c7b\u578b\u4e3a Ort::Env \uff0c\u6301\u6709\u6240\u6709\u5bf9\u8c61\u7684\u65e5\u5fd7\u8bb0\u5f55\u72b6\u6001\uff0c\u5728\u4f7f\u7528\u4efb\u4f55ONNXRuntime\u4e4b\u524d\u5fc5\u987b\u5148\u521b\u5efa\u4e00\u4e2a Ort::Env \u3002 encoder_onnx_path.c_str() \u7c7b\u578b\u4e3a const char * \uff0c\u6a21\u578b\u8def\u5f84\u3002 session_options_ \u7c7b\u578b\u4e3a Ort::SessionOptions \uff0c\u7528\u4e8e\u521b\u5efa Session \u5bf9\u8c61\u7684 Options \u5bf9\u8c61\u3002 OnnxRuntime: Ort::Session Struct Reference encoder_session_->Run(Ort::RunOptions{nullptr}, encoder_in_names_.data(), inputs.data(), inputs.size(), encoder_out_names_.data(), encoder_out_names_.size()) \u4f1a\u8bdd\u5bf9\u8c61\u6267\u884c\u6a21\u578b\u63a8\u7406\u3002 Ort::RunOptions{nullptr} \uff0c\u8fd0\u884c\u914d\u7f6e\u3002 encoder_in_names_.data() \u7c7b\u578b\u4e3a const char *const * \uff0cC\u98ce\u683c\u5b57\u7b26\u4e32\u6570\u7ec4\uff0c\u8f93\u5165\u8282\u70b9\u540d\u79f0\u3002 inputs.data() \u7c7b\u578b\u4e3a const T * \uff0c\u8f93\u5165\u6570\u636e\u3002 encoder_out_names_.data() \u7c7b\u578b\u4e3a const char *const * \uff0cC\u98ce\u683c\u5b57\u7b26\u4e32\u6570\u7ec4\uff0c\u8f93\u51fa\u8282\u70b9\u540d\u79f0\u3002 encoder_out_names_.size() \u7c7b\u578b\u4e3a size_t \uff0c\u8f93\u51fa\u8282\u70b9\u540d\u79f0\u7684\u4e2a\u6570\u3002 OnnxRuntime: Ort::Session Struct Reference ctc_ort_outputs[0].GetTensorMutableData<float>(); \u83b7\u53d6\u5f20\u91cf\u5185\u90e8\u539f\u59cb\u6570\u636e\u7684\u6307\u9488\uff0c\u7528\u4e8e\u76f4\u63a5\u8bfb\u53d6\u3001\u5199\u5165\u3001\u4fee\u6539\u5f20\u91cf\u7684\u6570\u636e\uff0c\u8fd4\u56de\u7684\u6307\u9488\u5728\u5f20\u91cf\u9500\u6bc1\u524d\u5747\u6709\u6548\u3002 Attention Rescore\u539f\u7406 \u5c06CTC\u89e3\u7801\u7ed3\u679c\u4f5c\u4e3a\u76ee\u6807\u503c\uff0c\u9001\u5165\u89e3\u7801\u5668\u4e2d\u8fdb\u884c\u8ba1\u7b97\uff0c\u89e3\u7801\u5668\u8f93\u51fa\u6b63\u5411\u548c\u9006\u5411\u7684softmax\u5f97\u5206\uff0c\u4f5c\u4e3a\u6b63\u5411\u548c\u9006\u5411\u89e3\u7801\u5668\u7684 AttentionScore \uff0c\u8ba1\u7b97\u5f97\u5230\u6700\u7ec8\u7684 rescoring_score \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 # wenet/wenet/bin/export_onnx_cpu.py::export_decoder # \u5c06\u89e3\u7801\u5668\u7684forward()\u51fd\u6570\u66ff\u6362\u4e3a\u5bf9\u5e94torch.jit\u7248\u672c\u7684forward_attention_decoder() decoder . forward = decoder . forward_attention_decoder # wenet/wenet/transformer/asr_model.py::forward_attention_decoder() # \u5c06\u89e3\u7801\u5668\u7684log_softmax\u7ed3\u679c\u4f5c\u4e3ascore\u8f93\u51fa decoder_out , r_decoder_out , _ = self . decoder ( encoder_out , encoder_mask , hyps , hyps_lens , r_hyps , reverse_weight ) # (num_hyps, max_hyps_len, vocab_size) decoder_out = torch . nn . functional . log_softmax ( decoder_out , dim =- 1 ) # right to left decoder may be not used during decoding process, # which depends on reverse_weight param. # r_dccoder_out will be 0.0, if reverse_weight is 0.0 r_decoder_out = torch . nn . functional . log_softmax ( r_decoder_out , dim =- 1 ) return decoder_out , r_decoder_out # wenet/wenet/transformer/asr_model.py::BiTransformerDecoder::forward() # \u7b2c\u4e09\u4e2a\u5165\u53c2\u5b9e\u9645\u662f\u5df2\u586b\u5145\u7684\u76ee\u6807\u6587\u672c\u5e8f\u5217 def forward ( self , memory : torch . Tensor , memory_mask : torch . Tensor , ys_in_pad : torch . Tensor , ys_in_lens : torch . Tensor , r_ys_in_pad : torch . Tensor , reverse_weight : float = 0.0 , ) -> Tuple [ torch . Tensor , torch . Tensor , torch . Tensor ]: ... runtime\u8c03\u7528\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 // wenet/runtime/core/decoder/onnx_asr_model.cc::OnnxAsrModel::AttentionRescoring() // \u9001\u5165\u89e3\u7801\u5668\u4f5c\u4e3atarget\u7684\u5f20\u91cf\u5b9e\u9645\u5c31\u662fCTC\u89e3\u7801\u7ed3\u679c Ort :: Value hyps_pad_tensor_ = Ort :: Value :: CreateTensor < int64_t > ( memory_info , hyps_pad . data (), hyps_pad . size (), hyps_pad_shape , 2 ); ... rescore_inputs . emplace_back ( std :: move ( hyps_lens_tensor_ )); ... // \u542f\u52a8\u4f1a\u8bdd\uff0c\u6267\u884c\u89e3\u7801\u5668\u63a8\u7406\u51fa\u6b63\u5411\u548c\u9006\u5411\u7684attention score std :: vector < Ort :: Value > rescore_outputs = rescore_session_ -> Run ( Ort :: RunOptions { nullptr }, rescore_in_names_ . data (), rescore_inputs . data (), rescore_inputs . size (), rescore_out_names_ . data (), rescore_out_names_ . size ()); float * decoder_outs_data = rescore_outputs [ 0 ]. GetTensorMutableData < float > (); float * r_decoder_outs_data = rescore_outputs [ 1 ]. GetTensorMutableData < float > (); ... // \u5229\u7528CTC\u89e3\u7801\u7ed3\u679c\u548cAttention\u89e3\u7801\u5668\u8ba1\u7b97\u51farescoring_score // combined left-to-right and right-to-left score ( * rescoring_score )[ i ] = score * ( 1 - reverse_weight ) + r_score * reverse_weight ; \u4f5c\u4e1a\u5e2e\uff1a\u57fa\u4e8e WeNet + ONNX \u7684\u7aef\u5230\u7aef\u8bed\u97f3\u8bc6\u522b\u65b9\u6848 \u864e\u7259\u5728 WeNet \u4e2d\u5f00\u6e90 ONNX \u63a8\u7406\u652f\u6301 \u8bba\u5982\u4f55\u4f18\u96c5\u5730\u5728 WeNet \u4e2d\u652f\u6301 ONNX \u5bfc\u51fa \u6a21\u578b\u90e8\u7f72\u5165\u95e8\u6559\u7a0b\uff08\u4e94\uff09\uff1aONNX \u6a21\u578b\u7684\u4fee\u6539\u4e0e\u8c03\u8bd5 - \u77e5\u4e4e torch.onnx \u2014 PyTorch master documentation \u6a21\u578b\u90e8\u7f72\u5165\u95e8\u6559\u7a0b\uff08\u4e09\uff09\uff1aPyTorch \u8f6c ONNX \u8be6\u89e3 - \u77e5\u4e4e PyTorch (\u53ef\u9009\uff09\u5c06\u6a21\u578b\u4ece PyTorch \u5bfc\u51fa\u5230 ONNX \u5e76\u4f7f\u7528 ONNX Runtime \u8fd0\u884c_w3cschool tag:: #TODO","title":"wenet\u5bf9onnx\u7684\u652f\u6301"},{"location":"asr/wenet%E5%AF%B9onnx%E7%9A%84%E6%94%AF%E6%8C%81/#wenetonnx","text":"","title":"wenet\u5bf9onnx\u7684\u652f\u6301"},{"location":"asr/wenet%E5%AF%B9onnx%E7%9A%84%E6%94%AF%E6%8C%81/#pytorchonnx","text":"Pytorch\u8f6cONNX\u5b9e\u9645\u4e0a\u662f\u5c06\u6a21\u578b\u7684\u6bcf\u4e00\u4e2aop\u8f6c\u5316\u4e3aONNX\u5b9a\u4e49\u7684\u67d0\u4e00\u4e2a\u7b97\u5b50\uff0c\u6bd4\u5982\u5bf9\u4e8ePytorch\u4e2d\u7684 nn.Upsample() \u548c F.interpolate() \uff0c\u5728\u8f6c\u6362\u4e3aONNX\u540e\u6700\u7ec8\u90fd\u4f1a\u6210\u4e3aONNX\u7684 Resize \u7b97\u5b50\u3002\u901a\u8fc7\u4fee\u6539\u7ee7\u627f\u81ea torch.autograd.Function \u7b97\u5b50\u7684 symbolic \u65b9\u6cd5\uff0c\u53ef\u4ee5\u6539\u53d8\u8be5\u7b97\u5b50\u6620\u5c04\u5230ONNX\u7b97\u5b50\u7684\u884c\u4e3a\u3002 \u6a21\u578b\u90e8\u7f72\u5165\u95e8\u6559\u7a0b\uff08\u4e8c\uff09\uff1a\u89e3\u51b3\u6a21\u578b\u90e8\u7f72\u4e2d\u7684\u96be\u9898 - \u77e5\u4e4e torch.onnx \u2014 PyTorch master documentation Pytorch\u8f6cONNX\u683c\u5f0f\u7684 torch.onnx.export() \u51fd\u6570\u9700\u8981 torch.jit.ScriptModule \uff0c\u800c\u4e0d\u662f torch.nn.Module \uff0c\u5982\u679c\u4f20\u5165\u7684\u6a21\u578b\u4e0d\u662f ScriptModule \u5f62\u5f0f\uff0c\u8be5\u51fd\u6570\u4f1a\u5229\u7528tracing\u65b9\u5f0f\uff0c\u8ffd\u8e2a\u6d41\u5165tensor\u7684\u6d41\u5411\uff0c\u6765\u8bb0\u5f55\u6a21\u578b\u8fd0\u7b97\u65f6\u7684\u6240\u6709\u64cd\u4f5c\u5e76\u8f6c\u4e3aScriptModule\uff1a \u8ddf\u8e2a\u6cd5\u53ea\u80fd\u901a\u8fc7\u5b9e\u9645\u8fd0\u884c\u4e00\u904d\u6a21\u578b\u7684\u65b9\u6cd5\u5bfc\u51fa\u6a21\u578b\u7684\u9759\u6001\u56fe\uff0c\u65e0\u6cd5\u8bc6\u522b\u51fa\u6a21\u578b\u4e2d\u7684\u63a7\u5236\u6d41\uff08\u5982\u5faa\u73af\uff09\u548c\u8fd0\u884c\u65f6\u7684\u52a8\u6001\u53d8\u5316\uff1b\u8bb0\u5f55\u6cd5\u5219\u80fd\u901a\u8fc7\u89e3\u6790\u6a21\u578b\u6765\u6b63\u786e\u8bb0\u5f55\u6240\u6709\u7684\u63a7\u5236\u6d41\u3002 \u6a21\u578b\u90e8\u7f72\u5165\u95e8\u6559\u7a0b\uff08\u4e09\uff09\uff1aPyTorch \u8f6c ONNX \u8be6\u89e3 - \u77e5\u4e4e tracing\u65b9\u5f0f\u7684\u8f6c\u6362\u4f1a\u5bfc\u81f4\u6a21\u578b\u65e0\u6cd5\u5bf9\u52a8\u6001\u7684\u64cd\u4f5c\u8fdb\u884c\u6355\u83b7\uff0c\u6bd4\u5982\u5bf9torch.tensor\u7684\u52a8\u6001\u5207\u7247\u64cd\u4f5c\u4f1a\u88ab\u5f53\u505a\u56fa\u5b9a\u7684\u957f\u5ea6\u5207\u7247\uff0c\u4e00\u65e6\u5207\u7247\u7684\u957f\u5ea6\u53d1\u751f\u53d8\u5316\u5c31\u4f1a\u89e6\u53d1\u9519\u8bef\u3002\u4e3a\u4e86\u5bf9\u8fd9\u4e9b\u52a8\u6001\u64cd\u4f5c\u8fdb\u884c\u4fdd\u5b58\uff0c\u53ef\u4ee5\u4f7f\u7528scripting\u7684\u65b9\u5f0f\uff0c\u76f4\u63a5\u5c06\u52a8\u6001\u64cd\u4f5c\u6d41\u6539\u5199\u4e3aScriptModule\u3002","title":"Pytorch\u8f6cONNX"},{"location":"asr/wenet%E5%AF%B9onnx%E7%9A%84%E6%94%AF%E6%8C%81/#onnx","text":"","title":"\u5bfc\u51faONNX"},{"location":"asr/wenet%E5%AF%B9onnx%E7%9A%84%E6%94%AF%E6%8C%81/#torchonnxexport","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 # wenet/wenet/bin/export_onnx_cpu.py encoder = asr_model . encoder ... inputs = ( chunk , offset , required_cache_size , att_cache , cnn_cache , att_mask ) ... encoder_outpath = os . path . join ( args [ 'output_dir' ], 'encoder.onnx' ) ... dynamic_axes = { 'chunk' : { 1 : 'T' }, # chunk\u5f20\u91cf\u5728axis=1\u4e0a\u662f\u53ef\u53d8\u7684\uff0c\u8be5axis=1\u7ef4\u5ea6\u540d\u4e3aT 'att_cache' : { 2 : 'T_CACHE' }, 'att_mask' : { 2 : 'T_ADD_T_CACHE' }, 'output' : { 1 : 'T' }, 'r_att_cache' : { 2 : 'T_CACHE' }, } ... torch . onnx . export ( encoder , # model (torch.nn.Module, torch.jit.ScriptModule or torch.jit.ScriptFunction) inputs , # \u6a21\u578b\u8f93\u5165\u53c2\u6570\u3002\u5bfc\u51fa\u65f6\u53ef\u4ee5\u6784\u5efa\u968f\u673a\u7b49\u5927\u7684\u5f20\u91cf\u4f5c\u4e3a\u8f93\u5165\u53c2\u6570\uff0c\u7528\u4e8e\u6a21\u578b\u7684\u5f20\u91cf\u8ddf\u8e2a encoder_outpath , # \u5bfc\u51faonnx\u6587\u4ef6\u7684\u8def\u5f84 opset_version = 13 , # \u8f6c\u6362\u65f6\u53c2\u8003\u54ea\u4e2aONNX\u7b97\u5b50\u96c6\u7248\u672c export_params = True , # \u662f\u5426\u5bfc\u51fa\u6a21\u578b\u7684\u53c2\u6570 do_constant_folding = True , # \u5e38\u6570\u6298\u53e0\u4f18\u5316\uff0c\u5bf9\u4ec5\u8f93\u51fa\u5e38\u6570\u7684op\u76f4\u63a5\u7528\u5e38\u6570\u4ee3\u66ff input_names = [ 'chunk' , 'offset' , 'required_cache_size' , 'att_cache' , 'cnn_cache' , 'att_mask' ], # \u5206\u914d\u7ed9\u8ba1\u7b97\u56fe\u8f93\u5165\u8282\u70b9\u7684\u540d\u79f0\uff0c\u9700\u8981\u548c`inputs`\u987a\u5e8f\u4e00\u81f4 output_names = [ 'output' , 'r_att_cache' , 'r_cnn_cache' ], # \u5206\u914d\u7ed9\u8ba1\u7b97\u56fe\u8f93\u51fa\u8282\u70b9\u7684\u540d\u79f0\uff0c\u6709\u5e8f dynamic_axes = dynamic_axes , # \u6307\u5b9a\u5f20\u91cf\u7684\u53ef\u53d8\u7ef4\u5ea6 verbose = False ) # \u6253\u5370\u8f93\u51fa\u6a21\u578b\u7684\u63cf\u8ff0 torch.onnx.export() \u4e2d dynamic_axes \u53c2\u6570\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e9b\u5f20\u91cf\u7684\u53ef\u53d8\u7ef4\u5ea6\uff0c\u5f62\u5f0f\u4e3a dict<string, dict<python:int, string>> or dict<string, list(int)>, default empty dict \u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5bfc\u51fa\u7684\u6a21\u578b\u5c06\u6240\u6709\u8f93\u5165\u8f93\u51fa\u5f20\u91cf\u7684\u5927\u5c0f\u5747\u8bbe\u7f6e\u4e3a\u7ed9\u5b9a\u5f20\u91cf\u7684\u5927\u5c0f\uff0c\u4e3a\u4e86\u6307\u5b9a\u5f20\u91cf\u7684\u4e00\u4e9b\u7ef4\u5ea6\u662f\u52a8\u6001\u53ef\u53d8\u7684\uff0c\u53ef\u4ee5\u8bbe\u7f6e dynamic_axes \uff0c\u5176\u4e2d\uff1a KEY(str) \uff1a\u5927\u5c0f\u53ef\u53d8\u7684\u8f93\u5165/\u8f93\u51fa\u5f20\u91cf\u540d\uff0c\u5f20\u91cf\u540d\u9700\u8981\u5728 input_names \u548c output_names \u4e2d\u3002 VALUE (dict or list) \uff1a\u5982\u679c\u662f dict \uff0c key \u662f\u53ef\u53d8\u5927\u5c0f\u5bf9\u5e94\u7684\u7ef4\u5ea6\uff0c value \u662f\u5bf9\u5e94\u7ef4\u5ea6\u540d\uff1b\u5982\u679c\u662f list \uff0c\u6bcf\u4e2a\u5143\u7d20\u8868\u793a\u53ef\u53d8\u5927\u5c0f\u5bf9\u5e94\u7684\u7ef4\u5ea6\u3002 \u53c2\u6570 opset_version \u6307\u5b9a\u7684ONNX\u7b97\u5b50\u96c6\u7248\u672c\u53ef\u53c2\u8003 onnx/Operators.md at main \u00b7 onnx/onnx \u00b7 GitHub \u3002\u5728Pytorch\u4e2d\uff0c\u548cONNX\u6709\u5173\u7684\u5b9a\u4e49\u5b58\u653e\u5728 pytorch/torch/onnx at master \u00b7 pytorch/pytorch \u00b7 GitHub \uff1a \u5176\u4e2d\uff0c symbolic_opset{n}.py \uff08\u7b26\u53f7\u8868\u6587\u4ef6\uff09\u8868\u793a Pytorch \u5728\u652f\u6301\u7b2c n \u7248 ONNX \u7b97\u5b50\u96c6\u65f6\u65b0\u52a0\u5165\u7684\u5185\u5bb9\uff0c\u53ef\u4ee5\u5728\u8be5\u76ee\u5f55\u4e0b\u67e5\u627ePytorch\u5230ONNX\u7b97\u5b50\u7684\u6620\u5c04\u3002 \u5728\u5b9e\u9645\u5e94\u7528\u65f6\u53ef\u4ee5\u5728 torch.onnx.export() \u7684 opset_version \u4e2d\u5148\u9884\u8bbe\u4e00\u4e2a\u7248\u672c\u53f7\uff0c\u78b0\u5230\u95ee\u9898\u5c31\u53bb\u5bf9\u5e94\u7684Pytorch\u7b26\u53f7\u8868\u6587\u4ef6\u91cc\u53bb\u67e5\u3002\u5982\u679c\u67d0\u7b97\u5b50\u786e\u5b9e\u4e0d\u5b58\u5728\uff0c\u6216\u8005\u7b97\u5b50\u7684\u6620\u5c04\u5173\u7cfb\u4e0d\u6ee1\u8db3\u8981\u6c42\uff0c\u5c31\u53ef\u80fd\u9700\u8981\u5229\u7528\u5176\u5b83\u7b97\u5b50\u7ed5\u8fc7\u53bb\uff0c\u6216\u8005\u81ea\u5b9a\u4e49\u7b97\u5b50\u3002 onnx/Operators.md at main \u00b7 onnx/onnx \u00b7 GitHub \u6a21\u578b\u90e8\u7f72\u5165\u95e8\u6559\u7a0b\uff08\u4e09\uff09\uff1aPyTorch \u8f6c ONNX \u8be6\u89e3 - \u77e5\u4e4e","title":"torch.onnx.export"},{"location":"asr/wenet%E5%AF%B9onnx%E7%9A%84%E6%94%AF%E6%8C%81/#nonetype","text":"\u5728\u6d41\u5f0f\u89e3\u7801\u65f6\uff0c\u521a\u5f00\u59cb\u7684\u82e5\u5e72chunk\u4e2d\u7f16\u7801\u5668\u7684cache\u4e3a\u7a7a\u3002ONNX\u8f6c\u5199\u7684\u6a21\u578b\u4e0d\u652f\u6301NoneType\u8f93\u5165\uff0c\u4f46Torch\u548cONNX\u5747\u53ef\u4ee5\u63a5\u53d7\u7ef4\u5ea6\u4e2d\u5b58\u57280\u7684tensor\uff0c\u4e14\u53ef\u4ee5\u5bf9\u8fd9\u79cdtensor\u8fdb\u884c\u5e38\u89c4\u7684\u5207\u7247\u548c\u62fc\u63a5\u64cd\u4f5c\uff0c\u6bd4\u5982\uff1a 1 2 3 4 5 6 a = torch . ones (( 1 , 2 , 0 , 4 )) # \u7ef4\u5ea6\u4e2d\u5b58\u57280\u7684tensor b = torch . ones (( 1 , 2 , 3 , 4 )) c = torch . cat (( a , b ), dim = 2 ) torch . equal ( b , c ) # True d = torch . split ( a , 2 , dim =- 1 ) torch . equal ( d [ 0 ], d [ 1 ]) # True \u56e0\u6b64\u53ef\u4ee5\u5f15\u5165\u957f\u5ea6\u4e3a0\u3001\u5143\u7d20\u503c\u4e3a0\u7684dummy\u5f20\u91cf\u4ee3\u66ffNoneType\u3002","title":"NoneType\u7c7b\u578b\u53c2\u6570"},{"location":"asr/wenet%E5%AF%B9onnx%E7%9A%84%E6%94%AF%E6%8C%81/#cache","text":"torch.onnx.export() \u5229\u7528tracing\u65b9\u5f0f\u8ffd\u8e2atensor\u6d41\u5411\u65f6\uff0c\u65e0\u6cd5\u6355\u83b7\u52a8\u6001\u64cd\u4f5c\u3002\u5728\u7f16\u7801\u5668\u66f4\u65b0\u7f13\u5b58\u65f6\uff0c\u9700\u8981\u5229\u7528 next_cache_start \u5bf9\u4e0a\u4e00\u65f6\u523b\u7684\u8ba1\u7b97\u4ea7\u7269\u8fdb\u884c\u5207\u7247\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # wenet/wenet/transformer/encoder.py # required_cache_size < 0\uff0816 chunksize / -1 leftchunks\uff09 if required_cache_size < 0 : # \u8be5\u5206\u652f\u4e0b\uff0cnext_cache_start\u59cb\u7ec8\u4e3a0 next_cache_start = 0 # required_cache_size == 0\uff0816 chunksize / 0 leftchunks\uff09 elif required_cache_size == 0 : # \u8be5\u5206\u652f\u4e0b\uff0cnext_cache_start\u59cb\u7ec8\u4e3aattention_key_size # \u800cattention_key_size\u662f\u8d85\u53c2\u6570\u8ba1\u7b97\u51fa\u6765\u7684\u5b9a\u503c next_cache_start = attention_key_size # required_cache_size > 0\uff0816 chunksize / 4 leftchunks\uff09 else : # \u8be5\u5206\u652f\u4e0b\uff0cnext_cache_start\u52a8\u6001\u53d8\u5316 next_cache_start = max ( attention_key_size - required_cache_size , 0 ) \u572816/-1\u548c16/0\u7684\u89e3\u7801\u914d\u7f6e\u4e0b\uff0c\u4e0d\u4f1a\u4ea7\u751f\u52a8\u6001\u64cd\u4f5c\u3002\u4f46\u662f\u572816/4\u7684\u89e3\u7801\u914d\u7f6e\u4e0b\uff0c\u5982\u679c\u5bf9\u7b2c\u4e00\u4e2achunk\u9001\u5165\u957f\u5ea6\u4e3a0\u7684cache\uff0c\u90a3\u4e48\u524d4\u4e2achunk\u7684 next_cache_start \u5747\u4e3a0\uff0c\u800c\u5bf9\u7b2c5\u4e2a\u53ca\u5176\u4e4b\u540e\u7684chunk\uff0c\u7531\u4e8e next_cache_start \u5c06\u53d8\u4e3a attention_key_size - required_cache_size \uff0c\u8ba1\u7b97\u5f97\u5230\u7684 next_cache_start \u4e0d\u518d\u662f0\uff0c\u8fd9\u5c31\u662f\u6240\u8c13\u7684\u52a8\u6001\u53d8\u5316\u3002 att_cache \u7f13\u5b58\u591a\u5934\u6ce8\u610f\u529b\u7684key\u548cvalue\uff0c next_cache_start \u8868\u793a\u4e0b\u4e00\u4e2a att_cache \u5728\u65f6\u95f4\u7ef4\u5ea6\u4e0a\u8d77\u59cb\u70b9\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 # wenet/wenet/transformer/encoder.py # new_att_cache\u662f\u8ba1\u7b97\u5b8c\u6210\u591a\u5934\u6ce8\u610f\u529b\u4f46\u5c1a\u672a\u5229\u7528new_cache_start\u8fdb\u884c\u5207\u7247\u5e76\u66f4\u65b0\u7684\u6ce8\u610f\u529b\u7f13\u5b58 # \u6240\u8c13\u7684\u6ce8\u610f\u529b\u7f13\u5b58`att_cache`\u5b9e\u9645\u4e0a\u5c31\u662f\u7f13\u5b58\u4e0a\u4e00\u4e2achunk\u4e2d\u7684\u591a\u5934\u6ce8\u610f\u529b\u7684key\u548cvalue # new_att_cache\u662f\u5bf9key\u548cvalue\u8fdb\u884cconcat: new_att_cache=torch.cat((k, v),dim=-1) # \u56e0\u6b64new_att_cache\u7684\u6700\u540e\u4e00\u4e2a\u7ef4\u5ea6\u9700\u8981\u4e58\u4ee52 # shape(new_att_cache) is (1, head, attention_key_size, d_k * 2) # attention_key_size = cache_t1 + chunk_size # cache_t1 = required_cache_size = chunk_size * num_decoding_left_chunks # So, shape(new_att_cache[:, :, next_cache_start:, :]) in 16/4 # always be (1, head, chunk_size * num_decoding_left_chunks, d_k * 2) r_att_cache . append ( new_att_cache [:, :, next_cache_start :, :]) \u4e3a\u4e86\u4fdd\u8bc1\u572816/4\u914d\u7f6e\u4e0b next_cache_start \u7684\u503c\u5728\u63a8\u7406\u7684\u5168\u8fc7\u7a0b\u4e2d\u7ef4\u6301\u4e0d\u53d8\uff0c\u5bf9\u7b2c\u4e00\u4e2achunk \u9001\u5165\u957f\u5ea6\u4e3a required_cache_size \u800c\u975e\u957f\u5ea6\u4e3a0\u7684cache\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u4ece\u7b2c\u4e00\u4e2a chunk \u5f00\u59cb\u5c31\u9001\u5165\u201c\u771f\u5b9e\u201d\u7684 cache\uff0c\u53ea\u662f\u8be5cache\u7684\u5143\u7d20\u503c\u5747\u4e3a0\uff0c\u5e76\u5229\u7528 att_mask \u6307\u793a\u8be5\u90e8\u5206\u7684cache\u4e3aFalse\uff0c\u6b64\u65f6 next_cache_start == attention_key_size - required_cache_size \u6052\u6210\u7acb\uff0c\u4e5f\u5373\u5bf9\u4e8e\u7b2c\u4e00\u4e2a\u53ca\u4e4b\u540e\u7684chunk\uff0c next_cache_start == chunk_size \u6052\u6210\u7acb\u3002","title":"cache\u4e2d\u7684\u52a8\u6001\u53d8\u5316"},{"location":"asr/wenet%E5%AF%B9onnx%E7%9A%84%E6%94%AF%E6%8C%81/#_1","text":"\u5982\u679c\u4f7f\u7528tracing\u65b9\u5f0f\u8f6c\u5199\u6210ONNX\uff0c\u5bf9 torch.tensor \u7684\u5207\u7247\u53ea\u80fd\u662f\u9759\u6001\u5207\u7247\uff0c\u6bd4\u5982 data[\uff1a3] = new_data \uff0c\u8fd9\u91cc\u76843\u53ea\u80fd\u662f\u56fa\u5b9a\u503c3\uff0c\u4e0d\u80fd\u662f\u4f20\u5165\u7684tensor\uff0c\u6bd4\u5982 data[:data.shape[0]] \u5728ONNX\u7684opset<13\u65f6\u662f\u4e0d\u652f\u6301\u7684\u3002 \u53ef\u4ee5\u4f9d\u9760\u4f20\u5165\u7684 torch.tensor \u4f5c\u4e3aindex\uff0c\u5b9e\u73b0tracing\u65b9\u5f0f\u4e0b\u5bf9\u5f20\u91cf\u7684\u52a8\u6001\u5207\u7247\uff0c\u6bd4\u5982 data[torch.tensor([1,2])] \u3002WeNet\u6d41\u5f0f\u89e3\u7801\u65f6\uff0c\u6bcf\u4e2a\u65f6\u523b\u90fd\u9700\u8981\u7f16\u7801\u5668\u5bf9\u8f93\u5165\u7684cache\u8fdb\u884c\u5207\u7247\uff0c\u6bcf\u6b21\u5747\u4f20\u5165\u5207\u7247index\u4f1a\u5c06\u6a21\u578b\u53d8\u5f97\u590d\u6742\u3002\u6b64\u65f6\u5c06\u9700\u8981\u52a8\u6001\u5207\u7247\u7684\u64cd\u4f5c\u901a\u8fc7scripting\u65b9\u5f0f\u76f4\u63a5\u6539\u5199\u4e3aScriptModule\u662f\u66f4\u4f18\u7b56\u7565\uff0c\u6bd4\u5982\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 @torch . jit . script def slice_helper ( x , offset ): return x [:, - offset : , : ] chunk = x . size ( 1 ) - output_cache . size ( 1 ) # x_q = x[:, -chunk:, :] # residual = residual[:, -chunk:, :] # mask = mask[:, -chunk:, :] # \u66f4\u6539\u4e3a\uff1a x_q = slice_helper ( x , chunk ) residual = slice_helper ( residual , chunk ) mask = slice_helper ( mask , chunk ) \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u5c06 torch.nn.Module \u8f6c\u4e3a torch.jit.ScriptModule \uff0c\u6a21\u578b\u65e0\u6cd5\u8fdb\u884c\u8bad\u7ec3\uff0c\u6b64\u65f6\u53ef\u4ee5\u5c06\u8bad\u7ec3\u4ee3\u7801\u548c\u8f6c\u5199\u4ee3\u7801\u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u5b9e\u9645\u4e0a\u4e5f\u53ef\u4ee5\u7b80\u5355\u5730\u5728\u4f7f\u7528\u5230scripting\u7684\u6a21\u5757\u4e2d\uff0c\u6dfb\u52a0bool\u5c5e\u6027onnx_mode\uff0c\u5728\u8bad\u7ec3\u65f6\u8bbe\u7f6e\u4e3aFalse\uff0c\u8f6c\u5199\u65f6\u8bbe\u7f6e\u4e3aTrue\u5373\u53ef\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 @torch . jit . script def slice_helper ( x , offset ): return x [:, - offset : , : ] chunk = x . size ( 1 ) - output_cache . size ( 1 ) if onnx_mode : x_q = slice_helper ( x , chunk ) residual = slice_helper ( residual , chunk ) mask = slice_helper ( mask , chunk ) else : x_q = x [:, - chunk :, :] residual = residual [:, - chunk :, :] mask = mask [:, - chunk :, :] \u5f53\u7136\uff0copset>=13 \u65f6\uff0cONNX\u5df2\u7ecf\u76f4\u63a5\u652f\u6301\u4e0a\u8ff0\u7684\u52a8\u6001\u5207\u7247\u64cd\u4f5c\uff1a 1 2 3 4 5 6 7 8 9 10 # \u5728\u5bfc\u51fa\u65f6\uff0c\u5c06opset\u8bbe\u7f6e\u4e3a13\uff0c\u5373\u53ef\u76f4\u63a5\u652f\u6301\u52a8\u6001\u5207\u7247\uff0c\u65e0\u9700\u4efb\u4f55\u4ee3\u7801\u5c42\u9762\u7684\u6539\u52a8 torch . onnx . export ( encoder , inputs , encoder_outpath , opset_version = 13 , export_params = True , do_constant_folding = True , input_names = [ 'chunk' , 'offset' , 'required_cache_size' , 'att_cache' , 'cnn_cache' , 'att_mask' ], output_names = [ 'output' , 'r_att_cache' , 'r_cnn_cache' ], dynamic_axes = dynamic_axes , verbose = False )","title":"\u52a8\u6001\u5207\u7247"},{"location":"asr/wenet%E5%AF%B9onnx%E7%9A%84%E6%94%AF%E6%8C%81/#tracingtensor","text":"tracing\u65b9\u5f0f\u53ea\u80fd\u901a\u8fc7\u8ffd\u8e2a tensor \u6d41\u5411\u6765\u5b9a\u4f4d\u53c2\u4e0e\u7684\u8fd0\u7b97\uff0c\u800c\u65e0\u6cd5\u8ffd\u8e2a\u5176\u5b83\u7c7b\u578b\u6bd4\u5982 List[tensor] \u3002\u56e0\u6b64encoder\u6a21\u5757\u4e2d\u7684 forward_chunk() \u51fd\u6570\u5404\u4e2a\u5c42\u7684cache\u4e0d\u80fd\u4f7f\u7528 list \u6765\u4fdd\u5b58\uff0c\u800c\u5fc5\u987b\u901a\u8fc7 torch.cat() \u51fd\u6570\u5408\u5e76\u6210tensor\uff0c\u5426\u5219\u5728\u8c03\u7528ONNX\u6a21\u578b\u65f6\uff0c\u5bf9\u6a21\u578b\u8f93\u51fa\u7684\u7d22\u5f15\u5c06\u4f1a\u51fa\u9519\u3002\u6bd4\u5982\uff1a 1 r_conformer_cnn_cache . append ( new_cnn_cache ) \u8f93\u51fa\u5bf9\u5e94\u7d22\u5f15\u4f4d\u7f6e\u7684\u503c\uff0c\u4e0d\u662f r_conformer_cnn_cache \uff0c\u800c\u662f r_conformer_cnn_cache[0] \u3002\u56e0\u6b64\u5e94\u6539\u4e3a\uff1a 1 r_conformer_cnn_cache = torch . cat (( r_conformer_cnn_cache , new_cnn_cache . unsqueeze ( 0 )), 0 )","title":"tracing\u53ea\u8ffd\u8e2atensor"},{"location":"asr/wenet%E5%AF%B9onnx%E7%9A%84%E6%94%AF%E6%8C%81/#onnxpad_sequence","text":"\u91cd\u65b0\u8bbe\u8ba1\u4e86\u4e00\u4e2a\u4e0e pad_sequence() \u7b49\u4ef7\u4e14\u80fd\u88abONNX\u611f\u77e5\u5230shape\u53d8\u5316\u7684\u51fd\u6570\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 # https://github.com/wenet-e2e/wenet/blob/main/wenet/transformer/asr_model.py#L683-L721 # `pad_sequence` is not supported by ONNX, it is used # in `reverse_pad_list` thus we have to refine the below code. # Issue: https://github.com/wenet-e2e/wenet/issues/1113 # Equal to: # >>> r_hyps = reverse_pad_list(r_hyps, r_hyps_lens, float(self.ignore_id)) # >>> r_hyps, _ = add_sos_eos(r_hyps, self.sos, self.eos, self.ignore_id) max_len = torch . max ( r_hyps_lens ) index_range = torch . arange ( 0 , max_len , 1 ) . to ( encoder_out . device ) seq_len_expand = r_hyps_lens . unsqueeze ( 1 ) seq_mask = seq_len_expand > index_range # (beam, max_len) # >>> seq_mask # >>> tensor([[ True, True, True], # >>> [ True, True, True], # >>> [ True, False, False]]) index = ( seq_len_expand - 1 ) - index_range # (beam, max_len) # >>> index # >>> tensor([[ 2, 1, 0], # >>> [ 2, 1, 0], # >>> [ 0, -1, -2]]) index = index * seq_mask # >>> index # >>> tensor([[2, 1, 0], # >>> [2, 1, 0], # >>> [0, 0, 0]]) r_hyps = torch . gather ( r_hyps , 1 , index ) # >>> r_hyps # >>> tensor([[3, 2, 1], # >>> [4, 8, 9], # >>> [2, 2, 2]]) r_hyps = torch . where ( seq_mask , r_hyps , self . eos ) # >>> r_hyps # >>> tensor([[3, 2, 1], # >>> [4, 8, 9], # >>> [2, eos, eos]]) r_hyps = torch . cat ([ hyps [:, 0 : 1 ], r_hyps ], dim = 1 ) # >>> r_hyps # >>> tensor([[sos, 3, 2, 1], # >>> [sos, 4, 8, 9], # >>> [sos, 2, eos, eos]])","title":"ONNX\u4e0d\u652f\u6301pad_sequence"},{"location":"asr/wenet%E5%AF%B9onnx%E7%9A%84%E6%94%AF%E6%8C%81/#_2","text":"\u901a\u8fc7ONNX\u7684metadata\u63a5\u53e3\uff0c\u5b9e\u73b0\u5c06\u8d85\u53c2\u6570\u5168\u90e8\u5b58\u5165ONNX\u6a21\u578b\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # wenet/wenet/bin/export_onnx_cpu.py # \u5199\u5165\uff08python\u7248\u672c\uff09 onnx_encoder = onnx . load ( encoder_outpath ) for ( k , v ) in args . items (): meta = onnx_encoder . metadata_props . add () meta . key , meta . value = str ( k ), str ( v ) onnx . save ( onnx_encoder , encoder_outpath ) # python\u7248\u672c\u7684\u8bfb\u53d6 ort_session = onnxruntime . InferenceSession ( encoder_outpath ) meta = ort_session . get_modelmeta () print ( \" \\t\\t custom_metadata_map= {} \" . format ( meta . custom_metadata_map )) // cpp\u7248\u672c\u7684\u8bfb\u53d6 // wenet / runtime / core / decoder / onnx_asr_model . cc auto model_metadata = encoder_session_ -> GetModelMetadata (); Ort :: AllocatorWithDefaultOptions allocator ; encoder_output_size_ = std :: move ( atoi ( model_metadata . LookupCustomMetadataMap ( \"output_size\" , allocator )));","title":"\u8d85\u53c2\u6570\u8bfb\u5199"},{"location":"asr/wenet%E5%AF%B9onnx%E7%9A%84%E6%94%AF%E6%8C%81/#_3","text":"\u901a\u8fc7tracing\u8ffd\u8e2a\u6a21\u578b\uff0c\u5982\u679c\u6a21\u578b\u4f20\u5165\u7684tensor\u6ca1\u6709\u88ab\u4f7f\u7528\uff0c\u5bfc\u51fa\u7684\u6a21\u578b\u5c06\u4f1a\u8ba4\u4e3a\u4e0d\u4f1a\u8f93\u5165\u8be5\u53c2\u6570\uff0c\u5982\u679c\u540e\u7eed\u8f93\u5165\u8be5\u53c2\u6570\u5c06\u4f1a\u5bfc\u81f4\u62a5\u9519\u3002 ONNX\u4e0d\u652f\u6301tensor\u8f6cbool\u7684\u64cd\u4f5c\uff0c\u8bad\u7ec3\u65f6python\u811a\u672c\u4e2d\u5927\u91cf\u7684assert\u5c06\u65e0\u6cd5\u4f7f\u7528\u3002","title":"\u5176\u5b83"},{"location":"asr/wenet%E5%AF%B9onnx%E7%9A%84%E6%94%AF%E6%8C%81/#onnx_1","text":"ONNX Runtime \u662f\u7531\u5fae\u8f6f\u7ef4\u62a4\u7684\u8de8\u5e73\u53f0\u673a\u5668\u5b66\u4e60\u63a8\u7406\u52a0\u901f\u5668\uff0c\u4e5f\u5373\u201d\u63a8\u7406\u5f15\u64ce\u201c\uff0c\u53ef\u5b9e\u73b0Pytorch->ONNX->ONNX Runtime\u8fd9\u6761\u90e8\u7f72\u6d41\u6c34\u7ebf\u3002WeNet ONNX\u63a8\u7406\u6d41\u7a0b\u4e3a\uff1a\u52a0\u8f7d\u6a21\u578b\u548c\u8d85\u53c2\u6570->\u521d\u59cb\u5316cache->encoder\u63a8\u7406->CTC\u63a8\u7406->attention rescoring\u63a8\u7406\u3002 onnx_asr_model \u548c torch_asr_model \u5747\u7ee7\u627f\u81ea asr_model \uff0c asr_model \u4e2d\u5b9a\u4e49\u4e86 Reset() \u3001 ForwardEncoderFunc() \u548c AttentionRescoring() \u4e09\u4e2a\u7eaf\u865a\u51fd\u6570\uff1a Reset() \u5b9e\u73b0\u4e86 offset_ \u3001 att_cache_ \u7b49cache\u7684\u521d\u59cb\u5316\u3002 ForwardEncoderFunc() \u5305\u542b\u4e86encoder\u548cCTC\u63a8\u7406\u3002 AttentionRescoring() \u5bf9\u8bc6\u522b\u7ed3\u679c\u505a\u91cd\u6253\u5206\u3002 [C++ ONNX Runtime APIs]\u5747\u5b9a\u4e49\u5728 Ort \u547d\u540d\u7a7a\u95f4\u4e0b\u3002","title":"ONNX\u63a8\u7406"},{"location":"asr/wenet%E5%AF%B9onnx%E7%9A%84%E6%94%AF%E6%8C%81/#onnx_2","text":"ONNX\u9ed8\u8ba4\u91c7\u7528\u591a\u6838\u52a0\u901f\u89e3\u7801\uff0c\u8bbe\u7f6eONNX\u7ebf\u7a0b\u6570\u7684\u4ee3\u7801\u4e3a\uff1a 1 2 3 4 5 6 7 8 9 10 // wenet/runtime/core/decoder/onnx_asr_model.cc Ort :: SessionOptions OnnxAsrModel :: session_options_ = Ort :: SessionOptions (); ... // \u4f1a\u8bdd\u7ebf\u7a0b\u6570\u7684\u914d\u7f6e session_options_ . SetIntraOpNumThreads ( num_threads ); session_options_ . SetInterOpNumThreads ( num_threads ); ... // \u4f7f\u7528\u914d\u7f6e\u542f\u52a8\u4f1a\u8bdd encoder_session_ = std :: make_shared < Ort :: Session > ( env_ , encoder_onnx_path . c_str (), session_options_ );","title":"ONNX\u7ebf\u7a0b\u6570\u7684\u914d\u7f6e"},{"location":"asr/wenet%E5%AF%B9onnx%E7%9A%84%E6%94%AF%E6%8C%81/#_4","text":"\u7531\u4e8e\u5bfc\u51faONNX\u65f6\uff0c\u5b58\u5728\u4e0d\u540c\u7684 chunk_size/num_decoding_left_chunks \u914d\u7f6e\uff0c\u6b64\u65f6ONNX\u4f1a\u81ea\u52a8\u4f18\u5316\u6389\u65e0\u7528\u53c2\u6570\uff0c\u8fd9\u5c06\u5bfc\u81f4\u6a21\u578b encoder.onnx \u7684\u5165\u53c2\u4e0d\u4e00\u6837\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u5f53\u4f7f\u7528 16/-1 \u3001 -1/-1 \u548c 16/0 \u65f6\uff0c next_cache_start \u5c06\u4f1a\u88abONNX\u786c\u7f16\u7801\u4e3a0\u6216 chunk_size \uff0c\u56e0\u6b64\u4e0d\u518d\u9700\u8981 required_cache_size \u548c att_mask \uff0c\u8fd9\u4e24\u4e2a\u53c2\u6570\u4e5f\u5c06\u4f1a\u88abONNX\u81ea\u52a8\u79fb\u9664\u3002 \u7531\u4e8e\u7f16\u7801\u5668\u7684\u5165\u53c2\u4f1a\u53d1\u751f\u53d8\u5316\uff0c\u5bf9\u4e8e encoder.onnx \uff0c\u4f1a\u5148\u83b7\u53d6\u8f93\u5165\u53c2\u6570\u540d\u5217\u8868\uff0c\u5728\u51c6\u5907\u7f16\u7801\u5668\u7684\u8f93\u5165\u65f6\uff0c\u6839\u636e\u53c2\u6570\u540d\u5217\u8868\uff0c\u6311\u9009\u76f8\u5e94\u53d8\u91cf\u4f5c\u4e3a\u8f93\u5165\u3002\u800c\u5bf9\u4e8e\u7f16\u7801\u5668\u7684\u8f93\u51fa\u3001CTC\u548c\u89e3\u7801\u5668\u7684\u8f93\u5165\u548c\u8f93\u51fa\uff0c\u4e5f\u5168\u90e8\u91c7\u7528\u4ece\u6a21\u578b\u8bfb\u53d6\u53c2\u6570\u540d\u5217\u8868\u7684\u65b9\u5f0f\uff0c\u907f\u514d\u624b\u5de5\u5b9a\u4e49\u53c2\u6570\u540d\u5217\u8868\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 // wenet/runtime/core/decoder/onnx_asr_model.cc //\u6839\u636eencoder_in_names_\u51c6\u5907\u8f93\u5165 std :: vector < Ort :: Value > inputs ; for ( auto name : encoder_in_names_ ) { if ( ! strcmp ( name , \"chunk\" )) { inputs . emplace_back ( std :: move ( feats_ort )); } else if ( ! strcmp ( name , \"offset\" )) { inputs . emplace_back ( std :: move ( offset_ort )); } else if ( ! strcmp ( name , \"required_cache_size\" )) { inputs . emplace_back ( std :: move ( required_cache_size_ort )); } else if ( ! strcmp ( name , \"att_cache\" )) { inputs . emplace_back ( std :: move ( att_cache_ort_ )); } else if ( ! strcmp ( name , \"cnn_cache\" )) { inputs . emplace_back ( std :: move ( cnn_cache_ort_ )); } else if ( ! strcmp ( name , \"att_mask\" )) { inputs . emplace_back ( std :: move ( att_mask_ort )); } }","title":"\u7f16\u7801\u5668\u7684\u5165\u53c2\u4e2a\u6570\u4e0d\u786e\u5b9a"},{"location":"asr/wenet%E5%AF%B9onnx%E7%9A%84%E6%94%AF%E6%8C%81/#int","text":"\u5728runtime\u9636\u6bb5\uff0c\u6784\u9020int\u7c7b\u578b\u7684\u5f20\u91cf\u9700\u8981\u8fdb\u884c\u7279\u6b8a\u5904\u7406\u3002\u521b\u5efa\u5f20\u91cf\u7684 CreateTensor() \u51fd\u6570\u7b7e\u540d\u4e3a\uff1a 1 2 3 4 5 static Value Ort::Value::CreateTensor(const OrtMemoryInfo * info, T * p_data, size_t p_data_element_count, const int64_t * shape, size_t shape_len) \u5176\u4e2d\uff1a info \uff1a\u7528\u6237\u7f13\u51b2\u533a\u6240\u5728\u7684\u5185\u5b58\u63cf\u8ff0\uff0c\u6bd4\u5982CPU\u6216GPU\u3002 p_data \uff1a\u6307\u5411\u7528\u6237\u63d0\u4f9b\u7684\u7f13\u51b2\u533a\u6307\u9488\u3002 p_data_element_count \uff1a\u7528\u6237\u7f13\u51b2\u533a\u7684\u5143\u7d20\u4e2a\u6570\u3002 shape \uff1a\u7528\u6237\u7f13\u51b2\u533a\u7684\u5f20\u91cf\u5927\u5c0f\u3002 shape_len \uff1a\u5f20\u91cf\u5927\u5c0f shape \u7684\u7ef4\u5ea6\u4e2a\u6570\u3002 \u5728\u6784\u9020int\u7c7b\u578b\u7684\u5f20\u91cf\u65f6\uff0c CreateTensor() \u51fd\u6570\u91cc shape \u548c shape_len \u4e24\u4e2a\u5f62\u53c2\u5e94\u5206\u522b\u4f20\u5165\u7a7a\u6307\u9488\u548c0\uff1a 1 2 3 4 5 6 7 8 9 10 11 // wenet/runtime/core/decoder/onnx_asr_model.cc // \u4e00\u822c\u5f20\u91cf\u7684\u6784\u9020 // chunk const int64_t feats_shape [ 3 ] = { 1 , num_frames , feature_dim }; Ort :: Value feats_ort = Ort :: Value :: CreateTensor < float > ( memory_info , feats . data (), feats . size (), feats_shape , 3 ); // int\u7c7b\u578b\u5f20\u91cf\u7684\u6784\u9020 // offset int64_t offset_int64 = static_cast < int64_t > ( offset_ ); Ort :: Value offset_ort = Ort :: Value :: CreateTensor < int64_t > ( memory_info , & offset_int64 , 1 , std :: vector < int64_t > {}. data (), 0 );","title":"int\u7c7b\u578b\u53c2\u6570"},{"location":"asr/wenet%E5%AF%B9onnx%E7%9A%84%E6%94%AF%E6%8C%81/#ort","text":"Ort\u73af\u5883\u53d8\u91cf\u4fdd\u5b58\u7740\u5176\u5b83\u5bf9\u8c61\u4f7f\u7528\u7684\u65e5\u5fd7\u72b6\u6001\uff0c\u5fc5\u987b\u5728\u4f7f\u7528ONNXRuntime\u7684\u5176\u5b83\u51fd\u6570\u4e4b\u524d\u521b\u5efa\u597d\u73af\u5883\u53d8\u91cf\uff0c\u8de8\u7ebf\u7a0b\u5171\u4eab\u73af\u5883\uff0c\u5e76\u4e14\u5e94\u5c06\u5176\u8bbe\u7f6e\u4e3a\u5168\u5c40\u53d8\u91cf\u3002 1 2 3 4 5 6 7 8 // sessions // NOTE(Mddct): The Env holds the logging state used by all other objects. // One Env must be created before using any other Onnxruntime functionality. static Ort :: Env env_ ; // shared environment across threads. static Ort :: SessionOptions session_options_ ; std :: shared_ptr < Ort :: Session > encoder_session_ = nullptr ; std :: shared_ptr < Ort :: Session > rescore_session_ = nullptr ; std :: shared_ptr < Ort :: Session > ctc_session_ = nullptr ;","title":"Ort\u73af\u5883\u53d8\u91cf"},{"location":"asr/wenet%E5%AF%B9onnx%E7%9A%84%E6%94%AF%E6%8C%81/#_5","text":"\u7528\u4e8e\u6784\u9020 att_cache_ort_ \u7684 att_cache_ \u5e94\u8bbe\u7f6e\u4e3a\u5168\u5c40\u53d8\u91cf\uff0c\u8fd9\u662f\u56e0\u4e3aONNXRuntime\u5728\u6784\u5efa\u5f20\u91cf att_cache_ort_ \u65f6\u4e0d\u4f1a\u5bf9 att_cache_ \u91cc\u9762\u7684\u6570\u636e\u8fdb\u884c\u62f7\u8d1d\uff0c\u800c\u53ea\u662f\u7ef4\u62a4\u4e86\u6307\u5411 att_cache_ \u7684\u6307\u9488\uff0c\u5982\u679c\u5728 Reset() \u51fd\u6570\u4e2d\u5c06 att_cache_ \u58f0\u660e\u4e3a\u5c40\u90e8\u53d8\u91cf\uff0c\u5e76\u7528\u4e8e\u6784\u9020 att_cache_ort_ \uff0c\u5728\u8bc6\u522b\u65f6\u4f1a\u51fa\u73b0\u8fd0\u884c\u65f6\u7a81\u7136\u5d29\u6e83\u7684\u73b0\u8c61\uff0c\u4e3b\u8981\u539f\u56e0\u662f att_cache_ \u4f5c\u4e3a\u5c40\u90e8\u53d8\u91cf\uff0c\u5185\u5b58\u4f1a\u88ab\u7cfb\u7edf\u56de\u6536\uff0c cnn_cache_ \u58f0\u660e\u4e3a\u5168\u5c40\u53d8\u91cf\u7684\u539f\u56e0\u7c7b\u4f3c\u3002 \u800c att_mask_ort \u9700\u8981\u8bbe\u7f6e\u6210\u5c40\u90e8\u53d8\u91cf\u4e3b\u8981\u6709\u4e09\u4e2a\u539f\u56e0\uff1a - att_mask_ort \u9700\u6839\u636e offset_ \u52a8\u6001\u8bbe\u7f6e\u5143\u7d20\u7684\u503c\u3002 - \u6784\u9020\u7f16\u7801\u5668\u7684\u8f93\u5165\u65f6\u4f1a\u901a\u8fc7 std::move \u628a att_mask_ort \u6e05\u7a7a\u3002 - Reset() \u51fd\u6570\u4e0d\u9700\u5bf9 att_mask_ort \u8fdb\u884c\u521d\u59cb\u5316\u3002","title":"\u5168\u5c40\u53d8\u91cf\u548c\u5c40\u90e8\u53d8\u91cf"},{"location":"asr/wenet%E5%AF%B9onnx%E7%9A%84%E6%94%AF%E6%8C%81/#_6","text":"Ort::AllocatorWithDefaultOptions \u5185\u5b58\u5206\u914d\u63a5\u53e3\uff0c\u53ef\u7528\u4e8e\u7528\u6237\u81ea\u5b9a\u4e49\u5185\u5b58\u5206\u914d\u5668\u3002\u5728\u9500\u6bc1\u5185\u5b58\u5206\u914d\u5668\u4e4b\u524d\uff0c\u5fc5\u987b\u786e\u4fdd\u4f7f\u7528\u8be5\u5206\u914d\u5668\u7684\u5bf9\u8c61\u5df2\u7ecf\u5168\u90e8\u88ab\u9500\u6bc1\u3002 OnnxRuntime: OrtAllocator Struct Reference OnnxRuntime: Ort::AllocatorWithDefaultOptions Struct Reference session->GetOutputName(i, allocator) \u83b7\u53d6\u6a21\u578b\u8f93\u51fa\u8282\u70b9\u540d\u79f0\u3002 \u7b2c\u4e00\u4e2a\u5165\u53c2 i \u7c7b\u578b\u4e3aint\uff0c\u8868\u793a\u8f93\u51fa\u8282\u70b9\u7684\u5e8f\u53f7\u3002 \u7b2c\u4e8c\u4e2a\u5165\u53c2 allocator \u5b9a\u4e49\u5185\u5b58\u5206\u914d\u5668\uff0c\u53ef\u7528\u4e8e\u7528\u6237\u81ea\u5b9a\u4e49\u5185\u5b58\u5206\u914d\u5668\u3002 std::make_shared<Ort::Session>(env_, encoder_onnx_path.c_str(), session_options_) \u521b\u5efa\u4f1a\u8bdd\u5bf9\u8c61\uff0c\u548c Tensorflow 1.x \u7c7b\u4f3c\uff0c\u53ea\u6709\u4f1a\u8bdd\u5bf9\u8c61\u624d\u53ef\u4ee5\u6267\u884c\u6a21\u578b\u63a8\u7406\u3002 env_ \u7c7b\u578b\u4e3a Ort::Env \uff0c\u6301\u6709\u6240\u6709\u5bf9\u8c61\u7684\u65e5\u5fd7\u8bb0\u5f55\u72b6\u6001\uff0c\u5728\u4f7f\u7528\u4efb\u4f55ONNXRuntime\u4e4b\u524d\u5fc5\u987b\u5148\u521b\u5efa\u4e00\u4e2a Ort::Env \u3002 encoder_onnx_path.c_str() \u7c7b\u578b\u4e3a const char * \uff0c\u6a21\u578b\u8def\u5f84\u3002 session_options_ \u7c7b\u578b\u4e3a Ort::SessionOptions \uff0c\u7528\u4e8e\u521b\u5efa Session \u5bf9\u8c61\u7684 Options \u5bf9\u8c61\u3002 OnnxRuntime: Ort::Session Struct Reference encoder_session_->Run(Ort::RunOptions{nullptr}, encoder_in_names_.data(), inputs.data(), inputs.size(), encoder_out_names_.data(), encoder_out_names_.size()) \u4f1a\u8bdd\u5bf9\u8c61\u6267\u884c\u6a21\u578b\u63a8\u7406\u3002 Ort::RunOptions{nullptr} \uff0c\u8fd0\u884c\u914d\u7f6e\u3002 encoder_in_names_.data() \u7c7b\u578b\u4e3a const char *const * \uff0cC\u98ce\u683c\u5b57\u7b26\u4e32\u6570\u7ec4\uff0c\u8f93\u5165\u8282\u70b9\u540d\u79f0\u3002 inputs.data() \u7c7b\u578b\u4e3a const T * \uff0c\u8f93\u5165\u6570\u636e\u3002 encoder_out_names_.data() \u7c7b\u578b\u4e3a const char *const * \uff0cC\u98ce\u683c\u5b57\u7b26\u4e32\u6570\u7ec4\uff0c\u8f93\u51fa\u8282\u70b9\u540d\u79f0\u3002 encoder_out_names_.size() \u7c7b\u578b\u4e3a size_t \uff0c\u8f93\u51fa\u8282\u70b9\u540d\u79f0\u7684\u4e2a\u6570\u3002 OnnxRuntime: Ort::Session Struct Reference ctc_ort_outputs[0].GetTensorMutableData<float>(); \u83b7\u53d6\u5f20\u91cf\u5185\u90e8\u539f\u59cb\u6570\u636e\u7684\u6307\u9488\uff0c\u7528\u4e8e\u76f4\u63a5\u8bfb\u53d6\u3001\u5199\u5165\u3001\u4fee\u6539\u5f20\u91cf\u7684\u6570\u636e\uff0c\u8fd4\u56de\u7684\u6307\u9488\u5728\u5f20\u91cf\u9500\u6bc1\u524d\u5747\u6709\u6548\u3002","title":"\u5e38\u7528\u51fd\u6570"},{"location":"asr/wenet%E5%AF%B9onnx%E7%9A%84%E6%94%AF%E6%8C%81/#attention-rescore","text":"\u5c06CTC\u89e3\u7801\u7ed3\u679c\u4f5c\u4e3a\u76ee\u6807\u503c\uff0c\u9001\u5165\u89e3\u7801\u5668\u4e2d\u8fdb\u884c\u8ba1\u7b97\uff0c\u89e3\u7801\u5668\u8f93\u51fa\u6b63\u5411\u548c\u9006\u5411\u7684softmax\u5f97\u5206\uff0c\u4f5c\u4e3a\u6b63\u5411\u548c\u9006\u5411\u89e3\u7801\u5668\u7684 AttentionScore \uff0c\u8ba1\u7b97\u5f97\u5230\u6700\u7ec8\u7684 rescoring_score \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 # wenet/wenet/bin/export_onnx_cpu.py::export_decoder # \u5c06\u89e3\u7801\u5668\u7684forward()\u51fd\u6570\u66ff\u6362\u4e3a\u5bf9\u5e94torch.jit\u7248\u672c\u7684forward_attention_decoder() decoder . forward = decoder . forward_attention_decoder # wenet/wenet/transformer/asr_model.py::forward_attention_decoder() # \u5c06\u89e3\u7801\u5668\u7684log_softmax\u7ed3\u679c\u4f5c\u4e3ascore\u8f93\u51fa decoder_out , r_decoder_out , _ = self . decoder ( encoder_out , encoder_mask , hyps , hyps_lens , r_hyps , reverse_weight ) # (num_hyps, max_hyps_len, vocab_size) decoder_out = torch . nn . functional . log_softmax ( decoder_out , dim =- 1 ) # right to left decoder may be not used during decoding process, # which depends on reverse_weight param. # r_dccoder_out will be 0.0, if reverse_weight is 0.0 r_decoder_out = torch . nn . functional . log_softmax ( r_decoder_out , dim =- 1 ) return decoder_out , r_decoder_out # wenet/wenet/transformer/asr_model.py::BiTransformerDecoder::forward() # \u7b2c\u4e09\u4e2a\u5165\u53c2\u5b9e\u9645\u662f\u5df2\u586b\u5145\u7684\u76ee\u6807\u6587\u672c\u5e8f\u5217 def forward ( self , memory : torch . Tensor , memory_mask : torch . Tensor , ys_in_pad : torch . Tensor , ys_in_lens : torch . Tensor , r_ys_in_pad : torch . Tensor , reverse_weight : float = 0.0 , ) -> Tuple [ torch . Tensor , torch . Tensor , torch . Tensor ]: ... runtime\u8c03\u7528\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 // wenet/runtime/core/decoder/onnx_asr_model.cc::OnnxAsrModel::AttentionRescoring() // \u9001\u5165\u89e3\u7801\u5668\u4f5c\u4e3atarget\u7684\u5f20\u91cf\u5b9e\u9645\u5c31\u662fCTC\u89e3\u7801\u7ed3\u679c Ort :: Value hyps_pad_tensor_ = Ort :: Value :: CreateTensor < int64_t > ( memory_info , hyps_pad . data (), hyps_pad . size (), hyps_pad_shape , 2 ); ... rescore_inputs . emplace_back ( std :: move ( hyps_lens_tensor_ )); ... // \u542f\u52a8\u4f1a\u8bdd\uff0c\u6267\u884c\u89e3\u7801\u5668\u63a8\u7406\u51fa\u6b63\u5411\u548c\u9006\u5411\u7684attention score std :: vector < Ort :: Value > rescore_outputs = rescore_session_ -> Run ( Ort :: RunOptions { nullptr }, rescore_in_names_ . data (), rescore_inputs . data (), rescore_inputs . size (), rescore_out_names_ . data (), rescore_out_names_ . size ()); float * decoder_outs_data = rescore_outputs [ 0 ]. GetTensorMutableData < float > (); float * r_decoder_outs_data = rescore_outputs [ 1 ]. GetTensorMutableData < float > (); ... // \u5229\u7528CTC\u89e3\u7801\u7ed3\u679c\u548cAttention\u89e3\u7801\u5668\u8ba1\u7b97\u51farescoring_score // combined left-to-right and right-to-left score ( * rescoring_score )[ i ] = score * ( 1 - reverse_weight ) + r_score * reverse_weight ; \u4f5c\u4e1a\u5e2e\uff1a\u57fa\u4e8e WeNet + ONNX \u7684\u7aef\u5230\u7aef\u8bed\u97f3\u8bc6\u522b\u65b9\u6848 \u864e\u7259\u5728 WeNet \u4e2d\u5f00\u6e90 ONNX \u63a8\u7406\u652f\u6301 \u8bba\u5982\u4f55\u4f18\u96c5\u5730\u5728 WeNet \u4e2d\u652f\u6301 ONNX \u5bfc\u51fa \u6a21\u578b\u90e8\u7f72\u5165\u95e8\u6559\u7a0b\uff08\u4e94\uff09\uff1aONNX \u6a21\u578b\u7684\u4fee\u6539\u4e0e\u8c03\u8bd5 - \u77e5\u4e4e torch.onnx \u2014 PyTorch master documentation \u6a21\u578b\u90e8\u7f72\u5165\u95e8\u6559\u7a0b\uff08\u4e09\uff09\uff1aPyTorch \u8f6c ONNX \u8be6\u89e3 - \u77e5\u4e4e PyTorch (\u53ef\u9009\uff09\u5c06\u6a21\u578b\u4ece PyTorch \u5bfc\u51fa\u5230 ONNX \u5e76\u4f7f\u7528 ONNX Runtime \u8fd0\u884c_w3cschool tag:: #TODO","title":"Attention Rescore\u539f\u7406"},{"location":"asr/wenet%E6%80%BB%E4%BD%93%E8%A7%A3%E6%9E%90/","text":"wenet\u603b\u4f53\u89e3\u6790 \u53d1\u5c55\u5386\u53f2 GMM-HMM\uff08\u4e0a\u4e16\u7eaa90\u5e74\u4ee3\uff09 \u6df1\u5ea6\u5b66\u4e60\u7206\u53d1\u521d\u671f\uff1a DNN\uff0cCTC\uff082006\uff09 RNN\u6d41\u884c\uff0cAttention\u63d0\u51fa\u521d\u671f\uff1aRNN-T\uff082013\uff09\uff0cDeepSpeech\uff082014\uff09\uff0c DeepSpeech2 (2016)\uff0c LAS\uff082016\uff09 Attetion is all you need\u63d0\u51fa\u5f00\u59cb\uff1aTransformer\uff082017\uff09\uff0cTransformer-transducer\uff082020\uff09\uff0cConformer\uff082020\uff09 \u7aef\u5230\u7aef\u8bc6\u522b\u57fa\u7840 \u4e00\u822c\u5728\u4f20\u7edfHMM\u6846\u67b6\u4e0b\uff0c\u4f1a\u5148\u5229\u7528HMM-GMM\u6a21\u578b\uff0c\u901a\u8fc7\u5bf9\u9f50\u7684\u65b9\u5f0f\uff0c\u5f97\u5230\u5e27\u7ea7\u522b\u7684\u5bf9\u5e94\u6807\u6ce8\uff0c\u518d\u901a\u8fc7\u5e27\u7ea7\u522b\u635f\u5931\u51fd\u6570\u6765\u4f18\u5316\u795e\u7ecf\u7f51\u7edc\u6a21\u578b\u3002\u5982\u4e0b\u662fHMM-DNN\u6a21\u578b\u7684\u8bad\u7ec3\u8fc7\u7a0b\uff1a \u5bf9\u4e8e\u6bcf\u4e2a\u53e5\u5b50\u6269\u5c55\u4e3a\u5355\u97f3\u7d20\u5e8f\u5217\uff0c\u7528\u524d\u5411\u540e\u5411EM\u8bad\u7ec3\uff0c\u5f97\u5230\u5355\u97f3\u7d20\u7684hmm-\u5355\u9ad8\u65afmodel1\u3002 \u7528model1\u5bf9\u53e5\u5b50\u505a\u5bf9\u9f50\uff0c\u5355\u9ad8\u65af\u8fdb\u884c2\u500d\u5206\u88c2\uff0c\u66f4\u65b0\u6a21\u578b\uff0c\u8fed\u4ee3\u8fd9\u4e2a\u5bf9\u9f50/\u5206\u88c2\u7684\u8fc7\u7a0bn\u6b21\uff0c\u5f97\u5230\u5355\u97f3\u7d20\u7684hmm-gmm\u6a21\u578bmodel2\u3002 \u7528model2\u5bf9\u53e5\u5b50\u505a\u5bf9\u9f50\uff0c\u5c06\u97f3\u7d20\u6839\u636e\u4e0a\u4e0b\u6587\u6269\u5c55\u4e3a\u4e09\u97f3\u7d20\uff0c\u4f7f\u7528\u5355\u9ad8\u65af\u5b66\u4e60\u6bcf\u4e2a\u97f3\u7d20\u7684\u51b3\u7b56\u6811\uff0c\u6700\u540e\u6bcf\u4e2a\u53f6\u5b50\u7ed3\u70b9\u5bf9\u5e94\u4e00\u4e2a\u5355\u9ad8\u65af\uff0c\u5f97\u5230\u4e00\u4e2a\u4e09\u97f3\u7d20-hmm-\u5355\u9ad8\u65af\u6a21\u578bmodel3\u3002 \u7c7b\u4f3c\u4e8e\u7b2c2\u6b65\uff0c\u7528model3\u4e0d\u505c\u8fed\u4ee3\u5206\u88c2\u9ad8\u65af\uff0c\u5f97\u5230\u4e09\u97f3\u7d20hmm-gmm\u7684model4\u3002 model4\u5bf9\u53e5\u5b50\u505a\u5bf9\u9f50\uff0c\u5bf9\u9f50\u6570\u636e\u7528\u4e8e\u5e27\u7ea7\u522bNN\u8bad\u7ec3\u3002 ... \u57fa\u4e8e\u795e\u7ecf\u7f51\u7edc\u7684\u7aef\u5230\u7aef\u5efa\u6a21\uff1a \u76f4\u63a5\u4ee5\u76ee\u6807\u5355\u5143\u4f5c\u4e3a\u5efa\u6a21\u5bf9\u8c61\uff0c\u6bd4\u5982\u4e2d\u6587\u4f7f\u7528 \u5b57 \uff0c\u82f1\u6587\u4f7f\u7528 \u5b57\u7b26 \u6216\u8005 BPE \u3002 \u901a\u8fc7\u7279\u6b8a\u7684\u6a21\u578b\uff08\u76ee\u6807\u51fd\u6570\uff09\uff0c\u5904\u7406\u8f93\u5165\u8f93\u51fa\u5bf9\u9f50\u672a\u77e5\u7684\u95ee\u9898\u3002 \u8fd9\u7c7b\u7aef\u5230\u7aef\u6a21\u578b\u5305\u62ec\uff1a \u57fa\u4e8eCTC\uff08Connectionist Temporal Classification\uff09\u76ee\u6807\u51fd\u6570 AED\uff08Attention-based Encoder Decoder\uff09 RNN-T\uff08Recurrent Neural Network Transducer\uff09 CTC\u76ee\u6807\u51fd\u6570 \u4f20\u7edf\u8bed\u97f3\u8bc6\u522b\u901a\u8fc7HMM\u6765\u7ea6\u675f\u8f93\u51fa\u548c\u8f93\u5165\u7684\u5bf9\u9f50\u65b9\u5f0f\uff0c\u65f6\u95f4\u4e0a\u4fdd\u6301\u5355\u8c03\uff0cCTC\u662f\u4e00\u79cd\u7279\u6b8a\u7684HMM\u7ea6\u675f\u3002CTC\u672c\u8d28\u4e0a\u5bf9\u6240\u6709\u5408\u6cd5\u7684\u8f93\u51fa\u548c\u8f93\u5165\u5bf9\u9f50\u65b9\u5f0f\u8fdb\u884c\u4e86\u7a77\u4e3e\uff0c\u6240\u8c13\u5408\u6cd5\uff0c\u5373\u5bf9\u9f50\u540e\u7684\u8f93\u51fa\u5e8f\u5217\u80fd\u591f\u6309CTC\u89c4\u5219\u89c4\u7ea6\u5f97\u5230\u539f\u6807\u6ce8\u5e8f\u5217\uff0c\u5219\u4e3a\u5408\u6cd5\u5bf9\u9f50\u3002 \u4f7f\u7528CTC\u76ee\u6807\u51fd\u6570\u4f1a\u5f15\u5165\u4e00\u4e2ablank\u7684\u8f93\u51fa\u5355\u5143\uff0cCTC\u5bf9\u8f93\u51fa\u5e8f\u5217\u7684\u89c4\u7ea6\u89c4\u5219\u4e3a\uff1a \u5bf9\u8f93\u51fa\u5e8f\u5217\u4e2d\u8fde\u7eed\u7684\u76f8\u540c\u5b57\u7b26\u8fdb\u884c\u5408\u5e76 \u79fb\u9664\u8f93\u51fa\u5e8f\u5217\u4e2d\u7684blank\u5b57\u7b26 \u4e3e\u4f8b\u6765\u8bf4\uff0c\u5047\u8bbe\u8f93\u5165\u5e27\u6570\u4e3a5\u5e27\uff0c\u539f\u6807\u6ce8\u5e8f\u5217\u4e3a\u201c\u6211\u770b\u770b\u201d\uff0c3\u4e2a\u5b57\uff0c\u4f46\u662f\u7f51\u7edc\u9700\u8981\u8f93\u51fa5\u4e2a\u5355\u5143\u624d\u80fd\u8fbe\u5230\u8f93\u5165\u548c\u8f93\u51fa\u4e00\u4e00\u5bf9\u5e94\u3002\u5728CTC\u6a21\u578b\u4e2d\uff0c \u901a\u8fc7\u5bf9\u539f\u6807\u6ce8\u4e2d\u76843\u4e2a\u5355\u5143\u8fdb\u884c\u91cd\u590d\u6216\u8005\u63d2\u5165blank\u6765\u6269\u5c55\u52305\u4e2a\u5355\u5143 \u3002\u4ee5\u4e0b\u662f\u4e24\u4e2a\u53ef\u80fd\u7684\u5e8f\u5217\uff1a 1 2 \u6211\u770b-\u770b\u770b \u6211--\u770b\u770b \u5176\u4e2d\uff0c\u201c-\u201d\u8868\u793ablank\uff0c\u4e0a\u8ff0\u4e24\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u5bf9\u9f50\u8f93\u51fa\u5e8f\u5217\u201c\u6211\u770b-\u770b\u770b\u201d\u662f\u5408\u6cd5\u5bf9\u9f50\u5e8f\u5217\uff0c\u5728\u89c4\u7ea6\u4e4b\u540e\u80fd\u591f\u83b7\u5f97\u539f\u6807\u6ce8\u5e8f\u5217\uff1b\u800c\u7b2c\u4e8c\u4e2a\u5bf9\u9f50\u5e8f\u5217\u201c\u6211--\u770b\u770b\u201d\u5728\u89c4\u7ea6\u4e4b\u540e\u662f\u201c\u6211\u770b\u201d\uff0c\u4e0d\u80fd\u83b7\u5f97\u539f\u6807\u6ce8\u5e8f\u5217\uff0c\u56e0\u6b64\u4e0d\u662f\u5408\u6cd5\u5bf9\u9f50\u5e8f\u5217\u3002\u5f53\u7136\u9664\u4e86\u201c\u6211\u770b-\u770b\u770b\u201d\uff0c\u8fd8\u6709\u975e\u5e38\u591a\u7684\u5408\u6cd5\u5e8f\u5217\uff0c\u6bd4\u5982\uff1a 1 2 3 4 \u6211\u770b\u770b-\u770b \u6211-\u770b-\u770b \u6211\u770b--\u770b ... CTC\u76ee\u6807\u51fd\u6570\u7684\u601d\u60f3\u662f\uff1a\u65e2\u7136\u4e0d\u77e5\u9053\u5230\u5e95\u54ea\u4e2a\u5bf9\u9f50\u5173\u7cfb\u662f\u6b63\u786e\u7684\uff0c\u90a3\u5c31 \u6700\u5927\u5316\u6240\u6709\u5408\u6cd5CTC\u5bf9\u9f50\u7684\u6982\u7387\u4e4b\u548c \u3002\u56e0\u6b64\u5bf9\u4e8e\u8be5\u4f8b\u5b50\uff0c\u76ee\u6807\u5c31\u662f\u6700\u5927\u5316\u5982\u4e0b\u6982\u7387\uff1a \\[ P(\u6211\u770b\u770b|X)=P(\u6211\u770b-\u770b\u770b|X)+P(\u6211\u770b\u770b-\u770b|X)+...+P(\u6211\u770b--\u770b|X) \\] \u6c42\u8be5\u76ee\u6807\u51fd\u6570\u7684\u68af\u5ea6\uff0c\u4e00\u79cd\u65b9\u5f0f\u662f\u7a77\u4e3e\u6240\u6709\u7684\u6709\u6548CTC\u5bf9\u9f50\uff0c\u7136\u540e\u5206\u522b\u6c42\u68af\u5ea6\u76f8\u52a0\uff0c\u4f46\u662f\u8fd9\u79cd\u65b9\u6cd5\u7684\u590d\u6742\u5ea6\u592a\u9ad8\u3002\u7531\u4e8eCTC\u672c\u8eab\u7684\u7ed3\u6784\u7279\u70b9\uff0c\u5b58\u5728\u4e00\u79cd\u66f4\u4e3a\u9ad8\u6548\u7684\u52a8\u6001\u89c4\u5212\u7b97\u6cd5\uff0c\u53ef\u4ee5\u6781\u5927\u63d0\u5347\u901f\u5ea6\uff0c\u53c2\u89c1\uff1a Connectionist Temporal Classification: Labelling Unsegmented Sequence Data with Recurrent Neural Networks \uff0c Eesen\u4e2d\u7684CTC\u5b9e\u73b0 \u89e3\u7801\u65f6\uff0c\u6a21\u578b\u5bf9\u6bcf\u4e00\u4e2a\u8f93\u51fa\u5e27\u90fd\u7ed9\u51fa\u8f93\u51fa\uff0c\u8fd9\u79cd\u89e3\u7801\u65b9\u5f0f\u79f0\u4e3a Frame\u540c\u6b65 \u89e3\u7801\u3002\u5982\u679c\u67d0\u4e9b\u5e27\u8f93\u51fa\u4e3ablank\u6216\u8005\u4e0e\u524d\u4e00\u5e27\u662f\u91cd\u590d\u5b57\u7b26\uff0c\u5219\u53ef\u4ee5\u5408\u5e76\u3002\u7531\u4e8e\u7a77\u4e3e\u5e8f\u5217\u4e2dblank\u6240\u5360\u6bd4\u4f8b\u8f83\u9ad8\uff0c\u56e0\u6b64\u6700\u7ec8\u7684\u6a21\u578b\u503e\u5411\u4e8e\u8f93\u51fa\u5c3d\u53ef\u80fd\u5c11\u7684\u975eblank\u5b57\u7b26\uff0c\u89e3\u7801\u5e8f\u5217\u4e2d\u5f80\u5f80\u975eblank\u5b57\u7b26\u53ea\u8f93\u51fa\u4e00\u4e2a\uff0c\u8fd9\u4e2a\u79f0\u4f5cCTC\u7684 \u5c16\u5cf0\u6548\u5e94 \u3002\u53c2\u89c1\uff1a Sequence Modeling With CTC \u674e\u5b8f\u6bc5\u8001\u5e082020\u6625\u8bfe\u7a0b-\u8bed\u97f3\u8bc6\u522b-\u8bed\u97f3\u5408\u6210-\u8bed\u97f3\u5206\u79bb Attention-based Encoder Decoder AED\uff08Attention-based Encoder Decoder\uff09\uff0c\u4e5f\u79f0Seq2Seq\u6846\u67b6\uff0c\u6216\u8005LAS\uff08Listen, Attend and Spell\uff09\u3002\u6a21\u578b\u4e2dEncoder\u5bf9\u8f93\u5165\u5e8f\u5217\uff08\u8bed\u97f3\uff09\u8fdb\u884c\u7f16\u7801\uff0cDecoder\u5219\u662f\u5728\u76ee\u6807\u5e8f\u5217\uff08Decoder\uff09\u4e0a\u7684\u81ea\u56de\u5f52\u6a21\u578b\uff08\u8f93\u5165\u4e4b\u524d\u7684\u5355\u5143\uff0c\u9884\u6d4b\u4e0b\u4e00\u4e2a\u5355\u5143\uff09\uff0c\u5728\u81ea\u56de\u5f52\u8ba1\u7b97\u4e2d\uff0c\u901a\u8fc7Attention\u83b7\u53d6Encoder\u7684\u7f16\u7801\u4fe1\u606f\uff0c\u4ece\u800c\u5229\u7528\u8f93\u5165\u5e8f\u5217\u7684\u4fe1\u606f\u3002\u5229\u7528Attention\u5b66\u4e60\u8f93\u5165\u8f93\u51fa\u95f4\u9690\u542b\u7684\u5bf9\u9f50\u9002\u7528\u4e8e\u673a\u5668\u7ffb\u8bd1\u8fd9\u7c7b\u4efb\u52a1\uff0c\u4f46\u5bf9\u4e8e\u8bed\u97f3\u8bc6\u522b\u6216\u5408\u6210\u8fd9\u7c7b\u65f6\u5e8f\u5355\u8c03\u6027\u4efb\u52a1\uff0c\u8fd9\u79cd\u65e0\u7ea6\u675f\u53cd\u800c\u4f1a\u5e26\u6765\u4e00\u4e9b\u95ee\u9898\u3002 AED\u7684\u89e3\u7801 \u89e3\u7801\u65f6\u4e0d\u5bf9\u6bcf\u4e00\u4e2a\u8f93\u5165\u5e27\u90fd\u8fdb\u884c\u8f93\u51fa\uff0c\u800c\u662f\u6839\u636e\u6574\u4e2a\u8f93\u5165\u5e8f\u5217\u4fe1\u606f\u548c\u5df2\u8f93\u51fa\u4fe1\u606f\u8fdb\u884c\u4e0b\u4e00\u6b21\u7684\u8f93\u51fa\uff0c\u76f4\u5230\u8f93\u51fa\u4e00\u4e2a\u7279\u6b8a\u7ed3\u675f\u5b57\u7b26\uff0c\u8fd9\u79cd\u89e3\u7801\u65b9\u6cd5\u88ab\u79f0\u4e3a Label\u540c\u6b65 \u89e3\u7801\u3002 CTC\u6ca1\u6709\u663e\u5f0f\u6784\u5efa\u6587\u672c\u548c\u8bed\u97f3\u4e4b\u95f4\u7684\u5173\u7cfb\uff0cRNN-T\u662f\u4e00\u79cd\u663e\u5f0f\u5efa\u6a21\u4e86\u6587\u672c\u548c\u8bed\u97f3\u4e4b\u95f4\u5173\u7cfb\u7684\u5e27\u540c\u6b65\u89e3\u7801\u6a21\u578b\u3002\u6807\u51c6AED\u4e2d\uff0c\u7f16\u89e3\u7801\u4e4b\u95f4\u7684Attention\u9700\u8981\u770b\u5230\u7f16\u7801\u5668\u7684\u5b8c\u6574\u5e8f\u5217\uff0c\u56e0\u6b64\u65e0\u6cd5\u8fdb\u884c\u6d41\u5f0f\u8bc6\u522b\uff0c\u56e0\u6b64\u53ef\u4ee5\u5229\u7528GMM-Attention\u3001MoChA\u3001MMA\u7b49\u5355\u8c03\u9012\u589e\u7684\u5c40\u90e8Attention\u65b9\u6cd5\u8fdb\u884c\u6539\u8fdb\u3002 \u8054\u5408\u5efa\u6a21 \u8054\u5408\u4f7f\u7528CTC loss\u548cAED\u53ef\u4ee5\u6709\u6548\u52a0\u901f\u6a21\u578b\u6536\u655b\uff0c\u540c\u65f6\u53ef\u4ee5\u5f97\u5230\u66f4\u597d\u7684\u8bc6\u522b\u6548\u679c\uff0c\u76ee\u524d\u8be5\u65b9\u6cd5\u5df2\u7ecf\u6210\u4e3a\u7aef\u5230\u7aef\u5b66\u4e60\u7684\u6807\u51c6\u65b9\u6cd5\u3002\u5728\u89e3\u7801\u65f6\uff0c\u540c\u65f6\u4f7f\u7528CTC\u548cAED\u7684\u8f93\u51fa\uff0c\u53ef\u4ee5\u63d0\u9ad8\u8bc6\u522b\u7387\u3002WeNet\u91c7\u7528\u4e86\u5148\u4f7f\u7528CTC\u89e3\u7801\uff0c\u518d\u7528AED\u5bf9CTC\u7684Nbest\u7ed3\u679c\u8fdb\u884cRescoring\uff0c\u8fd9\u6837\u5373\u7ed3\u5408\u4e86\u4e24\u79cd\u6a21\u578b\u7684\u6548\u679c\uff0c\u53c8\u53ef\u4ee5\u5e94\u7528\u4e8e\u6d41\u5f0f\u573a\u666f\u3002 \u964d\u91c7\u6837/\u964d\u5e27\u7387 \u8f93\u5165\u5e8f\u5217\u8d8a\u957f\uff0c\u5373\u5e27\u7684\u4e2a\u6570\u8d8a\u591a\uff0c\u7f51\u7edc\u8ba1\u7b97\u91cf\u5c31\u8d8a\u5927\u3002\u800c\u5728\u8bed\u97f3\u8bc6\u522b\u4e2d\uff0c\u4e00\u5b9a\u65f6\u95f4\u8303\u56f4\u5185\u7684\u8bed\u97f3\u4fe1\u53f7\u662f\u76f8\u4f3c\u7684\uff0c\u591a\u4e2a\u8fde\u7eed\u5e27\u5bf9\u5e94\u7684\u662f\u540c\u4e00\u4e2a\u53d1\u97f3\uff0c\u53e6\u5916\uff0c\u7aef\u5230\u7aef\u8bed\u97f3\u8bc6\u522b\u4f7f\u7528\u5efa\u6a21\u5355\u5143\u4e00\u822c\u662f\u4e00\u4e2a\u65f6\u95f4\u5ef6\u7eed\u8f83\u957f\u7684\u5355\u5143\uff08\u7c97\u7c92\u5ea6\uff09\uff0c\u6bd4\u5982\u5efa\u6a21\u5355\u5143\u662f\u4e00\u4e2a\u4e2d\u6587\u6c49\u5b57\uff0c\u5047\u5982\u4e00\u4e2a\u6c49\u5b57\u7528\u65f60.2s\uff0c0.2s\u5bf9\u5e9420\u5e27\uff0c\u5982\u679c\u5c0620\u5e27\u7684\u4fe1\u606f\u8fdb\u884c\u5408\u5e76\uff0c\u6bd4\u5982\u5408\u5e76\u4e3a5\u5e27\uff0c\u5219\u53ef\u4ee5\u7ebf\u6027\u7684\u51cf\u5c11\u540e\u7eedencoder\u7f51\u7edc\u7684\u524d\u5411\u8ba1\u7b97\u3001CTC loss\u548cAED\u8ba1\u7b97cross attention\u65f6\u7684\u5f00\u9500\u3002 \u53ef\u4ee5\u7528\u4e0d\u540c\u7684\u795e\u7ecf\u7f51\u7edc\u6765\u8fdb\u884c\u964d\u91c7\u6837\uff0cWeNet\u4e2d\u4f7f\u7528\u7684\u662f2D-CNN\u3002 \u6d41\u5f0f\u8bed\u97f3\u8bc6\u522b CTC\u7684\u8f93\u51fa\u76f8\u4e92\u72ec\u7acb\uff0c\u867d\u7136CTC\u89e3\u7801\u662f \u5e27\u540c\u6b65 \u7684\uff0c\u4f46\u662f\u8981\u60f3 \u5982\u679c\u5e0c\u671b\u652f\u6301\u4f4e\u5ef6\u8fdf\u7684\u6d41\u5f0f\u8bc6\u522b\uff0cEncoder\u4e2d\u7684\u8ba1\u7b97\u5bf9\u53f3\u4fa7\u7684\u4f9d\u8d56\u4e0d\u80fd\u592a\u957f\uff1b\u6b64\u5916\uff0cCTC\u53ef\u4ee5\u8fdb\u884c\u5e27\u540c\u6b65\u89e3\u7801\uff0c\u4f46CTC\u8f93\u51fa\u4e4b\u95f4\u76f8\u4e92\u72ec\u7acb\uff0c\u4f7f\u5f97\u6bcf\u4e00\u5e27\u5229\u7528\u4e0a\u4e0b\u6587\u4fe1\u606f\u7684\u80fd\u529b\u4e0d\u8db3\uff0c\u800c\u57fa\u4e8eTransformer\u3001Conformer\u7684\u81ea\u56de\u5f52\u6a21\u578b\u5efa\u6a21\u80fd\u529b\u66f4\u5f3a\uff0c\u4f46\u6807\u51c6\u7684Fully self-attention\u4f1a\u5bf9\u4f9d\u8d56\u6574\u4e2a\u5e8f\u5217\uff0c\u4e0d\u80fd\u8fdb\u884c\u6d41\u5f0f\u8ba1\u7b97\u3002 \u56e0\u6b64WeNet\u91c7\u7528\u4e86 \u57fa\u4e8echunk\u7684attention \uff0c\u5c06\u5e8f\u5217\u5212\u5206\u4e3a\u591a\u4e2a\u56fa\u5b9a\u5927\u5c0f\u7684chunk\uff0c\u6bcf\u4e2achunk\u5185\u90e8\u7684\u5e27\u4e0d\u4f1a\u4f9d\u8d56\u4e8echunk\u53f3\u4fa7\u7684\u5e27\u3002\u540c\u65f6\uff0c \u8fde\u7eed\u5806\u53e0\u7684convolution\u5c42\u4f1a\u5e26\u6765\u8f83\u5927\u7684\u53f3\u4fa7\u4f9d\u8d56 \uff0cWeNet\u5219\u91c7\u7528\u4e86 \u56e0\u679c\u5377\u79ef \u6765\u907f\u514dconvolution\u5c42\u7684\u53f3\u4fa7\u4f9d\u8d56\uff1achunk attention+\u56e0\u679c\u5377\u79ef\u3002 \u6b64\u5916\uff0cWeNet\u91c7\u7528\u4e86CTC Nbest+Attention Rescoring\u7684\u89e3\u7801\u7b56\u7565\uff0c\u9996\u5148\u5229\u7528CTC\u89e3\u7801\u5668\u8f93\u51faNbest\u7684\u89e3\u7801\u7ed3\u679c\uff0c\u7136\u540e\u5229\u7528Attention\u89e3\u7801\u5668\u5bf9Nbest\u8fdb\u884c\u6253\u5206\uff0c\u8f93\u51fa\u5f97\u5206\u6700\u9ad8\u7684\u7ed3\u679c\u3002 WeNet\u7f51\u7edc\u7ed3\u6784 1 2 3 4 5 6 7 8 9 10 11 class ASRModel ( torch . nn . Module ): ... self . encoder = encoder # \u7f16\u7801\u5668\uff0c\u5305\u62ec\u4e0b\u91c7\u6837SubSampling\u7f51\u7edc\u548cTransformer/Conformer\u6a21\u5757 self . decoder = decoder # \u89e3\u7801\u5668\uff0ccross-attention+self-attention self . ctc = ctc # CTC loss self . criterion_att = LabelSmoothingLoss ( # Attention-based Decoder Loss size = vocab_size , padding_idx = ignore_id , smoothing = lsm_weight , normalize_length = length_normalized_loss , ) ASRModel \u7684\u521d\u59cb\u5316\u51fd\u6570\u4e2d\u5b9a\u4e49\u4e86encoder\u3001decoder\u3001ctc\u548ccriterion_att\uff1a encoder\u662fShared Encoder\uff0c\u5176\u4e2d\u5305\u62ec\u4e86Subsampling\u7f51\u7edc decoder\u662fAttention-based Decoder\u7f51\u7edc ctc\u662fctc Decoder\u7f51\u7edc\uff08\u4e5f\u5c31\u662f\u524d\u5411\u7f51\u7edc\u548csoftmax\uff09\u548cctc loss criterion_att\u662fattention-based decoder\u7684\u81ea\u56de\u5f52\u4f3c\u7136loss\uff0c\u5b9e\u9645\u662fLabelSmoothing\u7684loss\u3002 ASRModel \u9664\u4e86\u5b9a\u4e49\u6a21\u578b\u7ed3\u6784\u548c\u5b9e\u73b0\u524d\u5411\u8ba1\u7b97\u4e4b\u5916\uff0c\u8fd8\u6709\u4e24\u4e2a\u529f\u80fd\uff1a \u63d0\u4f9b\u591a\u79cdpython\u7684\u89e3\u7801\u63a5\u53e3 1 2 3 4 recognize () # attention decoder attention_rescoring () # CTC + attention rescoring ctc_prefix_beam_search () # CTC prefix beamsearch ctc_greedy_search () # CTC greedy search, reference: https://zhuanlan.zhihu.com/p/391848454 \u63d0\u4f9bruntime\u4e2d\u9700\u8981\u4f7f\u7528\u7684\u63a5\u53e3\uff0c\u8fd9\u4e9b\u63a5\u53e3\u5747\u6709 @torch.jit.export \u6ce8\u89e3\uff0c\u53ef\u4ee5\u5728C++\u4e2d\u8c03\u7528 1 2 3 4 5 6 7 subsampling_rate () right_context () sos_symbol () eos_symbol () forward_encoder_chunk () forward_attention_decoder () ctc_activation () \u5176\u4e2d\u6bd4\u8f83\u91cd\u8981\u7684\u662f\uff1a forward_attention_decoder : Attention Decoder\u7684\u5e8f\u5217\u524d\u5411\u8ba1\u7b97\uff0c\u975e\u81ea\u56de\u5f52\u6a21\u578b ctc_activation() : CTC Decoder forward\u8ba1\u7b97 forward_encoder_chunk() : \u57fa\u4e8echunk\u7684Encoder forward\u8ba1\u7b97 Encoder\u7f51\u7edc WeNet\u7f16\u7801\u5668\u652f\u6301Transformer\u548cConformer\u4e24\u79cd\u7f51\u7edc\u7ed3\u6784\uff0c BaseEncoder \u5b9a\u4e49\u4e86\u5982\u4e0b\u7edf\u4e00\u7684\u524d\u5411\u8fc7\u7a0b\uff1a 1 2 3 4 5 6 7 xs , pos_emb , masks = self . embed ( xs , masks ) mask_pad = masks # (B, 1, T/subsample_rate) chunk_masks = add_optional_chunk_mask ( xs , ... ) for layer in self . encoders : xs , chunk_masks , _ = layer ( xs , chunk_masks , pos_emb , mask_pad ) if self . normalize_before : xs = self . after_norm ( xs ) \u53ef\u4ee5\u770b\u5230\uff0cEncoder\u7531\u4e24\u90e8\u5206\u7ec4\u6210\uff1a self.embed \u662fSubsampling\u7f51\u7edc self.encoders \u662f\u4e00\u7ec4\u76f8\u540c\u7f51\u7edc\u7ed3\u6784\u7684\u5806\u53e0 \u9664\u4e86forward\u51fd\u6570\u4e4b\u5916\uff0cEncoder\u8fd8\u5b9e\u73b0\u4e86\u4e24\u4e2a\u65b9\u6cd5\uff1a forward_chunk_by_chunk \uff0cpython\u89e3\u7801\u65f6\uff0c\u6a21\u62df\u6d41\u5f0f\u89e3\u7801\u6a21\u5f0f\uff0c\u57fa\u4e8echunk\u524d\u5411\u8ba1\u7b97\u3002 forward_chunk \uff0c\u5355\u6b21\u57fa\u4e8echunk\u7684\u524d\u5411\u8ba1\u7b97\uff0c\u901a\u8fc7ASRModel\u5bfc\u51fa\u4e3a forward_encoder_chunk() \u4f9bruntime\u89e3\u7801\u4f7f\u7528\u3002 \u7f16\u7801\u5668\u7684SubSampling\u7f51\u7edc \u4e00\u65b9\u9762\u4e3a\u4e86\u964d\u4f4e\u8ba1\u7b97\u590d\u6742\u5ea6\uff0c\u53e6\u4e00\u65b9\u9762\u7aef\u5230\u7aefASR\u5efa\u6a21\u9897\u7c92\u5ea6\u8f83\u5927\uff0c\u56e0\u6b64\u9700\u8981\u964d\u91c7\u6837\u3002 \u8bed\u97f3\u4e2d\u6709\u4e24\u79cd\u4f7f\u7528CNN\u7684\u65b9\u5f0f\uff0c\u4e00\u79cd\u662f2D-Conv\uff0c\u4e00\u79cd\u662f1D-Conv\uff1a 2D-Conv: \u8f93\u5165\u6570\u636e\u770b\u4f5c\u662f\u6df1\u5ea6(\u901a\u9053\u6570\uff09\u4e3a1\uff0c\u9ad8\u5ea6\u4e3aF\uff08Fbank\u7279\u5f81\u7ef4\u5ea6\uff0cidim\uff09\uff0c\u5bbd\u5ea6\u4e3aT\uff08\u5e27\u6570\uff09\u7684\u4e00\u5f20\u56fe\u3002 1D-Conv: \u8f93\u5165\u6570\u636e\u770b\u4f5c\u662f\u6df1\u5ea6(\u901a\u9053\u6570\uff09\u4e3aF\uff08Fbank\u7279\u5f81\u7ef4\u5ea6)\uff0c\u9ad8\u5ea6\u4e3a1\uff0c\u5bbd\u5ea6\u4e3aT\uff08\u5e27\u6570\uff09\u7684\u4e00\u5f20\u56fe\u3002 Kaldi\u4e2d\u8457\u540d\u7684TDNN\u5c31\u662f1D-Conv\uff0c\u5728WeNet\u4e2d\u91c7\u75282D-Conv\u5b9e\u73b0\u964d\u91c7\u6837\u3002WeNet\u4e2d\u63d0\u4f9b\u4e86\u591a\u4e2a\u964d\u91c7\u6837\u7f51\u7edc\uff0c\u4f8b\u5982\u5c06\u5e27\u7387\u964d\u4f4e4\u500d\u7684\u7f51\u7edc Conv2dSubsampling4 \uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 class Conv2dSubsampling4 ( BaseSubsampling ): \"\"\"Convolutional 2D subsampling (to 1/4 length). Args: idim (int): Input dimension. odim (int): Output dimension. dropout_rate (float): Dropout rate. \"\"\" def __init__ ( self , idim : int , odim : int , dropout_rate : float , pos_enc_class : torch . nn . Module ): \"\"\"Construct an Conv2dSubsampling4 object.\"\"\" super () . __init__ () self . conv = torch . nn . Sequential ( torch . nn . Conv2d ( 1 , odim , 3 , 2 ), torch . nn . ReLU (), torch . nn . Conv2d ( odim , odim , 3 , 2 ), torch . nn . ReLU (), ) self . out = torch . nn . Sequential ( torch . nn . Linear ( odim * ((( idim - 1 ) // 2 - 1 ) // 2 ), odim )) self . pos_enc = pos_enc_class # The right context for every conv layer is computed by: # (kernel_size - 1) * frame_rate_of_this_layer self . subsampling_rate = 4 # 6 = (3 - 1) * 1 + (3 - 1) * 2 self . right_context = 6 \u8fd9\u91cc\u5229\u7528Conv2D\uff0c\u5c06\u8bed\u97f3\u5e27\u5e8f\u5217\u770b\u505a\u662f\u4e00\u4e2a\u65f6\u95f4\u8f74\u4e3a\u957f\uff0c\u901a\u9053\u8f74\u4e3a\u5bbd\uff0c\u6df1\u5ea6\u4e3a1\u7684\u56fe\u50cf\uff0c Conv2dSubsampling4 \u901a\u8fc7\u4e24\u4e2a stride=2 \u76842d-CNN\uff0c\u5c06\u201c\u56fe\u50cf\u201d\u7684\u957f\u548c\u5bbd\u90fd\u964d\u4e3a\u00bc\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 def forward ( self , x : torch . Tensor , x_mask : torch . Tensor , offset : int = 0 ) -> Tuple [ torch . Tensor , torch . Tensor , torch . Tensor ]: \"\"\"Subsample x. Args: x (torch.Tensor): Input tensor (#batch, time, idim). x_mask (torch.Tensor): Input mask (#batch, 1, time). Returns: torch.Tensor: Subsampled tensor (#batch, time', odim), where time' = time // 4. torch.Tensor: Subsampled mask (#batch, 1, time'), where time' = time // 4. torch.Tensor: positional encoding \"\"\" x = x . unsqueeze ( 1 ) # (b, c=1, t, f) x = self . conv ( x ) b , c , t , f = x . size () x = self . out ( x . transpose ( 1 , 2 ) . contiguous () . view ( b , t , c * f )) x , pos_emb = self . pos_enc ( x , offset ) return x , pos_emb , x_mask [:, :, : - 2 : 2 ][:, :, : - 2 : 2 ] \u6ce8\u610f\uff1a conv(x)\u4e2d\u8fdb\u884c\u4e24\u6b21\u5377\u79ef\uff0c\u6b64\u65f6t\u7ef4\u5ea6 \u7ea6\u7b49\u4e8e \u539f\u6765\u7684\u00bc\uff0c\u56e0\u4e3a\u6ca1\u52a0padding\uff0c\u5b9e\u9645\u4e0a\u662f\u4ece\u957f\u5ea6T\u53d8\u4e3a\u957f\u5ea6((T-1)/2-1)/2\uff09\uff0c\u6ce8\u610f\u7ecf\u8fc7\u5377\u79ef\u540e\u6df1\u5ea6\u4e0d\u518d\u662f1\u3002 pos_enc(x, offset) \u7ecf\u8fc7subsampling\u4e4b\u540e\uff0c\u5e27\u6570\u53d8\u5c11\u4e86\uff0c\u6b64\u65f6\u518d\u8ba1\u7b97Positional Embedding\u3002 x_mask\u662f\u539f\u59cb\u5e27\u7387\u4e0b\u7684\u8bb0\u5f55batch\u5404\u5e8f\u5217\u957f\u5ea6\u7684mask\uff0c\u5728\u8ba1\u7b97attention\u4ee5\u53cactc loss\u65f6\u5747\u8981\u4f7f\u7528\uff0c\u73b0\u5728\u5e27\u6570\u964d\u4f4e\u4e86\uff0cx_mask\u4e5f\u8981\u8ddf\u7740\u53d8\u5316\u3002 \u4e0a\u4e0b\u6587\u4f9d\u8d56 \u6ce8\u610f\u5230Conv2dSubsampling4\u4e2d\u7684\u8fd9\u4e24\u4e2a\u53d8\u91cf\uff1a 1 2 self . subsampling_rate = 4 self . right_context = 6 \u8fd9\u4e24\u4e2a\u53d8\u91cf\u90fd\u5728asr_model\u4e2d\u8fdb\u884c\u4e86\u5bfc\u51fa\uff0c\u5728runtime\u65f6\u88ab\u4f7f\u7528\u3002 \u5728CTC\u6216\u8005WFST\u89e3\u7801\u65f6\uff0c\u90fd\u662f\u4e00\u5e27\u4e00\u5e27\u89e3\u7801\u5668\uff0c\u8fd9\u91cc\u7684\u5e27\u6307\u7684\u662f\u4e0b\u91c7\u6837\uff08subsample\uff09\u4e4b\u540e\u7684\u5e27\uff0c\u79f0\u4e4b\u4e3a \u89e3\u7801\u5e27 \uff0c\u800c\u6a21\u578b\u8f93\u5165\u7684\u5e27\u5e8f\u5217\u91cc\u9762\u7684\u5e27\uff08\u4e0b\u91c7\u6837\u4e4b\u524d\u7684\u5e27\uff09\u79f0\u4e3a \u539f\u59cb\u8bed\u97f3\u5e27 \u3002\u4ece\u4e0a\u56fe\u53ef\u4ee5\u770b\u5230\uff1a \u7b2c1\u4e2a\u89e3\u7801\u5e27\uff0c\u9700\u8981\u4f9d\u8d56\u7b2c1\u5230\u7b2c7\u4e2a\u539f\u59cb\u8bed\u97f3\u5e27\u3002 \u7b2c2\u4e2a\u89e3\u7801\u5e27\uff0c\u9700\u8981\u4f9d\u8d56\u7b2c5\u5230\u7b2c11\u4e2a\u539f\u59cb\u8bed\u97f3\u5e27\u3002 \u90a3\u4e48\u4e0a\u8ff0\u4e24\u4e2a\u53d8\u91cf subsampling_rate \u6307\u7684\u5c31\u662f\u5bf9\u4e8e\u76f8\u90bb\u4e24\u4e2a\u89e3\u7801\u5e27\uff0c\u5728\u539f\u59cb\u5e27\u4e0a\u7684\u95f4\u9694\u3002\u8ba1\u7b97\u65b9\u6cd5\uff1a \\((kernel\\_size-1)\\times frame\\_rate\\_of\\_this\\_layer\\) \uff0c\u5176\u4e2d\uff0c \\(frame\\_rate\\_of\\_this\\_layer\\) \u4e3a\u4e00\u4e2a\u4e0b\u91c7\u6837\u5c42\u7684\u4e0b\u91c7\u6837\u500d\u7387\uff0c\u4e0a\u4f8b\u4e2d\u5373\u4e3a \\((3-1)\\times 2=4\\) \u3002 right_context \u6307\u7684\u662f\u5bf9\u4e8e\u67d0\u4e2a\u89e3\u7801\u5e27\uff0c\u5176\u5bf9\u5e94\u7684\u7b2c\u4e00\u4e2a\u539f\u59cb\u5e27\u7684\u53f3\u4fa7\u8fd8\u9700\u8981\u989d\u5916\u4f9d\u8d56\u591a\u5c11\u5e27\uff0c\u624d\u80fd\u83b7\u5f97\u8fd9\u4e2a\u89e3\u7801\u5e27\u7684\u5168\u90e8\u4fe1\u606f\u3002\u8ba1\u7b97\u65b9\u6cd5\uff1a \\(\\sum_{n=1}^{N}(kernel\\_size-1)\\times n\\) \uff0c\u5176\u4e2d\uff0c \\(N\\) \u4e3a\u4e0b\u91c7\u6837\u5c42\u6570\uff0c\u4e0a\u4f8b\u4e2d\u5373\u4e3a \\((3-1)\\times 1+(3-1)\\times 2=6\\) \u3002 \u5728runtime\u89e3\u7801\u5668\u4e2d\uff0c\u6bcf\u6b21\u4f1a\u9001\u5165\u4e00\u7ec4\u5e27\u8fdb\u884c\u524d\u5411\u8ba1\u7b97\u5e76\u89e3\u7801\uff0c\u4e00\u7ec4\uff08chunk\uff09\u5e27\u662f\u5b9a\u4e49\u5728 \u89e3\u7801\u5e27\u7ea7\u522b \u7684\u3002\u5728\u5904\u7406\u7b2c\u4e00\u4e2achunk\u65f6\uff0c\u63a5\u53d7\u8f93\u5165\u83b7\u5f97\u5f53\u524dchunk\u9700\u8981\u7684\u6240\u6709\u7684context\uff0c\u4e4b\u540e\u6bcf\u6b21\u6839\u636echunk\u5927\u5c0f\u548csubsampling_rate\u83b7\u53d6\u65b0\u9700\u8981\u7684\u539f\u59cb\u5e27\u3002\u6bd4\u5982\uff0cchunk_size=1\uff0c\u5219\u7b2c\u4e00\u4e2achunk\u9700\u89811-7\u5e27\uff08\u4e5f\u5373\u7b2c\u4e00\u4e2achunk\u9700\u8981\u4e00\u4e2a\u89e3\u7801\u5e27\u5bf9\u5e94\u7684\u6240\u6709\u539f\u59cb\u5e27\uff09\uff0c\u7b2c\u4e8c\u4e2achunk\u53ea\u8981\u65b0\u62ff\u52308-11\u5e27\u5373\u53ef\uff08\u4e5f\u5373\u4e4b\u540e\u7684chunk\u53ea\u9700\u8981 subsampling_rate \u4e2a\u539f\u59cb\u5e27\uff09\u3002 1 2 3 4 5 6 7 8 // runtime/core/decoder/asr_decoder.cc // AsrModel::num_frames_for_chunk if ( ! start ) { // First batch int context = right_context_ + 1 ; // Add current frame num_requried_frames = ( chunk_size_ - 1 ) * subsampling_rate_ + context ; } else { num_requried_frames = chunk_size_ * subsampling_rate_ ; } \u7531\u4e8e\u7b2c\u4e8c\u5e27\u53ca\u5176\u4e4b\u540e\u7684chunk\u53ea\u9700\u8981 subsampling_rate \u4e2a\u539f\u59cb\u5e27\uff0c\u56e0\u6b64\u9700\u8981\u7f13\u5b58\u524d\u4e00\u4e2achunk\u7684 1+right_context-subsampling_rate \u4e2a\u539f\u59cb\u5e27\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // runtime/core/decoder/asr_decoder.cc void AsrModel::CacheFeature ( const std :: vector < std :: vector < float >>& chunk_feats ) { // Cache feature for next chunk // cached_feature_size\u4e3a\u7f13\u5b58\u5927\u5c0f const int cached_feature_size = 1 + right_context_ - subsampling_rate_ ; if ( chunk_feats . size () >= cached_feature_size ) { // cached_feature_\u5b58\u653e\u7f13\u5b58\u6570\u636e cached_feature_ . resize ( cached_feature_size ); for ( int i = 0 ; i < cached_feature_size ; ++ i ) { cached_feature_ [ i ] = chunk_feats [ chunk_feats . size () - cached_feature_size + i ]; } } } \u7f16\u7801\u5668\u4e2d\u7684Encoders\u6a21\u5757 \u5bf9\u4e8e\u7f16\u7801\u5668\u4e2d\u7684encoders\u6a21\u5757\uff0cWeNet\u63d0\u4f9b\u4e86Transformer\u548cConformer\u4e24\u79cd\u7ed3\u6784\uff0c\u5747\u5728wenet/transformer/encoder_layer.py\u4e2d\u5b9e\u73b0\u3002 Transformer\u7684self.encoders\u7531\u4e00\u7ec4TransformerEncoderLayer\u7ec4\u6210\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 class TransformerEncoder ( BaseEncoder ): \"\"\"Transformer encoder module.\"\"\" def __init__ ( self , input_size : int , output_size : int = 256 , attention_heads : int = 4 , linear_units : int = 2048 , num_blocks : int = 6 , dropout_rate : float = 0.1 , positional_dropout_rate : float = 0.1 , attention_dropout_rate : float = 0.0 , input_layer : str = \"conv2d\" , pos_enc_layer_type : str = \"abs_pos\" , normalize_before : bool = True , concat_after : bool = False , static_chunk_size : int = 0 , use_dynamic_chunk : bool = False , global_cmvn : torch . nn . Module = None , use_dynamic_left_chunk : bool = False , ): \"\"\" Construct TransformerEncoder See Encoder for the meaning of each parameter. \"\"\" assert check_argument_types () super () . __init__ ( input_size , output_size , attention_heads , linear_units , num_blocks , dropout_rate , positional_dropout_rate , attention_dropout_rate , input_layer , pos_enc_layer_type , normalize_before , concat_after , static_chunk_size , use_dynamic_chunk , global_cmvn , use_dynamic_left_chunk ) self . encoders = torch . nn . ModuleList ([ TransformerEncoderLayer ( output_size , MultiHeadedAttention ( attention_heads , output_size , attention_dropout_rate ), PositionwiseFeedForward ( output_size , linear_units , dropout_rate ), dropout_rate , normalize_before , concat_after ) for _ in range ( num_blocks ) ]) Conformer\u7684self.encoders\u7531\u4e00\u7ec4ConformerEncoderLayer\u7ec4\u6210\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 self . encoders = torch . nn . ModuleList ([ ConformerEncoderLayer ( output_size , encoder_selfattn_layer ( * encoder_selfattn_layer_args ), positionwise_layer ( * positionwise_layer_args ), positionwise_layer ( * positionwise_layer_args ) if macaron_style else None , convolution_layer ( * convolution_layer_args ) if use_cnn_module else None , dropout_rate , normalize_before , concat_after , ) for _ in range ( num_blocks ) ]) Conformer\u539f\u59cb\u8bba\u6587\u4e2dconformer block\u7684\u7ed3\u6784\u5982\u56fe\uff1a ConformerEncoderLayer\u6d89\u53ca\u7684\u4e3b\u8981\u6a21\u5757\u6709\uff1a encoder_selfattn_layer positionwise_layer convolution_layer \u5982\u679c\u4e0d\u8003\u8651cache\uff0c\u4f7f\u7528 normalize_before=True , feed_forward_macaron=True \uff0c\u5219WeNet\u4e2d\u7684ConformerEncoderLayer\u7684forward\u53ef\u4ee5\u7b80\u5316\u4e3a\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 class ConformerEncoderLayer ( nn . Module ): def forward ( self , x : torch . Tensor , mask : torch . Tensor , pos_emb : torch . Tensor , mask_pad : Optional [ torch . Tensor ] = None , output_cache : Optional [ torch . Tensor ] = None , cnn_cache : Optional [ torch . Tensor ] = None , ) -> Tuple [ torch . Tensor , torch . Tensor , torch . Tensor ]: \"\"\"Compute encoded features. Args: x (torch.Tensor): (#batch, time, size) mask (torch.Tensor): Mask tensor for the input (#batch, time\uff0ctime). pos_emb (torch.Tensor): positional encoding, must not be None for ConformerEncoderLayer. mask_pad (torch.Tensor): batch padding mask used for conv module. (#batch, 1\uff0ctime) output_cache (torch.Tensor): Cache tensor of the output (#batch, time2, size), time2 < time in x. cnn_cache (torch.Tensor): Convolution cache in conformer layer Returns: torch.Tensor: Output tensor (#batch, time, size). torch.Tensor: Mask tensor (#batch, time). \"\"\" x = self . norm_ff_macaron ( x ) x = self . feed_forward_macaron ( x ) x = residual + 0.5 * self . dropout ( x ) residual = x x = self . norm_mha ( x ) x_att = self . self_attn ( x , x , x , pos_emb , mask ) x = residual + self . dropout ( x_att ) residual = x x = self . norm_conv ( x ) x , new_cnn_cache = self . conv_module ( x , mask_pad , cnn_cache ) x = x + self . dropout ( x ) residual = x x = self . norm_ff ( x ) x = self . feed_forward ( x ) x = residual + 0.5 * self . dropout ( x ) x = self . norm_final ( x ) \u53ef\u4ee5\u770b\u5230\uff0c\u5bf9\u4e8eencoder_selfattn_layer\uff0cpositionwise_layer\uff0cconvolution_layer\uff0c\u90fd\u662f\u524d\u6709Layernorm\uff0c\u540e\u6709Dropout\uff0c\u518d\u642d\u914d\u6b8b\u5deeResidual\u3002 encoder_selfattn_layer \u5177\u4f53\u5b9e\u73b0\u4f4d\u4e8ewenet/transformer/attention.py attention.py\u4e2d\u63d0\u4f9b\u4e86\u4e24\u79cdattention\u7684\u5b9e\u73b0\uff0c MultiHeadedAttention \u548c RelPositionMultiHeadedAttention \u3002 MultiHeadedAttention \u7528\u4e8eTransformer\uff0c RelPositionMultiHeadedAttention \u7528\u4e8eConformer\u3002\u539f\u59cb\u7684Conformer\u8bba\u6587\u4e2d\u63d0\u5230\u7684self-attention\u662fRelative Position Multi Headed Attention\uff0c\u8fd9\u662ftransformer-xl\u4e2d\u63d0\u51fa\u7684\u4e00\u79cd\u6539\u8fdbattention\uff0c\u548c\u6807\u51c6attention\u7684\u533a\u522b\u5728\u4e8e\uff0c\u5176\u4e2d \u663e\u5f0f\u5229\u7528\u4e86\u76f8\u5bf9\u4f4d\u7f6e\u4fe1\u606f \uff0c\u53c2\u89c1\uff1a Conformer ASR\u4e2d\u7684Relative Positional Embedding \u3002 positionwise_layer \u5177\u4f53\u5b9e\u73b0\u4f4d\u4e8ewenet/transformer/positionwise_feed_forward.py \u524d\u5411\u4eff\u5c04\u53d8\u6362\uff0c\u5c06 \\([B,T,H1]\\) \u53d8\u4e3a \\([B,T,H2]\\) \uff0c\u4e24\u4e2aLinear\uff0c\u7b2c\u4e00\u4e2a\u540e\u8ddf\u6fc0\u6d3b\u51fd\u6570\u548cDropout\uff0c\u7b2c\u4e8c\u4e2a\u76f4\u63a5\u8f93\u51fa\u3002 convolution_layer \u5177\u4f53\u5b9e\u73b0\u4f4d\u4e8ewenet/transformer/convolution.py WeNet\u91c7\u7528\u4e86\u56e0\u679c\u5377\u79ef\uff08Causal Convolution\uff09\uff0c\u5373\u4e0d\u770b\u53f3\u4fa7\u4e0a\u4e0b\u6587\uff0c \u8fd9\u6837\u65e0\u8bba\u6a21\u578b\u542b\u6709\u591a\u5c11\u5377\u79ef\u5c42\uff0c\u5bf9\u53f3\u4fa7\u7684\u4e0a\u4e0b\u6587\u5747\u6ca1\u6709\u4f9d\u8d56 \u3002 \u5982\u4e0a\u56fe\u5de6\u3001\u4e2d\u56fe\u6240\u793a\uff0c\u6807\u51c6\u7684\u5377\u79ef\u4e3a\u4e86\u4fdd\u8bc1\u5377\u79ef\u540e\u5e8f\u5217\u957f\u5ea6\u4e00\u81f4\uff0c\u9700\u8981\u5728\u5de6\u53f3\u5404pad\u957f\u5ea6\u4e3a(kernel_size-1)//2\u76840. 1 2 3 4 5 6 7 8 if causal : # \u4f7f\u7528\u56e0\u679c\u5377\u79ef padding = 0 # Conv1D\u51fd\u6570\u8bbe\u7f6e\u7684padding\u957f\u5ea6 self . lorder = kernel_size - 1 # \u56e0\u679c\u5377\u79ef\u5de6\u4fa7\u624b\u52a8padding\u7684\u957f\u5ea6 else : # \u4f7f\u7528\u6807\u51c6\u5377\u79ef # kernel_size should be an odd number for none causal convolution assert ( kernel_size - 1 ) % 2 == 0 padding = ( kernel_size - 1 ) // 2 # Conv1D\u51fd\u6570\u8bbe\u7f6e\u7684padding\u957f\u5ea6 self . lorder = 0 \u5982\u4e0a\u53f3\u56fe\u6240\u793a\uff0c\u56e0\u679c\u5377\u79ef\u7684\u5b9e\u73b0\u5f88\u7b80\u5355\uff0c\u53ea\u8981\u5728\u5de6\u4fa7pad\u957f\u5ea6\u4e3a kernel_size-1 \u76840\uff0c\u5c31\u53ef\u4ee5\u5b9e\u73b0\u56e0\u679c\u5377\u79ef\uff1a 1 2 3 if self . lorder > 0 : if cache is None : x = nn . functional . pad ( x , ( self . lorder , 0 ), 'constant' , 0.0 ) Attention based Decoder\u7f51\u7edc \u5bf9\u4e8eAttention based Decoder\uff0cWeNet\u63d0\u4f9b\u4e86\u81ea\u56de\u5f52Transformer\u548c\u53cc\u5411\u81ea\u56de\u5f52Transformer\u7ed3\u6784\uff0c\u8f93\u5165\u5386\u53f2\u4fe1\u606f\uff0c\u8f93\u51fa\u5f53\u524d\u8bc6\u522b\u7ed3\u679c\uff0c\u8fd9\u79cd\u7f51\u7edc\u89e3\u7801\u65f6\u53ea\u80fd\u4f9d\u6b21\u4ea7\u751f\u8f93\u51fa\uff0c\u800c\u4e0d\u80fd\u4e00\u6b21\u4ea7\u751f\u6574\u4e2a\u8f93\u51fa\u5e8f\u5217\u3002\u548cEncoder\u4e2d\u7684attention\u5c42\u533a\u522b\u5728\u4e8e\uff0cDecoder\u9664\u4e86self attention\u4e4b\u5916\u8fd8\u8981cross attention\u3002 CTC Loss \u5177\u4f53\u5b9e\u73b0\u4f4d\u4e8ewenet/transformer/ctc.py CTC Loss\u5305\u542b\u4e86 CTC decoder \u548c CTC loss \u4e24\u90e8\u5206\uff0cCTC decoder\u4ec5\u4ec5\u5bf9Encoder\u505a\u4e00\u4e2a\u524d\u5411\u7ebf\u6027\u53d8\u6362\uff0c\u7136\u540e\u8ba1\u7b97softmax\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 def forward ( self , hs_pad : torch . Tensor , hlens : torch . Tensor , ys_pad : torch . Tensor , ys_lens : torch . Tensor ) -> torch . Tensor : \"\"\"Calculate CTC loss. Args: hs_pad: batch of padded hidden state sequences (B, Tmax, D) hlens: batch of lengths of hidden state sequences (B) ys_pad: batch of padded character id sequence tensor (B, Lmax) ys_lens: batch of lengths of character sequence (B) \"\"\" # hs_pad: (B, L, NProj) -> ys_hat: (B, L, Nvocab) ys_hat = self . ctc_lo ( F . dropout ( hs_pad , p = self . dropout_rate )) # ys_hat: (B, L, D) -> (L, B, D) ys_hat = ys_hat . transpose ( 0 , 1 ) ys_hat = ys_hat . log_softmax ( 2 ) loss = self . ctc_loss ( ys_hat , ys_pad , hlens , ys_lens ) # Batch-size average loss = loss / ys_hat . size ( 1 ) return loss def log_softmax ( self , hs_pad : torch . Tensor ) -> torch . Tensor : \"\"\"log_softmax of frame activations Args: Tensor hs_pad: 3d tensor (B, Tmax, eprojs) Returns: torch.Tensor: log softmax applied 3d tensor (B, Tmax, odim) \"\"\" return F . log_softmax ( self . ctc_lo ( hs_pad ), dim = 2 ) # F.log_softmax equivalent to log(softmax(x)) \u800cCTC loss\u7684\u90e8\u5206\u5219\u76f4\u63a5\u4f7f\u7528\u7684torch\u63d0\u4f9b\u7684\u51fd\u6570 torch.nn.CTCLoss \uff1a 1 self . ctc_loss = torch . nn . CTCLoss ( reduction = reduction_type ) Attention-based Decoder Loss \u5177\u4f53\u5b9e\u73b0\u4f4d\u4e8ewenet/transformer/label_smoothing_loss.py Attention-based Decoder\u7684Loss\u662f\u5728\u6700\u5927\u5316\u81ea\u56de\u5f52\u7684\u6982\u7387\uff0c\u5728\u6bcf\u4e2a\u4f4d\u7f6e\u8ba1\u7b97\u6a21\u578b\u8f93\u51fa\u6982\u7387\u548c\u6837\u672c\u6807\u6ce8\u6982\u7387\u7684\u4ea4\u53c9\u71b5\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u91c7\u7528teacher forcing\u7684\u65b9\u5f0f\uff0c\u800c\u4e0d\u91c7\u7528scheduled sampling\u3002\u6bcf\u4e2a\u4f4d\u7f6e\u4e0a\uff0c\u6837\u672c\u6807\u6ce8\u6982\u7387\u662f\u4e00\u4e2aone-hot\u7684\u8868\u793a\uff0c\u65e2\u771f\u5b9e\u7684\u6807\u6ce8\u6982\u7387\u4e3a1\uff0c\u5176\u4ed6\u6982\u7387\u4e3a0\u3002Smoothing Loss\u4e2d\uff0c\u5bf9\u4e8e\u6837\u672c\u6807\u6ce8\u6982\u7387\uff0c\u7531\u539f\u6765\u7684\uff1a \\[ p_i=\\left\\{\\begin{matrix} 1,\\quad if\\ i==y & \\\\ 0,\\quad if \\ i\\neq y & \\end{matrix}\\right. \\] \u53d8\u4e3a\uff1a \\[ p_i=\\left\\{\\begin{matrix} 1-\\epsilon,\\quad if\\ i==y & \\\\ \\frac{\\epsilon}{K-1},\\quad if \\ i\\neq y & \\end{matrix}\\right. \\] \u4e0a\u5f0f\u4e2d\uff0c \\(K\\) \u8868\u793a\u7c7b\u522b\u6570\uff0c \\(\\epsilon\\) \u8868\u793a\u6781\u5c0f\u7684\u8d85\u53c2\u6570\u3002 \u6574\u4f53\u524d\u5411\u8fc7\u7a0b 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 def forward ( self , speech : torch . Tensor , speech_lengths : torch . Tensor , text : torch . Tensor , text_lengths : torch . Tensor , ) -> Tuple [ Optional [ torch . Tensor ], Optional [ torch . Tensor ], Optional [ torch . Tensor ]]: \"\"\"Frontend + Encoder + Decoder + Calc loss Args: speech: (Batch, Length, ...) speech_lengths: (Batch, ) text: (Batch, Length) text_lengths: (Batch,) \"\"\" assert text_lengths . dim () == 1 , text_lengths . shape # Check that batch_size is unified assert ( speech . shape [ 0 ] == speech_lengths . shape [ 0 ] == text . shape [ 0 ] == text_lengths . shape [ 0 ]), ( speech . shape , speech_lengths . shape , text . shape , text_lengths . shape ) # 1. Encoder encoder_out , encoder_mask = self . encoder ( speech , speech_lengths ) encoder_out_lens = encoder_mask . squeeze ( 1 ) . sum ( 1 ) # 2a. Attention-decoder branch if self . ctc_weight != 1.0 : loss_att , acc_att = self . _calc_att_loss ( encoder_out , encoder_mask , text , text_lengths ) else : loss_att = None # 2b. CTC branch if self . ctc_weight != 0.0 : loss_ctc = self . ctc ( encoder_out , encoder_out_lens , text , text_lengths ) # CTCLoss(Log_probs,Targets,Input_lengths,Target_lengths) else : loss_ctc = None if loss_ctc is None : loss = loss_att elif loss_att is None : loss = loss_ctc else : loss = self . ctc_weight * loss_ctc + ( 1 - self . ctc_weight ) * loss_att return loss , loss_att , loss_ctc WeNet\u7684mask mask\u662f\u4e00\u4e2a0\u30011\u503c\u7ec4\u6210\u7684\u63a9\u7801\u5f20\u91cf\uff0cWeNet\u91ccmask\u7684\u8bed\u4e49\u4e3a\uff1amask\u4e2d\u503c\u4e3a1\u7684\u90e8\u5206\u662f\u9700\u8981\u8003\u8651\u7684\uff0c0\u7684\u90e8\u5206\u4e0d\u8003\u8651\u3002WeNet\u7684mask\u5927\u81f4\u53ef\u4ee5\u5206\u4e3a\u4e24\u7c7b\uff1a \u5e8f\u5217mask\uff0c[Batch,Length]\uff0c\u6bcf\u4e2a[Length,]\u4e2d\u503c\u4e3a1\u7684\u4f4d\u7f6e\u4ee3\u8868\u4e86\u672c\u5e8f\u5217\u9700\u8981\u8003\u8651\u7684\u90e8\u5206\u3002 Attention mask\uff0c[Batch,L1,L2]\uff0c\u6bcf\u4e2a[L1,L2]\u7528\u4e8e\u7ea6\u675fL1\u4e2d\u54ea\u4e9b\u4f4d\u7f6e\u53ea\u80fd\u5bf9L2\u4e2d\u54ea\u4e9b\u4f4d\u7f6e\u8fdb\u884cattention\u64cd\u4f5c\u3002 Batch Padding \u4e0d\u5b9a\u957f\u5e8f\u5217\u586b\u5145\u5230\u7b49\u957ftensor\u3002WeNet\u4e2d\uff0c\u8f93\u5165\u7684padding\u53eb\u505a frame batch padding \uff0c\u6807\u6ce8\u7684padding\u53eb label batch padding \u3002 Attention Loss \u5229\u7528\u4e00\u4e2a\u7279\u6b8a\u6570\u503cpadding_idx\u5c06\u539f\u5148\u4e0d\u7b49\u957f\u7684\u76ee\u6807\u5e8f\u5217\u586b\u5145\u5230\u7b49\u957f\u5e8f\u5217\uff0c\u5728\u8ba1\u7b97Attention Loss\u65f6\uff0c\u5bf9\u4e8e\u503c\u4e3apadding_idx\u7684\u76ee\u6807\uff0c\u4e0d\u53c2\u4e0eloss\u8ba1\u7b97\u3002\u5177\u4f53\u5b9e\u73b0\u4f4d\u4e8ewenet/transformer/label_smoothing_loss.py 1 2 3 4 5 6 7 ignore = target == self . padding_idx # target: (batch,seqlen) -> (batch*seqlen,), thus, ignore: (batch) total = len ( target ) - ignore . sum () . item () target = target . masked_fill ( ignore , 0 ) # avoid -1 index true_dist . scatter_ ( 1 , target . unsqueeze ( 1 ), self . confidence ) kl = self . criterion ( torch . log_softmax ( x , dim = 1 ), true_dist ) # KLDivLoss(input,target) denom = total if self . normalize_length else batch_size return kl . masked_fill ( ignore . unsqueeze ( 1 ), 0 ) . sum () / denom CTC Loss torch.nn.CTCLoss\u63a5\u53e3\u652f\u6301\u76f4\u63a5\u6307\u5b9abatch\u5185\u5404\u4e2a\u9884\u6d4b\u5e8f\u5217\u7684\u957f\u5ea6 hlens \u548c\u76ee\u6807\u5e8f\u5217\u7684\u957f\u5ea6 ys_lens \u3002 1 2 3 self . ctc_loss = torch . nn . CTCLoss ( reduction = reduction_type ) # CTCLoss(Log_probs,Targets,Input_lengths,Target_lengths) loss_ctc = self . ctc ( encoder_out , encoder_out_lens , text , text_lengths ) hlens \u662fencoder\u8f93\u51fa\u7684batch\u4e2d\u5404\u5e8f\u5217\u771f\u5b9e\u957f\u5ea6\uff0c\u9664\u53bbpadding\u90e8\u5206\u7684\u957f\u5ea6\uff0c\u53ef\u4ee5\u901a\u8fc7encoder_mask\u5f97\u5230\uff1a 1 2 # wenet/transformer/asr_model.py encoder_out_lens = encoder_mask . squeeze ( 1 ) . sum ( 1 ) ys_lens \u662fbatch\u4e2d\u5404\u6807\u6ce8\u5e8f\u5217\u7684\u771f\u5b9e\u957f\u5ea6\uff0c\u7531DataLoader\u8fd4\u56de\u7684target_lengths\u5f97\u5230\uff1a 1 2 3 ## wenet/utils/executor.py for batch_idx , batch in enumerate ( data_loader ): key , feats , target , feats_lengths , target_lengths = batch \u81ea\u56de\u5f52 Attention Decoder\u662f\u81ea\u56de\u5f52\u7684\uff0c\u6bcf\u4e2atoken\u53ea\u80fd\u770b\u5230 \u81ea\u5df1\u4ee5\u53ca\u5de6\u4fa7\u7684word \uff0c\u56e0\u6b64\u5176\u4e2d\u7684attention\u5b9e\u73b0\u65f6\uff0c\u6bcf\u4e2a\u4f4d\u7f6e\u53ea\u80fd\u548c\u5f53\u524d\u4f4d\u7f6e\u4ee5\u53ca\u5de6\u4fa7\u4f4d\u7f6e\u8fdb\u884c\u64cd\u4f5c\uff0c\u4e3a\u4e86\u5b9e\u73b0\u8be5\u64cd\u4f5c\uff0c\u9700\u8981\u5f15\u5165\u4e00\u4e2amask\u3002 Chunk-based Model \u56e0\u4e3afull attention\u7684\u6bcf\u4e00\u5e27\u90fd\u8981\u4f9d\u8d56\u53f3\u4fa7\u6240\u6709\u5e27\uff0c\u6240\u4ee5\u65e0\u6cd5\u5e94\u7528\u4e8e\u6d41\u5f0f\u89e3\u7801\u4e2d\uff0c\u56e0\u6b64WeNet\u91c7\u7528chunk-based attention\uff0c\u5c06\u5e27\u5206\u4e3a\u7b49\u5927\u5c0f\u7684chunk\uff0c\u6bcf\u4e2achunk\u53ea\u5728chunk\u5185\u90e8\u8fdb\u884cattention\u64cd\u4f5c\uff0c \u53e6\u5916\uff0c\u4e5f\u5141\u8bb8\u548c\u5de6\u4fa7\u7684\u4e00\u5b9a\u957f\u5ea6\u7684\u5e27\u8fdb\u884cattention\uff0c\u4f46 \u8fd9\u79cd\u56fa\u5b9achunk\u5927\u5c0f\u7684\u8bad\u7ec3\u6a21\u5f0f\uff0c\u8981\u6c42\u89e3\u7801\u65f6\u5fc5\u987b\u91c7\u7528\u540c\u6837\u5927\u5c0f\u7684\u5e27 \u3002WeNet\u5f15\u5165\u4e86\u4e00\u79cd dynamic chunk training \u7b97\u6cd5\uff0c\u5728\u8bad\u7ec3\u65f6\u53ef\u4ee5\u52a8\u6001\u4e3a\u6bcf\u4e2abatch\u751f\u6210\u4e0d\u540c\u5927\u5c0f\u7684 chunk\uff0c\u8fd9\u6837\uff0c \u5728\u89e3\u7801\u65f6\uff0cchunk\u5927\u5c0f\u53ef\u4ee5\u4efb\u610f\u6307\u5b9a \uff0c\u5927\u7684chunk\u53ef\u4ee5\u83b7\u5f97\u9ad8\u8bc6\u522b\u7387\uff0c\u5c0f\u7684chunk\u53ef\u4ee5\u83b7\u5f97\u4f4e\u5ef6\u65f6\uff0c\u4ece\u800c\u7528\u6237\u4ec5\u9700\u8bad\u7ec3\u5355\u4e00\u6a21\u578b\uff0c\u6839\u636e\u5177\u4f53\u573a\u666f\u5728\u89e3\u7801\u65f6\u9009\u62e9\u5408\u9002\u7684chunk\u5927\u5c0f\uff0c\u800c\u65e0\u9700\u91cd\u65b0\u8bad\u7ec3\u6a21\u578b\u3002 \u7f16\u7801\u5668\u4e2d\u7684mask \u5177\u4f53\u5b9e\u73b0\u4f4d\u4e8ewenet/transformer/encoder.py 1 2 3 4 5 6 7 8 9 10 11 12 13 masks = ~ make_pad_mask ( xs_lens , T ) . unsqueeze ( 1 ) # (B, 1, T) if self . global_cmvn is not None : xs = self . global_cmvn ( xs ) xs , pos_emb , masks = self . embed ( xs , masks ) mask_pad = masks # (B, 1, T/subsample_rate) chunk_masks = add_optional_chunk_mask ( xs , masks , self . use_dynamic_chunk , self . use_dynamic_left_chunk , decoding_chunk_size , self . static_chunk_size , num_decoding_left_chunks ) for layer in self . encoders : xs , chunk_masks , _ = layer ( xs , chunk_masks , pos_emb , mask_pad ) self.embed \u4f1a\u5bf9\u539f\u59cb\u8bed\u97f3\u5e27\u586b\u5145\u63a9\u853d\u77e9\u9635\uff08frame padding mask\uff09\u8fdb\u884c\u964d\u91c7\u6837\u5f97\u5230\u89e3\u7801\u5e27\u586b\u5145\u63a9\u853d\u77e9\u9635\uff08subsample frame padding mask\uff09\u3002 mask_pad \u4f1a\u5728Conformer\u4e2d\u7684\u5377\u79ef\u7f51\u7edc\u6a21\u5757\u4e2d\u4f7f\u7528\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 if mask_pad is not None : x . masked_fill_ ( ~ mask_pad , 0.0 ) if self . lorder > 0 : if cache is None : x = nn . functional . pad ( x , ( self . lorder , 0 ), 'constant' , 0.0 ) else : assert cache . size ( 0 ) == x . size ( 0 ) assert cache . size ( 1 ) == x . size ( 1 ) x = torch . cat (( cache , x ), dim = 2 ) assert ( x . size ( 2 ) > self . lorder ) new_cache = x [:, :, - self . lorder :] else : # It's better we just return None if no cache is requried, # However, for JIT export, here we just fake one tensor instead of # None. new_cache = torch . tensor ([ 0.0 ], dtype = x . dtype , device = x . device ) # GLU mechanism x = self . pointwise_conv1 ( x ) # (batch, 2*channel, dim) x = nn . functional . glu ( x , dim = 1 ) # (batch, channel, dim) # 1D Depthwise Conv x = self . depthwise_conv ( x ) if self . use_layer_norm : x = x . transpose ( 1 , 2 ) x = self . activation ( self . norm ( x )) if self . use_layer_norm : x = x . transpose ( 1 , 2 ) x = self . pointwise_conv2 ( x ) # mask batch padding if mask_pad is not None : x . masked_fill_ ( ~ mask_pad , 0.0 ) add_optional_chunk_mask \u4f1a\u5728\u89e3\u7801\u5e27\u586b\u5145\u63a9\u853d\u77e9\u9635\uff08subsample frame padding mask\uff09\u7684\u57fa\u7840\u4e0a\u589e\u52a0 chunk mask \uff0c\u4f1a\u5728Conformer\u4e2d\u7684self attention\u4f7f\u7528\u3002 \u4e0b\u91c7\u6837\u7f51\u7edc\uff08Subsampling\uff09\u4e2d\u7684mask subsampling\u7f51\u7edc\u4e2d\u7684\u5377\u79ef\u8fd0\u7b97\u65f6\u672c\u8eab\u4e0d\u4f7f\u7528frame padding mask\uff0c\u4f46\u662f\u4f1a\u5bf9frame padding mask\u964d\u91c7\u6837\u5f97\u5230subsample frame padding mask\uff0c\u540e\u7eed\u5728\u8fdb\u884cencoder\u76f8\u5173\u8ba1\u7b97\u65f6\u4f1a\u4f7f\u7528\u8fd9\u4e2asubsample frame padding mask\u3002\u6bd4\u5982\u57284\u500d\u964d\u91c7\u6837\u7684\u7f51\u7edc\u91cc\uff0c\u4f7f\u7528\u4e86\u4e24\u4e2astride=2\u7684\u5377\u79ef\uff0c\u5bf9shape=(B, 1, L) \u7684mask\u8fdb\u884c\u4e86 mask[:, :, :-2:2][:, :, :-2:2] \u7684\u64cd\u4f5c\uff0c\u65b0\u7684mask\u7684shape\u4e3a(B, 1, L/4)\u3002\u4f46\u662f\u76ee\u524dWeNet\u7684\u5b9e\u73b0\u5b58\u5728\u5c0f\u95ee\u9898\uff0c\u6700\u540e\u51e0\u4e2a\u89e3\u7801\u5e27\uff08\u964d\u91c7\u6837\u5e27\uff09\u5982\u679c\u5176\u5377\u79ef\u91ce\u4e2d\u6709padding\u7684\u5e27\uff0c\u5219\u8be5\u964d\u91c7\u6837\u5e27\u8f93\u5165\u65e0\u6548\u5e27\uff0c\u4e0d\u5e94\u8be5\u53c2\u4e0e\u540e\u7eed\u8ba1\u7b97\uff0c\u4f46\u662f\u6309\u7167\u76ee\u524dmask\u7684\u5b9e\u73b0\u4ecd\u4f1a\u88ab\u4f7f\u7528\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u8bad\u7ec3\u65f6\uff0c\u4e0b\u91c7\u6837\u500d\u7387\uff08subsample rate\uff09\u4e3a4\uff0c\u4e00\u4e2a\u89e3\u7801\u5e27\u9700\u89817\u4e2a\u539f\u59cb\u5e27\u3002\u5047\u8bbe\u67d0\u4e2a\u6837\u672c\u7684\u5012\u65704\u4e2a\u539f\u59cb\u5e27\u90fd\u662fpadding\u7684\uff0c \u6700\u540e\u4e00\u4e2a\u89e3\u7801\u5e27\u4f9d\u8d56\u4e8e\u8fd9\u4e9b\u586b\u5145\u7684\u539f\u59cb\u5e27\uff0c\u56e0\u6b64\u4e0d\u5e94\u8be5\u4f7f\u7528 \uff0c\u5176mask\u8ba1\u7b97\u8fc7\u7a0b\u5982\u4e0b\uff1a 1 2 3 1 1 1 1 1 1 1 0 0 0 0 # \u539f\u59cb\u8bed\u97f3\u5e27 1 1 1 1 0 # mask[:, :, :-2:2] 1 1 # mask[:, :, :-2:2][:, :, :-2:2] \u6ce8\u610f\u5230\uff0c\u8ba1\u7b97\u83b7\u5f97\u7684subsample frame padding mask\uff0c\u4ecd\u7136\u4f1a\u4f7f\u7528\u6700\u540e\u4e00\u4e2a\u4fe1\u606f\u4e0d\u5168\u7684\u89e3\u7801\u5e27\u3002 \u5047\u8bbe\u67d0\u4e2a\u6837\u672c\u5012\u65705\u4e2a\u539f\u59cb\u8bed\u97f3\u5e27\u5747\u662f\u586b\u5145\u7684\uff0c\u5176mask\u8ba1\u7b97\u8fc7\u7a0b\u5982\u4e0b\uff1a 1 2 3 1 1 1 1 1 1 0 0 0 0 0 # \u539f\u59cb\u8bed\u97f3\u5e27 1 1 1 1 0 # mask[:, :, :-2:2] 1 1 # mask[:, :, :-2:2][:, :, :-2:2] \u6b64\u65f6\u8ba1\u7b97\u83b7\u5f97\u7684subsample frame padding mask\u8868\u793a\u6700\u540e\u4e24\u4e2a\u89e3\u7801\u5e27\u5747\u4f1a\u7528\u5230\uff0c\u4f46\u662f\u5012\u6570\u7b2c\u4e8c\u4e2a\u3001\u7b2c\u4e00\u4e2a\u7684\u89e3\u7801\u5e27\u5747\u6709\u586b\u5145\u7684\u539f\u59cb\u5e27\uff0c\u4fe1\u606f\u4e0d\u5168\uff0c \u56e0\u6b64\u4e0d\u5e94\u8be5\u4f7f\u7528 \u3002\u4f46\u662f\u5b9e\u9a8c\u8868\u660e\uff0c\u8fd9\u5f71\u54cd\u4e0d\u5927\u3002 Conformer\u4e2d\u5377\u79ef\u7f51\u7edc\u6a21\u5757\u7684mask \u8003\u8651\u4e0a\u56fe\u4e2d\u591a\u5c42\u5377\u79ef\u7684\u60c5\u51b5\uff0c\u5047\u8bbekernel\u5927\u5c0f\u4e3a3\u3002 \u7531\u4e8ebatch paddings\u7684\u5b58\u5728\uff0c\u5728\u8bad\u7ec3\u65f6\uff0c\u7eff\u8272\u5355\u5143\u4f9d\u8d56\u4e8e\u7ea2\u8272\u5355\u5143\uff0c\u800c \u7ea2\u8272\u5355\u5143\u4e0d\u662f0\u503c \u3002 \u7136\u800c\u5728\u89e3\u7801\u65f6\uff0c\u56e0\u4e3a\u4e00\u4e2abatch\u53ea\u6709\u4e00\u4e2a\u6837\u672c\uff0c\u4e0d\u9700\u8981padding\uff0c\u4e5f\u5c31\u6ca1\u6709batch padding\u5b58\u5728\uff0c\u7eff\u8272\u5355\u5143\u4f9d\u8d56\u7684\u7ea2\u8272\u5355\u5143\u4f4d\u7f6e\u7684\u503c \u603b\u662f\u7531 conv paddings\u4ea7\u751f\u7684\uff0c\u8fd9\u4e2a\u503c \u603b\u662f 0\u503c\uff0c\u6240\u4ee5\u5982\u679c\u4e0d\u8fdb\u884c\u4efb\u4f55\u5904\u7406\uff0c\u5b58\u5728\u8bad\u7ec3\u548c\u89e3\u7801\u4e0d\u4e00\u81f4\u7684\u95ee\u9898\u3002\u56e0\u6b64\uff0c\u4ee3\u7801\u91cc\u5229\u7528subsample frame padding\uff0c\u5c06\u6bcf\u4e00\u5c42\u7684 batch padding\u90e8\u5206\u7684\u503c\u53d8\u4e3a0 \u3002 1 2 3 # wenet/transformer/convolution.py if mask_pad is not None : x . masked_fill_ ( ~ mask_pad , 0.0 ) \u5982\u679c\u4f7f\u7528\u56e0\u679c\u5377\u79ef\uff0c\u7531\u4e8e\u5176\u7ed3\u6784\u7279\u70b9\uff0c\u6bcf\u4e2a\u70b9\u5747\u4e0d\u4f9d\u8d56\u53f3\u4fa7\u7684\u70b9\uff0c\u5c31\u4e0d\u9700\u8981\u8fd9\u4e2amask\u3002 MultiHeadAttention\u7684mask \u7528\u4e8eself-attention\u65f6\uff0c\u6bcf\u4e2a\u6837\u672c\u7684mask\u662f\u4e00\u4e2a\u957f\u548c\u9ad8\u4e00\u6837\u5927\u5c0f\u7684\u65b9\u9635\u3002 \u7528\u4e8ecross-attention\u65f6\uff0cmask\u7eb5\u8f74\u4ece\u4e0a\u5230\u4e0b\u4e3a\u6587\u672c\u5e8f\u5217,\u6a2a\u8f74\u4ece\u5de6\u5230\u53f3\u4e3a\u5e27\u5e8f\u5217\uff0c[batch_size, L, T]\u3002 \u8ba1\u7b97attention\u7684\u6743\u91cd\u65f6\u4f7f\u7528mask\u7684\u65b9\u5f0f\uff1a\u5148\u5c06\u4e0d\u9700\u8981\u8ba1\u7b97\u7684\u4f4d\u7f6e\u7684score\u8bbe\u4e3a\u8d1f\u65e0\u7a77\u800c\u4e0d\u662f0\uff0c\u7136\u540e\u8ba1\u7b97softmax\u5f97\u5230\u4f4d\u7f6e\u6743\u91cd\uff0c\u6b64\u65f6\u4e0d\u9700\u8981\u8ba1\u7b97\u7684\u4f4d\u7f6e\u662f\u6781\u5c0f\u503c\uff0c\u7136\u540e\u518d\u628a\u4e0d\u9700\u8981\u53c2\u4e0eattention\u8ba1\u7b97\u4f4d\u7f6e\u7684\u6743\u91cd\u7cfb\u6570\u8bbe\u4e3a0. 1 2 3 4 5 6 # wenet/transformer/attention.py def forward_attention (): ... mask = mask . unsqueeze ( 1 ) . eq ( 0 ) # (batch, 1, *, time2) scores = scores . masked_fill ( mask , - float ( 'inf' )) attn = torch . softmax ( scores , dim =- 1 ) . masked_fill ( mask , 0.0 ) # (batch, head, time1, time2) mask.unsqueeze(1) \u662f\u4e3a\u4e86\u589e\u52a0\u4e00\u4e2ahead\u7ef4\u5ea6\u3002\u6b64\u65f6: \u5f53\u7528\u4e8edecoder cross-attention\u65f6\uff0c mask\u7684shape\u4e3a(batch, 1, 1, Tmax)\uff0c scores\u7684shape\u4e3a(batch, head, Lmax, Tmax)\uff0c\u7b2c1\u3001\u7b2c2\u7ef4\u4f1a\u8fdb\u884cbroadcast \u5f53\u7528\u4e8edecoder self-attention\u65f6\uff0c mask\u7684shape\u4e3a(batch, 1, Lmax, Lmax)\uff0cscores\u7684shape\u4e3a(batch, head, Lmax, Lmax)\uff0c\u7b2c1\u7ef4\u4f1a\u8fdb\u884cbroadcast \u5f53\u7528\u4e8eencoder self-attention\u65f6\uff0c mask\u7684shape\u4e3a(batch, 1, Tmax, Tmax)\uff0cscores\u7684shape\u4e3a(batch, head, Tmax, Tmax)\uff0c\u7b2c1\u7ef4\u4f1a\u8fdb\u884cbroadcast \u7b2c1\u7ef4\u4f1a\u8fdb\u884cbroadcast\u5c31\u662f\u8bf4\u65e0\u8bba\u54ea\u4e2ahead\uff0c\u5bf9\u4e8e\u586b\u5145\u4f4d\u7f6e\u90fd\u8981\u8fdb\u884cmask\u3002 Chunk-based Attention \u4e3a\u4e86\u5b9e\u73b0\u6d41\u5f0f\u89e3\u7801\uff0c\u7f16\u7801\u5668\u4e2d\u4f7f\u7528\u4e86\u57fa\u4e8echunk\u7684attention\uff0c\u5e76 \u5141\u8bb8\u5404\u4e2abatch\u4f7f\u7528\u4e0d\u540c\u7684chunk\u5927\u5c0f \u3002 \u57fa\u4e8echunk\u7684attention\uff0c\u672c\u8d28\u4e0a\u662f \u9650\u5236attention\u7684\u4f5c\u7528\u8303\u56f4\uff0c\u53ef\u4ee5\u901a\u8fc7attention mask\u6765\u5b9e\u73b0 \u3002 subsequent_chunk_mask \u7528\u4e8e\u521b\u5efa\u4e00\u4e2a\u56fa\u5b9a\u5927\u5c0fchunk\u7684mask\u3002 python def subsequent_chunk_mask( size: int, chunk_size: int, num_left_chunks: int = -1, device: torch.device = torch.device(\"cpu\"), ) -> torch.Tensor: add_optional_chunk_mask \u5219\u7528\u4e8e\u521b\u5efa\u52a8\u6001\u5927\u5c0f\u7684chunk\u7684mask\u3002 1 2 3 4 5 def add_optional_chunk_mask ( xs : torch . Tensor , masks : torch . Tensor , use_dynamic_chunk : bool , use_dynamic_left_chunk : bool , decoding_chunk_size : int , static_chunk_size : int , num_decoding_left_chunks : int ): \u5982\u4e0a\u56fe\u6240\u793a\uff0c\u5176\u4e2d\uff0c - use_dynamic_chunk=True \uff0c\u5404\u7684batch\u4f7f\u7528\u968f\u673a\u7684chunk mask\uff0c - \u5982\u679c use_dynamic_left_chunk=True \uff0c \u5404\u7684batch\u5747\u91c7\u7528\u968f\u673a\u7684\u7684left chunk\u957f\u5ea6\u7684\u4fe1\u606f\u3002 - \u5982\u679c use_dynamic_left_chunk=False \uff0c \u5404\u7684batch\u5747\u91c7\u7528\u5f00\u5934\u5230\u5f53\u524dchunk\u7684\u4fe1\u606f\u3002 - use_dynamic_chunk=False \uff0c - static_chunk_size <= 0 \uff0c\u91c7\u7528full-attention\u3002 - static_chunk_size > 0 \uff0c\u91c7\u7528\u56fa\u5b9a\u7684chunk mask\u3002 \u89e3\u7801\u5668\u4e2d\u7684mask \u89e3\u7801\u5668\u4e2d\u6d89\u53ca\u5230\u4e24\u79cdAttention\uff1a 1 2 3 4 5 6 # wenet/transformer/decoder_layer.py def __init__ ( ... ): ... self . self_attn ( tgt_q , tgt , tgt , tgt_q_mask ) # self-attention self . src_attn ( x , memory , memory , memory_mask ) # cross-attention ... self-attention self attention\u4e2d\u8981\u8003\u8651\u81ea\u56de\u5f52\u548clabel batch padding\u5e26\u6765\u7684\u5f71\u54cd\u3002 1 2 3 4 5 6 7 8 9 10 11 # wenet/transformer/decoder.py tgt = ys_in_pad maxlen = tgt . size ( 1 ) # tgt_mask: (B, 1, L) tgt_mask = ~ make_pad_mask ( ys_in_lens , maxlen ) . unsqueeze ( 1 ) tgt_mask = tgt_mask . to ( tgt . device ) # m: (1, L, L) m = subsequent_mask ( tgt_mask . size ( - 1 ), device = tgt_mask . device ) . unsqueeze ( 0 ) # tgt_mask: (B, L, L) tgt_mask = tgt_mask & m \u4e0a\u8ff0\u4ee3\u7801\u4e2d\uff0c ~make_pad_mask() \u51fd\u6570\u4ea7\u751f\u7684 tgt_mask \u662f\u6807\u7b7e\u586b\u5145\u63a9\u853d\u77e9\u9635\uff08label padding mask\uff09\uff0c\u6bcf\u4e2atoken\u4e0d\u5141\u8bb8\u5bf9padding\u90e8\u5206\u8fdb\u884cattention\u64cd\u4f5c\u3002 subsequent_mask() \u51fd\u6570\u4ea7\u751f\u7684 m \u662f\u89e3\u7801\u5668\u81ea\u56de\u5f52\u7684mask\uff0c\u6bcf\u4e2atoken\u53ea\u5bf9\u81ea\u5df1\u4ee5\u53ca\u5de6\u4fa7\u7684token\u8fdb\u884cattention\u64cd\u4f5c\u3002 \u6700\u7ec8\u7684 tgt_mask = tgt_mask & m \u8868\u793a\u5728\u81ea\u56de\u5f52mask\u548clabel padding mask\u540c\u65f6\u4f5c\u7528\uff0c\u4e5f\u5c31\u662f\u6bcf\u4e2atoken\u4ec5\u5bf9\u9664\u4e86padding\u90e8\u5206\u4e4b\u5916\u7684\uff0c\u81ea\u5df1\u53ca\u5176\u5de6\u4fa7token\u8fdb\u884cattention\u3002 \u4e0d\u8fc7\uff0c\u7531\u4e8edecoder\u672c\u8eab\u662f\u81ea\u56de\u5f52\u7684\uff0c\u81ea\u56de\u5f52\u63a9\u7801\u4fdd\u8bc1\u4e86\u5bf9\u4e8e\u975epadding\u7684\u4f4d\u7f6e\uff0c\u5747\u4e0d\u4f1a\u53bb\u8ba1\u7b97\u81ea\u5df1\u53f3\u4fa7\u7684\u4f4d\u7f6e\uff1b\u5e76\u4e14\u5bf9\u4e8epadding\u4f4d\u7f6e\uff0c\u5728loss\u4e2d\u4f1a\u5904\u7406\uff0c\u4e0d\u53c2\u4e0e\u6700\u540e\u7684loss\u8ba1\u7b97\uff0c\u56e0\u6b64\uff0c\u5176\u5b9e\u5e76\u4e0d\u9700\u8981label padding mask\uff0c\u4e5f\u5c31\u662f\u4e0a\u8ff0\u4ee3\u7801\u4e2d\u6700\u7ec8\u7684tgt_mask\u3002 cross-attention \u7f16\u89e3\u7801\u5668\u8f93\u51fa\u8fdb\u884ccross-attention\uff0c\u7531\u4e8e\u7f16\u7801\u5668\u7684\u4e00\u4e9b\u8f93\u51fa\u662fpadding\uff0c\u56e0\u6b64\u9700\u8981\u5229\u7528\u89e3\u7801\u5e27\u586b\u5145\u63a9\u853d\u77e9\u9635\uff08subsample frame padding mask\uff09\u6307\u793a\u7f16\u7801\u5668\u8f93\u51fa\u7684\u586b\u5145\u6570\u636e\u4f4d\u7f6e\u3002 \u6574\u4f53\u7ed3\u6784 \u89e3\u7801\u5668\u7684\u6bcf\u4e00\u5c42\u5747\u9700\u8981\u8ba1\u7b97\u5982\u4e0a\u4e24\u4e2aattention\uff0c\u89e3\u7801\u5668\u5185\u90e8\u7684self attention\u9700\u8981\u63a9\u853dpadding\u548c\u53f3\u4fa7\u6570\u636e\uff0c\u7f16\u7801\u5668\u8f93\u51fa\u9700\u8981\u63a9\u853d\u89e3\u7801\u5e27padding\u6570\u636e\uff0c\u4e24\u8005\u5229\u7528mask\u629b\u9664\u586b\u5145\u7684\u65e0\u6548\u6570\u636e\u4e4b\u540e\uff0c\u8fdb\u884ccross-attention\u3002 \u5176\u5b83 \u5728\u8fdb\u884c\u89e3\u7801\u65f6\uff0c\u8fd8\u7528\u5230\u4e86 mask_finished_scores() \u548c mask_finished_preds() \u3002 WeNet\u4e2d\u7684cache \u6807\u51c6\u7684forward\u662f\u6574\u4e2a\u5e8f\u5217\u8fdb\u884c\u8ba1\u7b97\uff0c\u4f46\u662f\u5728\u6d41\u5f0f\u63a8\u65ad\u65f6\uff0c\u9700\u8981chunk\u7ea7\u522b\u7684forward\uff0c\u56e0\u6b64\u9700\u8981\u5f15\u5165cache\u7684\u6982\u5ff5\uff0c\u5373 \u5f53\u524dchunk\u5728\u8fdb\u884c\u524d\u5411\u8ba1\u7b97\u65f6\uff0c\u9700\u8981\u62ff\u5230\u4e0a\u6b21\u524d\u5411\u7684\u4e00\u4e9b\u7ed3\u679c\u4f5c\u4e3a\u8f93\u5165 \u3002\u5bf9\u4e8e\u6d41\u5f0f\u63a8\u65ad\uff0c\u8f93\u5165\u662f\u4e00\u4e2a\u4e00\u4e2achunk\u7684\u5230\u6765\uff0c* \u5bf9\u7b2ci\u4e2achunk\uff0c\u5f53\u8ba1\u7b97\u7b2ck\u5c42\u7f51\u7edc\u7684\u8f93\u51fa\u65f6\uff0c\u7531\u4e8e\u7f51\u7edc\u7ed3\u6784\u5b58\u5728\u5bf9\u5de6\u4fa7\u4e0a\u4e0b\u6587\u7684\u4f9d\u8d56\uff0c\u9700\u8981\u4f9d\u8d56\u7b2ck-1\u5c42\u7f51\u7edc\u91cc\uff0c\u5728\u7b2ci\u4e2achunk\u4e4b\u524d\u7684\u4e00\u4e9bchunks\u7684\u8f93\u51fa\u3002 * \u5982\u679c\u5bf9\u4e8e\u5f53\u524d\u5230\u6765chunk\uff0c\u5c06\u5176\u548c\u4f9d\u8d56\u7684chunk\u5e8f\u5217\uff08\u6bd4\u598210\u5c42self-attention\u5c42\uff0c\u6bcf\u5c42\u4f9d\u8d56\u5de6\u4fa74\u4e2achunk\uff0c\u5219\u7d2f\u79ef\u8d77\u6765\u9700\u8981\u4f9d\u8d56\u5de6\u4fa740\u4e2achunk\uff09\u62fc\u8d77\u6765\u4f5c\u4e3a\u7f51\u7edc\u8f93\u5165\u8fdb\u884c\u524d\u5411\uff0c\u5176\u8ba1\u7b97\u91cf\u4f1a\u6bd4\u8f83\u5927\u3002 \u5bf9\u4e8e\u90a3\u4e9b\u5df2\u7ecf\u8ba1\u7b97\u8fc7\u7684chunk\uff0c\u53ef\u4ee5\u5c06\u90a3\u4e9b\u5728\u8ba1\u7b97\u4e0b\u4e00\u4e2achunk\u7684\u8f93\u51fa\u65f6\uff0c\u628a\u9700\u8981\u7684\u4e2d\u95f4\u91cf\u4fdd\u5b58\u4e0b\u6765\uff0c\u4ece\u800c\u51cf\u5c11\u91cd\u590d\u8ba1\u7b97\uff0c\u8fd9\u79cd\u65b9\u5f0f\u5c31\u53ebcache\u3002\u53e6\u5916\uff0cWeNet\u7684\u7f51\u7edc\u7ed3\u6784\u5728\u8bbe\u8ba1\u65f6\uff0c\u7531\u4e8e\u56e0\u679c\u5377\u79ef\u548cself-attention\u7684\u5de6\u4fa7\u4e0a\u4e0b\u6587\u90fd\u4f7f\u7528\u6709\u9650\u957f\u5ea6\uff0c\u56e0\u6b64\u65e0\u8bba\u5e8f\u5217\u591a\u957f\uff0c\u6bcf\u6b21cache\u7684\u5927\u5c0f\u662f\u4e0d\u53d8\u7684\uff08\u4e0d\u589e\u957f\uff09\u3002 WeNet \u4ec5\u4ec5\u7f16\u7801\u5668\u90e8\u5206\u6d89\u53cachunk\u8ba1\u7b97\u65f6\u7684cache \u3002 \u5bf9\u4e8eCTC\u89e3\u7801\u5668\uff0c\u7531\u4e8e\u662f\u7ebf\u6027\u5c42\uff0c\u56e0\u6b64\u4e0d\u9700\u8981cache\uff1b\u800c\u5bf9\u4e8eAED\u7684\u89e3\u7801\u5668\uff0c\u662f\u5728\u8ba1\u7b97\u5b8c\u6574\u4e2a\u7f16\u7801\u5668\u8f93\u51fa\u4e4b\u540e\uff0c\u624d\u8fdb\u884crescoring\uff0c\u56e0\u6b64\u4e0d\u6d89\u53cachunk\u3002 Runtime\u6d41\u5f0f\u89e3\u7801 ASRModel \u4e2d\u7684 forward_encoder_chunk() \u901a\u8fc7JIT\u5bfc\u51fa\uff0c\u4ee5\u7528\u4e8eC++ runtime\uff0c\u5185\u90e8\u4f7f\u7528 BaseEncoder \u4e2d\u7684 forward_chunk() \uff1a 1 2 3 4 5 6 @torch . jit . export def forward_encoder_chunk ( ... ): return self . encoder . forward_chunk ( xs , offset , required_cache_size , subsampling_cache , elayers_output_cache , conformer_cnn_cache ) Python\u6d41\u5f0f\u89e3\u7801 ASRModel \u4e2d\u8fdb\u884cPython\u89e3\u7801\u7684 recognize() \u51fd\u6570\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 # wenet/transformer/asr_model.py def recognize ( self , speech : torch . Tensor , speech_lengths : torch . Tensor , beam_size : int = 10 , decoding_chunk_size : int = - 1 , num_decoding_left_chunks : int = - 1 , simulate_streaming : bool = False , ) -> torch . Tensor : \"\"\" Apply beam search on attention decoder Args: speech (torch.Tensor): (batch, max_len, feat_dim) speech_length (torch.Tensor): (batch, ) beam_size (int): beam size for beam search decoding_chunk_size (int): decoding chunk for dynamic chunk trained model. <0: for decoding, use full chunk. >0: for decoding, use fixed chunk size as set. 0: used for training, it's prohibited here simulate_streaming (bool): whether do encoder forward in a streaming fashion Returns: torch.Tensor: decoding result, (batch, max_result_len) \"\"\" ... \u5982\u679c\u8bbe\u7f6e simulate_streaming \u4e3aTrue\uff0c\u5c31\u4f1a\u6a21\u62dfruntime\u6d41\u5f0f\u89e3\u7801\u7684\u8fc7\u7a0b\uff0c\u5c06\u6570\u636e\u5206\u6210chunk\uff0c\u4f9d\u6b21\u8fdb\u884c\u524d\u5411\u8ba1\u7b97\uff0c\u8be5\u65b9\u6cd5\u7684\u7ed3\u679c\uff0c\u548c\u9001\u5165\u6574\u4e2a\u5e8f\u5217\u901a\u8fc7mask\u8fdb\u884c\u6d41\u5f0f\u6a21\u62df\u7684\u7ed3\u679c\u5e94\u8be5\u662f\u4e00\u81f4\u7684\uff1a 1 recognize() -> _forward_encoder() -> BaseEncoder.forward_chunk_by_chunk() -> BaseEncoder.forward_chunk() \u53ef\u4ee5\u770b\u5230\uff0c\u6700\u7ec8\u8c03\u7528\u7684\u8fd8\u662f BaseEncoder \u4e2d\u7684 forward_chunk() \u51fd\u6570\u3002 BaseEncoder.forward_chunk()\u5206\u6790 \u5728chunk\u6d41\u5f0f\u8ba1\u7b97\u65f6\uff0c\u9700\u8981\u7279\u522b\u6ce8\u610f\u4e09\u4e2a\u65b9\u9762\u7684\u7f13\u5b58\uff1a \u4e0b\u91c7\u6837\uff08subsampling\uff09\u4e2d\u7684\u5377\u79ef\u3002\u4f46\u662fsubsampling\u5185\u90e8\u4e0d\u8fdb\u884ccache\uff0c\u4e00\u662f\u5b9e\u73b0\u6bd4\u8f83\u590d\u6742\uff0c\u4e8c\u662fsubsampling\u7684\u8ba1\u7b97\u91cf\u4e0d\u5927\u3002 Transformer/Conformer\u7f16\u7801\u5668\u4e2d\u6bcf\u4e00\u5c42\u7684\u8f93\u51fa\u3002 Conformer\u4e2d\u7684\u5377\u79ef\u3002 forward_chunk() \u662f\u5bf9 \u5355\u4e2achunk\u8fdb\u884c\u524d\u5411\u8ba1\u7b97\u7684\u6838\u5fc3\u51fd\u6570 \uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 # wenet/transformer/encoder.py def forward_chunk ( self , xs : torch . Tensor , offset : int , required_cache_size : int , subsampling_cache : Optional [ torch . Tensor ] = None , elayers_output_cache : Optional [ List [ torch . Tensor ]] = None , conformer_cnn_cache : Optional [ List [ torch . Tensor ]] = None , ) -> Tuple [ torch . Tensor , torch . Tensor , List [ torch . Tensor ], List [ torch . Tensor ]]: \"\"\" Forward just one chunk Args: xs (torch.Tensor): chunk input offset (int): current offset in encoder output time stamp required_cache_size (int): cache size required for next chunk compuation >=0: actual cache size <0: means all history cache is required subsampling_cache (Optional[torch.Tensor]): subsampling cache elayers_output_cache (Optional[List[torch.Tensor]]): transformer/conformer encoder layers output cache conformer_cnn_cache (Optional[List[torch.Tensor]]): conformer cnn cache Returns: torch.Tensor: output of current input xs torch.Tensor: subsampling cache required for next chunk computation List[torch.Tensor]: encoder layers output cache required for next chunk computation List[torch.Tensor]: conformer cnn cache \"\"\" ... \u4e0a\u8ff0\u4ee3\u7801\u4e2d\uff0c xs \u662f\u5f53\u524dchunk\u8f93\u5165\u3002\u7531\u4e8e\u5355\u4e2achunk\u7684\u524d\u5411\u8ba1\u7b97\uff0c\u9700\u8981\u4e4b\u524dchunk\u8ba1\u7b97\u5f97\u5230\u7684\u4fe1\u606f\uff0c\u56e0\u6b64\u8fd9\u91cc\u9700\u8981\u4f20\u5165\u76f8\u5173\u7684\u4e09\u4e2acache\u4fe1\u606f\uff1a subsampling_cache : [torch.Tensor]\uff0csubsampling\u8f93\u51fa\u7684cache\uff0c\u4e5f\u5c31\u662f\u7b2c\u4e00\u4e2aConformer block\u7684\u8f93\u5165\u3002 elayers_output_cache : List[torch.Tensor]\uff0c\u7b2c1\u4e2a\u5230\u6700\u540e\u4e00\u4e2aConformer block\u7684\u8f93\u51fa\u7684cache\uff0c\u4e5f\u5c31\u662f\u7b2c2\u4e2aConformer block\u7684\u8f93\u5165\u548cCTC\u5c42\u7684\u8f93\u5165\u3002 conformer_cnn_cache : List[torch.Tensor]\uff0cConformer block\u91cc\u7684\u5377\u79ef\u5c42\u5de6\u4fa7\u4f9d\u8d56\u7684\u8f93\u5165cache\u3002 cache\u7684\u5927\u5c0f subsampling_cache \u548c elayers_output_cache \u7684\u5927\u5c0f\u662f\u7531self-attention\u5bf9\u5de6\u4fa7\u7684\u4f9d\u8d56\u957f\u5ea6 required_cache_size \u51b3\u5b9a\u3002 decoding_chunk_size \u8868\u793a\u89e3\u7801\u5e27\u7ea7\u522b\u7684chunk\u5927\u5c0f\uff0c num_decoding_left_chunks \u662fself-attention\u4f9d\u8d56\u7684\u5de6\u4fa7chunk\u6570\u76ee\uff0c required_cache_size \u8868\u793aself-attention\u4f9d\u8d56\u7684\u5de6\u4fa7\u89e3\u7801\u5e27\u603b\u6570\uff0c\u56e0\u6b64\u6ee1\u8db3\uff1a 1 required_cache_size = decoding_chunk_size * num_decoding_left_chunks conformer_cnn_cache \u7684\u5927\u5c0f\u548c required_cache_size \u65e0\u5173\uff0c\u53ea\u7531\u56e0\u679c\u5377\u79ef\u7684\u5de6\u4fa7\u4e0a\u4e0b\u6587 lorder \u53c2\u6570\u51b3\u5b9a\uff0c lorder \u5c31\u662f\u5b9e\u73b0\u56e0\u679c\u5377\u79ef\u7684\u5de6\u4fa7\u586b\u5145\u6570\uff1a 1 2 3 if causal : padding = 0 self . lorder = kernel_size - 1 \u51fd\u6570\u8fd4\u56de\u4e86\u56db\u4e2a\u503c\uff0c\u5305\u62ec\u5f53\u524dchunk\u8f93\u5165\u5bf9\u5e94\u7684\u8f93\u51fa\uff0c\u4ee5\u53ca\u66f4\u65b0\u540e\u7684\u4e09\u4e2acache\u3002 offset \u5f53\u6309chunk\u8fdb\u884c\u8f93\u5165\u65f6\uff0c\u4e0d\u80fd\u76f4\u63a5\u5f97\u5230chunk\u5728\u5e8f\u5217\u4e2d\u7684\u4f4d\u7f6e\uff0c\u56e0\u6b64\u9700\u8981\u4f20\u5165offset\u7ed9\u51fa\u8be5chunk\u5728\u6574\u4e2a\u5e8f\u5217\u91cc\u7684\u504f\u79fb\uff0c\u7528\u4e8e\u8ba1\u7b97positional encoding\uff1a 1 2 3 4 5 # wenet/transformer/encoder.py def forward_chunk ( ... ): ... xs , pos_emb , _ = self . embed ( xs , tmp_masks , offset ) ... subsampling_cache subsampling\u8f93\u51fa\u7684cache\uff0c\u5373\u7b2c\u4e00\u4e2aConformer block\u7684\u8f93\u5165\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 def forward_chunk ( self , xs : torch . Tensor , offset : int , required_cache_size : int , subsampling_cache : Optional [ torch . Tensor ] = None , elayers_output_cache : Optional [ List [ torch . Tensor ]] = None , conformer_cnn_cache : Optional [ List [ torch . Tensor ]] = None , ): ... if subsampling_cache is not None : cache_size = subsampling_cache . size ( 1 ) # xs\u662f\u7b2c\u4e00\u4e2aconformer block\u7684\u8f93\u5165 xs = torch . cat (( subsampling_cache , xs ), dim = 1 ) else : cache_size = 0 pos_emb = self . embed . position_encoding ( offset - cache_size , xs . size ( 1 )) if required_cache_size < 0 : next_cache_start = 0 elif required_cache_size == 0 : next_cache_start = xs . size ( 1 ) else : next_cache_start = max ( xs . size ( 1 ) - required_cache_size , 0 ) # \u66f4\u65b0subsampling_cache r_subsampling_cache = xs [:, next_cache_start :, :] elayers_output_cache \u7b2c1\u4e2a\u5230\u6700\u540e\u4e00\u4e2aConformer block\u7684\u8f93\u51fa\u7684cache\uff0c\u4e5f\u5c31\u662f\u7b2c2\u4e2aConformer block\u7684\u8f93\u5165\u548cCTC\u5c42\u7684\u8f93\u5165\u3002 1 2 3 4 5 6 7 8 9 10 11 for i , layer in enumerate ( self . encoders ): attn_cache = elayers_output_cache [ i ] cnn_cache = conformer_cnn_cache [ i ] # layer(...)\u5bf9\u5e94ConformerEncoderLayer.forward(...) xs , _ , new_cnn_cache = layer ( xs , masks , pos_emb , output_cache = attn_cache , cnn_cache = cnn_cache ) # \u66f4\u65b0elayers_output_cache r_elayers_output_cache . append ( xs [:, next_cache_start :, :]) \u6ce8\u610f\uff0c\u6b64\u5904\u7684xs\u4e0d\u662f\u5f53\u524d\u7684chunk\uff0c\u800c\u662f\u5f53\u524dchunk+cache\u8f93\u5165\uff0c\u6240\u4ee5\u5176\u957f\u5ea6\u4e0d\u662fchunk_size\uff0c\u800c\u662f chunk_size + required_cache_size \uff1a 1 2 3 4 5 6 7 8 9 10 # wenet/transformer/encoder.py # BaseEncoder.forward_chunk() # \u7b2c\u4e00\u4e2aconformer block\u8f93\u5165\u7684xs xs = torch . cat (( subsampling_cache , xs ), dim = 1 ) # wenet/transformer/encoder_layer.py # ConformerEncoderLayer.forward() # \u4e4b\u540e\u7684conformer block\u8f93\u5165\u7684xs if output_cache is not None : x = torch . cat ([ output_cache , x ], dim = 1 ) \u6b64\u5916\uff0c\u4e0a\u8ff0\u4ee3\u7801\u4e2d\u7684 layer(...) \u5bf9\u5e94\u7740wenet/transformer/encoder_layer.py\u4e2d\u7684ConformerEncoderLayer.forward()\uff0c\u5177\u4f53\u7684\u8ba1\u7b97\u8fc7\u7a0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 # \u8ba1\u7b97feedforwad/res/norm(\u5305\u542b\u5f53\u524dchunk\u548c\u5de6\u4fa7num_decoding_left_chunks\u4e2achunk) # \u4f7f\u7528cache\u65f6\uff0c\u53ea\u8981\u8ba1\u7b97\u5f53\u524dchunk\u7684x_q\u7684self-attentionattention\u548cresidual chunk = x . size ( 1 ) - output_cache . size ( 1 ) x_q = x [:, - chunk :, :] # \u53ea\u9009\u62e9\u5f53\u524dchunk\u5bf9\u5e94\u7684\u90e8\u5206\u505aresidual\u8ba1\u7b97 residual = residual [:, - chunk :, :] # \u9009\u53d6\u5f53\u524dchunk\u5bf9\u5e94\u7684mask\uff0c mask = mask [:, - chunk :, :] # \u4f7f\u7528\u5f53\u524dchunk\u7684x_q\u53bb\u548c\u5176\u4f9d\u8d56\u7684x\u505aattention x = residual + self . dropout ( self . self_attn ( x_q , x , x , mask )) # \u4ec5\u8ba1\u7b97\u5f53\u524dchunk\u7684conv x , new_cnn_cache = self . conv_module ( x , mask_pad , cnn_cache ) # \u4ec5\u8ba1\u7b97\u5f53\u524dchunk\u7684feedforwad/res/norm x = self . norm2 ( x ) x = residual + self . dropout ( self . feed_forward ( x )) # \u53ef\u4ee5\u770b\u5230\u901a\u8fc7cache\u8282\u7701\u4e86x[:, :-chunk, :]\u90e8\u5206\u7684attention/conv\u4ee5\u53ca\u4e4b\u540e\u7684feedforwad/res/norm\u8ba1\u7b97 # chunk\u7684\u8f93\u51fa\u548ccache\u62fc\u5728\u4e00\u8d77\uff0c\u4f5c\u4e3a\u7f51\u7edc\u7684\u6700\u7ec8\u8f93\u51fa\u3002 x = torch . cat ([ output_cache , x ], dim = 1 ) \u5982\u4e0a\u8ff0\u4ee3\u7801\u6240\u793a\uff0c\u901a\u8fc7cache\u8282\u7701\u4e86x[:, :-chunk, :]\u90e8\u5206\u7684attention/conv\u4ee5\u53ca\u4e4b\u540e\u7684feedforwad/res/norm\u8ba1\u7b97\u3002 conformer_cnn_cache Conformer Block\u4e2d\u7684\u5377\u79ef\u5c42\u5de6\u4fa7\u4f9d\u8d56\u7684\u8f93\u5165cache\u3002conformer_cnn_cache\u5927\u5c0f\u4e3a lorder \uff0c\u5373\u56e0\u679c\u5377\u79ef\u5de6\u4fa7\u4f9d\u8d56\uff0c lorder \u5c31\u662f\u5b9e\u73b0\u56e0\u679c\u5377\u79ef\u7684\u5de6\u4fa7\u586b\u5145\u6570\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # wenet/transformer/encoder_layer.py # ConformerEncoderLayer.forward() # conformer_cnn_cache\u901a\u8fc7ConvolutionModule.forward()\u8fd4\u56de\u7684\u65b0cache\u6765\u66f4\u65b0 # self.conv_module(...)\u53c2\u6570\u4e2d\u7684cnn_cache\u4e3a\u4e0a\u4e00\u4e2achunk\u8f93\u51fa\u7684new_cache x , new_cnn_cache = self . conv_module ( x , mask_pad , cnn_cache ) # new_cnn_cache\u7684\u8ba1\u7b97\u8fc7\u7a0b\u6765\u81ea\uff1awenet/transformer/convolution.py # ConvolutionModule.forward() if self . lorder > 0 : if cache is None : x = nn . functional . pad ( x , ( self . lorder , 0 ), 'constant' , 0.0 ) else : x = torch . cat (( cache , x ), dim = 2 ) # \u66f4\u65b0 conformer_cnn_cache new_cache = x [:, :, - self . lorder :] WeNet\u635f\u5931\u51fd\u6570 \u6a21\u578b\u8bad\u7ec3\u65f6\u540c\u65f6\u4f7f\u7528CTC\u635f\u5931\u548c\u4ea4\u53c9\u71b5\uff08Cross-Entropy\uff0cCE\uff09\u635f\u5931\u3002\u4e3a\u4e86\u907f\u514d\u8fc7\u62df\u5408\uff0c\u63d0\u9ad8\u6a21\u578b\u6a21\u578b\u7684\u6cdb\u5316\u80fd\u529b\uff0c\u5728WeNet\u4e2d\u4f7f\u7528Label Smoothing\u4ee3\u66ff\u4ea4\u53c9\u71b5\u635f\u5931\u3002 \u7f16\u7801\u5668\u8f93\u51fa\u7279\u5f81\u8fdb\u5165CTC\u89e3\u7801\u5668\u5f97\u5230CTC\u635f\u5931\uff0c\u8fdb\u5165Attention\u89e3\u7801\u5668\u83b7\u5f97Label Smoothing\u635f\u5931\uff0c\u5e76\u5229\u7528 ctc_weight \u8fdb\u884c\u52a0\u6743\u6c42\u5f97\u6700\u7ec8\u7684\u635f\u5931\u3002 1 2 // wenet / wenet / transformer / asr_model . py loss = self . ctc_weight * loss_ctc + ( 1 - self . ctc_weight ) * loss_att WeNet\u591a\u673a\u5e76\u884c\u8bad\u7ec3 \u4e1a\u754c\u73b0\u6709\u65b9\u6848 \u76ee\u524d\u57fa\u4e8ePyTorch\u7684\u4e3b\u6d41\u5206\u5e03\u5f0f\u8bad\u7ec3\u65b9\u6848\u4e3b\u8981\u6709PyTorch\u539f\u751f\u7684DDP\uff08DistributedDataParallel\uff09\u548chorovod\u4e24\u79cd\u3002 DistributedDataParallel Python\u5168\u5c40\u89e3\u91ca\u5668\u9501(Global Interpreter Lock\uff0cGIL) Python\u7684\u6bcf\u4e2a\u7ebf\u7a0b\u83b7\u53d6GIL\uff0c\u7136\u540e\u6267\u884c\u4ee3\u7801\u76f4\u5230sleep\u6216\u8005\u662fpython\u865a\u62df\u673a\u5c06\u5176\u6302\u8d77\uff0c\u6700\u540e\u91ca\u653eGIL\uff0c \u53ea\u6709\u62ff\u5230GIL\u7684\u7ebf\u7a0b\u624d\u53ef\u4ee5\u8fd0\u884c \u3002Python GIL\u7684\u5b58\u5728\u4f7f\u5f97\u4e00\u4e2apython\u8fdb\u7a0b\u53ea\u80fd\u5229\u7528\u4e00\u4e2aCPU\u6838\u5fc3\uff0c\u4e0d\u9002\u7528\u4e8e\u795e\u7ecf\u7f51\u7edc\u8bad\u7ec3\u7b49\u8ba1\u7b97\u5bc6\u96c6\u578b\u7684\u4efb\u52a1\u3002 \u4f7f\u7528\u591a\u8fdb\u7a0b\uff0c\u624d\u80fd\u66f4\u6709\u6548\u7387\u5730\u5229\u7528\u591a\u6838\u7684\u8ba1\u7b97\u8d44\u6e90 \u3002 DP\uff08DataParallel\uff09 DP\uff08DataParallel\uff09\u662fPyTorch\u65e9\u671f\u7684\u6570\u636e\u5e76\u884c\u65b9\u6848\uff0c\u662f\u4e00\u79cd\u57fa\u4e8eParameter Server\u7684\u7b97\u6cd5\uff0c \u5e94\u7528\u4e8e\u5355\u673a\u591a\u5361\u7684\u8bad\u7ec3 \u3002\u8fd9\u4e00\u65b9\u6848\u5728\u5b58\u5728\u6bd4\u8f83\u4e25\u91cd\u7684\u5185\u5b58\u548c\u901a\u4fe1\u6d41\u91cf\u8d1f\u8f7d\u4e0d\u5747\u8861\u7684\u95ee\u9898\uff0c\u5176\u4e2d\u7528\u4e8e\u540c\u6b65\u5404\u8282\u70b9\u4fe1\u606f\u7684\u4e3bGPU\u8282\u70b9\u7684\u5185\u5b58\u4e00\u822c\u4f1a\u6bd4\u5176\u4ed6GPU\u8282\u70b9\u5360\u7528\u7684\u5185\u5b58\u66f4\u591a\u3002\u4f46\u662f\u771f\u6b63\u9650\u5236DP\u7684\u662fParameter Server\u4f1a\u4f7f\u591a\u5361\u8bad\u7ec3\u65f6\u4e3bGPU\u8282\u70b9\u9700\u6c42\u7684\u901a\u4fe1\u5e26\u5bbd\u8fdc\u8fdc\u9ad8\u4e8e\u5176\u4ed6GPU\u8282\u70b9\uff0c\u5bfc\u81f4\u4e3b\u8282\u70b9\u7684\u901a\u4fe1\u5e26\u5bbd\u6210\u4e3a\u7cfb\u7edf\u7684\u74f6\u9888\u3002\u6b64\u5916\u5176\u91c7\u7528\u4e86\u5355\u8fdb\u7a0b\u591a\u7ebf\u7a0b\u7684\u65b9\u5f0f\u8fdb\u884c\u8bad\u7ec3\uff0c\u6027\u80fd\u4f1a\u53d7\u5230python GIL\u7684\u5f71\u54cd\u3002 DDP\u4e3a\u4ec0\u4e48\u4f1a\u6bd4DP\u8981\u5feb\uff1f DDP\u65b9\u6848\u548cDP\u90fd\u662f\u6570\u636e\u5e76\u884c\u65b9\u6848\uff0c\u4f46\u662fDDP\u91c7\u7528\u4e86Ring-AllReduce\u6570\u636e\u4ea4\u6362\u7b97\u6cd5\uff0c\u4ece\u800c\u63d0\u9ad8\u4e86\u901a\u8baf\u6548\u7387\u3002\u8be5\u65b9\u6cd5\u6bcf\u4e2a\u8282\u70b9\u4e0d\u518d\u5168\u90e8\u5411\u4e3b\u8282\u8fdb\u884c\u901a\u4fe1\uff0c\u800c\u662f\u53ea\u4e0e\u76f8\u90bb\u7684\u8282\u70b9\u8fdb\u884c\u901a\u4fe1\uff0c\u56e0\u6b64\u6bcf\u4e2aGPU\u8282\u70b9\u4e0a\u7684\u6d41\u91cf\u901a\u4fe1\u538b\u529b\u76f8\u540c\u3002\u6b64\u5916DDP\u901a\u8fc7\u591a\u8fdb\u7a0b\uff08DDP\u652f\u6301\u4e3a\u6bcf\u4e2aGPU\u4f7f\u7528\u4e00\u4e2a\u72ec\u7acb\u8fdb\u7a0b\uff09\u7684\u65b9\u5f0f\u4e5f\u907f\u514d\u4e86Python GIL\uff08Global Interpreter Lock\uff09\u7684\u9650\u5236\uff0c\u4ece\u800c\u53ef\u4ee5\u8fdb\u4e00\u6b65\u63d0\u9ad8\u8bad\u7ec3\u901f\u5ea6\u3002 DDP\u7ebf\u6027\u52a0\u901f\u6bd4 DDP\u4e2d\u7684\u6982\u5ff5 Pytorch\u4e2dDDP\u7684\u521d\u59cb\u5316\u63a5\u53e3\u5982\u4e0b\uff1a 1 2 3 torch.distributed.init_process_group(backend, init_method=None, timeout=datetime.timedelta(seconds=1800), world_size=- 1, rank=- 1, store=None, group_name='', pg_options=None) \u5176\u4e2d\uff0c backend\u3002\u7528\u6765\u6307\u5b9a\u591a\u8fdb\u7a0b\u95f4\u7684\u901a\u4fe1\u540e\u7aef\uff0c\u5305\u62ecNCCL\uff0cGloo\uff0cMPI\u3002\u5176\u4e2dNCCL\u662f\u5b98\u65b9\u6700\u63a8\u8350\u7684\uff0c\u56e0\u6b64\u901a\u5e38\u6211\u4eec\u76f4\u63a5\u4f7f\u7528NCCL\u5373\u53ef\u3002 init_method\u3002\u7528\u6765\u8868\u793a\u5728\u542f\u52a8\u591a\u8fdb\u7a0b\u8bad\u7ec3\u65f6\uff0c\u5404\u8fdb\u7a0b\u7684\u63e1\u624b\u65b9\u5f0f\uff0c\u4e3b\u8981\u5305\u62ec\u4e09\u79cd\u65b9\u5f0f\uff0c\u5373file\uff08\u5171\u4eab\u6587\u4ef6\uff09\u3001tcp\uff08\u5957\u63a5\u5b57\uff09\u548cenv\uff08\u73af\u5883\u53d8\u91cf\uff09\uff0c\u591a\u673a\u8bad\u7ec3\u4e3b\u8981\u4f7f\u7528file\u548ctcp\u7684\u65b9\u5f0f\u3002\u901a\u8fc7file\u7684\u63e1\u624b\u65b9\u5f0f\u9700\u8981\u591a\u673a\u4e4b\u95f4\u88c5\u6709NFS\uff08Network File System\uff09\uff0c\u5728\u6307\u5b9a\u4e86\u5404\u8fdb\u7a0b\u5747\u53ef\u8bbf\u95ee\u7684\u5171\u4eab\u6587\u4ef6\u8def\u5f84\u540e\uff0c\u5404\u53f0\u673a\u5668\u4e0a\u7684\u4e0d\u540c\u8fdb\u7a0b\u901a\u8fc7\u8be5\u5171\u4eab\u6587\u4ef6\u5b8c\u6210\u63e1\u624b\uff0c\u4f8b\u5982 file:///export/nfs/ddp_init\u3002tcp\u7684\u65b9\u5f0f\u9700\u8981\u7ed9\u5b9a\u5404\u673a\u5668\u4e0a\u4e0d\u540c\u8fdb\u7a0b\u5747\u53ef\u8bbf\u95ee\u7684\u7f51\u7edc\u5730\u5740\u548c\u7aef\u53e3\u53f7\u6765\u5b8c\u6210\u5404\u8fdb\u7a0b\u7684\u63e1\u624b\uff0c\u4f8b\u5982tcp://127.0.0.1:23456\u3002 group\u3002\u9ed8\u8ba4\u503c\u5373\u53ef\u3002 world size\u3002\u8868\u793a\u5168\u5c40\u5e76\u884c\u7684\u8fdb\u7a0b\u6570\uff0cDDP\u6a21\u5f0f\u4e0b\uff0c \u6700\u4f18\u7684\u65b9\u6848\u662f\u6bcf\u4e2a\u8fdb\u7a0b\u4e00\u4e2a\u5361 \uff0c\u56e0\u6b64\u901a\u5e38\u60c5\u51b5\u4e0bworld size\u5b9e\u9645\u4e3a\u603b\u7684GPU\u6570\u91cf\u6216\u8005\u603b\u7684\u8fdb\u7a0b\u6570\u3002 rank\u3002\u8868\u793a\u5f53\u524d\u8fdb\u7a0b\u6216GPU\u7684\u5e8f\u53f7\uff0c\u7528\u4e8e\u8fdb\u7a0b\u95f4\u901a\u8baf\u3002\u4ece0\u5f00\u59cb\u6392\u5e8f\uff0c\u8303\u56f4\u662f0~world size-1\u3002\u6ce8\u610f\uff1arank=0\u8868\u793a\u8be5\u8fdb\u7a0b\u662fmaster\u8fdb\u7a0b\uff0c\u901a\u5e38\u7528\u6765\u5b58\u50a8\u6a21\u578b\u65e5\u5fd7\u7b49\u3002 \u6b64\u5916\u7a0b\u5e8f\u4e2d\u8fd8\u53ef\u80fd\u51fa\u73b0node_rank\u4ee5\u53calocal_rank\u7684\u6982\u5ff5\uff1a node_rank\u3002\u8868\u793a\u5f53\u524d\u673a\u5668\u7684\u5e8f\u53f7\uff0c\u540c\u6837\u4e5f\u662f\u4ece0\u5f00\u59cb\u6392\u5e8f\uff0c\u5047\u8bbe\u4e00\u5171\u4f7f\u7528\u4e86N\u53f0\u673a\u5668\uff0c\u5219node_rank\u7684\u8303\u56f4\u662f0\uff5eN-1\u3002 local_rank\u3002\u8868\u793a\u5f53\u524d\u673a\u5668\u4e0a\u7684\u8fdb\u7a0b\u6216GPU\u7684\u5e8f\u53f7\uff0c\u4ece0\u5f00\u59cb\u6392\u5e8f\uff0c\u5047\u8bbe\u5f53\u524d\u673a\u5668\u53ef\u4f7f\u7528GPU\u6570\u91cf\u662fN\uff0c\u5219local_rank\u8303\u56f4\u662f0\uff5eN-1\u3002 DDP\u7684\u5de5\u4f5c\u6d41\u7a0b Pytorch DDP\u7684\u4e3b\u8981\u5de5\u4f5c\u6d41\u7a0b\uff1a \u542f\u52a8\u5404\u8fdb\u7a0b\u3002 \u5404\u8fdb\u7a0b\u901a\u8fc7\u6307\u5b9a\u7684init method\u5b8c\u6210\u63e1\u624b\uff0c\u4ee5\u4fbf\u8fdb\u884c\u8fdb\u7a0b\u4e4b\u95f4\u7684\u901a\u4fe1\u3002 \u4e3b\u8282\u70b9\u8f7d\u5165\u6216\u968f\u673a\u521d\u59cb\u5316\u6a21\u578b\uff0c\u5e76\u4e14\u5c06\u53c2\u6570\u548cBuffer\uff08Buffer\u662f\u4f1a\u88ab\u6301\u4e45\u5316\u4fdd\u5b58\u7684\u6570\u636e\u7b49\uff0c\u5982BatchNorm\u4e2d\u7684mean\u548cvariance\uff09\u7b49\u6a21\u578b\u72b6\u6001\u4fe1\u606f\u5206\u53d1\u81f3\u5404GPU\u8282\u70b9\uff0c\u6b64\u65f6\u6bcf\u4e2aGPU\u8282\u70b9\u62ff\u5230\u7684\u6a21\u578b\u72b6\u6001\u662f\u76f8\u540c\u7684\u3002 \u901a\u8fc7sampler\uff0c \u6bcf\u4e2aGPU\u62ff\u5230\u4e86\u5c5e\u4e8e\u81ea\u5df1\u7684\u90a3\u4efd\u6570\u636e \uff0c\u5e76\u8fdb\u884c\u524d\u5411\u8fd0\u7b97\uff0c\u5e76\u4e14\u8ba1\u7b97\u51faloss\u3002 \u6bcf\u4e2aGPU\u8fdb\u884cbackward()\u540e\u5411\u8fd0\u7b97\u6c42\u51fa\u68af\u5ea6\uff08 \u6b64\u65f6\u6bcf\u4e2aGPU\u4e0a\u7684\u68af\u5ea6\u662f\u4e0d\u540c\u7684 \uff09\uff0c\u4e4b\u540e\u5404GPU\u901a\u8fc7AllReduce\u7b97\u6cd5\u5bf9\u68af\u5ea6\u8fdb\u884c\u540c\u6b65\uff0c\u4f7f\u5f97\u6bcf\u4e2aGPU\u90fd\u80fd\u62ff\u5230\u5168\u90e8GPU\u4e0a\u7684\u68af\u5ea6\u7684\u548c\uff08 \u8fd9\u65f6\u6bcf\u4e2aGPU\u4e0a\u7684\u68af\u5ea6\u662f\u76f8\u540c\u7684 \uff09\u3002 \u5404GPU\u6839\u636e\u540c\u6b65\u4e4b\u540e\u7684\u68af\u5ea6\u6765\u66f4\u65b0\u6a21\u578b\u53c2\u6570\uff0c\u66f4\u65b0\u4e4b\u540e\u5404\u4e2aGPU\u4e0a\u7684\u6a21\u578b\u53c2\u6570\u662f\u76f8\u540c\u7684\u3002 \u91cd\u590d\u6267\u884c4~6\uff0c\u76f4\u81f3\u8bad\u7ec3\u5b8c\u6bd5\u3002 WeNet\u5206\u5e03\u5f0f\u591a\u673a\u8bad\u7ec3\u5b9e\u73b0 \u9996\u5148\u591a\u673a\u5206\u5e03\u5f0f\u8bad\u7ec3\u901a\u5e38\u9700\u8981\u5206\u5e03\u5f0f\u5b58\u50a8\u7cfb\u7edf\u7684\u652f\u6301\uff0c\u5982S3\u3001HDFS\u548cNFS\u3002\u7531\u4e8ePyTorch\u5b98\u65b9\u672a\u50cfTensorFlow\u4e00\u6837\u63d0\u4f9bS3\u548cHDFS\u7684\u63a5\u53e3\uff0c\u56e0\u6b64\u53ef\u4ee5\u4f7f\u7528NFS\u4f5c\u4e3a\u5206\u5e03\u5f0f\u5b58\u50a8\u3002WeNet\u9996\u5148\u8fdb\u884c\u8fdb\u7a0b\u521d\u59cb\u5316\uff0c\u7528\u4e8e\u5b8c\u6210\u5404\u8fdb\u7a0b\u63e1\u624b\u7684 init_process_group() \u51fd\u6570\uff0c\u9700\u8981\u4f20\u9012\u7684\u53d8\u91cf\u6709backend\uff0cinit_method\uff0cworld_size\u548crank\u7b49\u3002\u6ce8\u610f\uff1a\u5728\u4f7f\u7528\u591a\u673a\u591a\u5361\u8bad\u7ec3\u65f6\uff0c \u5148\u542f\u52a8\u7684\u673a\u5668\u8282\u70b9\u4e0a\u7684\u8fdb\u7a0b\u4f1a\u5728\u6b64\u7b49\u5f85\uff0c\u76f4\u5230\u6240\u6709\u8fdb\u7a0b\u90fd\u6267\u884c\u5230\u8fd9\u91cc \uff0c\u6b64\u65f6\u603b\u7684\u8fdb\u7a0b\u6570\u4e0eworld_size\u76f8\u540c\uff0c\u624d\u4f1a\u7ee7\u7eed\u6267\u884c\u3002 \u6240\u4ee5\u5f53world_size\u503c\u548c\u5b9e\u9645\u7684\u603b\u8fdb\u7a0b\u6570\u4e0d\u4e00\u81f4\u65f6\uff0c\u4f1a\u4ea7\u751fBug\uff1a\u5148\u542f\u52a8\u7684\u8fdb\u7a0b\u4f1a\u4e00\u76f4\u7b49\u5f85\uff0c\u76f4\u81f3\u8d85\u65f6\u9000\u51fa \u3002 1 2 3 4 5 6 7 8 9 10 11 # wenet/bin/train.py dist . init_process_group ( args . dist_backend , init_method = args . init_method , world_size = args . world_size , rank = args . rank ) ... train_data_loader = DataLoader ( train_dataset , batch_size = None , pin_memory = args . pin_memory , num_workers = args . num_workers , prefetch_factor = args . prefetch ) \u4e4b\u540e\u901a\u8fc7DistributedDataParall\u5c06\u6a21\u578b\u7684\u72b6\u6001\u4fe1\u606f\u4ecemaster\u8fdb\u7a0b\u8282\u70b9\u4f20\u5230\u5176\u4ed6\u8fdb\u7a0b\u8282\u70b9\uff0c\u4f7f\u6240\u6709\u8fdb\u7a0b\u4e0a\u7684\u6a21\u578b\u72b6\u6001\u4e00\u81f4\u3002 1 2 3 4 5 # wenet/bin/train.py # cuda model is required for nn.parallel.DistributedDataParallel model . cuda () model = torch . nn . parallel . DistributedDataParallel ( model , find_unused_parameters = True ) \u4e4b\u540e\u7684\u6d41\u7a0b\u4fbf\u548c\u6b63\u5e38\u7684\u8bad\u7ec3\u4e00\u81f4\uff0c\u4f46\u662f\u9700\u8981\u989d\u5916\u6ce8\u610f\uff0c\u5373 Gradient Accumulation \u68af\u5ea6\u7d2f\u79ef\u673a\u5236\uff0c\u8fd9\u4e2a\u673a\u5236\u6307\u6bcf\u9694\u82e5\u5e72\u4e2abatch step\u8fdb\u884c\u4e00\u6b21\u53c2\u6570\u7684\u66f4\u65b0\uff0c\u4ece\u800c\u53ef\u4ee5\u53bb\u6a21\u62df\u66f4\u5927\u7684batch size\uff0c\u4f7f\u8bad\u7ec3\u66f4\u52a0\u7a33\u5b9a\u3002\u5177\u4f53\u5b9e\u73b0\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 # wenet/utils/executors.py loss , loss_att , loss_ctc = model ( feats , feats_lengths , target , target_lengths ) ... loss . backward () ... if batch_idx % accum_grad == 0 : if rank == 0 and writer is not None : writer . add_scalar ( 'train_loss' , loss , self . step ) # Use mixed precision training if use_amp : scaler . unscale_ ( optimizer ) grad_norm = clip_grad_norm_ ( model . parameters (), clip ) # Must invoke scaler.update() if unscale_() is used in # the iteration to avoid the following error: # RuntimeError: unscale_() has already been called # on this optimizer since the last update(). # We don't check grad here since that if the gradient # has inf/nan values, scaler.step will skip # optimizer.step(). scaler . step ( optimizer ) scaler . update () else : grad_norm = clip_grad_norm_ ( model . parameters (), clip ) if torch . isfinite ( grad_norm ): optimizer . step () optimizer . zero_grad () scheduler . step () self . step += 1 \u4f46\u662f\u5982\u4e0a\u7684\u5b9e\u73b0\u5b58\u5728\u4e00\u4e2a\u6027\u80fd\u95ee\u9898\u3002\u5982\u4e0a\u6587\u6240\u8ff0\uff0c\u68af\u5ea6\u7684AllReduce\u64cd\u4f5c\u662f\u5728 backward() \u65f6\u8fdb\u884c\uff0c\u56e0\u6b64 \u6bcf\u4e2abatch step\u90fd\u4f1a\u8fdb\u884c\u5404GPU\u8fdb\u7a0b\u4e4b\u95f4\u68af\u5ea6\u540c\u6b65\u7684\u64cd\u4f5c \u3002\u7531\u4e8eGradient Accumulation\u4e2d\u6bcfn\u4e2astep\u624d\u66f4\u65b0\u4e00\u6b21\u7f51\u7edc\u53c2\u6570\uff0c\u56e0\u6b64\u5176\u4e2dn-1\u6b21 backward() \u65f6\u8fdb\u884c\u7684\u68af\u5ea6\u540c\u6b65\u7ed3\u679c\u4e0d\u4f1a\u88ab\u4f7f\u7528\u3002\u800c\u8fd9\u4e9b\u65e0\u7528\u7684\u68af\u5ea6\u540c\u6b65\u4f1a\u589e\u52a0\u5206\u5e03\u5f0f\u591a\u673a\u591a\u5361\u8bad\u7ec3\u65f6\u5404\u673a\u5668\u8282\u70b9\u7684\u7f51\u7edc\u5e26\u5bbd\u538b\u529b\u3002PyTorch\u6700\u65b0\u7684\u7248\u672c\u4e2d\u652f\u6301\u7684no_sync()\u4e0a\u4e0b\u6587\u7ba1\u7406\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 # wenet/utils/executors.py # Disable gradient synchronizations across DDP processes. # Within this context, gradients will be accumulated on module # variables, which will later be synchronized. if is_distributed and batch_idx % accum_grad != 0 : context = model . no_sync # Used for single gpu training and DDP gradient synchronization # processes. else : context = nullcontext # \u5982\u679c\u5728model.no_sync()\u4e0a\u4e0b\u6587\u4e2d\uff0c\u4e0d\u4f1a\u540c\u6b65\u5404\u4e2a\u8282\u70b9\u95f4\u7684\u68af\u5ea6 with context (): # autocast context # The more details about amp can be found in # https://pytorch.org/docs/stable/notes/amp_examples.html with torch . cuda . amp . autocast ( scaler is not None ): loss , loss_att , loss_ctc = model ( feats , feats_lengths , target , target_lengths ) loss = loss / accum_grad if use_amp : scaler . scale ( loss ) . backward () else : loss . backward () \u7d2f\u8ba1\u68af\u5ea6\u65f6\u4f7f\u7528no_sync\u4e0a\u4e0b\u6587\uff0c\u8fd9\u65f6 backward() \u5c06\u4e0d\u518d\u8fdb\u884c\u68af\u5ea6\u7684\u540c\u6b65\u3002 WeNet\u5206\u5e03\u5f0f\u4f7f\u7528\u5b9e\u8df5 \u9996\u5148\u9700\u8981\u786e\u5b9a\u603b\u5171\u4f7f\u7528\u7684\u673a\u5668\u6570num_nodes\uff0c\u5982\u679c\u662f\u5355\u673a\u8bad\u7ec3\uff0c\u5219\u8bbe\u7f6enum_nodes=1\uff0cnode_rank=0\u5373\u53ef\u3002\u5982\u679c\u4f7f\u7528\u591a\u673a\u8bad\u7ec3\u6a21\u5f0f\uff0c\u5219\u9700\u8981\u5148\u6307\u5b9a\u673a\u5668\u8282\u70b9\u7684\u6570\u91cfnum_nodes\uff0c\u7136\u540e \u5728\u6bcf\u4e2a\u673a\u5668\u8282\u70b9\u542f\u52a8\u811a\u672c\u4e2d\u6307\u5b9a\u8be5\u8282\u70b9\u7684node_rank \u3002\u4f8b\u5982\u4e00\u5171\u4f7f\u7528\u4e86\u4e24\u53f0\u673a\u5668\uff0c\u5219\u8bbe\u7f6enum_nodes=2\uff0c\u9996\u5148\u5728\u7b2c\u4e00\u4e2a\u8282\u70b9\u542f\u52a8 run.sh \u811a\u672c\u5e76\u8bbe\u7f6enode_rank=0\uff0c\u5176\u6b21\u5728\u7b2c\u4e8c\u4e2a\u8282\u70b9\u542f\u52a8 run.sh \u811a\u672c\u5e76\u8bbe\u7f6enode_rank=1\u3002 1 2 3 4 5 6 7 8 9 # wenet/examples/aishell/s0/run.sh # The num of machines(nodes) for multi-machine training, 1 is for one machine. # NFS is required if num_nodes > 1. num_nodes = 1 # The rank of each node or machine, which ranges from 0 to `num_nodes - 1`. # You should set the node_rank=0 on the first machine, set the node_rank=1 # on the second machine, and so on. node_rank = 0 \u6bcf\u53f0\u673a\u5668\u5728\u542f\u52a8 run.sh \u811a\u672c\u540e\uff0c\u5c06\u4f1a\u5728\u5176\u6240\u5728\u7684\u4e3b\u673a\u4e0a\u542f\u52a8\u5305\u542b\u7684GPU\u6570\u91cf\u76f8\u540c\u7684\u8fdb\u7a0b\uff0c\u5e76\u8ba1\u7b97\u5404GPU\u6216\u8fdb\u7a0b\u7684rank\uff0c\u4ece\u800c\u5b8c\u6210\u591a\u673a\u591a\u5361\u7684\u5206\u5e03\u5f0f\u8bad\u7ec3\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 # wenet/examples/aishell/s0/run.sh num_gpus = $( echo $CUDA_VISIBLE_DEVICES | awk -F \",\" '{print NF}' ) ... # train.py rewrite $train_config to $dir/train.yaml with model input # and output dimension, and $dir/train.yaml will be used for inference # and export. for (( i = 0 ; i < $num_gpus ; ++i )) ; do { gpu_id = $( echo $CUDA_VISIBLE_DEVICES | cut -d ',' -f$ [ $i +1 ] ) # Rank of each gpu/process used for knowing whether it is # the master of a worker. rank = ` expr $node_rank \\* $num_gpus + $i ` python wenet/bin/train.py --gpu $gpu_id \\ --config $train_config \\ --data_type $data_type \\ --symbol_table $dict \\ --train_data data/ $train_set /data.list \\ --cv_data data/dev/data.list \\ ${ checkpoint :+--checkpoint $checkpoint } \\ --model_dir $dir \\ --ddp.init_method $init_method \\ --ddp.world_size $world_size \\ --ddp.rank $rank \\ --ddp.dist_backend $dist_backend \\ --num_workers 1 \\ $cmvn_opts \\ --pin_memory } & done wait WeNet\u5b9e\u9a8c\u7ed3\u679c Reference\uff1a WeNet\u66f4\u65b0\uff1a\u652f\u6301\u591a\u673a\u5e76\u884c\u8bad\u7ec3 no_sync\u4e0a\u4e0b\u6587 \u901a\u8fc7\u76d1\u63a7\u5404\u8282\u70b9\u7684\u7f51\u7edc\u6d41\u91cf\u60c5\u51b5\u6765\u9a8c\u8bc1no_sync\u4e0a\u4e0b\u6587\u662f\u5426\u751f\u6548\u3002\u5982\u4e0b\u662f\u91c7\u7528\u7d2f\u8ba1\u68af\u5ea6\u4e3a4\uff0c\u540c\u4e00\u673a\u5668\u8282\u70b9\u4e0a\u7f51\u5361\u7684\u6d41\u91cf\u60c5\u51b5\u3002\u5de6\u4fa7\u4e3a\u672a\u4f7f\u7528no_sync\u4e0a\u4e0b\u6587\uff0c\u53f3\u56fe\u4e3a\u4f7f\u7528\u4e86no_sync\u4e0a\u4e0b\u6587\u3002 \u53ef\u4ee5\u770b\u5230\uff0cno_sync\u4e0a\u4e0b\u6587\u6781\u5927\u7684\u964d\u4f4e\u4e86\u7f51\u7edc\u6d41\u91cf\uff0c\u51cf\u5c0f\u4e86\u5bf9\u7f51\u7edc\u5e26\u5bbd\u7684\u9700\u6c42\u538b\u529b\u3002 \u7f51\u7edc\u5e26\u5bbd\u5bf9\u591a\u673a\u8bad\u7ec3\u52a0\u901f\u6bd4\u7684\u5f71\u54cd \u5982\u4e0a\u6240\u8ff0\uff0c\u867d\u7136DDP\u91c7\u7528\u7684AllReduce\u7684\u68af\u5ea6\u540c\u6b65\u65b9\u6848\uff0c\u5404GPU\u901a\u4fe1\u65f6\u5904\u4e8e\u5e73\u7b49\u7684\u72b6\u6001\uff0c\u5e73\u8861\u4e86\u5404\u8282\u70b9\u7684\u901a\u4fe1\u6d41\u91cf\uff0c\u4f46\u662f DDP\u4ecd\u7136\u9700\u8981\u8f83\u597d\u7684\u7f51\u7edc\u5e26\u5bbd\uff0c\u624d\u80fd\u8fbe\u5230\u66f4\u597d\u7684\u591a\u673a\u7ebf\u6027\u52a0\u901f \uff0c\u5404\u673a\u5668\u8282\u70b9\u4e4b\u95f4\u901a\u4fe1\u7684\u7f51\u7edc\u5e26\u5bbd\u4f1a\u6210\u4e3a\u7cfb\u7edf\u7684\u74f6\u9888\u3002\u5f53\u7f51\u7edc\u5e26\u5bbd\u8fc7\u5c0f\u65f6\uff0c\u5728\u8fdb\u884c\u68af\u5ea6\u540c\u6b65\u65f6\uff0c\u7531\u4e8e\u5e26\u5bbd\u8fc7\u5c0f\u4f1a\u5bfc\u81f4\u5ef6\u8fdf\u5927\uff0c\u68af\u5ea6\u540c\u6b65\u901a\u4fe1\u65f6\u51fa\u73b0\u7b49\u5f85\u7684\u73b0\u8c61\u3002\u4e0b\u8868\u8bb0\u5f55\u4e86WeNet\u4f7f\u7528\u4e86\u4e24\u53f0\u673a\u5668\u4e00\u517116\u5757GPU\uff0c\u7d2f\u8ba1\u68af\u5ea6\u4e3a4\u7684\u60c5\u51b5\u4e0b\u7f51\u7edc\u5e26\u5bbd\u5bf9\u8bad\u7ec3\u901f\u5ea6\u7684\u5f71\u54cd\uff0c\u4f7f\u7528\u7684\u8bed\u6599\u4e3aAISHELL-1\u3002 \u8bad\u7ec3\u914d\u7f6e \u6bcf\u4e2aepoch\u8bad\u7ec3\u65f6\u95f4 \u5355\u673a8\u5757GPU\u8bad\u7ec3 6\u520650\u79d2 \u591a\u673a16\u5757GPU&\u5343\u5146\u7f51\u5361 22\u5206 \u591a\u673a16\u5757GPU&\u4e07\u5146\u7f51\u5361 3\u520648\u79d2 \u53ef\u4ee5\u770b\u5230 \u5f53\u4f7f\u7528\u5343\u5146\u7f51\u65f6\uff0c\u4e24\u53f0\u673a\u566816\u5361\u8bad\u7ec3\u7684\u901f\u5ea6\u751a\u81f3\u6bd4\u5355\u673a8\u5361\u8fd8\u8981\u6162\u5f88\u591a \uff0c\u6539\u6210\u4e07\u5146\u7f51\u5361\u4e4b\u540e\u4fbf\u53ef\u5f97\u5230\u4e0d\u9519\u7684\u52a0\u901f\u3002\u7531\u6b64\u53ef\u89c1\uff0c DDP\u4e5f\u9700\u8981\u8f83\u597d\u7684\u7f51\u7edc\u5e26\u5bbd\u7684\u652f\u6301\uff0c\u9632\u6b62\u5728\u505a\u68af\u5ea6\u66f4\u65b0\u65f6\uff0c\u7f51\u5361\u7684\u5e26\u5bbd\u6210\u4e3a\u7cfb\u7edf\u7684\u74f6\u9888 \u3002 no_sync\u4e0a\u4e0b\u6587\u7684\u5f71\u54cd \u4e0a\u4e0b\u6587\u5bf9\u6bcf\u4e2aepoch\u7684\u8bad\u7ec3\u65f6\u95f4\u5f71\u54cd\u5982\u4e0b\u3002 \u8bad\u7ec3\u914d\u7f6e no_sync\u4e0a\u4e0b\u6587 \u6bcf\u4e2aepoch\u8bad\u7ec3\u65f6\u95f4 \u5355\u673a8\u5757GPU\u8bad\u7ec3 \u91c7\u7528 6\u520650\u79d2 \u591a\u673a16\u5757GPU&\u5343\u5146\u7f51\u5361 \u4e0d\u91c7\u7528 22\u5206 \u591a\u673a16\u5757GPU&\u5343\u5146\u7f51\u5361 \u91c7\u7528 8\u520610\u79d2 \u591a\u673a16\u5757GPU&\u4e07\u5146\u7f51\u5361 \u4e0d\u91c7\u7528 3\u520648\u79d2 \u591a\u673a16\u5757GPU&\u4e07\u5146\u7f51\u5361 \u91c7\u7528 3\u520635\u79d2 \u901a\u8fc7\u5bf9\u6bd4\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u4e0d\u7ba1\u662f\u5343\u5146\u7f51\u8fd8\u662f\u4e07\u5146\u7f51\uff0c\u4f7f\u7528no_sync\u4e0a\u4e0b\u6587\u90fd\u6bd4\u672a\u4f7f\u7528no_sync\u4e0a\u4e0b\u6587\u66f4\u5feb\u4e86\u4e9b\u3002 \u4e07\u5146\u7f51\u5361+\u68af\u5ea6no_sync\u4e0a\u4e0b\u6587\u540e\u51e0\u4e4e\u63a5\u8fd1\u8f83\u4e3a\u5b8c\u7f8e\u7684\u7ebf\u6027\u52a0\u901f\u6bd4 \uff0c\u5e76\u4e14\u4ece\u6570\u636e\u4e0a\u770b\uff0c\u4e07\u5146\u7f51\u5361\u662f\u51b3\u5b9a\u6027\u56e0\u7d20\u3002 \u591a\u673a\u591a\u5361\u7684\u6a21\u578b\u6548\u679c\u5bf9\u6bd4 \u5355\u673a\u8bad\u7ec3\u4e0e\u591a\u673a\u8bad\u7ec3\u6700\u7ec8\u6a21\u578b\u7684CER\u7684\u5bf9\u6bd4\u5982\u4e0b\u3002 \u89e3\u7801\u65b9\u5f0f \u5355\u673a4\u5361 \u591a\u673a16\u5361 attention decoder 5.18 4.90 ctc greedy search 4.94 5.07 ctc prefix beam serach 4.94 5.06 attention rescoring 4.61 4.65 \u901a\u8fc7\u5bf9\u6bd4\u53ef\u4ee5\u770b\u5230\uff0c \u591a\u673a\u8bad\u7ec3\u7684\u8bc6\u522b\u6027\u80fd\u4e0e\u5355\u673a\u8bad\u7ec3\u7684\u8bc6\u522b\u6027\u80fd\u57fa\u672c\u4e00\u81f4 \u3002\u5728\u6a21\u578b\u6548\u679c\u51e0\u4e4e\u4e0d\u53d8\u7684\u60c5\u51b5\u4e0b\uff0cWeNet\u591a\u673a\u8bad\u7ec3\u8fd1\u4e4e\u8fbe\u5230\u4e86\u5b8c\u7f8e\u7684\u7ebf\u6027\u52a0\u901f\u3002\u53c2\u89c1wenet/examples/aishell/s0/README.md \u57fa\u4e8eNFS\u591a\u673a\u8bad\u7ec3 NFS\u662f\u4e00\u79cd\u4fbf\u4e8e\u6570\u636e\u5171\u4eab\u7684\u670d\u52a1\uff0c\u4f46\u5e76\u4e0d\u9002\u7528\u4e8e\u591a\u673a\u5206\u5e03\u5f0f\u9ad8\u6027\u80fd\u8ba1\u7b97\u3002\u6700\u4e3b\u8981\u7684\u539f\u56e0\u662f\u5728\u8fdb\u884c\u591a\u673a\u8bad\u7ec3\u65f6\uff0c\u4ececlient\u8282\u70b9\u4f1a\u4e0d\u65ad\u7684\u8bbf\u95ee\u5b58\u653e\u6570\u636e\u7684server\u8282\u70b9\uff0c\u6b64\u65f6 server\u8282\u70b9\u7684\u7f51\u7edc\u548c\u78c1\u76d8\u5e26\u5bbd\u4f1a\u6210\u4e3a\u7cfb\u7edf\u7684\u74f6\u9888 \u3002\u8fd9\u91cc\u6709\u4e00\u4e2a\u5c0ftrick\u53ef\u4ee5\u7f13\u89e3\u8fd9\u4e2a\u95ee\u9898\uff1a \u5c31\u662f\u5c06\u8981\u8bbf\u95ee\u7684\u6570\u636e\u7684\u5b58\u50a8\u5206\u6563\u81f3\u591a\u4e2aserver\u8282\u70b9\u4e0a \uff0c\u8fd9\u6837\u540c\u4e00\u65f6\u523b\uff0c\u6240\u6709\u8fdb\u7a0b\u60f3\u8981\u8bbf\u95ee\u7684\u6570\u636e\u4f1a\u5411\u4e0d\u540c\u7684NFS\u7684server\u8282\u70b9\u8bbf\u95ee\uff0c\u8fd9\u6837\u6781\u5927\u7684\u51cf\u5c0f\u4e86\u5355\u4e00server\u8282\u70b9\u65f6\u7684\u7f51\u7edc\u548c\u78c1\u76d8\u5e26\u5bbd\u95ee\u9898\u3002 \u603b\u7ed3 \u4e07\u5146\u7f51\u5361\uff0c\u662f\u4fdd\u8bc1\u591a\u673a\u8bad\u7ec3\u7ebf\u6027\u52a0\u901f\u7684\u5173\u952e\u3002 no_sync\u4e0eacc_grad\u7684\u4f7f\u7528\u53ef\u4ee5\u6781\u5927\u964d\u4f4e\u591a\u673a\u8bad\u7ec3\u65f6\u7684\u6d41\u91cf\uff0c\u51cf\u5c0f\u7cfb\u7edf\u5bf9\u5e26\u5bbd\u7684\u9700\u6c42\uff0c\u53ef\u4ee5\u5f97\u5230\u66f4\u597d\u7684\u52a0\u901f\u6bd4\u3002 \u57fa\u4e8eNFS\u7684\u591a\u673a\u5b58\u50a8\u65b9\u6848\uff0cserver\u70b9\u7684\u5e26\u5bbd\u4f1a\u6210\u4e3a\u7cfb\u7edf\u74f6\u9888\uff0c\u4e3a\u6b64\u53ef\u4ee5\u5c06\u6587\u4ef6\u5206\u6563\u81f3\u4e0d\u540c\u8282\u70b9\u4e0a\uff0c\u8d1f\u8f7d\u5747\u8861\u5404\u8282\u70b9\u7f51\u7edc\u6d41\u91cf\u3002 \u7f51\u7edc\u5e26\u5bbd\u5bf9\u4e8e\u5206\u5e03\u5f0f\u8bad\u7ec3\u6765\u8bf4\u81f3\u5173\u91cd\u8981 \u3002\u9664\u4e0a\u8ff0\u7684\u65b9\u6cd5\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528amp\u6216apex\u7b49\u8f6f\u4ef6\u5305\u63d0\u4f9b\u7684 \u6df7\u5408\u7cbe\u5ea6\u8bad\u7ec3 \uff0c\u8fd9\u6837\u5728\u68af\u5ea6\u540c\u6b65\u65f6\uff0c\u4f7f\u7528fp16\u6765\u8fdb\u884c\u540c\u6b65\uff0c\u76f8\u8f83\u4e8e\u73b0\u5728fp32\u53ef\u51cf\u5c11\u4e00\u500d\u7684\u7f51\u7edc\u6d41\u91cf\u3002","title":"wenet\u603b\u4f53\u89e3\u6790"},{"location":"asr/wenet%E6%80%BB%E4%BD%93%E8%A7%A3%E6%9E%90/#wenet","text":"","title":"wenet\u603b\u4f53\u89e3\u6790"},{"location":"asr/wenet%E6%80%BB%E4%BD%93%E8%A7%A3%E6%9E%90/#_1","text":"GMM-HMM\uff08\u4e0a\u4e16\u7eaa90\u5e74\u4ee3\uff09 \u6df1\u5ea6\u5b66\u4e60\u7206\u53d1\u521d\u671f\uff1a DNN\uff0cCTC\uff082006\uff09 RNN\u6d41\u884c\uff0cAttention\u63d0\u51fa\u521d\u671f\uff1aRNN-T\uff082013\uff09\uff0cDeepSpeech\uff082014\uff09\uff0c DeepSpeech2 (2016)\uff0c LAS\uff082016\uff09 Attetion is all you need\u63d0\u51fa\u5f00\u59cb\uff1aTransformer\uff082017\uff09\uff0cTransformer-transducer\uff082020\uff09\uff0cConformer\uff082020\uff09","title":"\u53d1\u5c55\u5386\u53f2"},{"location":"asr/wenet%E6%80%BB%E4%BD%93%E8%A7%A3%E6%9E%90/#_2","text":"\u4e00\u822c\u5728\u4f20\u7edfHMM\u6846\u67b6\u4e0b\uff0c\u4f1a\u5148\u5229\u7528HMM-GMM\u6a21\u578b\uff0c\u901a\u8fc7\u5bf9\u9f50\u7684\u65b9\u5f0f\uff0c\u5f97\u5230\u5e27\u7ea7\u522b\u7684\u5bf9\u5e94\u6807\u6ce8\uff0c\u518d\u901a\u8fc7\u5e27\u7ea7\u522b\u635f\u5931\u51fd\u6570\u6765\u4f18\u5316\u795e\u7ecf\u7f51\u7edc\u6a21\u578b\u3002\u5982\u4e0b\u662fHMM-DNN\u6a21\u578b\u7684\u8bad\u7ec3\u8fc7\u7a0b\uff1a \u5bf9\u4e8e\u6bcf\u4e2a\u53e5\u5b50\u6269\u5c55\u4e3a\u5355\u97f3\u7d20\u5e8f\u5217\uff0c\u7528\u524d\u5411\u540e\u5411EM\u8bad\u7ec3\uff0c\u5f97\u5230\u5355\u97f3\u7d20\u7684hmm-\u5355\u9ad8\u65afmodel1\u3002 \u7528model1\u5bf9\u53e5\u5b50\u505a\u5bf9\u9f50\uff0c\u5355\u9ad8\u65af\u8fdb\u884c2\u500d\u5206\u88c2\uff0c\u66f4\u65b0\u6a21\u578b\uff0c\u8fed\u4ee3\u8fd9\u4e2a\u5bf9\u9f50/\u5206\u88c2\u7684\u8fc7\u7a0bn\u6b21\uff0c\u5f97\u5230\u5355\u97f3\u7d20\u7684hmm-gmm\u6a21\u578bmodel2\u3002 \u7528model2\u5bf9\u53e5\u5b50\u505a\u5bf9\u9f50\uff0c\u5c06\u97f3\u7d20\u6839\u636e\u4e0a\u4e0b\u6587\u6269\u5c55\u4e3a\u4e09\u97f3\u7d20\uff0c\u4f7f\u7528\u5355\u9ad8\u65af\u5b66\u4e60\u6bcf\u4e2a\u97f3\u7d20\u7684\u51b3\u7b56\u6811\uff0c\u6700\u540e\u6bcf\u4e2a\u53f6\u5b50\u7ed3\u70b9\u5bf9\u5e94\u4e00\u4e2a\u5355\u9ad8\u65af\uff0c\u5f97\u5230\u4e00\u4e2a\u4e09\u97f3\u7d20-hmm-\u5355\u9ad8\u65af\u6a21\u578bmodel3\u3002 \u7c7b\u4f3c\u4e8e\u7b2c2\u6b65\uff0c\u7528model3\u4e0d\u505c\u8fed\u4ee3\u5206\u88c2\u9ad8\u65af\uff0c\u5f97\u5230\u4e09\u97f3\u7d20hmm-gmm\u7684model4\u3002 model4\u5bf9\u53e5\u5b50\u505a\u5bf9\u9f50\uff0c\u5bf9\u9f50\u6570\u636e\u7528\u4e8e\u5e27\u7ea7\u522bNN\u8bad\u7ec3\u3002 ... \u57fa\u4e8e\u795e\u7ecf\u7f51\u7edc\u7684\u7aef\u5230\u7aef\u5efa\u6a21\uff1a \u76f4\u63a5\u4ee5\u76ee\u6807\u5355\u5143\u4f5c\u4e3a\u5efa\u6a21\u5bf9\u8c61\uff0c\u6bd4\u5982\u4e2d\u6587\u4f7f\u7528 \u5b57 \uff0c\u82f1\u6587\u4f7f\u7528 \u5b57\u7b26 \u6216\u8005 BPE \u3002 \u901a\u8fc7\u7279\u6b8a\u7684\u6a21\u578b\uff08\u76ee\u6807\u51fd\u6570\uff09\uff0c\u5904\u7406\u8f93\u5165\u8f93\u51fa\u5bf9\u9f50\u672a\u77e5\u7684\u95ee\u9898\u3002 \u8fd9\u7c7b\u7aef\u5230\u7aef\u6a21\u578b\u5305\u62ec\uff1a \u57fa\u4e8eCTC\uff08Connectionist Temporal Classification\uff09\u76ee\u6807\u51fd\u6570 AED\uff08Attention-based Encoder Decoder\uff09 RNN-T\uff08Recurrent Neural Network Transducer\uff09","title":"\u7aef\u5230\u7aef\u8bc6\u522b\u57fa\u7840"},{"location":"asr/wenet%E6%80%BB%E4%BD%93%E8%A7%A3%E6%9E%90/#ctc","text":"\u4f20\u7edf\u8bed\u97f3\u8bc6\u522b\u901a\u8fc7HMM\u6765\u7ea6\u675f\u8f93\u51fa\u548c\u8f93\u5165\u7684\u5bf9\u9f50\u65b9\u5f0f\uff0c\u65f6\u95f4\u4e0a\u4fdd\u6301\u5355\u8c03\uff0cCTC\u662f\u4e00\u79cd\u7279\u6b8a\u7684HMM\u7ea6\u675f\u3002CTC\u672c\u8d28\u4e0a\u5bf9\u6240\u6709\u5408\u6cd5\u7684\u8f93\u51fa\u548c\u8f93\u5165\u5bf9\u9f50\u65b9\u5f0f\u8fdb\u884c\u4e86\u7a77\u4e3e\uff0c\u6240\u8c13\u5408\u6cd5\uff0c\u5373\u5bf9\u9f50\u540e\u7684\u8f93\u51fa\u5e8f\u5217\u80fd\u591f\u6309CTC\u89c4\u5219\u89c4\u7ea6\u5f97\u5230\u539f\u6807\u6ce8\u5e8f\u5217\uff0c\u5219\u4e3a\u5408\u6cd5\u5bf9\u9f50\u3002 \u4f7f\u7528CTC\u76ee\u6807\u51fd\u6570\u4f1a\u5f15\u5165\u4e00\u4e2ablank\u7684\u8f93\u51fa\u5355\u5143\uff0cCTC\u5bf9\u8f93\u51fa\u5e8f\u5217\u7684\u89c4\u7ea6\u89c4\u5219\u4e3a\uff1a \u5bf9\u8f93\u51fa\u5e8f\u5217\u4e2d\u8fde\u7eed\u7684\u76f8\u540c\u5b57\u7b26\u8fdb\u884c\u5408\u5e76 \u79fb\u9664\u8f93\u51fa\u5e8f\u5217\u4e2d\u7684blank\u5b57\u7b26 \u4e3e\u4f8b\u6765\u8bf4\uff0c\u5047\u8bbe\u8f93\u5165\u5e27\u6570\u4e3a5\u5e27\uff0c\u539f\u6807\u6ce8\u5e8f\u5217\u4e3a\u201c\u6211\u770b\u770b\u201d\uff0c3\u4e2a\u5b57\uff0c\u4f46\u662f\u7f51\u7edc\u9700\u8981\u8f93\u51fa5\u4e2a\u5355\u5143\u624d\u80fd\u8fbe\u5230\u8f93\u5165\u548c\u8f93\u51fa\u4e00\u4e00\u5bf9\u5e94\u3002\u5728CTC\u6a21\u578b\u4e2d\uff0c \u901a\u8fc7\u5bf9\u539f\u6807\u6ce8\u4e2d\u76843\u4e2a\u5355\u5143\u8fdb\u884c\u91cd\u590d\u6216\u8005\u63d2\u5165blank\u6765\u6269\u5c55\u52305\u4e2a\u5355\u5143 \u3002\u4ee5\u4e0b\u662f\u4e24\u4e2a\u53ef\u80fd\u7684\u5e8f\u5217\uff1a 1 2 \u6211\u770b-\u770b\u770b \u6211--\u770b\u770b \u5176\u4e2d\uff0c\u201c-\u201d\u8868\u793ablank\uff0c\u4e0a\u8ff0\u4e24\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u5bf9\u9f50\u8f93\u51fa\u5e8f\u5217\u201c\u6211\u770b-\u770b\u770b\u201d\u662f\u5408\u6cd5\u5bf9\u9f50\u5e8f\u5217\uff0c\u5728\u89c4\u7ea6\u4e4b\u540e\u80fd\u591f\u83b7\u5f97\u539f\u6807\u6ce8\u5e8f\u5217\uff1b\u800c\u7b2c\u4e8c\u4e2a\u5bf9\u9f50\u5e8f\u5217\u201c\u6211--\u770b\u770b\u201d\u5728\u89c4\u7ea6\u4e4b\u540e\u662f\u201c\u6211\u770b\u201d\uff0c\u4e0d\u80fd\u83b7\u5f97\u539f\u6807\u6ce8\u5e8f\u5217\uff0c\u56e0\u6b64\u4e0d\u662f\u5408\u6cd5\u5bf9\u9f50\u5e8f\u5217\u3002\u5f53\u7136\u9664\u4e86\u201c\u6211\u770b-\u770b\u770b\u201d\uff0c\u8fd8\u6709\u975e\u5e38\u591a\u7684\u5408\u6cd5\u5e8f\u5217\uff0c\u6bd4\u5982\uff1a 1 2 3 4 \u6211\u770b\u770b-\u770b \u6211-\u770b-\u770b \u6211\u770b--\u770b ... CTC\u76ee\u6807\u51fd\u6570\u7684\u601d\u60f3\u662f\uff1a\u65e2\u7136\u4e0d\u77e5\u9053\u5230\u5e95\u54ea\u4e2a\u5bf9\u9f50\u5173\u7cfb\u662f\u6b63\u786e\u7684\uff0c\u90a3\u5c31 \u6700\u5927\u5316\u6240\u6709\u5408\u6cd5CTC\u5bf9\u9f50\u7684\u6982\u7387\u4e4b\u548c \u3002\u56e0\u6b64\u5bf9\u4e8e\u8be5\u4f8b\u5b50\uff0c\u76ee\u6807\u5c31\u662f\u6700\u5927\u5316\u5982\u4e0b\u6982\u7387\uff1a \\[ P(\u6211\u770b\u770b|X)=P(\u6211\u770b-\u770b\u770b|X)+P(\u6211\u770b\u770b-\u770b|X)+...+P(\u6211\u770b--\u770b|X) \\] \u6c42\u8be5\u76ee\u6807\u51fd\u6570\u7684\u68af\u5ea6\uff0c\u4e00\u79cd\u65b9\u5f0f\u662f\u7a77\u4e3e\u6240\u6709\u7684\u6709\u6548CTC\u5bf9\u9f50\uff0c\u7136\u540e\u5206\u522b\u6c42\u68af\u5ea6\u76f8\u52a0\uff0c\u4f46\u662f\u8fd9\u79cd\u65b9\u6cd5\u7684\u590d\u6742\u5ea6\u592a\u9ad8\u3002\u7531\u4e8eCTC\u672c\u8eab\u7684\u7ed3\u6784\u7279\u70b9\uff0c\u5b58\u5728\u4e00\u79cd\u66f4\u4e3a\u9ad8\u6548\u7684\u52a8\u6001\u89c4\u5212\u7b97\u6cd5\uff0c\u53ef\u4ee5\u6781\u5927\u63d0\u5347\u901f\u5ea6\uff0c\u53c2\u89c1\uff1a Connectionist Temporal Classification: Labelling Unsegmented Sequence Data with Recurrent Neural Networks \uff0c Eesen\u4e2d\u7684CTC\u5b9e\u73b0 \u89e3\u7801\u65f6\uff0c\u6a21\u578b\u5bf9\u6bcf\u4e00\u4e2a\u8f93\u51fa\u5e27\u90fd\u7ed9\u51fa\u8f93\u51fa\uff0c\u8fd9\u79cd\u89e3\u7801\u65b9\u5f0f\u79f0\u4e3a Frame\u540c\u6b65 \u89e3\u7801\u3002\u5982\u679c\u67d0\u4e9b\u5e27\u8f93\u51fa\u4e3ablank\u6216\u8005\u4e0e\u524d\u4e00\u5e27\u662f\u91cd\u590d\u5b57\u7b26\uff0c\u5219\u53ef\u4ee5\u5408\u5e76\u3002\u7531\u4e8e\u7a77\u4e3e\u5e8f\u5217\u4e2dblank\u6240\u5360\u6bd4\u4f8b\u8f83\u9ad8\uff0c\u56e0\u6b64\u6700\u7ec8\u7684\u6a21\u578b\u503e\u5411\u4e8e\u8f93\u51fa\u5c3d\u53ef\u80fd\u5c11\u7684\u975eblank\u5b57\u7b26\uff0c\u89e3\u7801\u5e8f\u5217\u4e2d\u5f80\u5f80\u975eblank\u5b57\u7b26\u53ea\u8f93\u51fa\u4e00\u4e2a\uff0c\u8fd9\u4e2a\u79f0\u4f5cCTC\u7684 \u5c16\u5cf0\u6548\u5e94 \u3002\u53c2\u89c1\uff1a Sequence Modeling With CTC \u674e\u5b8f\u6bc5\u8001\u5e082020\u6625\u8bfe\u7a0b-\u8bed\u97f3\u8bc6\u522b-\u8bed\u97f3\u5408\u6210-\u8bed\u97f3\u5206\u79bb","title":"CTC\u76ee\u6807\u51fd\u6570"},{"location":"asr/wenet%E6%80%BB%E4%BD%93%E8%A7%A3%E6%9E%90/#attention-based-encoder-decoder","text":"AED\uff08Attention-based Encoder Decoder\uff09\uff0c\u4e5f\u79f0Seq2Seq\u6846\u67b6\uff0c\u6216\u8005LAS\uff08Listen, Attend and Spell\uff09\u3002\u6a21\u578b\u4e2dEncoder\u5bf9\u8f93\u5165\u5e8f\u5217\uff08\u8bed\u97f3\uff09\u8fdb\u884c\u7f16\u7801\uff0cDecoder\u5219\u662f\u5728\u76ee\u6807\u5e8f\u5217\uff08Decoder\uff09\u4e0a\u7684\u81ea\u56de\u5f52\u6a21\u578b\uff08\u8f93\u5165\u4e4b\u524d\u7684\u5355\u5143\uff0c\u9884\u6d4b\u4e0b\u4e00\u4e2a\u5355\u5143\uff09\uff0c\u5728\u81ea\u56de\u5f52\u8ba1\u7b97\u4e2d\uff0c\u901a\u8fc7Attention\u83b7\u53d6Encoder\u7684\u7f16\u7801\u4fe1\u606f\uff0c\u4ece\u800c\u5229\u7528\u8f93\u5165\u5e8f\u5217\u7684\u4fe1\u606f\u3002\u5229\u7528Attention\u5b66\u4e60\u8f93\u5165\u8f93\u51fa\u95f4\u9690\u542b\u7684\u5bf9\u9f50\u9002\u7528\u4e8e\u673a\u5668\u7ffb\u8bd1\u8fd9\u7c7b\u4efb\u52a1\uff0c\u4f46\u5bf9\u4e8e\u8bed\u97f3\u8bc6\u522b\u6216\u5408\u6210\u8fd9\u7c7b\u65f6\u5e8f\u5355\u8c03\u6027\u4efb\u52a1\uff0c\u8fd9\u79cd\u65e0\u7ea6\u675f\u53cd\u800c\u4f1a\u5e26\u6765\u4e00\u4e9b\u95ee\u9898\u3002","title":"Attention-based Encoder Decoder"},{"location":"asr/wenet%E6%80%BB%E4%BD%93%E8%A7%A3%E6%9E%90/#aed","text":"\u89e3\u7801\u65f6\u4e0d\u5bf9\u6bcf\u4e00\u4e2a\u8f93\u5165\u5e27\u90fd\u8fdb\u884c\u8f93\u51fa\uff0c\u800c\u662f\u6839\u636e\u6574\u4e2a\u8f93\u5165\u5e8f\u5217\u4fe1\u606f\u548c\u5df2\u8f93\u51fa\u4fe1\u606f\u8fdb\u884c\u4e0b\u4e00\u6b21\u7684\u8f93\u51fa\uff0c\u76f4\u5230\u8f93\u51fa\u4e00\u4e2a\u7279\u6b8a\u7ed3\u675f\u5b57\u7b26\uff0c\u8fd9\u79cd\u89e3\u7801\u65b9\u6cd5\u88ab\u79f0\u4e3a Label\u540c\u6b65 \u89e3\u7801\u3002 CTC\u6ca1\u6709\u663e\u5f0f\u6784\u5efa\u6587\u672c\u548c\u8bed\u97f3\u4e4b\u95f4\u7684\u5173\u7cfb\uff0cRNN-T\u662f\u4e00\u79cd\u663e\u5f0f\u5efa\u6a21\u4e86\u6587\u672c\u548c\u8bed\u97f3\u4e4b\u95f4\u5173\u7cfb\u7684\u5e27\u540c\u6b65\u89e3\u7801\u6a21\u578b\u3002\u6807\u51c6AED\u4e2d\uff0c\u7f16\u89e3\u7801\u4e4b\u95f4\u7684Attention\u9700\u8981\u770b\u5230\u7f16\u7801\u5668\u7684\u5b8c\u6574\u5e8f\u5217\uff0c\u56e0\u6b64\u65e0\u6cd5\u8fdb\u884c\u6d41\u5f0f\u8bc6\u522b\uff0c\u56e0\u6b64\u53ef\u4ee5\u5229\u7528GMM-Attention\u3001MoChA\u3001MMA\u7b49\u5355\u8c03\u9012\u589e\u7684\u5c40\u90e8Attention\u65b9\u6cd5\u8fdb\u884c\u6539\u8fdb\u3002","title":"AED\u7684\u89e3\u7801"},{"location":"asr/wenet%E6%80%BB%E4%BD%93%E8%A7%A3%E6%9E%90/#_3","text":"\u8054\u5408\u4f7f\u7528CTC loss\u548cAED\u53ef\u4ee5\u6709\u6548\u52a0\u901f\u6a21\u578b\u6536\u655b\uff0c\u540c\u65f6\u53ef\u4ee5\u5f97\u5230\u66f4\u597d\u7684\u8bc6\u522b\u6548\u679c\uff0c\u76ee\u524d\u8be5\u65b9\u6cd5\u5df2\u7ecf\u6210\u4e3a\u7aef\u5230\u7aef\u5b66\u4e60\u7684\u6807\u51c6\u65b9\u6cd5\u3002\u5728\u89e3\u7801\u65f6\uff0c\u540c\u65f6\u4f7f\u7528CTC\u548cAED\u7684\u8f93\u51fa\uff0c\u53ef\u4ee5\u63d0\u9ad8\u8bc6\u522b\u7387\u3002WeNet\u91c7\u7528\u4e86\u5148\u4f7f\u7528CTC\u89e3\u7801\uff0c\u518d\u7528AED\u5bf9CTC\u7684Nbest\u7ed3\u679c\u8fdb\u884cRescoring\uff0c\u8fd9\u6837\u5373\u7ed3\u5408\u4e86\u4e24\u79cd\u6a21\u578b\u7684\u6548\u679c\uff0c\u53c8\u53ef\u4ee5\u5e94\u7528\u4e8e\u6d41\u5f0f\u573a\u666f\u3002","title":"\u8054\u5408\u5efa\u6a21"},{"location":"asr/wenet%E6%80%BB%E4%BD%93%E8%A7%A3%E6%9E%90/#_4","text":"\u8f93\u5165\u5e8f\u5217\u8d8a\u957f\uff0c\u5373\u5e27\u7684\u4e2a\u6570\u8d8a\u591a\uff0c\u7f51\u7edc\u8ba1\u7b97\u91cf\u5c31\u8d8a\u5927\u3002\u800c\u5728\u8bed\u97f3\u8bc6\u522b\u4e2d\uff0c\u4e00\u5b9a\u65f6\u95f4\u8303\u56f4\u5185\u7684\u8bed\u97f3\u4fe1\u53f7\u662f\u76f8\u4f3c\u7684\uff0c\u591a\u4e2a\u8fde\u7eed\u5e27\u5bf9\u5e94\u7684\u662f\u540c\u4e00\u4e2a\u53d1\u97f3\uff0c\u53e6\u5916\uff0c\u7aef\u5230\u7aef\u8bed\u97f3\u8bc6\u522b\u4f7f\u7528\u5efa\u6a21\u5355\u5143\u4e00\u822c\u662f\u4e00\u4e2a\u65f6\u95f4\u5ef6\u7eed\u8f83\u957f\u7684\u5355\u5143\uff08\u7c97\u7c92\u5ea6\uff09\uff0c\u6bd4\u5982\u5efa\u6a21\u5355\u5143\u662f\u4e00\u4e2a\u4e2d\u6587\u6c49\u5b57\uff0c\u5047\u5982\u4e00\u4e2a\u6c49\u5b57\u7528\u65f60.2s\uff0c0.2s\u5bf9\u5e9420\u5e27\uff0c\u5982\u679c\u5c0620\u5e27\u7684\u4fe1\u606f\u8fdb\u884c\u5408\u5e76\uff0c\u6bd4\u5982\u5408\u5e76\u4e3a5\u5e27\uff0c\u5219\u53ef\u4ee5\u7ebf\u6027\u7684\u51cf\u5c11\u540e\u7eedencoder\u7f51\u7edc\u7684\u524d\u5411\u8ba1\u7b97\u3001CTC loss\u548cAED\u8ba1\u7b97cross attention\u65f6\u7684\u5f00\u9500\u3002 \u53ef\u4ee5\u7528\u4e0d\u540c\u7684\u795e\u7ecf\u7f51\u7edc\u6765\u8fdb\u884c\u964d\u91c7\u6837\uff0cWeNet\u4e2d\u4f7f\u7528\u7684\u662f2D-CNN\u3002","title":"\u964d\u91c7\u6837/\u964d\u5e27\u7387"},{"location":"asr/wenet%E6%80%BB%E4%BD%93%E8%A7%A3%E6%9E%90/#_5","text":"CTC\u7684\u8f93\u51fa\u76f8\u4e92\u72ec\u7acb\uff0c\u867d\u7136CTC\u89e3\u7801\u662f \u5e27\u540c\u6b65 \u7684\uff0c\u4f46\u662f\u8981\u60f3 \u5982\u679c\u5e0c\u671b\u652f\u6301\u4f4e\u5ef6\u8fdf\u7684\u6d41\u5f0f\u8bc6\u522b\uff0cEncoder\u4e2d\u7684\u8ba1\u7b97\u5bf9\u53f3\u4fa7\u7684\u4f9d\u8d56\u4e0d\u80fd\u592a\u957f\uff1b\u6b64\u5916\uff0cCTC\u53ef\u4ee5\u8fdb\u884c\u5e27\u540c\u6b65\u89e3\u7801\uff0c\u4f46CTC\u8f93\u51fa\u4e4b\u95f4\u76f8\u4e92\u72ec\u7acb\uff0c\u4f7f\u5f97\u6bcf\u4e00\u5e27\u5229\u7528\u4e0a\u4e0b\u6587\u4fe1\u606f\u7684\u80fd\u529b\u4e0d\u8db3\uff0c\u800c\u57fa\u4e8eTransformer\u3001Conformer\u7684\u81ea\u56de\u5f52\u6a21\u578b\u5efa\u6a21\u80fd\u529b\u66f4\u5f3a\uff0c\u4f46\u6807\u51c6\u7684Fully self-attention\u4f1a\u5bf9\u4f9d\u8d56\u6574\u4e2a\u5e8f\u5217\uff0c\u4e0d\u80fd\u8fdb\u884c\u6d41\u5f0f\u8ba1\u7b97\u3002 \u56e0\u6b64WeNet\u91c7\u7528\u4e86 \u57fa\u4e8echunk\u7684attention \uff0c\u5c06\u5e8f\u5217\u5212\u5206\u4e3a\u591a\u4e2a\u56fa\u5b9a\u5927\u5c0f\u7684chunk\uff0c\u6bcf\u4e2achunk\u5185\u90e8\u7684\u5e27\u4e0d\u4f1a\u4f9d\u8d56\u4e8echunk\u53f3\u4fa7\u7684\u5e27\u3002\u540c\u65f6\uff0c \u8fde\u7eed\u5806\u53e0\u7684convolution\u5c42\u4f1a\u5e26\u6765\u8f83\u5927\u7684\u53f3\u4fa7\u4f9d\u8d56 \uff0cWeNet\u5219\u91c7\u7528\u4e86 \u56e0\u679c\u5377\u79ef \u6765\u907f\u514dconvolution\u5c42\u7684\u53f3\u4fa7\u4f9d\u8d56\uff1achunk attention+\u56e0\u679c\u5377\u79ef\u3002 \u6b64\u5916\uff0cWeNet\u91c7\u7528\u4e86CTC Nbest+Attention Rescoring\u7684\u89e3\u7801\u7b56\u7565\uff0c\u9996\u5148\u5229\u7528CTC\u89e3\u7801\u5668\u8f93\u51faNbest\u7684\u89e3\u7801\u7ed3\u679c\uff0c\u7136\u540e\u5229\u7528Attention\u89e3\u7801\u5668\u5bf9Nbest\u8fdb\u884c\u6253\u5206\uff0c\u8f93\u51fa\u5f97\u5206\u6700\u9ad8\u7684\u7ed3\u679c\u3002","title":"\u6d41\u5f0f\u8bed\u97f3\u8bc6\u522b"},{"location":"asr/wenet%E6%80%BB%E4%BD%93%E8%A7%A3%E6%9E%90/#wenet_1","text":"1 2 3 4 5 6 7 8 9 10 11 class ASRModel ( torch . nn . Module ): ... self . encoder = encoder # \u7f16\u7801\u5668\uff0c\u5305\u62ec\u4e0b\u91c7\u6837SubSampling\u7f51\u7edc\u548cTransformer/Conformer\u6a21\u5757 self . decoder = decoder # \u89e3\u7801\u5668\uff0ccross-attention+self-attention self . ctc = ctc # CTC loss self . criterion_att = LabelSmoothingLoss ( # Attention-based Decoder Loss size = vocab_size , padding_idx = ignore_id , smoothing = lsm_weight , normalize_length = length_normalized_loss , ) ASRModel \u7684\u521d\u59cb\u5316\u51fd\u6570\u4e2d\u5b9a\u4e49\u4e86encoder\u3001decoder\u3001ctc\u548ccriterion_att\uff1a encoder\u662fShared Encoder\uff0c\u5176\u4e2d\u5305\u62ec\u4e86Subsampling\u7f51\u7edc decoder\u662fAttention-based Decoder\u7f51\u7edc ctc\u662fctc Decoder\u7f51\u7edc\uff08\u4e5f\u5c31\u662f\u524d\u5411\u7f51\u7edc\u548csoftmax\uff09\u548cctc loss criterion_att\u662fattention-based decoder\u7684\u81ea\u56de\u5f52\u4f3c\u7136loss\uff0c\u5b9e\u9645\u662fLabelSmoothing\u7684loss\u3002 ASRModel \u9664\u4e86\u5b9a\u4e49\u6a21\u578b\u7ed3\u6784\u548c\u5b9e\u73b0\u524d\u5411\u8ba1\u7b97\u4e4b\u5916\uff0c\u8fd8\u6709\u4e24\u4e2a\u529f\u80fd\uff1a \u63d0\u4f9b\u591a\u79cdpython\u7684\u89e3\u7801\u63a5\u53e3 1 2 3 4 recognize () # attention decoder attention_rescoring () # CTC + attention rescoring ctc_prefix_beam_search () # CTC prefix beamsearch ctc_greedy_search () # CTC greedy search, reference: https://zhuanlan.zhihu.com/p/391848454 \u63d0\u4f9bruntime\u4e2d\u9700\u8981\u4f7f\u7528\u7684\u63a5\u53e3\uff0c\u8fd9\u4e9b\u63a5\u53e3\u5747\u6709 @torch.jit.export \u6ce8\u89e3\uff0c\u53ef\u4ee5\u5728C++\u4e2d\u8c03\u7528 1 2 3 4 5 6 7 subsampling_rate () right_context () sos_symbol () eos_symbol () forward_encoder_chunk () forward_attention_decoder () ctc_activation () \u5176\u4e2d\u6bd4\u8f83\u91cd\u8981\u7684\u662f\uff1a forward_attention_decoder : Attention Decoder\u7684\u5e8f\u5217\u524d\u5411\u8ba1\u7b97\uff0c\u975e\u81ea\u56de\u5f52\u6a21\u578b ctc_activation() : CTC Decoder forward\u8ba1\u7b97 forward_encoder_chunk() : \u57fa\u4e8echunk\u7684Encoder forward\u8ba1\u7b97","title":"WeNet\u7f51\u7edc\u7ed3\u6784"},{"location":"asr/wenet%E6%80%BB%E4%BD%93%E8%A7%A3%E6%9E%90/#encoder","text":"WeNet\u7f16\u7801\u5668\u652f\u6301Transformer\u548cConformer\u4e24\u79cd\u7f51\u7edc\u7ed3\u6784\uff0c BaseEncoder \u5b9a\u4e49\u4e86\u5982\u4e0b\u7edf\u4e00\u7684\u524d\u5411\u8fc7\u7a0b\uff1a 1 2 3 4 5 6 7 xs , pos_emb , masks = self . embed ( xs , masks ) mask_pad = masks # (B, 1, T/subsample_rate) chunk_masks = add_optional_chunk_mask ( xs , ... ) for layer in self . encoders : xs , chunk_masks , _ = layer ( xs , chunk_masks , pos_emb , mask_pad ) if self . normalize_before : xs = self . after_norm ( xs ) \u53ef\u4ee5\u770b\u5230\uff0cEncoder\u7531\u4e24\u90e8\u5206\u7ec4\u6210\uff1a self.embed \u662fSubsampling\u7f51\u7edc self.encoders \u662f\u4e00\u7ec4\u76f8\u540c\u7f51\u7edc\u7ed3\u6784\u7684\u5806\u53e0 \u9664\u4e86forward\u51fd\u6570\u4e4b\u5916\uff0cEncoder\u8fd8\u5b9e\u73b0\u4e86\u4e24\u4e2a\u65b9\u6cd5\uff1a forward_chunk_by_chunk \uff0cpython\u89e3\u7801\u65f6\uff0c\u6a21\u62df\u6d41\u5f0f\u89e3\u7801\u6a21\u5f0f\uff0c\u57fa\u4e8echunk\u524d\u5411\u8ba1\u7b97\u3002 forward_chunk \uff0c\u5355\u6b21\u57fa\u4e8echunk\u7684\u524d\u5411\u8ba1\u7b97\uff0c\u901a\u8fc7ASRModel\u5bfc\u51fa\u4e3a forward_encoder_chunk() \u4f9bruntime\u89e3\u7801\u4f7f\u7528\u3002","title":"Encoder\u7f51\u7edc"},{"location":"asr/wenet%E6%80%BB%E4%BD%93%E8%A7%A3%E6%9E%90/#subsampling","text":"\u4e00\u65b9\u9762\u4e3a\u4e86\u964d\u4f4e\u8ba1\u7b97\u590d\u6742\u5ea6\uff0c\u53e6\u4e00\u65b9\u9762\u7aef\u5230\u7aefASR\u5efa\u6a21\u9897\u7c92\u5ea6\u8f83\u5927\uff0c\u56e0\u6b64\u9700\u8981\u964d\u91c7\u6837\u3002 \u8bed\u97f3\u4e2d\u6709\u4e24\u79cd\u4f7f\u7528CNN\u7684\u65b9\u5f0f\uff0c\u4e00\u79cd\u662f2D-Conv\uff0c\u4e00\u79cd\u662f1D-Conv\uff1a 2D-Conv: \u8f93\u5165\u6570\u636e\u770b\u4f5c\u662f\u6df1\u5ea6(\u901a\u9053\u6570\uff09\u4e3a1\uff0c\u9ad8\u5ea6\u4e3aF\uff08Fbank\u7279\u5f81\u7ef4\u5ea6\uff0cidim\uff09\uff0c\u5bbd\u5ea6\u4e3aT\uff08\u5e27\u6570\uff09\u7684\u4e00\u5f20\u56fe\u3002 1D-Conv: \u8f93\u5165\u6570\u636e\u770b\u4f5c\u662f\u6df1\u5ea6(\u901a\u9053\u6570\uff09\u4e3aF\uff08Fbank\u7279\u5f81\u7ef4\u5ea6)\uff0c\u9ad8\u5ea6\u4e3a1\uff0c\u5bbd\u5ea6\u4e3aT\uff08\u5e27\u6570\uff09\u7684\u4e00\u5f20\u56fe\u3002 Kaldi\u4e2d\u8457\u540d\u7684TDNN\u5c31\u662f1D-Conv\uff0c\u5728WeNet\u4e2d\u91c7\u75282D-Conv\u5b9e\u73b0\u964d\u91c7\u6837\u3002WeNet\u4e2d\u63d0\u4f9b\u4e86\u591a\u4e2a\u964d\u91c7\u6837\u7f51\u7edc\uff0c\u4f8b\u5982\u5c06\u5e27\u7387\u964d\u4f4e4\u500d\u7684\u7f51\u7edc Conv2dSubsampling4 \uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 class Conv2dSubsampling4 ( BaseSubsampling ): \"\"\"Convolutional 2D subsampling (to 1/4 length). Args: idim (int): Input dimension. odim (int): Output dimension. dropout_rate (float): Dropout rate. \"\"\" def __init__ ( self , idim : int , odim : int , dropout_rate : float , pos_enc_class : torch . nn . Module ): \"\"\"Construct an Conv2dSubsampling4 object.\"\"\" super () . __init__ () self . conv = torch . nn . Sequential ( torch . nn . Conv2d ( 1 , odim , 3 , 2 ), torch . nn . ReLU (), torch . nn . Conv2d ( odim , odim , 3 , 2 ), torch . nn . ReLU (), ) self . out = torch . nn . Sequential ( torch . nn . Linear ( odim * ((( idim - 1 ) // 2 - 1 ) // 2 ), odim )) self . pos_enc = pos_enc_class # The right context for every conv layer is computed by: # (kernel_size - 1) * frame_rate_of_this_layer self . subsampling_rate = 4 # 6 = (3 - 1) * 1 + (3 - 1) * 2 self . right_context = 6 \u8fd9\u91cc\u5229\u7528Conv2D\uff0c\u5c06\u8bed\u97f3\u5e27\u5e8f\u5217\u770b\u505a\u662f\u4e00\u4e2a\u65f6\u95f4\u8f74\u4e3a\u957f\uff0c\u901a\u9053\u8f74\u4e3a\u5bbd\uff0c\u6df1\u5ea6\u4e3a1\u7684\u56fe\u50cf\uff0c Conv2dSubsampling4 \u901a\u8fc7\u4e24\u4e2a stride=2 \u76842d-CNN\uff0c\u5c06\u201c\u56fe\u50cf\u201d\u7684\u957f\u548c\u5bbd\u90fd\u964d\u4e3a\u00bc\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 def forward ( self , x : torch . Tensor , x_mask : torch . Tensor , offset : int = 0 ) -> Tuple [ torch . Tensor , torch . Tensor , torch . Tensor ]: \"\"\"Subsample x. Args: x (torch.Tensor): Input tensor (#batch, time, idim). x_mask (torch.Tensor): Input mask (#batch, 1, time). Returns: torch.Tensor: Subsampled tensor (#batch, time', odim), where time' = time // 4. torch.Tensor: Subsampled mask (#batch, 1, time'), where time' = time // 4. torch.Tensor: positional encoding \"\"\" x = x . unsqueeze ( 1 ) # (b, c=1, t, f) x = self . conv ( x ) b , c , t , f = x . size () x = self . out ( x . transpose ( 1 , 2 ) . contiguous () . view ( b , t , c * f )) x , pos_emb = self . pos_enc ( x , offset ) return x , pos_emb , x_mask [:, :, : - 2 : 2 ][:, :, : - 2 : 2 ] \u6ce8\u610f\uff1a conv(x)\u4e2d\u8fdb\u884c\u4e24\u6b21\u5377\u79ef\uff0c\u6b64\u65f6t\u7ef4\u5ea6 \u7ea6\u7b49\u4e8e \u539f\u6765\u7684\u00bc\uff0c\u56e0\u4e3a\u6ca1\u52a0padding\uff0c\u5b9e\u9645\u4e0a\u662f\u4ece\u957f\u5ea6T\u53d8\u4e3a\u957f\u5ea6((T-1)/2-1)/2\uff09\uff0c\u6ce8\u610f\u7ecf\u8fc7\u5377\u79ef\u540e\u6df1\u5ea6\u4e0d\u518d\u662f1\u3002 pos_enc(x, offset) \u7ecf\u8fc7subsampling\u4e4b\u540e\uff0c\u5e27\u6570\u53d8\u5c11\u4e86\uff0c\u6b64\u65f6\u518d\u8ba1\u7b97Positional Embedding\u3002 x_mask\u662f\u539f\u59cb\u5e27\u7387\u4e0b\u7684\u8bb0\u5f55batch\u5404\u5e8f\u5217\u957f\u5ea6\u7684mask\uff0c\u5728\u8ba1\u7b97attention\u4ee5\u53cactc loss\u65f6\u5747\u8981\u4f7f\u7528\uff0c\u73b0\u5728\u5e27\u6570\u964d\u4f4e\u4e86\uff0cx_mask\u4e5f\u8981\u8ddf\u7740\u53d8\u5316\u3002","title":"\u7f16\u7801\u5668\u7684SubSampling\u7f51\u7edc"},{"location":"asr/wenet%E6%80%BB%E4%BD%93%E8%A7%A3%E6%9E%90/#_6","text":"\u6ce8\u610f\u5230Conv2dSubsampling4\u4e2d\u7684\u8fd9\u4e24\u4e2a\u53d8\u91cf\uff1a 1 2 self . subsampling_rate = 4 self . right_context = 6 \u8fd9\u4e24\u4e2a\u53d8\u91cf\u90fd\u5728asr_model\u4e2d\u8fdb\u884c\u4e86\u5bfc\u51fa\uff0c\u5728runtime\u65f6\u88ab\u4f7f\u7528\u3002 \u5728CTC\u6216\u8005WFST\u89e3\u7801\u65f6\uff0c\u90fd\u662f\u4e00\u5e27\u4e00\u5e27\u89e3\u7801\u5668\uff0c\u8fd9\u91cc\u7684\u5e27\u6307\u7684\u662f\u4e0b\u91c7\u6837\uff08subsample\uff09\u4e4b\u540e\u7684\u5e27\uff0c\u79f0\u4e4b\u4e3a \u89e3\u7801\u5e27 \uff0c\u800c\u6a21\u578b\u8f93\u5165\u7684\u5e27\u5e8f\u5217\u91cc\u9762\u7684\u5e27\uff08\u4e0b\u91c7\u6837\u4e4b\u524d\u7684\u5e27\uff09\u79f0\u4e3a \u539f\u59cb\u8bed\u97f3\u5e27 \u3002\u4ece\u4e0a\u56fe\u53ef\u4ee5\u770b\u5230\uff1a \u7b2c1\u4e2a\u89e3\u7801\u5e27\uff0c\u9700\u8981\u4f9d\u8d56\u7b2c1\u5230\u7b2c7\u4e2a\u539f\u59cb\u8bed\u97f3\u5e27\u3002 \u7b2c2\u4e2a\u89e3\u7801\u5e27\uff0c\u9700\u8981\u4f9d\u8d56\u7b2c5\u5230\u7b2c11\u4e2a\u539f\u59cb\u8bed\u97f3\u5e27\u3002 \u90a3\u4e48\u4e0a\u8ff0\u4e24\u4e2a\u53d8\u91cf subsampling_rate \u6307\u7684\u5c31\u662f\u5bf9\u4e8e\u76f8\u90bb\u4e24\u4e2a\u89e3\u7801\u5e27\uff0c\u5728\u539f\u59cb\u5e27\u4e0a\u7684\u95f4\u9694\u3002\u8ba1\u7b97\u65b9\u6cd5\uff1a \\((kernel\\_size-1)\\times frame\\_rate\\_of\\_this\\_layer\\) \uff0c\u5176\u4e2d\uff0c \\(frame\\_rate\\_of\\_this\\_layer\\) \u4e3a\u4e00\u4e2a\u4e0b\u91c7\u6837\u5c42\u7684\u4e0b\u91c7\u6837\u500d\u7387\uff0c\u4e0a\u4f8b\u4e2d\u5373\u4e3a \\((3-1)\\times 2=4\\) \u3002 right_context \u6307\u7684\u662f\u5bf9\u4e8e\u67d0\u4e2a\u89e3\u7801\u5e27\uff0c\u5176\u5bf9\u5e94\u7684\u7b2c\u4e00\u4e2a\u539f\u59cb\u5e27\u7684\u53f3\u4fa7\u8fd8\u9700\u8981\u989d\u5916\u4f9d\u8d56\u591a\u5c11\u5e27\uff0c\u624d\u80fd\u83b7\u5f97\u8fd9\u4e2a\u89e3\u7801\u5e27\u7684\u5168\u90e8\u4fe1\u606f\u3002\u8ba1\u7b97\u65b9\u6cd5\uff1a \\(\\sum_{n=1}^{N}(kernel\\_size-1)\\times n\\) \uff0c\u5176\u4e2d\uff0c \\(N\\) \u4e3a\u4e0b\u91c7\u6837\u5c42\u6570\uff0c\u4e0a\u4f8b\u4e2d\u5373\u4e3a \\((3-1)\\times 1+(3-1)\\times 2=6\\) \u3002 \u5728runtime\u89e3\u7801\u5668\u4e2d\uff0c\u6bcf\u6b21\u4f1a\u9001\u5165\u4e00\u7ec4\u5e27\u8fdb\u884c\u524d\u5411\u8ba1\u7b97\u5e76\u89e3\u7801\uff0c\u4e00\u7ec4\uff08chunk\uff09\u5e27\u662f\u5b9a\u4e49\u5728 \u89e3\u7801\u5e27\u7ea7\u522b \u7684\u3002\u5728\u5904\u7406\u7b2c\u4e00\u4e2achunk\u65f6\uff0c\u63a5\u53d7\u8f93\u5165\u83b7\u5f97\u5f53\u524dchunk\u9700\u8981\u7684\u6240\u6709\u7684context\uff0c\u4e4b\u540e\u6bcf\u6b21\u6839\u636echunk\u5927\u5c0f\u548csubsampling_rate\u83b7\u53d6\u65b0\u9700\u8981\u7684\u539f\u59cb\u5e27\u3002\u6bd4\u5982\uff0cchunk_size=1\uff0c\u5219\u7b2c\u4e00\u4e2achunk\u9700\u89811-7\u5e27\uff08\u4e5f\u5373\u7b2c\u4e00\u4e2achunk\u9700\u8981\u4e00\u4e2a\u89e3\u7801\u5e27\u5bf9\u5e94\u7684\u6240\u6709\u539f\u59cb\u5e27\uff09\uff0c\u7b2c\u4e8c\u4e2achunk\u53ea\u8981\u65b0\u62ff\u52308-11\u5e27\u5373\u53ef\uff08\u4e5f\u5373\u4e4b\u540e\u7684chunk\u53ea\u9700\u8981 subsampling_rate \u4e2a\u539f\u59cb\u5e27\uff09\u3002 1 2 3 4 5 6 7 8 // runtime/core/decoder/asr_decoder.cc // AsrModel::num_frames_for_chunk if ( ! start ) { // First batch int context = right_context_ + 1 ; // Add current frame num_requried_frames = ( chunk_size_ - 1 ) * subsampling_rate_ + context ; } else { num_requried_frames = chunk_size_ * subsampling_rate_ ; } \u7531\u4e8e\u7b2c\u4e8c\u5e27\u53ca\u5176\u4e4b\u540e\u7684chunk\u53ea\u9700\u8981 subsampling_rate \u4e2a\u539f\u59cb\u5e27\uff0c\u56e0\u6b64\u9700\u8981\u7f13\u5b58\u524d\u4e00\u4e2achunk\u7684 1+right_context-subsampling_rate \u4e2a\u539f\u59cb\u5e27\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // runtime/core/decoder/asr_decoder.cc void AsrModel::CacheFeature ( const std :: vector < std :: vector < float >>& chunk_feats ) { // Cache feature for next chunk // cached_feature_size\u4e3a\u7f13\u5b58\u5927\u5c0f const int cached_feature_size = 1 + right_context_ - subsampling_rate_ ; if ( chunk_feats . size () >= cached_feature_size ) { // cached_feature_\u5b58\u653e\u7f13\u5b58\u6570\u636e cached_feature_ . resize ( cached_feature_size ); for ( int i = 0 ; i < cached_feature_size ; ++ i ) { cached_feature_ [ i ] = chunk_feats [ chunk_feats . size () - cached_feature_size + i ]; } } }","title":"\u4e0a\u4e0b\u6587\u4f9d\u8d56"},{"location":"asr/wenet%E6%80%BB%E4%BD%93%E8%A7%A3%E6%9E%90/#encoders","text":"\u5bf9\u4e8e\u7f16\u7801\u5668\u4e2d\u7684encoders\u6a21\u5757\uff0cWeNet\u63d0\u4f9b\u4e86Transformer\u548cConformer\u4e24\u79cd\u7ed3\u6784\uff0c\u5747\u5728wenet/transformer/encoder_layer.py\u4e2d\u5b9e\u73b0\u3002 Transformer\u7684self.encoders\u7531\u4e00\u7ec4TransformerEncoderLayer\u7ec4\u6210\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 class TransformerEncoder ( BaseEncoder ): \"\"\"Transformer encoder module.\"\"\" def __init__ ( self , input_size : int , output_size : int = 256 , attention_heads : int = 4 , linear_units : int = 2048 , num_blocks : int = 6 , dropout_rate : float = 0.1 , positional_dropout_rate : float = 0.1 , attention_dropout_rate : float = 0.0 , input_layer : str = \"conv2d\" , pos_enc_layer_type : str = \"abs_pos\" , normalize_before : bool = True , concat_after : bool = False , static_chunk_size : int = 0 , use_dynamic_chunk : bool = False , global_cmvn : torch . nn . Module = None , use_dynamic_left_chunk : bool = False , ): \"\"\" Construct TransformerEncoder See Encoder for the meaning of each parameter. \"\"\" assert check_argument_types () super () . __init__ ( input_size , output_size , attention_heads , linear_units , num_blocks , dropout_rate , positional_dropout_rate , attention_dropout_rate , input_layer , pos_enc_layer_type , normalize_before , concat_after , static_chunk_size , use_dynamic_chunk , global_cmvn , use_dynamic_left_chunk ) self . encoders = torch . nn . ModuleList ([ TransformerEncoderLayer ( output_size , MultiHeadedAttention ( attention_heads , output_size , attention_dropout_rate ), PositionwiseFeedForward ( output_size , linear_units , dropout_rate ), dropout_rate , normalize_before , concat_after ) for _ in range ( num_blocks ) ]) Conformer\u7684self.encoders\u7531\u4e00\u7ec4ConformerEncoderLayer\u7ec4\u6210\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 self . encoders = torch . nn . ModuleList ([ ConformerEncoderLayer ( output_size , encoder_selfattn_layer ( * encoder_selfattn_layer_args ), positionwise_layer ( * positionwise_layer_args ), positionwise_layer ( * positionwise_layer_args ) if macaron_style else None , convolution_layer ( * convolution_layer_args ) if use_cnn_module else None , dropout_rate , normalize_before , concat_after , ) for _ in range ( num_blocks ) ]) Conformer\u539f\u59cb\u8bba\u6587\u4e2dconformer block\u7684\u7ed3\u6784\u5982\u56fe\uff1a ConformerEncoderLayer\u6d89\u53ca\u7684\u4e3b\u8981\u6a21\u5757\u6709\uff1a encoder_selfattn_layer positionwise_layer convolution_layer \u5982\u679c\u4e0d\u8003\u8651cache\uff0c\u4f7f\u7528 normalize_before=True , feed_forward_macaron=True \uff0c\u5219WeNet\u4e2d\u7684ConformerEncoderLayer\u7684forward\u53ef\u4ee5\u7b80\u5316\u4e3a\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 class ConformerEncoderLayer ( nn . Module ): def forward ( self , x : torch . Tensor , mask : torch . Tensor , pos_emb : torch . Tensor , mask_pad : Optional [ torch . Tensor ] = None , output_cache : Optional [ torch . Tensor ] = None , cnn_cache : Optional [ torch . Tensor ] = None , ) -> Tuple [ torch . Tensor , torch . Tensor , torch . Tensor ]: \"\"\"Compute encoded features. Args: x (torch.Tensor): (#batch, time, size) mask (torch.Tensor): Mask tensor for the input (#batch, time\uff0ctime). pos_emb (torch.Tensor): positional encoding, must not be None for ConformerEncoderLayer. mask_pad (torch.Tensor): batch padding mask used for conv module. (#batch, 1\uff0ctime) output_cache (torch.Tensor): Cache tensor of the output (#batch, time2, size), time2 < time in x. cnn_cache (torch.Tensor): Convolution cache in conformer layer Returns: torch.Tensor: Output tensor (#batch, time, size). torch.Tensor: Mask tensor (#batch, time). \"\"\" x = self . norm_ff_macaron ( x ) x = self . feed_forward_macaron ( x ) x = residual + 0.5 * self . dropout ( x ) residual = x x = self . norm_mha ( x ) x_att = self . self_attn ( x , x , x , pos_emb , mask ) x = residual + self . dropout ( x_att ) residual = x x = self . norm_conv ( x ) x , new_cnn_cache = self . conv_module ( x , mask_pad , cnn_cache ) x = x + self . dropout ( x ) residual = x x = self . norm_ff ( x ) x = self . feed_forward ( x ) x = residual + 0.5 * self . dropout ( x ) x = self . norm_final ( x ) \u53ef\u4ee5\u770b\u5230\uff0c\u5bf9\u4e8eencoder_selfattn_layer\uff0cpositionwise_layer\uff0cconvolution_layer\uff0c\u90fd\u662f\u524d\u6709Layernorm\uff0c\u540e\u6709Dropout\uff0c\u518d\u642d\u914d\u6b8b\u5deeResidual\u3002","title":"\u7f16\u7801\u5668\u4e2d\u7684Encoders\u6a21\u5757"},{"location":"asr/wenet%E6%80%BB%E4%BD%93%E8%A7%A3%E6%9E%90/#encoder_selfattn_layer","text":"\u5177\u4f53\u5b9e\u73b0\u4f4d\u4e8ewenet/transformer/attention.py attention.py\u4e2d\u63d0\u4f9b\u4e86\u4e24\u79cdattention\u7684\u5b9e\u73b0\uff0c MultiHeadedAttention \u548c RelPositionMultiHeadedAttention \u3002 MultiHeadedAttention \u7528\u4e8eTransformer\uff0c RelPositionMultiHeadedAttention \u7528\u4e8eConformer\u3002\u539f\u59cb\u7684Conformer\u8bba\u6587\u4e2d\u63d0\u5230\u7684self-attention\u662fRelative Position Multi Headed Attention\uff0c\u8fd9\u662ftransformer-xl\u4e2d\u63d0\u51fa\u7684\u4e00\u79cd\u6539\u8fdbattention\uff0c\u548c\u6807\u51c6attention\u7684\u533a\u522b\u5728\u4e8e\uff0c\u5176\u4e2d \u663e\u5f0f\u5229\u7528\u4e86\u76f8\u5bf9\u4f4d\u7f6e\u4fe1\u606f \uff0c\u53c2\u89c1\uff1a Conformer ASR\u4e2d\u7684Relative Positional Embedding \u3002","title":"encoder_selfattn_layer"},{"location":"asr/wenet%E6%80%BB%E4%BD%93%E8%A7%A3%E6%9E%90/#positionwise_layer","text":"\u5177\u4f53\u5b9e\u73b0\u4f4d\u4e8ewenet/transformer/positionwise_feed_forward.py \u524d\u5411\u4eff\u5c04\u53d8\u6362\uff0c\u5c06 \\([B,T,H1]\\) \u53d8\u4e3a \\([B,T,H2]\\) \uff0c\u4e24\u4e2aLinear\uff0c\u7b2c\u4e00\u4e2a\u540e\u8ddf\u6fc0\u6d3b\u51fd\u6570\u548cDropout\uff0c\u7b2c\u4e8c\u4e2a\u76f4\u63a5\u8f93\u51fa\u3002","title":"positionwise_layer"},{"location":"asr/wenet%E6%80%BB%E4%BD%93%E8%A7%A3%E6%9E%90/#convolution_layer","text":"\u5177\u4f53\u5b9e\u73b0\u4f4d\u4e8ewenet/transformer/convolution.py WeNet\u91c7\u7528\u4e86\u56e0\u679c\u5377\u79ef\uff08Causal Convolution\uff09\uff0c\u5373\u4e0d\u770b\u53f3\u4fa7\u4e0a\u4e0b\u6587\uff0c \u8fd9\u6837\u65e0\u8bba\u6a21\u578b\u542b\u6709\u591a\u5c11\u5377\u79ef\u5c42\uff0c\u5bf9\u53f3\u4fa7\u7684\u4e0a\u4e0b\u6587\u5747\u6ca1\u6709\u4f9d\u8d56 \u3002 \u5982\u4e0a\u56fe\u5de6\u3001\u4e2d\u56fe\u6240\u793a\uff0c\u6807\u51c6\u7684\u5377\u79ef\u4e3a\u4e86\u4fdd\u8bc1\u5377\u79ef\u540e\u5e8f\u5217\u957f\u5ea6\u4e00\u81f4\uff0c\u9700\u8981\u5728\u5de6\u53f3\u5404pad\u957f\u5ea6\u4e3a(kernel_size-1)//2\u76840. 1 2 3 4 5 6 7 8 if causal : # \u4f7f\u7528\u56e0\u679c\u5377\u79ef padding = 0 # Conv1D\u51fd\u6570\u8bbe\u7f6e\u7684padding\u957f\u5ea6 self . lorder = kernel_size - 1 # \u56e0\u679c\u5377\u79ef\u5de6\u4fa7\u624b\u52a8padding\u7684\u957f\u5ea6 else : # \u4f7f\u7528\u6807\u51c6\u5377\u79ef # kernel_size should be an odd number for none causal convolution assert ( kernel_size - 1 ) % 2 == 0 padding = ( kernel_size - 1 ) // 2 # Conv1D\u51fd\u6570\u8bbe\u7f6e\u7684padding\u957f\u5ea6 self . lorder = 0 \u5982\u4e0a\u53f3\u56fe\u6240\u793a\uff0c\u56e0\u679c\u5377\u79ef\u7684\u5b9e\u73b0\u5f88\u7b80\u5355\uff0c\u53ea\u8981\u5728\u5de6\u4fa7pad\u957f\u5ea6\u4e3a kernel_size-1 \u76840\uff0c\u5c31\u53ef\u4ee5\u5b9e\u73b0\u56e0\u679c\u5377\u79ef\uff1a 1 2 3 if self . lorder > 0 : if cache is None : x = nn . functional . pad ( x , ( self . lorder , 0 ), 'constant' , 0.0 )","title":"convolution_layer"},{"location":"asr/wenet%E6%80%BB%E4%BD%93%E8%A7%A3%E6%9E%90/#attention-based-decoder","text":"\u5bf9\u4e8eAttention based Decoder\uff0cWeNet\u63d0\u4f9b\u4e86\u81ea\u56de\u5f52Transformer\u548c\u53cc\u5411\u81ea\u56de\u5f52Transformer\u7ed3\u6784\uff0c\u8f93\u5165\u5386\u53f2\u4fe1\u606f\uff0c\u8f93\u51fa\u5f53\u524d\u8bc6\u522b\u7ed3\u679c\uff0c\u8fd9\u79cd\u7f51\u7edc\u89e3\u7801\u65f6\u53ea\u80fd\u4f9d\u6b21\u4ea7\u751f\u8f93\u51fa\uff0c\u800c\u4e0d\u80fd\u4e00\u6b21\u4ea7\u751f\u6574\u4e2a\u8f93\u51fa\u5e8f\u5217\u3002\u548cEncoder\u4e2d\u7684attention\u5c42\u533a\u522b\u5728\u4e8e\uff0cDecoder\u9664\u4e86self attention\u4e4b\u5916\u8fd8\u8981cross attention\u3002","title":"Attention based Decoder\u7f51\u7edc"},{"location":"asr/wenet%E6%80%BB%E4%BD%93%E8%A7%A3%E6%9E%90/#ctc-loss","text":"\u5177\u4f53\u5b9e\u73b0\u4f4d\u4e8ewenet/transformer/ctc.py CTC Loss\u5305\u542b\u4e86 CTC decoder \u548c CTC loss \u4e24\u90e8\u5206\uff0cCTC decoder\u4ec5\u4ec5\u5bf9Encoder\u505a\u4e00\u4e2a\u524d\u5411\u7ebf\u6027\u53d8\u6362\uff0c\u7136\u540e\u8ba1\u7b97softmax\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 def forward ( self , hs_pad : torch . Tensor , hlens : torch . Tensor , ys_pad : torch . Tensor , ys_lens : torch . Tensor ) -> torch . Tensor : \"\"\"Calculate CTC loss. Args: hs_pad: batch of padded hidden state sequences (B, Tmax, D) hlens: batch of lengths of hidden state sequences (B) ys_pad: batch of padded character id sequence tensor (B, Lmax) ys_lens: batch of lengths of character sequence (B) \"\"\" # hs_pad: (B, L, NProj) -> ys_hat: (B, L, Nvocab) ys_hat = self . ctc_lo ( F . dropout ( hs_pad , p = self . dropout_rate )) # ys_hat: (B, L, D) -> (L, B, D) ys_hat = ys_hat . transpose ( 0 , 1 ) ys_hat = ys_hat . log_softmax ( 2 ) loss = self . ctc_loss ( ys_hat , ys_pad , hlens , ys_lens ) # Batch-size average loss = loss / ys_hat . size ( 1 ) return loss def log_softmax ( self , hs_pad : torch . Tensor ) -> torch . Tensor : \"\"\"log_softmax of frame activations Args: Tensor hs_pad: 3d tensor (B, Tmax, eprojs) Returns: torch.Tensor: log softmax applied 3d tensor (B, Tmax, odim) \"\"\" return F . log_softmax ( self . ctc_lo ( hs_pad ), dim = 2 ) # F.log_softmax equivalent to log(softmax(x)) \u800cCTC loss\u7684\u90e8\u5206\u5219\u76f4\u63a5\u4f7f\u7528\u7684torch\u63d0\u4f9b\u7684\u51fd\u6570 torch.nn.CTCLoss \uff1a 1 self . ctc_loss = torch . nn . CTCLoss ( reduction = reduction_type )","title":"CTC Loss"},{"location":"asr/wenet%E6%80%BB%E4%BD%93%E8%A7%A3%E6%9E%90/#attention-based-decoder-loss","text":"\u5177\u4f53\u5b9e\u73b0\u4f4d\u4e8ewenet/transformer/label_smoothing_loss.py Attention-based Decoder\u7684Loss\u662f\u5728\u6700\u5927\u5316\u81ea\u56de\u5f52\u7684\u6982\u7387\uff0c\u5728\u6bcf\u4e2a\u4f4d\u7f6e\u8ba1\u7b97\u6a21\u578b\u8f93\u51fa\u6982\u7387\u548c\u6837\u672c\u6807\u6ce8\u6982\u7387\u7684\u4ea4\u53c9\u71b5\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u91c7\u7528teacher forcing\u7684\u65b9\u5f0f\uff0c\u800c\u4e0d\u91c7\u7528scheduled sampling\u3002\u6bcf\u4e2a\u4f4d\u7f6e\u4e0a\uff0c\u6837\u672c\u6807\u6ce8\u6982\u7387\u662f\u4e00\u4e2aone-hot\u7684\u8868\u793a\uff0c\u65e2\u771f\u5b9e\u7684\u6807\u6ce8\u6982\u7387\u4e3a1\uff0c\u5176\u4ed6\u6982\u7387\u4e3a0\u3002Smoothing Loss\u4e2d\uff0c\u5bf9\u4e8e\u6837\u672c\u6807\u6ce8\u6982\u7387\uff0c\u7531\u539f\u6765\u7684\uff1a \\[ p_i=\\left\\{\\begin{matrix} 1,\\quad if\\ i==y & \\\\ 0,\\quad if \\ i\\neq y & \\end{matrix}\\right. \\] \u53d8\u4e3a\uff1a \\[ p_i=\\left\\{\\begin{matrix} 1-\\epsilon,\\quad if\\ i==y & \\\\ \\frac{\\epsilon}{K-1},\\quad if \\ i\\neq y & \\end{matrix}\\right. \\] \u4e0a\u5f0f\u4e2d\uff0c \\(K\\) \u8868\u793a\u7c7b\u522b\u6570\uff0c \\(\\epsilon\\) \u8868\u793a\u6781\u5c0f\u7684\u8d85\u53c2\u6570\u3002","title":"Attention-based Decoder Loss"},{"location":"asr/wenet%E6%80%BB%E4%BD%93%E8%A7%A3%E6%9E%90/#_7","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 def forward ( self , speech : torch . Tensor , speech_lengths : torch . Tensor , text : torch . Tensor , text_lengths : torch . Tensor , ) -> Tuple [ Optional [ torch . Tensor ], Optional [ torch . Tensor ], Optional [ torch . Tensor ]]: \"\"\"Frontend + Encoder + Decoder + Calc loss Args: speech: (Batch, Length, ...) speech_lengths: (Batch, ) text: (Batch, Length) text_lengths: (Batch,) \"\"\" assert text_lengths . dim () == 1 , text_lengths . shape # Check that batch_size is unified assert ( speech . shape [ 0 ] == speech_lengths . shape [ 0 ] == text . shape [ 0 ] == text_lengths . shape [ 0 ]), ( speech . shape , speech_lengths . shape , text . shape , text_lengths . shape ) # 1. Encoder encoder_out , encoder_mask = self . encoder ( speech , speech_lengths ) encoder_out_lens = encoder_mask . squeeze ( 1 ) . sum ( 1 ) # 2a. Attention-decoder branch if self . ctc_weight != 1.0 : loss_att , acc_att = self . _calc_att_loss ( encoder_out , encoder_mask , text , text_lengths ) else : loss_att = None # 2b. CTC branch if self . ctc_weight != 0.0 : loss_ctc = self . ctc ( encoder_out , encoder_out_lens , text , text_lengths ) # CTCLoss(Log_probs,Targets,Input_lengths,Target_lengths) else : loss_ctc = None if loss_ctc is None : loss = loss_att elif loss_att is None : loss = loss_ctc else : loss = self . ctc_weight * loss_ctc + ( 1 - self . ctc_weight ) * loss_att return loss , loss_att , loss_ctc","title":"\u6574\u4f53\u524d\u5411\u8fc7\u7a0b"},{"location":"asr/wenet%E6%80%BB%E4%BD%93%E8%A7%A3%E6%9E%90/#wenetmask","text":"mask\u662f\u4e00\u4e2a0\u30011\u503c\u7ec4\u6210\u7684\u63a9\u7801\u5f20\u91cf\uff0cWeNet\u91ccmask\u7684\u8bed\u4e49\u4e3a\uff1amask\u4e2d\u503c\u4e3a1\u7684\u90e8\u5206\u662f\u9700\u8981\u8003\u8651\u7684\uff0c0\u7684\u90e8\u5206\u4e0d\u8003\u8651\u3002WeNet\u7684mask\u5927\u81f4\u53ef\u4ee5\u5206\u4e3a\u4e24\u7c7b\uff1a \u5e8f\u5217mask\uff0c[Batch,Length]\uff0c\u6bcf\u4e2a[Length,]\u4e2d\u503c\u4e3a1\u7684\u4f4d\u7f6e\u4ee3\u8868\u4e86\u672c\u5e8f\u5217\u9700\u8981\u8003\u8651\u7684\u90e8\u5206\u3002 Attention mask\uff0c[Batch,L1,L2]\uff0c\u6bcf\u4e2a[L1,L2]\u7528\u4e8e\u7ea6\u675fL1\u4e2d\u54ea\u4e9b\u4f4d\u7f6e\u53ea\u80fd\u5bf9L2\u4e2d\u54ea\u4e9b\u4f4d\u7f6e\u8fdb\u884cattention\u64cd\u4f5c\u3002","title":"WeNet\u7684mask"},{"location":"asr/wenet%E6%80%BB%E4%BD%93%E8%A7%A3%E6%9E%90/#batch-padding","text":"\u4e0d\u5b9a\u957f\u5e8f\u5217\u586b\u5145\u5230\u7b49\u957ftensor\u3002WeNet\u4e2d\uff0c\u8f93\u5165\u7684padding\u53eb\u505a frame batch padding \uff0c\u6807\u6ce8\u7684padding\u53eb label batch padding \u3002","title":"Batch Padding"},{"location":"asr/wenet%E6%80%BB%E4%BD%93%E8%A7%A3%E6%9E%90/#attention-loss","text":"\u5229\u7528\u4e00\u4e2a\u7279\u6b8a\u6570\u503cpadding_idx\u5c06\u539f\u5148\u4e0d\u7b49\u957f\u7684\u76ee\u6807\u5e8f\u5217\u586b\u5145\u5230\u7b49\u957f\u5e8f\u5217\uff0c\u5728\u8ba1\u7b97Attention Loss\u65f6\uff0c\u5bf9\u4e8e\u503c\u4e3apadding_idx\u7684\u76ee\u6807\uff0c\u4e0d\u53c2\u4e0eloss\u8ba1\u7b97\u3002\u5177\u4f53\u5b9e\u73b0\u4f4d\u4e8ewenet/transformer/label_smoothing_loss.py 1 2 3 4 5 6 7 ignore = target == self . padding_idx # target: (batch,seqlen) -> (batch*seqlen,), thus, ignore: (batch) total = len ( target ) - ignore . sum () . item () target = target . masked_fill ( ignore , 0 ) # avoid -1 index true_dist . scatter_ ( 1 , target . unsqueeze ( 1 ), self . confidence ) kl = self . criterion ( torch . log_softmax ( x , dim = 1 ), true_dist ) # KLDivLoss(input,target) denom = total if self . normalize_length else batch_size return kl . masked_fill ( ignore . unsqueeze ( 1 ), 0 ) . sum () / denom","title":"Attention Loss"},{"location":"asr/wenet%E6%80%BB%E4%BD%93%E8%A7%A3%E6%9E%90/#ctc-loss_1","text":"torch.nn.CTCLoss\u63a5\u53e3\u652f\u6301\u76f4\u63a5\u6307\u5b9abatch\u5185\u5404\u4e2a\u9884\u6d4b\u5e8f\u5217\u7684\u957f\u5ea6 hlens \u548c\u76ee\u6807\u5e8f\u5217\u7684\u957f\u5ea6 ys_lens \u3002 1 2 3 self . ctc_loss = torch . nn . CTCLoss ( reduction = reduction_type ) # CTCLoss(Log_probs,Targets,Input_lengths,Target_lengths) loss_ctc = self . ctc ( encoder_out , encoder_out_lens , text , text_lengths ) hlens \u662fencoder\u8f93\u51fa\u7684batch\u4e2d\u5404\u5e8f\u5217\u771f\u5b9e\u957f\u5ea6\uff0c\u9664\u53bbpadding\u90e8\u5206\u7684\u957f\u5ea6\uff0c\u53ef\u4ee5\u901a\u8fc7encoder_mask\u5f97\u5230\uff1a 1 2 # wenet/transformer/asr_model.py encoder_out_lens = encoder_mask . squeeze ( 1 ) . sum ( 1 ) ys_lens \u662fbatch\u4e2d\u5404\u6807\u6ce8\u5e8f\u5217\u7684\u771f\u5b9e\u957f\u5ea6\uff0c\u7531DataLoader\u8fd4\u56de\u7684target_lengths\u5f97\u5230\uff1a 1 2 3 ## wenet/utils/executor.py for batch_idx , batch in enumerate ( data_loader ): key , feats , target , feats_lengths , target_lengths = batch","title":"CTC Loss"},{"location":"asr/wenet%E6%80%BB%E4%BD%93%E8%A7%A3%E6%9E%90/#_8","text":"Attention Decoder\u662f\u81ea\u56de\u5f52\u7684\uff0c\u6bcf\u4e2atoken\u53ea\u80fd\u770b\u5230 \u81ea\u5df1\u4ee5\u53ca\u5de6\u4fa7\u7684word \uff0c\u56e0\u6b64\u5176\u4e2d\u7684attention\u5b9e\u73b0\u65f6\uff0c\u6bcf\u4e2a\u4f4d\u7f6e\u53ea\u80fd\u548c\u5f53\u524d\u4f4d\u7f6e\u4ee5\u53ca\u5de6\u4fa7\u4f4d\u7f6e\u8fdb\u884c\u64cd\u4f5c\uff0c\u4e3a\u4e86\u5b9e\u73b0\u8be5\u64cd\u4f5c\uff0c\u9700\u8981\u5f15\u5165\u4e00\u4e2amask\u3002","title":"\u81ea\u56de\u5f52"},{"location":"asr/wenet%E6%80%BB%E4%BD%93%E8%A7%A3%E6%9E%90/#chunk-based-model","text":"\u56e0\u4e3afull attention\u7684\u6bcf\u4e00\u5e27\u90fd\u8981\u4f9d\u8d56\u53f3\u4fa7\u6240\u6709\u5e27\uff0c\u6240\u4ee5\u65e0\u6cd5\u5e94\u7528\u4e8e\u6d41\u5f0f\u89e3\u7801\u4e2d\uff0c\u56e0\u6b64WeNet\u91c7\u7528chunk-based attention\uff0c\u5c06\u5e27\u5206\u4e3a\u7b49\u5927\u5c0f\u7684chunk\uff0c\u6bcf\u4e2achunk\u53ea\u5728chunk\u5185\u90e8\u8fdb\u884cattention\u64cd\u4f5c\uff0c \u53e6\u5916\uff0c\u4e5f\u5141\u8bb8\u548c\u5de6\u4fa7\u7684\u4e00\u5b9a\u957f\u5ea6\u7684\u5e27\u8fdb\u884cattention\uff0c\u4f46 \u8fd9\u79cd\u56fa\u5b9achunk\u5927\u5c0f\u7684\u8bad\u7ec3\u6a21\u5f0f\uff0c\u8981\u6c42\u89e3\u7801\u65f6\u5fc5\u987b\u91c7\u7528\u540c\u6837\u5927\u5c0f\u7684\u5e27 \u3002WeNet\u5f15\u5165\u4e86\u4e00\u79cd dynamic chunk training \u7b97\u6cd5\uff0c\u5728\u8bad\u7ec3\u65f6\u53ef\u4ee5\u52a8\u6001\u4e3a\u6bcf\u4e2abatch\u751f\u6210\u4e0d\u540c\u5927\u5c0f\u7684 chunk\uff0c\u8fd9\u6837\uff0c \u5728\u89e3\u7801\u65f6\uff0cchunk\u5927\u5c0f\u53ef\u4ee5\u4efb\u610f\u6307\u5b9a \uff0c\u5927\u7684chunk\u53ef\u4ee5\u83b7\u5f97\u9ad8\u8bc6\u522b\u7387\uff0c\u5c0f\u7684chunk\u53ef\u4ee5\u83b7\u5f97\u4f4e\u5ef6\u65f6\uff0c\u4ece\u800c\u7528\u6237\u4ec5\u9700\u8bad\u7ec3\u5355\u4e00\u6a21\u578b\uff0c\u6839\u636e\u5177\u4f53\u573a\u666f\u5728\u89e3\u7801\u65f6\u9009\u62e9\u5408\u9002\u7684chunk\u5927\u5c0f\uff0c\u800c\u65e0\u9700\u91cd\u65b0\u8bad\u7ec3\u6a21\u578b\u3002","title":"Chunk-based Model"},{"location":"asr/wenet%E6%80%BB%E4%BD%93%E8%A7%A3%E6%9E%90/#mask","text":"\u5177\u4f53\u5b9e\u73b0\u4f4d\u4e8ewenet/transformer/encoder.py 1 2 3 4 5 6 7 8 9 10 11 12 13 masks = ~ make_pad_mask ( xs_lens , T ) . unsqueeze ( 1 ) # (B, 1, T) if self . global_cmvn is not None : xs = self . global_cmvn ( xs ) xs , pos_emb , masks = self . embed ( xs , masks ) mask_pad = masks # (B, 1, T/subsample_rate) chunk_masks = add_optional_chunk_mask ( xs , masks , self . use_dynamic_chunk , self . use_dynamic_left_chunk , decoding_chunk_size , self . static_chunk_size , num_decoding_left_chunks ) for layer in self . encoders : xs , chunk_masks , _ = layer ( xs , chunk_masks , pos_emb , mask_pad ) self.embed \u4f1a\u5bf9\u539f\u59cb\u8bed\u97f3\u5e27\u586b\u5145\u63a9\u853d\u77e9\u9635\uff08frame padding mask\uff09\u8fdb\u884c\u964d\u91c7\u6837\u5f97\u5230\u89e3\u7801\u5e27\u586b\u5145\u63a9\u853d\u77e9\u9635\uff08subsample frame padding mask\uff09\u3002 mask_pad \u4f1a\u5728Conformer\u4e2d\u7684\u5377\u79ef\u7f51\u7edc\u6a21\u5757\u4e2d\u4f7f\u7528\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 if mask_pad is not None : x . masked_fill_ ( ~ mask_pad , 0.0 ) if self . lorder > 0 : if cache is None : x = nn . functional . pad ( x , ( self . lorder , 0 ), 'constant' , 0.0 ) else : assert cache . size ( 0 ) == x . size ( 0 ) assert cache . size ( 1 ) == x . size ( 1 ) x = torch . cat (( cache , x ), dim = 2 ) assert ( x . size ( 2 ) > self . lorder ) new_cache = x [:, :, - self . lorder :] else : # It's better we just return None if no cache is requried, # However, for JIT export, here we just fake one tensor instead of # None. new_cache = torch . tensor ([ 0.0 ], dtype = x . dtype , device = x . device ) # GLU mechanism x = self . pointwise_conv1 ( x ) # (batch, 2*channel, dim) x = nn . functional . glu ( x , dim = 1 ) # (batch, channel, dim) # 1D Depthwise Conv x = self . depthwise_conv ( x ) if self . use_layer_norm : x = x . transpose ( 1 , 2 ) x = self . activation ( self . norm ( x )) if self . use_layer_norm : x = x . transpose ( 1 , 2 ) x = self . pointwise_conv2 ( x ) # mask batch padding if mask_pad is not None : x . masked_fill_ ( ~ mask_pad , 0.0 ) add_optional_chunk_mask \u4f1a\u5728\u89e3\u7801\u5e27\u586b\u5145\u63a9\u853d\u77e9\u9635\uff08subsample frame padding mask\uff09\u7684\u57fa\u7840\u4e0a\u589e\u52a0 chunk mask \uff0c\u4f1a\u5728Conformer\u4e2d\u7684self attention\u4f7f\u7528\u3002","title":"\u7f16\u7801\u5668\u4e2d\u7684mask"},{"location":"asr/wenet%E6%80%BB%E4%BD%93%E8%A7%A3%E6%9E%90/#subsamplingmask","text":"subsampling\u7f51\u7edc\u4e2d\u7684\u5377\u79ef\u8fd0\u7b97\u65f6\u672c\u8eab\u4e0d\u4f7f\u7528frame padding mask\uff0c\u4f46\u662f\u4f1a\u5bf9frame padding mask\u964d\u91c7\u6837\u5f97\u5230subsample frame padding mask\uff0c\u540e\u7eed\u5728\u8fdb\u884cencoder\u76f8\u5173\u8ba1\u7b97\u65f6\u4f1a\u4f7f\u7528\u8fd9\u4e2asubsample frame padding mask\u3002\u6bd4\u5982\u57284\u500d\u964d\u91c7\u6837\u7684\u7f51\u7edc\u91cc\uff0c\u4f7f\u7528\u4e86\u4e24\u4e2astride=2\u7684\u5377\u79ef\uff0c\u5bf9shape=(B, 1, L) \u7684mask\u8fdb\u884c\u4e86 mask[:, :, :-2:2][:, :, :-2:2] \u7684\u64cd\u4f5c\uff0c\u65b0\u7684mask\u7684shape\u4e3a(B, 1, L/4)\u3002\u4f46\u662f\u76ee\u524dWeNet\u7684\u5b9e\u73b0\u5b58\u5728\u5c0f\u95ee\u9898\uff0c\u6700\u540e\u51e0\u4e2a\u89e3\u7801\u5e27\uff08\u964d\u91c7\u6837\u5e27\uff09\u5982\u679c\u5176\u5377\u79ef\u91ce\u4e2d\u6709padding\u7684\u5e27\uff0c\u5219\u8be5\u964d\u91c7\u6837\u5e27\u8f93\u5165\u65e0\u6548\u5e27\uff0c\u4e0d\u5e94\u8be5\u53c2\u4e0e\u540e\u7eed\u8ba1\u7b97\uff0c\u4f46\u662f\u6309\u7167\u76ee\u524dmask\u7684\u5b9e\u73b0\u4ecd\u4f1a\u88ab\u4f7f\u7528\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u8bad\u7ec3\u65f6\uff0c\u4e0b\u91c7\u6837\u500d\u7387\uff08subsample rate\uff09\u4e3a4\uff0c\u4e00\u4e2a\u89e3\u7801\u5e27\u9700\u89817\u4e2a\u539f\u59cb\u5e27\u3002\u5047\u8bbe\u67d0\u4e2a\u6837\u672c\u7684\u5012\u65704\u4e2a\u539f\u59cb\u5e27\u90fd\u662fpadding\u7684\uff0c \u6700\u540e\u4e00\u4e2a\u89e3\u7801\u5e27\u4f9d\u8d56\u4e8e\u8fd9\u4e9b\u586b\u5145\u7684\u539f\u59cb\u5e27\uff0c\u56e0\u6b64\u4e0d\u5e94\u8be5\u4f7f\u7528 \uff0c\u5176mask\u8ba1\u7b97\u8fc7\u7a0b\u5982\u4e0b\uff1a 1 2 3 1 1 1 1 1 1 1 0 0 0 0 # \u539f\u59cb\u8bed\u97f3\u5e27 1 1 1 1 0 # mask[:, :, :-2:2] 1 1 # mask[:, :, :-2:2][:, :, :-2:2] \u6ce8\u610f\u5230\uff0c\u8ba1\u7b97\u83b7\u5f97\u7684subsample frame padding mask\uff0c\u4ecd\u7136\u4f1a\u4f7f\u7528\u6700\u540e\u4e00\u4e2a\u4fe1\u606f\u4e0d\u5168\u7684\u89e3\u7801\u5e27\u3002 \u5047\u8bbe\u67d0\u4e2a\u6837\u672c\u5012\u65705\u4e2a\u539f\u59cb\u8bed\u97f3\u5e27\u5747\u662f\u586b\u5145\u7684\uff0c\u5176mask\u8ba1\u7b97\u8fc7\u7a0b\u5982\u4e0b\uff1a 1 2 3 1 1 1 1 1 1 0 0 0 0 0 # \u539f\u59cb\u8bed\u97f3\u5e27 1 1 1 1 0 # mask[:, :, :-2:2] 1 1 # mask[:, :, :-2:2][:, :, :-2:2] \u6b64\u65f6\u8ba1\u7b97\u83b7\u5f97\u7684subsample frame padding mask\u8868\u793a\u6700\u540e\u4e24\u4e2a\u89e3\u7801\u5e27\u5747\u4f1a\u7528\u5230\uff0c\u4f46\u662f\u5012\u6570\u7b2c\u4e8c\u4e2a\u3001\u7b2c\u4e00\u4e2a\u7684\u89e3\u7801\u5e27\u5747\u6709\u586b\u5145\u7684\u539f\u59cb\u5e27\uff0c\u4fe1\u606f\u4e0d\u5168\uff0c \u56e0\u6b64\u4e0d\u5e94\u8be5\u4f7f\u7528 \u3002\u4f46\u662f\u5b9e\u9a8c\u8868\u660e\uff0c\u8fd9\u5f71\u54cd\u4e0d\u5927\u3002","title":"\u4e0b\u91c7\u6837\u7f51\u7edc\uff08Subsampling\uff09\u4e2d\u7684mask"},{"location":"asr/wenet%E6%80%BB%E4%BD%93%E8%A7%A3%E6%9E%90/#conformermask","text":"\u8003\u8651\u4e0a\u56fe\u4e2d\u591a\u5c42\u5377\u79ef\u7684\u60c5\u51b5\uff0c\u5047\u8bbekernel\u5927\u5c0f\u4e3a3\u3002 \u7531\u4e8ebatch paddings\u7684\u5b58\u5728\uff0c\u5728\u8bad\u7ec3\u65f6\uff0c\u7eff\u8272\u5355\u5143\u4f9d\u8d56\u4e8e\u7ea2\u8272\u5355\u5143\uff0c\u800c \u7ea2\u8272\u5355\u5143\u4e0d\u662f0\u503c \u3002 \u7136\u800c\u5728\u89e3\u7801\u65f6\uff0c\u56e0\u4e3a\u4e00\u4e2abatch\u53ea\u6709\u4e00\u4e2a\u6837\u672c\uff0c\u4e0d\u9700\u8981padding\uff0c\u4e5f\u5c31\u6ca1\u6709batch padding\u5b58\u5728\uff0c\u7eff\u8272\u5355\u5143\u4f9d\u8d56\u7684\u7ea2\u8272\u5355\u5143\u4f4d\u7f6e\u7684\u503c \u603b\u662f\u7531 conv paddings\u4ea7\u751f\u7684\uff0c\u8fd9\u4e2a\u503c \u603b\u662f 0\u503c\uff0c\u6240\u4ee5\u5982\u679c\u4e0d\u8fdb\u884c\u4efb\u4f55\u5904\u7406\uff0c\u5b58\u5728\u8bad\u7ec3\u548c\u89e3\u7801\u4e0d\u4e00\u81f4\u7684\u95ee\u9898\u3002\u56e0\u6b64\uff0c\u4ee3\u7801\u91cc\u5229\u7528subsample frame padding\uff0c\u5c06\u6bcf\u4e00\u5c42\u7684 batch padding\u90e8\u5206\u7684\u503c\u53d8\u4e3a0 \u3002 1 2 3 # wenet/transformer/convolution.py if mask_pad is not None : x . masked_fill_ ( ~ mask_pad , 0.0 ) \u5982\u679c\u4f7f\u7528\u56e0\u679c\u5377\u79ef\uff0c\u7531\u4e8e\u5176\u7ed3\u6784\u7279\u70b9\uff0c\u6bcf\u4e2a\u70b9\u5747\u4e0d\u4f9d\u8d56\u53f3\u4fa7\u7684\u70b9\uff0c\u5c31\u4e0d\u9700\u8981\u8fd9\u4e2amask\u3002","title":"Conformer\u4e2d\u5377\u79ef\u7f51\u7edc\u6a21\u5757\u7684mask"},{"location":"asr/wenet%E6%80%BB%E4%BD%93%E8%A7%A3%E6%9E%90/#multiheadattentionmask","text":"\u7528\u4e8eself-attention\u65f6\uff0c\u6bcf\u4e2a\u6837\u672c\u7684mask\u662f\u4e00\u4e2a\u957f\u548c\u9ad8\u4e00\u6837\u5927\u5c0f\u7684\u65b9\u9635\u3002 \u7528\u4e8ecross-attention\u65f6\uff0cmask\u7eb5\u8f74\u4ece\u4e0a\u5230\u4e0b\u4e3a\u6587\u672c\u5e8f\u5217,\u6a2a\u8f74\u4ece\u5de6\u5230\u53f3\u4e3a\u5e27\u5e8f\u5217\uff0c[batch_size, L, T]\u3002 \u8ba1\u7b97attention\u7684\u6743\u91cd\u65f6\u4f7f\u7528mask\u7684\u65b9\u5f0f\uff1a\u5148\u5c06\u4e0d\u9700\u8981\u8ba1\u7b97\u7684\u4f4d\u7f6e\u7684score\u8bbe\u4e3a\u8d1f\u65e0\u7a77\u800c\u4e0d\u662f0\uff0c\u7136\u540e\u8ba1\u7b97softmax\u5f97\u5230\u4f4d\u7f6e\u6743\u91cd\uff0c\u6b64\u65f6\u4e0d\u9700\u8981\u8ba1\u7b97\u7684\u4f4d\u7f6e\u662f\u6781\u5c0f\u503c\uff0c\u7136\u540e\u518d\u628a\u4e0d\u9700\u8981\u53c2\u4e0eattention\u8ba1\u7b97\u4f4d\u7f6e\u7684\u6743\u91cd\u7cfb\u6570\u8bbe\u4e3a0. 1 2 3 4 5 6 # wenet/transformer/attention.py def forward_attention (): ... mask = mask . unsqueeze ( 1 ) . eq ( 0 ) # (batch, 1, *, time2) scores = scores . masked_fill ( mask , - float ( 'inf' )) attn = torch . softmax ( scores , dim =- 1 ) . masked_fill ( mask , 0.0 ) # (batch, head, time1, time2) mask.unsqueeze(1) \u662f\u4e3a\u4e86\u589e\u52a0\u4e00\u4e2ahead\u7ef4\u5ea6\u3002\u6b64\u65f6: \u5f53\u7528\u4e8edecoder cross-attention\u65f6\uff0c mask\u7684shape\u4e3a(batch, 1, 1, Tmax)\uff0c scores\u7684shape\u4e3a(batch, head, Lmax, Tmax)\uff0c\u7b2c1\u3001\u7b2c2\u7ef4\u4f1a\u8fdb\u884cbroadcast \u5f53\u7528\u4e8edecoder self-attention\u65f6\uff0c mask\u7684shape\u4e3a(batch, 1, Lmax, Lmax)\uff0cscores\u7684shape\u4e3a(batch, head, Lmax, Lmax)\uff0c\u7b2c1\u7ef4\u4f1a\u8fdb\u884cbroadcast \u5f53\u7528\u4e8eencoder self-attention\u65f6\uff0c mask\u7684shape\u4e3a(batch, 1, Tmax, Tmax)\uff0cscores\u7684shape\u4e3a(batch, head, Tmax, Tmax)\uff0c\u7b2c1\u7ef4\u4f1a\u8fdb\u884cbroadcast \u7b2c1\u7ef4\u4f1a\u8fdb\u884cbroadcast\u5c31\u662f\u8bf4\u65e0\u8bba\u54ea\u4e2ahead\uff0c\u5bf9\u4e8e\u586b\u5145\u4f4d\u7f6e\u90fd\u8981\u8fdb\u884cmask\u3002","title":"MultiHeadAttention\u7684mask"},{"location":"asr/wenet%E6%80%BB%E4%BD%93%E8%A7%A3%E6%9E%90/#chunk-based-attention","text":"\u4e3a\u4e86\u5b9e\u73b0\u6d41\u5f0f\u89e3\u7801\uff0c\u7f16\u7801\u5668\u4e2d\u4f7f\u7528\u4e86\u57fa\u4e8echunk\u7684attention\uff0c\u5e76 \u5141\u8bb8\u5404\u4e2abatch\u4f7f\u7528\u4e0d\u540c\u7684chunk\u5927\u5c0f \u3002 \u57fa\u4e8echunk\u7684attention\uff0c\u672c\u8d28\u4e0a\u662f \u9650\u5236attention\u7684\u4f5c\u7528\u8303\u56f4\uff0c\u53ef\u4ee5\u901a\u8fc7attention mask\u6765\u5b9e\u73b0 \u3002 subsequent_chunk_mask \u7528\u4e8e\u521b\u5efa\u4e00\u4e2a\u56fa\u5b9a\u5927\u5c0fchunk\u7684mask\u3002 python def subsequent_chunk_mask( size: int, chunk_size: int, num_left_chunks: int = -1, device: torch.device = torch.device(\"cpu\"), ) -> torch.Tensor: add_optional_chunk_mask \u5219\u7528\u4e8e\u521b\u5efa\u52a8\u6001\u5927\u5c0f\u7684chunk\u7684mask\u3002 1 2 3 4 5 def add_optional_chunk_mask ( xs : torch . Tensor , masks : torch . Tensor , use_dynamic_chunk : bool , use_dynamic_left_chunk : bool , decoding_chunk_size : int , static_chunk_size : int , num_decoding_left_chunks : int ): \u5982\u4e0a\u56fe\u6240\u793a\uff0c\u5176\u4e2d\uff0c - use_dynamic_chunk=True \uff0c\u5404\u7684batch\u4f7f\u7528\u968f\u673a\u7684chunk mask\uff0c - \u5982\u679c use_dynamic_left_chunk=True \uff0c \u5404\u7684batch\u5747\u91c7\u7528\u968f\u673a\u7684\u7684left chunk\u957f\u5ea6\u7684\u4fe1\u606f\u3002 - \u5982\u679c use_dynamic_left_chunk=False \uff0c \u5404\u7684batch\u5747\u91c7\u7528\u5f00\u5934\u5230\u5f53\u524dchunk\u7684\u4fe1\u606f\u3002 - use_dynamic_chunk=False \uff0c - static_chunk_size <= 0 \uff0c\u91c7\u7528full-attention\u3002 - static_chunk_size > 0 \uff0c\u91c7\u7528\u56fa\u5b9a\u7684chunk mask\u3002","title":"Chunk-based Attention"},{"location":"asr/wenet%E6%80%BB%E4%BD%93%E8%A7%A3%E6%9E%90/#mask_1","text":"\u89e3\u7801\u5668\u4e2d\u6d89\u53ca\u5230\u4e24\u79cdAttention\uff1a 1 2 3 4 5 6 # wenet/transformer/decoder_layer.py def __init__ ( ... ): ... self . self_attn ( tgt_q , tgt , tgt , tgt_q_mask ) # self-attention self . src_attn ( x , memory , memory , memory_mask ) # cross-attention ...","title":"\u89e3\u7801\u5668\u4e2d\u7684mask"},{"location":"asr/wenet%E6%80%BB%E4%BD%93%E8%A7%A3%E6%9E%90/#self-attention","text":"self attention\u4e2d\u8981\u8003\u8651\u81ea\u56de\u5f52\u548clabel batch padding\u5e26\u6765\u7684\u5f71\u54cd\u3002 1 2 3 4 5 6 7 8 9 10 11 # wenet/transformer/decoder.py tgt = ys_in_pad maxlen = tgt . size ( 1 ) # tgt_mask: (B, 1, L) tgt_mask = ~ make_pad_mask ( ys_in_lens , maxlen ) . unsqueeze ( 1 ) tgt_mask = tgt_mask . to ( tgt . device ) # m: (1, L, L) m = subsequent_mask ( tgt_mask . size ( - 1 ), device = tgt_mask . device ) . unsqueeze ( 0 ) # tgt_mask: (B, L, L) tgt_mask = tgt_mask & m \u4e0a\u8ff0\u4ee3\u7801\u4e2d\uff0c ~make_pad_mask() \u51fd\u6570\u4ea7\u751f\u7684 tgt_mask \u662f\u6807\u7b7e\u586b\u5145\u63a9\u853d\u77e9\u9635\uff08label padding mask\uff09\uff0c\u6bcf\u4e2atoken\u4e0d\u5141\u8bb8\u5bf9padding\u90e8\u5206\u8fdb\u884cattention\u64cd\u4f5c\u3002 subsequent_mask() \u51fd\u6570\u4ea7\u751f\u7684 m \u662f\u89e3\u7801\u5668\u81ea\u56de\u5f52\u7684mask\uff0c\u6bcf\u4e2atoken\u53ea\u5bf9\u81ea\u5df1\u4ee5\u53ca\u5de6\u4fa7\u7684token\u8fdb\u884cattention\u64cd\u4f5c\u3002 \u6700\u7ec8\u7684 tgt_mask = tgt_mask & m \u8868\u793a\u5728\u81ea\u56de\u5f52mask\u548clabel padding mask\u540c\u65f6\u4f5c\u7528\uff0c\u4e5f\u5c31\u662f\u6bcf\u4e2atoken\u4ec5\u5bf9\u9664\u4e86padding\u90e8\u5206\u4e4b\u5916\u7684\uff0c\u81ea\u5df1\u53ca\u5176\u5de6\u4fa7token\u8fdb\u884cattention\u3002 \u4e0d\u8fc7\uff0c\u7531\u4e8edecoder\u672c\u8eab\u662f\u81ea\u56de\u5f52\u7684\uff0c\u81ea\u56de\u5f52\u63a9\u7801\u4fdd\u8bc1\u4e86\u5bf9\u4e8e\u975epadding\u7684\u4f4d\u7f6e\uff0c\u5747\u4e0d\u4f1a\u53bb\u8ba1\u7b97\u81ea\u5df1\u53f3\u4fa7\u7684\u4f4d\u7f6e\uff1b\u5e76\u4e14\u5bf9\u4e8epadding\u4f4d\u7f6e\uff0c\u5728loss\u4e2d\u4f1a\u5904\u7406\uff0c\u4e0d\u53c2\u4e0e\u6700\u540e\u7684loss\u8ba1\u7b97\uff0c\u56e0\u6b64\uff0c\u5176\u5b9e\u5e76\u4e0d\u9700\u8981label padding mask\uff0c\u4e5f\u5c31\u662f\u4e0a\u8ff0\u4ee3\u7801\u4e2d\u6700\u7ec8\u7684tgt_mask\u3002","title":"self-attention"},{"location":"asr/wenet%E6%80%BB%E4%BD%93%E8%A7%A3%E6%9E%90/#cross-attention","text":"\u7f16\u89e3\u7801\u5668\u8f93\u51fa\u8fdb\u884ccross-attention\uff0c\u7531\u4e8e\u7f16\u7801\u5668\u7684\u4e00\u4e9b\u8f93\u51fa\u662fpadding\uff0c\u56e0\u6b64\u9700\u8981\u5229\u7528\u89e3\u7801\u5e27\u586b\u5145\u63a9\u853d\u77e9\u9635\uff08subsample frame padding mask\uff09\u6307\u793a\u7f16\u7801\u5668\u8f93\u51fa\u7684\u586b\u5145\u6570\u636e\u4f4d\u7f6e\u3002","title":"cross-attention"},{"location":"asr/wenet%E6%80%BB%E4%BD%93%E8%A7%A3%E6%9E%90/#_9","text":"\u89e3\u7801\u5668\u7684\u6bcf\u4e00\u5c42\u5747\u9700\u8981\u8ba1\u7b97\u5982\u4e0a\u4e24\u4e2aattention\uff0c\u89e3\u7801\u5668\u5185\u90e8\u7684self attention\u9700\u8981\u63a9\u853dpadding\u548c\u53f3\u4fa7\u6570\u636e\uff0c\u7f16\u7801\u5668\u8f93\u51fa\u9700\u8981\u63a9\u853d\u89e3\u7801\u5e27padding\u6570\u636e\uff0c\u4e24\u8005\u5229\u7528mask\u629b\u9664\u586b\u5145\u7684\u65e0\u6548\u6570\u636e\u4e4b\u540e\uff0c\u8fdb\u884ccross-attention\u3002","title":"\u6574\u4f53\u7ed3\u6784"},{"location":"asr/wenet%E6%80%BB%E4%BD%93%E8%A7%A3%E6%9E%90/#_10","text":"\u5728\u8fdb\u884c\u89e3\u7801\u65f6\uff0c\u8fd8\u7528\u5230\u4e86 mask_finished_scores() \u548c mask_finished_preds() \u3002","title":"\u5176\u5b83"},{"location":"asr/wenet%E6%80%BB%E4%BD%93%E8%A7%A3%E6%9E%90/#wenetcache","text":"\u6807\u51c6\u7684forward\u662f\u6574\u4e2a\u5e8f\u5217\u8fdb\u884c\u8ba1\u7b97\uff0c\u4f46\u662f\u5728\u6d41\u5f0f\u63a8\u65ad\u65f6\uff0c\u9700\u8981chunk\u7ea7\u522b\u7684forward\uff0c\u56e0\u6b64\u9700\u8981\u5f15\u5165cache\u7684\u6982\u5ff5\uff0c\u5373 \u5f53\u524dchunk\u5728\u8fdb\u884c\u524d\u5411\u8ba1\u7b97\u65f6\uff0c\u9700\u8981\u62ff\u5230\u4e0a\u6b21\u524d\u5411\u7684\u4e00\u4e9b\u7ed3\u679c\u4f5c\u4e3a\u8f93\u5165 \u3002\u5bf9\u4e8e\u6d41\u5f0f\u63a8\u65ad\uff0c\u8f93\u5165\u662f\u4e00\u4e2a\u4e00\u4e2achunk\u7684\u5230\u6765\uff0c* \u5bf9\u7b2ci\u4e2achunk\uff0c\u5f53\u8ba1\u7b97\u7b2ck\u5c42\u7f51\u7edc\u7684\u8f93\u51fa\u65f6\uff0c\u7531\u4e8e\u7f51\u7edc\u7ed3\u6784\u5b58\u5728\u5bf9\u5de6\u4fa7\u4e0a\u4e0b\u6587\u7684\u4f9d\u8d56\uff0c\u9700\u8981\u4f9d\u8d56\u7b2ck-1\u5c42\u7f51\u7edc\u91cc\uff0c\u5728\u7b2ci\u4e2achunk\u4e4b\u524d\u7684\u4e00\u4e9bchunks\u7684\u8f93\u51fa\u3002 * \u5982\u679c\u5bf9\u4e8e\u5f53\u524d\u5230\u6765chunk\uff0c\u5c06\u5176\u548c\u4f9d\u8d56\u7684chunk\u5e8f\u5217\uff08\u6bd4\u598210\u5c42self-attention\u5c42\uff0c\u6bcf\u5c42\u4f9d\u8d56\u5de6\u4fa74\u4e2achunk\uff0c\u5219\u7d2f\u79ef\u8d77\u6765\u9700\u8981\u4f9d\u8d56\u5de6\u4fa740\u4e2achunk\uff09\u62fc\u8d77\u6765\u4f5c\u4e3a\u7f51\u7edc\u8f93\u5165\u8fdb\u884c\u524d\u5411\uff0c\u5176\u8ba1\u7b97\u91cf\u4f1a\u6bd4\u8f83\u5927\u3002 \u5bf9\u4e8e\u90a3\u4e9b\u5df2\u7ecf\u8ba1\u7b97\u8fc7\u7684chunk\uff0c\u53ef\u4ee5\u5c06\u90a3\u4e9b\u5728\u8ba1\u7b97\u4e0b\u4e00\u4e2achunk\u7684\u8f93\u51fa\u65f6\uff0c\u628a\u9700\u8981\u7684\u4e2d\u95f4\u91cf\u4fdd\u5b58\u4e0b\u6765\uff0c\u4ece\u800c\u51cf\u5c11\u91cd\u590d\u8ba1\u7b97\uff0c\u8fd9\u79cd\u65b9\u5f0f\u5c31\u53ebcache\u3002\u53e6\u5916\uff0cWeNet\u7684\u7f51\u7edc\u7ed3\u6784\u5728\u8bbe\u8ba1\u65f6\uff0c\u7531\u4e8e\u56e0\u679c\u5377\u79ef\u548cself-attention\u7684\u5de6\u4fa7\u4e0a\u4e0b\u6587\u90fd\u4f7f\u7528\u6709\u9650\u957f\u5ea6\uff0c\u56e0\u6b64\u65e0\u8bba\u5e8f\u5217\u591a\u957f\uff0c\u6bcf\u6b21cache\u7684\u5927\u5c0f\u662f\u4e0d\u53d8\u7684\uff08\u4e0d\u589e\u957f\uff09\u3002 WeNet \u4ec5\u4ec5\u7f16\u7801\u5668\u90e8\u5206\u6d89\u53cachunk\u8ba1\u7b97\u65f6\u7684cache \u3002 \u5bf9\u4e8eCTC\u89e3\u7801\u5668\uff0c\u7531\u4e8e\u662f\u7ebf\u6027\u5c42\uff0c\u56e0\u6b64\u4e0d\u9700\u8981cache\uff1b\u800c\u5bf9\u4e8eAED\u7684\u89e3\u7801\u5668\uff0c\u662f\u5728\u8ba1\u7b97\u5b8c\u6574\u4e2a\u7f16\u7801\u5668\u8f93\u51fa\u4e4b\u540e\uff0c\u624d\u8fdb\u884crescoring\uff0c\u56e0\u6b64\u4e0d\u6d89\u53cachunk\u3002","title":"WeNet\u4e2d\u7684cache"},{"location":"asr/wenet%E6%80%BB%E4%BD%93%E8%A7%A3%E6%9E%90/#runtime","text":"ASRModel \u4e2d\u7684 forward_encoder_chunk() \u901a\u8fc7JIT\u5bfc\u51fa\uff0c\u4ee5\u7528\u4e8eC++ runtime\uff0c\u5185\u90e8\u4f7f\u7528 BaseEncoder \u4e2d\u7684 forward_chunk() \uff1a 1 2 3 4 5 6 @torch . jit . export def forward_encoder_chunk ( ... ): return self . encoder . forward_chunk ( xs , offset , required_cache_size , subsampling_cache , elayers_output_cache , conformer_cnn_cache )","title":"Runtime\u6d41\u5f0f\u89e3\u7801"},{"location":"asr/wenet%E6%80%BB%E4%BD%93%E8%A7%A3%E6%9E%90/#python","text":"ASRModel \u4e2d\u8fdb\u884cPython\u89e3\u7801\u7684 recognize() \u51fd\u6570\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 # wenet/transformer/asr_model.py def recognize ( self , speech : torch . Tensor , speech_lengths : torch . Tensor , beam_size : int = 10 , decoding_chunk_size : int = - 1 , num_decoding_left_chunks : int = - 1 , simulate_streaming : bool = False , ) -> torch . Tensor : \"\"\" Apply beam search on attention decoder Args: speech (torch.Tensor): (batch, max_len, feat_dim) speech_length (torch.Tensor): (batch, ) beam_size (int): beam size for beam search decoding_chunk_size (int): decoding chunk for dynamic chunk trained model. <0: for decoding, use full chunk. >0: for decoding, use fixed chunk size as set. 0: used for training, it's prohibited here simulate_streaming (bool): whether do encoder forward in a streaming fashion Returns: torch.Tensor: decoding result, (batch, max_result_len) \"\"\" ... \u5982\u679c\u8bbe\u7f6e simulate_streaming \u4e3aTrue\uff0c\u5c31\u4f1a\u6a21\u62dfruntime\u6d41\u5f0f\u89e3\u7801\u7684\u8fc7\u7a0b\uff0c\u5c06\u6570\u636e\u5206\u6210chunk\uff0c\u4f9d\u6b21\u8fdb\u884c\u524d\u5411\u8ba1\u7b97\uff0c\u8be5\u65b9\u6cd5\u7684\u7ed3\u679c\uff0c\u548c\u9001\u5165\u6574\u4e2a\u5e8f\u5217\u901a\u8fc7mask\u8fdb\u884c\u6d41\u5f0f\u6a21\u62df\u7684\u7ed3\u679c\u5e94\u8be5\u662f\u4e00\u81f4\u7684\uff1a 1 recognize() -> _forward_encoder() -> BaseEncoder.forward_chunk_by_chunk() -> BaseEncoder.forward_chunk() \u53ef\u4ee5\u770b\u5230\uff0c\u6700\u7ec8\u8c03\u7528\u7684\u8fd8\u662f BaseEncoder \u4e2d\u7684 forward_chunk() \u51fd\u6570\u3002","title":"Python\u6d41\u5f0f\u89e3\u7801"},{"location":"asr/wenet%E6%80%BB%E4%BD%93%E8%A7%A3%E6%9E%90/#baseencoderforward_chunk","text":"\u5728chunk\u6d41\u5f0f\u8ba1\u7b97\u65f6\uff0c\u9700\u8981\u7279\u522b\u6ce8\u610f\u4e09\u4e2a\u65b9\u9762\u7684\u7f13\u5b58\uff1a \u4e0b\u91c7\u6837\uff08subsampling\uff09\u4e2d\u7684\u5377\u79ef\u3002\u4f46\u662fsubsampling\u5185\u90e8\u4e0d\u8fdb\u884ccache\uff0c\u4e00\u662f\u5b9e\u73b0\u6bd4\u8f83\u590d\u6742\uff0c\u4e8c\u662fsubsampling\u7684\u8ba1\u7b97\u91cf\u4e0d\u5927\u3002 Transformer/Conformer\u7f16\u7801\u5668\u4e2d\u6bcf\u4e00\u5c42\u7684\u8f93\u51fa\u3002 Conformer\u4e2d\u7684\u5377\u79ef\u3002 forward_chunk() \u662f\u5bf9 \u5355\u4e2achunk\u8fdb\u884c\u524d\u5411\u8ba1\u7b97\u7684\u6838\u5fc3\u51fd\u6570 \uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 # wenet/transformer/encoder.py def forward_chunk ( self , xs : torch . Tensor , offset : int , required_cache_size : int , subsampling_cache : Optional [ torch . Tensor ] = None , elayers_output_cache : Optional [ List [ torch . Tensor ]] = None , conformer_cnn_cache : Optional [ List [ torch . Tensor ]] = None , ) -> Tuple [ torch . Tensor , torch . Tensor , List [ torch . Tensor ], List [ torch . Tensor ]]: \"\"\" Forward just one chunk Args: xs (torch.Tensor): chunk input offset (int): current offset in encoder output time stamp required_cache_size (int): cache size required for next chunk compuation >=0: actual cache size <0: means all history cache is required subsampling_cache (Optional[torch.Tensor]): subsampling cache elayers_output_cache (Optional[List[torch.Tensor]]): transformer/conformer encoder layers output cache conformer_cnn_cache (Optional[List[torch.Tensor]]): conformer cnn cache Returns: torch.Tensor: output of current input xs torch.Tensor: subsampling cache required for next chunk computation List[torch.Tensor]: encoder layers output cache required for next chunk computation List[torch.Tensor]: conformer cnn cache \"\"\" ... \u4e0a\u8ff0\u4ee3\u7801\u4e2d\uff0c xs \u662f\u5f53\u524dchunk\u8f93\u5165\u3002\u7531\u4e8e\u5355\u4e2achunk\u7684\u524d\u5411\u8ba1\u7b97\uff0c\u9700\u8981\u4e4b\u524dchunk\u8ba1\u7b97\u5f97\u5230\u7684\u4fe1\u606f\uff0c\u56e0\u6b64\u8fd9\u91cc\u9700\u8981\u4f20\u5165\u76f8\u5173\u7684\u4e09\u4e2acache\u4fe1\u606f\uff1a subsampling_cache : [torch.Tensor]\uff0csubsampling\u8f93\u51fa\u7684cache\uff0c\u4e5f\u5c31\u662f\u7b2c\u4e00\u4e2aConformer block\u7684\u8f93\u5165\u3002 elayers_output_cache : List[torch.Tensor]\uff0c\u7b2c1\u4e2a\u5230\u6700\u540e\u4e00\u4e2aConformer block\u7684\u8f93\u51fa\u7684cache\uff0c\u4e5f\u5c31\u662f\u7b2c2\u4e2aConformer block\u7684\u8f93\u5165\u548cCTC\u5c42\u7684\u8f93\u5165\u3002 conformer_cnn_cache : List[torch.Tensor]\uff0cConformer block\u91cc\u7684\u5377\u79ef\u5c42\u5de6\u4fa7\u4f9d\u8d56\u7684\u8f93\u5165cache\u3002","title":"BaseEncoder.forward_chunk()\u5206\u6790"},{"location":"asr/wenet%E6%80%BB%E4%BD%93%E8%A7%A3%E6%9E%90/#cache","text":"subsampling_cache \u548c elayers_output_cache \u7684\u5927\u5c0f\u662f\u7531self-attention\u5bf9\u5de6\u4fa7\u7684\u4f9d\u8d56\u957f\u5ea6 required_cache_size \u51b3\u5b9a\u3002 decoding_chunk_size \u8868\u793a\u89e3\u7801\u5e27\u7ea7\u522b\u7684chunk\u5927\u5c0f\uff0c num_decoding_left_chunks \u662fself-attention\u4f9d\u8d56\u7684\u5de6\u4fa7chunk\u6570\u76ee\uff0c required_cache_size \u8868\u793aself-attention\u4f9d\u8d56\u7684\u5de6\u4fa7\u89e3\u7801\u5e27\u603b\u6570\uff0c\u56e0\u6b64\u6ee1\u8db3\uff1a 1 required_cache_size = decoding_chunk_size * num_decoding_left_chunks conformer_cnn_cache \u7684\u5927\u5c0f\u548c required_cache_size \u65e0\u5173\uff0c\u53ea\u7531\u56e0\u679c\u5377\u79ef\u7684\u5de6\u4fa7\u4e0a\u4e0b\u6587 lorder \u53c2\u6570\u51b3\u5b9a\uff0c lorder \u5c31\u662f\u5b9e\u73b0\u56e0\u679c\u5377\u79ef\u7684\u5de6\u4fa7\u586b\u5145\u6570\uff1a 1 2 3 if causal : padding = 0 self . lorder = kernel_size - 1 \u51fd\u6570\u8fd4\u56de\u4e86\u56db\u4e2a\u503c\uff0c\u5305\u62ec\u5f53\u524dchunk\u8f93\u5165\u5bf9\u5e94\u7684\u8f93\u51fa\uff0c\u4ee5\u53ca\u66f4\u65b0\u540e\u7684\u4e09\u4e2acache\u3002","title":"cache\u7684\u5927\u5c0f"},{"location":"asr/wenet%E6%80%BB%E4%BD%93%E8%A7%A3%E6%9E%90/#offset","text":"\u5f53\u6309chunk\u8fdb\u884c\u8f93\u5165\u65f6\uff0c\u4e0d\u80fd\u76f4\u63a5\u5f97\u5230chunk\u5728\u5e8f\u5217\u4e2d\u7684\u4f4d\u7f6e\uff0c\u56e0\u6b64\u9700\u8981\u4f20\u5165offset\u7ed9\u51fa\u8be5chunk\u5728\u6574\u4e2a\u5e8f\u5217\u91cc\u7684\u504f\u79fb\uff0c\u7528\u4e8e\u8ba1\u7b97positional encoding\uff1a 1 2 3 4 5 # wenet/transformer/encoder.py def forward_chunk ( ... ): ... xs , pos_emb , _ = self . embed ( xs , tmp_masks , offset ) ...","title":"offset"},{"location":"asr/wenet%E6%80%BB%E4%BD%93%E8%A7%A3%E6%9E%90/#subsampling_cache","text":"subsampling\u8f93\u51fa\u7684cache\uff0c\u5373\u7b2c\u4e00\u4e2aConformer block\u7684\u8f93\u5165\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 def forward_chunk ( self , xs : torch . Tensor , offset : int , required_cache_size : int , subsampling_cache : Optional [ torch . Tensor ] = None , elayers_output_cache : Optional [ List [ torch . Tensor ]] = None , conformer_cnn_cache : Optional [ List [ torch . Tensor ]] = None , ): ... if subsampling_cache is not None : cache_size = subsampling_cache . size ( 1 ) # xs\u662f\u7b2c\u4e00\u4e2aconformer block\u7684\u8f93\u5165 xs = torch . cat (( subsampling_cache , xs ), dim = 1 ) else : cache_size = 0 pos_emb = self . embed . position_encoding ( offset - cache_size , xs . size ( 1 )) if required_cache_size < 0 : next_cache_start = 0 elif required_cache_size == 0 : next_cache_start = xs . size ( 1 ) else : next_cache_start = max ( xs . size ( 1 ) - required_cache_size , 0 ) # \u66f4\u65b0subsampling_cache r_subsampling_cache = xs [:, next_cache_start :, :]","title":"subsampling_cache"},{"location":"asr/wenet%E6%80%BB%E4%BD%93%E8%A7%A3%E6%9E%90/#elayers_output_cache","text":"\u7b2c1\u4e2a\u5230\u6700\u540e\u4e00\u4e2aConformer block\u7684\u8f93\u51fa\u7684cache\uff0c\u4e5f\u5c31\u662f\u7b2c2\u4e2aConformer block\u7684\u8f93\u5165\u548cCTC\u5c42\u7684\u8f93\u5165\u3002 1 2 3 4 5 6 7 8 9 10 11 for i , layer in enumerate ( self . encoders ): attn_cache = elayers_output_cache [ i ] cnn_cache = conformer_cnn_cache [ i ] # layer(...)\u5bf9\u5e94ConformerEncoderLayer.forward(...) xs , _ , new_cnn_cache = layer ( xs , masks , pos_emb , output_cache = attn_cache , cnn_cache = cnn_cache ) # \u66f4\u65b0elayers_output_cache r_elayers_output_cache . append ( xs [:, next_cache_start :, :]) \u6ce8\u610f\uff0c\u6b64\u5904\u7684xs\u4e0d\u662f\u5f53\u524d\u7684chunk\uff0c\u800c\u662f\u5f53\u524dchunk+cache\u8f93\u5165\uff0c\u6240\u4ee5\u5176\u957f\u5ea6\u4e0d\u662fchunk_size\uff0c\u800c\u662f chunk_size + required_cache_size \uff1a 1 2 3 4 5 6 7 8 9 10 # wenet/transformer/encoder.py # BaseEncoder.forward_chunk() # \u7b2c\u4e00\u4e2aconformer block\u8f93\u5165\u7684xs xs = torch . cat (( subsampling_cache , xs ), dim = 1 ) # wenet/transformer/encoder_layer.py # ConformerEncoderLayer.forward() # \u4e4b\u540e\u7684conformer block\u8f93\u5165\u7684xs if output_cache is not None : x = torch . cat ([ output_cache , x ], dim = 1 ) \u6b64\u5916\uff0c\u4e0a\u8ff0\u4ee3\u7801\u4e2d\u7684 layer(...) \u5bf9\u5e94\u7740wenet/transformer/encoder_layer.py\u4e2d\u7684ConformerEncoderLayer.forward()\uff0c\u5177\u4f53\u7684\u8ba1\u7b97\u8fc7\u7a0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 # \u8ba1\u7b97feedforwad/res/norm(\u5305\u542b\u5f53\u524dchunk\u548c\u5de6\u4fa7num_decoding_left_chunks\u4e2achunk) # \u4f7f\u7528cache\u65f6\uff0c\u53ea\u8981\u8ba1\u7b97\u5f53\u524dchunk\u7684x_q\u7684self-attentionattention\u548cresidual chunk = x . size ( 1 ) - output_cache . size ( 1 ) x_q = x [:, - chunk :, :] # \u53ea\u9009\u62e9\u5f53\u524dchunk\u5bf9\u5e94\u7684\u90e8\u5206\u505aresidual\u8ba1\u7b97 residual = residual [:, - chunk :, :] # \u9009\u53d6\u5f53\u524dchunk\u5bf9\u5e94\u7684mask\uff0c mask = mask [:, - chunk :, :] # \u4f7f\u7528\u5f53\u524dchunk\u7684x_q\u53bb\u548c\u5176\u4f9d\u8d56\u7684x\u505aattention x = residual + self . dropout ( self . self_attn ( x_q , x , x , mask )) # \u4ec5\u8ba1\u7b97\u5f53\u524dchunk\u7684conv x , new_cnn_cache = self . conv_module ( x , mask_pad , cnn_cache ) # \u4ec5\u8ba1\u7b97\u5f53\u524dchunk\u7684feedforwad/res/norm x = self . norm2 ( x ) x = residual + self . dropout ( self . feed_forward ( x )) # \u53ef\u4ee5\u770b\u5230\u901a\u8fc7cache\u8282\u7701\u4e86x[:, :-chunk, :]\u90e8\u5206\u7684attention/conv\u4ee5\u53ca\u4e4b\u540e\u7684feedforwad/res/norm\u8ba1\u7b97 # chunk\u7684\u8f93\u51fa\u548ccache\u62fc\u5728\u4e00\u8d77\uff0c\u4f5c\u4e3a\u7f51\u7edc\u7684\u6700\u7ec8\u8f93\u51fa\u3002 x = torch . cat ([ output_cache , x ], dim = 1 ) \u5982\u4e0a\u8ff0\u4ee3\u7801\u6240\u793a\uff0c\u901a\u8fc7cache\u8282\u7701\u4e86x[:, :-chunk, :]\u90e8\u5206\u7684attention/conv\u4ee5\u53ca\u4e4b\u540e\u7684feedforwad/res/norm\u8ba1\u7b97\u3002","title":"elayers_output_cache"},{"location":"asr/wenet%E6%80%BB%E4%BD%93%E8%A7%A3%E6%9E%90/#conformer_cnn_cache","text":"Conformer Block\u4e2d\u7684\u5377\u79ef\u5c42\u5de6\u4fa7\u4f9d\u8d56\u7684\u8f93\u5165cache\u3002conformer_cnn_cache\u5927\u5c0f\u4e3a lorder \uff0c\u5373\u56e0\u679c\u5377\u79ef\u5de6\u4fa7\u4f9d\u8d56\uff0c lorder \u5c31\u662f\u5b9e\u73b0\u56e0\u679c\u5377\u79ef\u7684\u5de6\u4fa7\u586b\u5145\u6570\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # wenet/transformer/encoder_layer.py # ConformerEncoderLayer.forward() # conformer_cnn_cache\u901a\u8fc7ConvolutionModule.forward()\u8fd4\u56de\u7684\u65b0cache\u6765\u66f4\u65b0 # self.conv_module(...)\u53c2\u6570\u4e2d\u7684cnn_cache\u4e3a\u4e0a\u4e00\u4e2achunk\u8f93\u51fa\u7684new_cache x , new_cnn_cache = self . conv_module ( x , mask_pad , cnn_cache ) # new_cnn_cache\u7684\u8ba1\u7b97\u8fc7\u7a0b\u6765\u81ea\uff1awenet/transformer/convolution.py # ConvolutionModule.forward() if self . lorder > 0 : if cache is None : x = nn . functional . pad ( x , ( self . lorder , 0 ), 'constant' , 0.0 ) else : x = torch . cat (( cache , x ), dim = 2 ) # \u66f4\u65b0 conformer_cnn_cache new_cache = x [:, :, - self . lorder :]","title":"conformer_cnn_cache"},{"location":"asr/wenet%E6%80%BB%E4%BD%93%E8%A7%A3%E6%9E%90/#wenet_2","text":"\u6a21\u578b\u8bad\u7ec3\u65f6\u540c\u65f6\u4f7f\u7528CTC\u635f\u5931\u548c\u4ea4\u53c9\u71b5\uff08Cross-Entropy\uff0cCE\uff09\u635f\u5931\u3002\u4e3a\u4e86\u907f\u514d\u8fc7\u62df\u5408\uff0c\u63d0\u9ad8\u6a21\u578b\u6a21\u578b\u7684\u6cdb\u5316\u80fd\u529b\uff0c\u5728WeNet\u4e2d\u4f7f\u7528Label Smoothing\u4ee3\u66ff\u4ea4\u53c9\u71b5\u635f\u5931\u3002 \u7f16\u7801\u5668\u8f93\u51fa\u7279\u5f81\u8fdb\u5165CTC\u89e3\u7801\u5668\u5f97\u5230CTC\u635f\u5931\uff0c\u8fdb\u5165Attention\u89e3\u7801\u5668\u83b7\u5f97Label Smoothing\u635f\u5931\uff0c\u5e76\u5229\u7528 ctc_weight \u8fdb\u884c\u52a0\u6743\u6c42\u5f97\u6700\u7ec8\u7684\u635f\u5931\u3002 1 2 // wenet / wenet / transformer / asr_model . py loss = self . ctc_weight * loss_ctc + ( 1 - self . ctc_weight ) * loss_att","title":"WeNet\u635f\u5931\u51fd\u6570"},{"location":"asr/wenet%E6%80%BB%E4%BD%93%E8%A7%A3%E6%9E%90/#wenet_3","text":"","title":"WeNet\u591a\u673a\u5e76\u884c\u8bad\u7ec3"},{"location":"asr/wenet%E6%80%BB%E4%BD%93%E8%A7%A3%E6%9E%90/#_11","text":"\u76ee\u524d\u57fa\u4e8ePyTorch\u7684\u4e3b\u6d41\u5206\u5e03\u5f0f\u8bad\u7ec3\u65b9\u6848\u4e3b\u8981\u6709PyTorch\u539f\u751f\u7684DDP\uff08DistributedDataParallel\uff09\u548chorovod\u4e24\u79cd\u3002","title":"\u4e1a\u754c\u73b0\u6709\u65b9\u6848"},{"location":"asr/wenet%E6%80%BB%E4%BD%93%E8%A7%A3%E6%9E%90/#distributeddataparallel","text":"","title":"DistributedDataParallel"},{"location":"asr/wenet%E6%80%BB%E4%BD%93%E8%A7%A3%E6%9E%90/#pythonglobal-interpreter-lockgil","text":"Python\u7684\u6bcf\u4e2a\u7ebf\u7a0b\u83b7\u53d6GIL\uff0c\u7136\u540e\u6267\u884c\u4ee3\u7801\u76f4\u5230sleep\u6216\u8005\u662fpython\u865a\u62df\u673a\u5c06\u5176\u6302\u8d77\uff0c\u6700\u540e\u91ca\u653eGIL\uff0c \u53ea\u6709\u62ff\u5230GIL\u7684\u7ebf\u7a0b\u624d\u53ef\u4ee5\u8fd0\u884c \u3002Python GIL\u7684\u5b58\u5728\u4f7f\u5f97\u4e00\u4e2apython\u8fdb\u7a0b\u53ea\u80fd\u5229\u7528\u4e00\u4e2aCPU\u6838\u5fc3\uff0c\u4e0d\u9002\u7528\u4e8e\u795e\u7ecf\u7f51\u7edc\u8bad\u7ec3\u7b49\u8ba1\u7b97\u5bc6\u96c6\u578b\u7684\u4efb\u52a1\u3002 \u4f7f\u7528\u591a\u8fdb\u7a0b\uff0c\u624d\u80fd\u66f4\u6709\u6548\u7387\u5730\u5229\u7528\u591a\u6838\u7684\u8ba1\u7b97\u8d44\u6e90 \u3002","title":"Python\u5168\u5c40\u89e3\u91ca\u5668\u9501(Global Interpreter Lock\uff0cGIL)"},{"location":"asr/wenet%E6%80%BB%E4%BD%93%E8%A7%A3%E6%9E%90/#dpdataparallel","text":"DP\uff08DataParallel\uff09\u662fPyTorch\u65e9\u671f\u7684\u6570\u636e\u5e76\u884c\u65b9\u6848\uff0c\u662f\u4e00\u79cd\u57fa\u4e8eParameter Server\u7684\u7b97\u6cd5\uff0c \u5e94\u7528\u4e8e\u5355\u673a\u591a\u5361\u7684\u8bad\u7ec3 \u3002\u8fd9\u4e00\u65b9\u6848\u5728\u5b58\u5728\u6bd4\u8f83\u4e25\u91cd\u7684\u5185\u5b58\u548c\u901a\u4fe1\u6d41\u91cf\u8d1f\u8f7d\u4e0d\u5747\u8861\u7684\u95ee\u9898\uff0c\u5176\u4e2d\u7528\u4e8e\u540c\u6b65\u5404\u8282\u70b9\u4fe1\u606f\u7684\u4e3bGPU\u8282\u70b9\u7684\u5185\u5b58\u4e00\u822c\u4f1a\u6bd4\u5176\u4ed6GPU\u8282\u70b9\u5360\u7528\u7684\u5185\u5b58\u66f4\u591a\u3002\u4f46\u662f\u771f\u6b63\u9650\u5236DP\u7684\u662fParameter Server\u4f1a\u4f7f\u591a\u5361\u8bad\u7ec3\u65f6\u4e3bGPU\u8282\u70b9\u9700\u6c42\u7684\u901a\u4fe1\u5e26\u5bbd\u8fdc\u8fdc\u9ad8\u4e8e\u5176\u4ed6GPU\u8282\u70b9\uff0c\u5bfc\u81f4\u4e3b\u8282\u70b9\u7684\u901a\u4fe1\u5e26\u5bbd\u6210\u4e3a\u7cfb\u7edf\u7684\u74f6\u9888\u3002\u6b64\u5916\u5176\u91c7\u7528\u4e86\u5355\u8fdb\u7a0b\u591a\u7ebf\u7a0b\u7684\u65b9\u5f0f\u8fdb\u884c\u8bad\u7ec3\uff0c\u6027\u80fd\u4f1a\u53d7\u5230python GIL\u7684\u5f71\u54cd\u3002","title":"DP\uff08DataParallel\uff09"},{"location":"asr/wenet%E6%80%BB%E4%BD%93%E8%A7%A3%E6%9E%90/#ddpdp","text":"DDP\u65b9\u6848\u548cDP\u90fd\u662f\u6570\u636e\u5e76\u884c\u65b9\u6848\uff0c\u4f46\u662fDDP\u91c7\u7528\u4e86Ring-AllReduce\u6570\u636e\u4ea4\u6362\u7b97\u6cd5\uff0c\u4ece\u800c\u63d0\u9ad8\u4e86\u901a\u8baf\u6548\u7387\u3002\u8be5\u65b9\u6cd5\u6bcf\u4e2a\u8282\u70b9\u4e0d\u518d\u5168\u90e8\u5411\u4e3b\u8282\u8fdb\u884c\u901a\u4fe1\uff0c\u800c\u662f\u53ea\u4e0e\u76f8\u90bb\u7684\u8282\u70b9\u8fdb\u884c\u901a\u4fe1\uff0c\u56e0\u6b64\u6bcf\u4e2aGPU\u8282\u70b9\u4e0a\u7684\u6d41\u91cf\u901a\u4fe1\u538b\u529b\u76f8\u540c\u3002\u6b64\u5916DDP\u901a\u8fc7\u591a\u8fdb\u7a0b\uff08DDP\u652f\u6301\u4e3a\u6bcf\u4e2aGPU\u4f7f\u7528\u4e00\u4e2a\u72ec\u7acb\u8fdb\u7a0b\uff09\u7684\u65b9\u5f0f\u4e5f\u907f\u514d\u4e86Python GIL\uff08Global Interpreter Lock\uff09\u7684\u9650\u5236\uff0c\u4ece\u800c\u53ef\u4ee5\u8fdb\u4e00\u6b65\u63d0\u9ad8\u8bad\u7ec3\u901f\u5ea6\u3002","title":"DDP\u4e3a\u4ec0\u4e48\u4f1a\u6bd4DP\u8981\u5feb\uff1f"},{"location":"asr/wenet%E6%80%BB%E4%BD%93%E8%A7%A3%E6%9E%90/#ddp","text":"","title":"DDP\u7ebf\u6027\u52a0\u901f\u6bd4"},{"location":"asr/wenet%E6%80%BB%E4%BD%93%E8%A7%A3%E6%9E%90/#ddp_1","text":"Pytorch\u4e2dDDP\u7684\u521d\u59cb\u5316\u63a5\u53e3\u5982\u4e0b\uff1a 1 2 3 torch.distributed.init_process_group(backend, init_method=None, timeout=datetime.timedelta(seconds=1800), world_size=- 1, rank=- 1, store=None, group_name='', pg_options=None) \u5176\u4e2d\uff0c backend\u3002\u7528\u6765\u6307\u5b9a\u591a\u8fdb\u7a0b\u95f4\u7684\u901a\u4fe1\u540e\u7aef\uff0c\u5305\u62ecNCCL\uff0cGloo\uff0cMPI\u3002\u5176\u4e2dNCCL\u662f\u5b98\u65b9\u6700\u63a8\u8350\u7684\uff0c\u56e0\u6b64\u901a\u5e38\u6211\u4eec\u76f4\u63a5\u4f7f\u7528NCCL\u5373\u53ef\u3002 init_method\u3002\u7528\u6765\u8868\u793a\u5728\u542f\u52a8\u591a\u8fdb\u7a0b\u8bad\u7ec3\u65f6\uff0c\u5404\u8fdb\u7a0b\u7684\u63e1\u624b\u65b9\u5f0f\uff0c\u4e3b\u8981\u5305\u62ec\u4e09\u79cd\u65b9\u5f0f\uff0c\u5373file\uff08\u5171\u4eab\u6587\u4ef6\uff09\u3001tcp\uff08\u5957\u63a5\u5b57\uff09\u548cenv\uff08\u73af\u5883\u53d8\u91cf\uff09\uff0c\u591a\u673a\u8bad\u7ec3\u4e3b\u8981\u4f7f\u7528file\u548ctcp\u7684\u65b9\u5f0f\u3002\u901a\u8fc7file\u7684\u63e1\u624b\u65b9\u5f0f\u9700\u8981\u591a\u673a\u4e4b\u95f4\u88c5\u6709NFS\uff08Network File System\uff09\uff0c\u5728\u6307\u5b9a\u4e86\u5404\u8fdb\u7a0b\u5747\u53ef\u8bbf\u95ee\u7684\u5171\u4eab\u6587\u4ef6\u8def\u5f84\u540e\uff0c\u5404\u53f0\u673a\u5668\u4e0a\u7684\u4e0d\u540c\u8fdb\u7a0b\u901a\u8fc7\u8be5\u5171\u4eab\u6587\u4ef6\u5b8c\u6210\u63e1\u624b\uff0c\u4f8b\u5982 file:///export/nfs/ddp_init\u3002tcp\u7684\u65b9\u5f0f\u9700\u8981\u7ed9\u5b9a\u5404\u673a\u5668\u4e0a\u4e0d\u540c\u8fdb\u7a0b\u5747\u53ef\u8bbf\u95ee\u7684\u7f51\u7edc\u5730\u5740\u548c\u7aef\u53e3\u53f7\u6765\u5b8c\u6210\u5404\u8fdb\u7a0b\u7684\u63e1\u624b\uff0c\u4f8b\u5982tcp://127.0.0.1:23456\u3002 group\u3002\u9ed8\u8ba4\u503c\u5373\u53ef\u3002 world size\u3002\u8868\u793a\u5168\u5c40\u5e76\u884c\u7684\u8fdb\u7a0b\u6570\uff0cDDP\u6a21\u5f0f\u4e0b\uff0c \u6700\u4f18\u7684\u65b9\u6848\u662f\u6bcf\u4e2a\u8fdb\u7a0b\u4e00\u4e2a\u5361 \uff0c\u56e0\u6b64\u901a\u5e38\u60c5\u51b5\u4e0bworld size\u5b9e\u9645\u4e3a\u603b\u7684GPU\u6570\u91cf\u6216\u8005\u603b\u7684\u8fdb\u7a0b\u6570\u3002 rank\u3002\u8868\u793a\u5f53\u524d\u8fdb\u7a0b\u6216GPU\u7684\u5e8f\u53f7\uff0c\u7528\u4e8e\u8fdb\u7a0b\u95f4\u901a\u8baf\u3002\u4ece0\u5f00\u59cb\u6392\u5e8f\uff0c\u8303\u56f4\u662f0~world size-1\u3002\u6ce8\u610f\uff1arank=0\u8868\u793a\u8be5\u8fdb\u7a0b\u662fmaster\u8fdb\u7a0b\uff0c\u901a\u5e38\u7528\u6765\u5b58\u50a8\u6a21\u578b\u65e5\u5fd7\u7b49\u3002 \u6b64\u5916\u7a0b\u5e8f\u4e2d\u8fd8\u53ef\u80fd\u51fa\u73b0node_rank\u4ee5\u53calocal_rank\u7684\u6982\u5ff5\uff1a node_rank\u3002\u8868\u793a\u5f53\u524d\u673a\u5668\u7684\u5e8f\u53f7\uff0c\u540c\u6837\u4e5f\u662f\u4ece0\u5f00\u59cb\u6392\u5e8f\uff0c\u5047\u8bbe\u4e00\u5171\u4f7f\u7528\u4e86N\u53f0\u673a\u5668\uff0c\u5219node_rank\u7684\u8303\u56f4\u662f0\uff5eN-1\u3002 local_rank\u3002\u8868\u793a\u5f53\u524d\u673a\u5668\u4e0a\u7684\u8fdb\u7a0b\u6216GPU\u7684\u5e8f\u53f7\uff0c\u4ece0\u5f00\u59cb\u6392\u5e8f\uff0c\u5047\u8bbe\u5f53\u524d\u673a\u5668\u53ef\u4f7f\u7528GPU\u6570\u91cf\u662fN\uff0c\u5219local_rank\u8303\u56f4\u662f0\uff5eN-1\u3002","title":"DDP\u4e2d\u7684\u6982\u5ff5"},{"location":"asr/wenet%E6%80%BB%E4%BD%93%E8%A7%A3%E6%9E%90/#ddp_2","text":"Pytorch DDP\u7684\u4e3b\u8981\u5de5\u4f5c\u6d41\u7a0b\uff1a \u542f\u52a8\u5404\u8fdb\u7a0b\u3002 \u5404\u8fdb\u7a0b\u901a\u8fc7\u6307\u5b9a\u7684init method\u5b8c\u6210\u63e1\u624b\uff0c\u4ee5\u4fbf\u8fdb\u884c\u8fdb\u7a0b\u4e4b\u95f4\u7684\u901a\u4fe1\u3002 \u4e3b\u8282\u70b9\u8f7d\u5165\u6216\u968f\u673a\u521d\u59cb\u5316\u6a21\u578b\uff0c\u5e76\u4e14\u5c06\u53c2\u6570\u548cBuffer\uff08Buffer\u662f\u4f1a\u88ab\u6301\u4e45\u5316\u4fdd\u5b58\u7684\u6570\u636e\u7b49\uff0c\u5982BatchNorm\u4e2d\u7684mean\u548cvariance\uff09\u7b49\u6a21\u578b\u72b6\u6001\u4fe1\u606f\u5206\u53d1\u81f3\u5404GPU\u8282\u70b9\uff0c\u6b64\u65f6\u6bcf\u4e2aGPU\u8282\u70b9\u62ff\u5230\u7684\u6a21\u578b\u72b6\u6001\u662f\u76f8\u540c\u7684\u3002 \u901a\u8fc7sampler\uff0c \u6bcf\u4e2aGPU\u62ff\u5230\u4e86\u5c5e\u4e8e\u81ea\u5df1\u7684\u90a3\u4efd\u6570\u636e \uff0c\u5e76\u8fdb\u884c\u524d\u5411\u8fd0\u7b97\uff0c\u5e76\u4e14\u8ba1\u7b97\u51faloss\u3002 \u6bcf\u4e2aGPU\u8fdb\u884cbackward()\u540e\u5411\u8fd0\u7b97\u6c42\u51fa\u68af\u5ea6\uff08 \u6b64\u65f6\u6bcf\u4e2aGPU\u4e0a\u7684\u68af\u5ea6\u662f\u4e0d\u540c\u7684 \uff09\uff0c\u4e4b\u540e\u5404GPU\u901a\u8fc7AllReduce\u7b97\u6cd5\u5bf9\u68af\u5ea6\u8fdb\u884c\u540c\u6b65\uff0c\u4f7f\u5f97\u6bcf\u4e2aGPU\u90fd\u80fd\u62ff\u5230\u5168\u90e8GPU\u4e0a\u7684\u68af\u5ea6\u7684\u548c\uff08 \u8fd9\u65f6\u6bcf\u4e2aGPU\u4e0a\u7684\u68af\u5ea6\u662f\u76f8\u540c\u7684 \uff09\u3002 \u5404GPU\u6839\u636e\u540c\u6b65\u4e4b\u540e\u7684\u68af\u5ea6\u6765\u66f4\u65b0\u6a21\u578b\u53c2\u6570\uff0c\u66f4\u65b0\u4e4b\u540e\u5404\u4e2aGPU\u4e0a\u7684\u6a21\u578b\u53c2\u6570\u662f\u76f8\u540c\u7684\u3002 \u91cd\u590d\u6267\u884c4~6\uff0c\u76f4\u81f3\u8bad\u7ec3\u5b8c\u6bd5\u3002","title":"DDP\u7684\u5de5\u4f5c\u6d41\u7a0b"},{"location":"asr/wenet%E6%80%BB%E4%BD%93%E8%A7%A3%E6%9E%90/#wenet_4","text":"\u9996\u5148\u591a\u673a\u5206\u5e03\u5f0f\u8bad\u7ec3\u901a\u5e38\u9700\u8981\u5206\u5e03\u5f0f\u5b58\u50a8\u7cfb\u7edf\u7684\u652f\u6301\uff0c\u5982S3\u3001HDFS\u548cNFS\u3002\u7531\u4e8ePyTorch\u5b98\u65b9\u672a\u50cfTensorFlow\u4e00\u6837\u63d0\u4f9bS3\u548cHDFS\u7684\u63a5\u53e3\uff0c\u56e0\u6b64\u53ef\u4ee5\u4f7f\u7528NFS\u4f5c\u4e3a\u5206\u5e03\u5f0f\u5b58\u50a8\u3002WeNet\u9996\u5148\u8fdb\u884c\u8fdb\u7a0b\u521d\u59cb\u5316\uff0c\u7528\u4e8e\u5b8c\u6210\u5404\u8fdb\u7a0b\u63e1\u624b\u7684 init_process_group() \u51fd\u6570\uff0c\u9700\u8981\u4f20\u9012\u7684\u53d8\u91cf\u6709backend\uff0cinit_method\uff0cworld_size\u548crank\u7b49\u3002\u6ce8\u610f\uff1a\u5728\u4f7f\u7528\u591a\u673a\u591a\u5361\u8bad\u7ec3\u65f6\uff0c \u5148\u542f\u52a8\u7684\u673a\u5668\u8282\u70b9\u4e0a\u7684\u8fdb\u7a0b\u4f1a\u5728\u6b64\u7b49\u5f85\uff0c\u76f4\u5230\u6240\u6709\u8fdb\u7a0b\u90fd\u6267\u884c\u5230\u8fd9\u91cc \uff0c\u6b64\u65f6\u603b\u7684\u8fdb\u7a0b\u6570\u4e0eworld_size\u76f8\u540c\uff0c\u624d\u4f1a\u7ee7\u7eed\u6267\u884c\u3002 \u6240\u4ee5\u5f53world_size\u503c\u548c\u5b9e\u9645\u7684\u603b\u8fdb\u7a0b\u6570\u4e0d\u4e00\u81f4\u65f6\uff0c\u4f1a\u4ea7\u751fBug\uff1a\u5148\u542f\u52a8\u7684\u8fdb\u7a0b\u4f1a\u4e00\u76f4\u7b49\u5f85\uff0c\u76f4\u81f3\u8d85\u65f6\u9000\u51fa \u3002 1 2 3 4 5 6 7 8 9 10 11 # wenet/bin/train.py dist . init_process_group ( args . dist_backend , init_method = args . init_method , world_size = args . world_size , rank = args . rank ) ... train_data_loader = DataLoader ( train_dataset , batch_size = None , pin_memory = args . pin_memory , num_workers = args . num_workers , prefetch_factor = args . prefetch ) \u4e4b\u540e\u901a\u8fc7DistributedDataParall\u5c06\u6a21\u578b\u7684\u72b6\u6001\u4fe1\u606f\u4ecemaster\u8fdb\u7a0b\u8282\u70b9\u4f20\u5230\u5176\u4ed6\u8fdb\u7a0b\u8282\u70b9\uff0c\u4f7f\u6240\u6709\u8fdb\u7a0b\u4e0a\u7684\u6a21\u578b\u72b6\u6001\u4e00\u81f4\u3002 1 2 3 4 5 # wenet/bin/train.py # cuda model is required for nn.parallel.DistributedDataParallel model . cuda () model = torch . nn . parallel . DistributedDataParallel ( model , find_unused_parameters = True ) \u4e4b\u540e\u7684\u6d41\u7a0b\u4fbf\u548c\u6b63\u5e38\u7684\u8bad\u7ec3\u4e00\u81f4\uff0c\u4f46\u662f\u9700\u8981\u989d\u5916\u6ce8\u610f\uff0c\u5373 Gradient Accumulation \u68af\u5ea6\u7d2f\u79ef\u673a\u5236\uff0c\u8fd9\u4e2a\u673a\u5236\u6307\u6bcf\u9694\u82e5\u5e72\u4e2abatch step\u8fdb\u884c\u4e00\u6b21\u53c2\u6570\u7684\u66f4\u65b0\uff0c\u4ece\u800c\u53ef\u4ee5\u53bb\u6a21\u62df\u66f4\u5927\u7684batch size\uff0c\u4f7f\u8bad\u7ec3\u66f4\u52a0\u7a33\u5b9a\u3002\u5177\u4f53\u5b9e\u73b0\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 # wenet/utils/executors.py loss , loss_att , loss_ctc = model ( feats , feats_lengths , target , target_lengths ) ... loss . backward () ... if batch_idx % accum_grad == 0 : if rank == 0 and writer is not None : writer . add_scalar ( 'train_loss' , loss , self . step ) # Use mixed precision training if use_amp : scaler . unscale_ ( optimizer ) grad_norm = clip_grad_norm_ ( model . parameters (), clip ) # Must invoke scaler.update() if unscale_() is used in # the iteration to avoid the following error: # RuntimeError: unscale_() has already been called # on this optimizer since the last update(). # We don't check grad here since that if the gradient # has inf/nan values, scaler.step will skip # optimizer.step(). scaler . step ( optimizer ) scaler . update () else : grad_norm = clip_grad_norm_ ( model . parameters (), clip ) if torch . isfinite ( grad_norm ): optimizer . step () optimizer . zero_grad () scheduler . step () self . step += 1 \u4f46\u662f\u5982\u4e0a\u7684\u5b9e\u73b0\u5b58\u5728\u4e00\u4e2a\u6027\u80fd\u95ee\u9898\u3002\u5982\u4e0a\u6587\u6240\u8ff0\uff0c\u68af\u5ea6\u7684AllReduce\u64cd\u4f5c\u662f\u5728 backward() \u65f6\u8fdb\u884c\uff0c\u56e0\u6b64 \u6bcf\u4e2abatch step\u90fd\u4f1a\u8fdb\u884c\u5404GPU\u8fdb\u7a0b\u4e4b\u95f4\u68af\u5ea6\u540c\u6b65\u7684\u64cd\u4f5c \u3002\u7531\u4e8eGradient Accumulation\u4e2d\u6bcfn\u4e2astep\u624d\u66f4\u65b0\u4e00\u6b21\u7f51\u7edc\u53c2\u6570\uff0c\u56e0\u6b64\u5176\u4e2dn-1\u6b21 backward() \u65f6\u8fdb\u884c\u7684\u68af\u5ea6\u540c\u6b65\u7ed3\u679c\u4e0d\u4f1a\u88ab\u4f7f\u7528\u3002\u800c\u8fd9\u4e9b\u65e0\u7528\u7684\u68af\u5ea6\u540c\u6b65\u4f1a\u589e\u52a0\u5206\u5e03\u5f0f\u591a\u673a\u591a\u5361\u8bad\u7ec3\u65f6\u5404\u673a\u5668\u8282\u70b9\u7684\u7f51\u7edc\u5e26\u5bbd\u538b\u529b\u3002PyTorch\u6700\u65b0\u7684\u7248\u672c\u4e2d\u652f\u6301\u7684no_sync()\u4e0a\u4e0b\u6587\u7ba1\u7406\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 # wenet/utils/executors.py # Disable gradient synchronizations across DDP processes. # Within this context, gradients will be accumulated on module # variables, which will later be synchronized. if is_distributed and batch_idx % accum_grad != 0 : context = model . no_sync # Used for single gpu training and DDP gradient synchronization # processes. else : context = nullcontext # \u5982\u679c\u5728model.no_sync()\u4e0a\u4e0b\u6587\u4e2d\uff0c\u4e0d\u4f1a\u540c\u6b65\u5404\u4e2a\u8282\u70b9\u95f4\u7684\u68af\u5ea6 with context (): # autocast context # The more details about amp can be found in # https://pytorch.org/docs/stable/notes/amp_examples.html with torch . cuda . amp . autocast ( scaler is not None ): loss , loss_att , loss_ctc = model ( feats , feats_lengths , target , target_lengths ) loss = loss / accum_grad if use_amp : scaler . scale ( loss ) . backward () else : loss . backward () \u7d2f\u8ba1\u68af\u5ea6\u65f6\u4f7f\u7528no_sync\u4e0a\u4e0b\u6587\uff0c\u8fd9\u65f6 backward() \u5c06\u4e0d\u518d\u8fdb\u884c\u68af\u5ea6\u7684\u540c\u6b65\u3002","title":"WeNet\u5206\u5e03\u5f0f\u591a\u673a\u8bad\u7ec3\u5b9e\u73b0"},{"location":"asr/wenet%E6%80%BB%E4%BD%93%E8%A7%A3%E6%9E%90/#wenet_5","text":"\u9996\u5148\u9700\u8981\u786e\u5b9a\u603b\u5171\u4f7f\u7528\u7684\u673a\u5668\u6570num_nodes\uff0c\u5982\u679c\u662f\u5355\u673a\u8bad\u7ec3\uff0c\u5219\u8bbe\u7f6enum_nodes=1\uff0cnode_rank=0\u5373\u53ef\u3002\u5982\u679c\u4f7f\u7528\u591a\u673a\u8bad\u7ec3\u6a21\u5f0f\uff0c\u5219\u9700\u8981\u5148\u6307\u5b9a\u673a\u5668\u8282\u70b9\u7684\u6570\u91cfnum_nodes\uff0c\u7136\u540e \u5728\u6bcf\u4e2a\u673a\u5668\u8282\u70b9\u542f\u52a8\u811a\u672c\u4e2d\u6307\u5b9a\u8be5\u8282\u70b9\u7684node_rank \u3002\u4f8b\u5982\u4e00\u5171\u4f7f\u7528\u4e86\u4e24\u53f0\u673a\u5668\uff0c\u5219\u8bbe\u7f6enum_nodes=2\uff0c\u9996\u5148\u5728\u7b2c\u4e00\u4e2a\u8282\u70b9\u542f\u52a8 run.sh \u811a\u672c\u5e76\u8bbe\u7f6enode_rank=0\uff0c\u5176\u6b21\u5728\u7b2c\u4e8c\u4e2a\u8282\u70b9\u542f\u52a8 run.sh \u811a\u672c\u5e76\u8bbe\u7f6enode_rank=1\u3002 1 2 3 4 5 6 7 8 9 # wenet/examples/aishell/s0/run.sh # The num of machines(nodes) for multi-machine training, 1 is for one machine. # NFS is required if num_nodes > 1. num_nodes = 1 # The rank of each node or machine, which ranges from 0 to `num_nodes - 1`. # You should set the node_rank=0 on the first machine, set the node_rank=1 # on the second machine, and so on. node_rank = 0 \u6bcf\u53f0\u673a\u5668\u5728\u542f\u52a8 run.sh \u811a\u672c\u540e\uff0c\u5c06\u4f1a\u5728\u5176\u6240\u5728\u7684\u4e3b\u673a\u4e0a\u542f\u52a8\u5305\u542b\u7684GPU\u6570\u91cf\u76f8\u540c\u7684\u8fdb\u7a0b\uff0c\u5e76\u8ba1\u7b97\u5404GPU\u6216\u8fdb\u7a0b\u7684rank\uff0c\u4ece\u800c\u5b8c\u6210\u591a\u673a\u591a\u5361\u7684\u5206\u5e03\u5f0f\u8bad\u7ec3\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 # wenet/examples/aishell/s0/run.sh num_gpus = $( echo $CUDA_VISIBLE_DEVICES | awk -F \",\" '{print NF}' ) ... # train.py rewrite $train_config to $dir/train.yaml with model input # and output dimension, and $dir/train.yaml will be used for inference # and export. for (( i = 0 ; i < $num_gpus ; ++i )) ; do { gpu_id = $( echo $CUDA_VISIBLE_DEVICES | cut -d ',' -f$ [ $i +1 ] ) # Rank of each gpu/process used for knowing whether it is # the master of a worker. rank = ` expr $node_rank \\* $num_gpus + $i ` python wenet/bin/train.py --gpu $gpu_id \\ --config $train_config \\ --data_type $data_type \\ --symbol_table $dict \\ --train_data data/ $train_set /data.list \\ --cv_data data/dev/data.list \\ ${ checkpoint :+--checkpoint $checkpoint } \\ --model_dir $dir \\ --ddp.init_method $init_method \\ --ddp.world_size $world_size \\ --ddp.rank $rank \\ --ddp.dist_backend $dist_backend \\ --num_workers 1 \\ $cmvn_opts \\ --pin_memory } & done wait","title":"WeNet\u5206\u5e03\u5f0f\u4f7f\u7528\u5b9e\u8df5"},{"location":"asr/wenet%E6%80%BB%E4%BD%93%E8%A7%A3%E6%9E%90/#wenet_6","text":"Reference\uff1a WeNet\u66f4\u65b0\uff1a\u652f\u6301\u591a\u673a\u5e76\u884c\u8bad\u7ec3","title":"WeNet\u5b9e\u9a8c\u7ed3\u679c"},{"location":"asr/wenet%E6%80%BB%E4%BD%93%E8%A7%A3%E6%9E%90/#no_sync","text":"\u901a\u8fc7\u76d1\u63a7\u5404\u8282\u70b9\u7684\u7f51\u7edc\u6d41\u91cf\u60c5\u51b5\u6765\u9a8c\u8bc1no_sync\u4e0a\u4e0b\u6587\u662f\u5426\u751f\u6548\u3002\u5982\u4e0b\u662f\u91c7\u7528\u7d2f\u8ba1\u68af\u5ea6\u4e3a4\uff0c\u540c\u4e00\u673a\u5668\u8282\u70b9\u4e0a\u7f51\u5361\u7684\u6d41\u91cf\u60c5\u51b5\u3002\u5de6\u4fa7\u4e3a\u672a\u4f7f\u7528no_sync\u4e0a\u4e0b\u6587\uff0c\u53f3\u56fe\u4e3a\u4f7f\u7528\u4e86no_sync\u4e0a\u4e0b\u6587\u3002 \u53ef\u4ee5\u770b\u5230\uff0cno_sync\u4e0a\u4e0b\u6587\u6781\u5927\u7684\u964d\u4f4e\u4e86\u7f51\u7edc\u6d41\u91cf\uff0c\u51cf\u5c0f\u4e86\u5bf9\u7f51\u7edc\u5e26\u5bbd\u7684\u9700\u6c42\u538b\u529b\u3002","title":"no_sync\u4e0a\u4e0b\u6587"},{"location":"asr/wenet%E6%80%BB%E4%BD%93%E8%A7%A3%E6%9E%90/#_12","text":"\u5982\u4e0a\u6240\u8ff0\uff0c\u867d\u7136DDP\u91c7\u7528\u7684AllReduce\u7684\u68af\u5ea6\u540c\u6b65\u65b9\u6848\uff0c\u5404GPU\u901a\u4fe1\u65f6\u5904\u4e8e\u5e73\u7b49\u7684\u72b6\u6001\uff0c\u5e73\u8861\u4e86\u5404\u8282\u70b9\u7684\u901a\u4fe1\u6d41\u91cf\uff0c\u4f46\u662f DDP\u4ecd\u7136\u9700\u8981\u8f83\u597d\u7684\u7f51\u7edc\u5e26\u5bbd\uff0c\u624d\u80fd\u8fbe\u5230\u66f4\u597d\u7684\u591a\u673a\u7ebf\u6027\u52a0\u901f \uff0c\u5404\u673a\u5668\u8282\u70b9\u4e4b\u95f4\u901a\u4fe1\u7684\u7f51\u7edc\u5e26\u5bbd\u4f1a\u6210\u4e3a\u7cfb\u7edf\u7684\u74f6\u9888\u3002\u5f53\u7f51\u7edc\u5e26\u5bbd\u8fc7\u5c0f\u65f6\uff0c\u5728\u8fdb\u884c\u68af\u5ea6\u540c\u6b65\u65f6\uff0c\u7531\u4e8e\u5e26\u5bbd\u8fc7\u5c0f\u4f1a\u5bfc\u81f4\u5ef6\u8fdf\u5927\uff0c\u68af\u5ea6\u540c\u6b65\u901a\u4fe1\u65f6\u51fa\u73b0\u7b49\u5f85\u7684\u73b0\u8c61\u3002\u4e0b\u8868\u8bb0\u5f55\u4e86WeNet\u4f7f\u7528\u4e86\u4e24\u53f0\u673a\u5668\u4e00\u517116\u5757GPU\uff0c\u7d2f\u8ba1\u68af\u5ea6\u4e3a4\u7684\u60c5\u51b5\u4e0b\u7f51\u7edc\u5e26\u5bbd\u5bf9\u8bad\u7ec3\u901f\u5ea6\u7684\u5f71\u54cd\uff0c\u4f7f\u7528\u7684\u8bed\u6599\u4e3aAISHELL-1\u3002 \u8bad\u7ec3\u914d\u7f6e \u6bcf\u4e2aepoch\u8bad\u7ec3\u65f6\u95f4 \u5355\u673a8\u5757GPU\u8bad\u7ec3 6\u520650\u79d2 \u591a\u673a16\u5757GPU&\u5343\u5146\u7f51\u5361 22\u5206 \u591a\u673a16\u5757GPU&\u4e07\u5146\u7f51\u5361 3\u520648\u79d2 \u53ef\u4ee5\u770b\u5230 \u5f53\u4f7f\u7528\u5343\u5146\u7f51\u65f6\uff0c\u4e24\u53f0\u673a\u566816\u5361\u8bad\u7ec3\u7684\u901f\u5ea6\u751a\u81f3\u6bd4\u5355\u673a8\u5361\u8fd8\u8981\u6162\u5f88\u591a \uff0c\u6539\u6210\u4e07\u5146\u7f51\u5361\u4e4b\u540e\u4fbf\u53ef\u5f97\u5230\u4e0d\u9519\u7684\u52a0\u901f\u3002\u7531\u6b64\u53ef\u89c1\uff0c DDP\u4e5f\u9700\u8981\u8f83\u597d\u7684\u7f51\u7edc\u5e26\u5bbd\u7684\u652f\u6301\uff0c\u9632\u6b62\u5728\u505a\u68af\u5ea6\u66f4\u65b0\u65f6\uff0c\u7f51\u5361\u7684\u5e26\u5bbd\u6210\u4e3a\u7cfb\u7edf\u7684\u74f6\u9888 \u3002","title":"\u7f51\u7edc\u5e26\u5bbd\u5bf9\u591a\u673a\u8bad\u7ec3\u52a0\u901f\u6bd4\u7684\u5f71\u54cd"},{"location":"asr/wenet%E6%80%BB%E4%BD%93%E8%A7%A3%E6%9E%90/#no_sync_1","text":"\u4e0a\u4e0b\u6587\u5bf9\u6bcf\u4e2aepoch\u7684\u8bad\u7ec3\u65f6\u95f4\u5f71\u54cd\u5982\u4e0b\u3002 \u8bad\u7ec3\u914d\u7f6e no_sync\u4e0a\u4e0b\u6587 \u6bcf\u4e2aepoch\u8bad\u7ec3\u65f6\u95f4 \u5355\u673a8\u5757GPU\u8bad\u7ec3 \u91c7\u7528 6\u520650\u79d2 \u591a\u673a16\u5757GPU&\u5343\u5146\u7f51\u5361 \u4e0d\u91c7\u7528 22\u5206 \u591a\u673a16\u5757GPU&\u5343\u5146\u7f51\u5361 \u91c7\u7528 8\u520610\u79d2 \u591a\u673a16\u5757GPU&\u4e07\u5146\u7f51\u5361 \u4e0d\u91c7\u7528 3\u520648\u79d2 \u591a\u673a16\u5757GPU&\u4e07\u5146\u7f51\u5361 \u91c7\u7528 3\u520635\u79d2 \u901a\u8fc7\u5bf9\u6bd4\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u4e0d\u7ba1\u662f\u5343\u5146\u7f51\u8fd8\u662f\u4e07\u5146\u7f51\uff0c\u4f7f\u7528no_sync\u4e0a\u4e0b\u6587\u90fd\u6bd4\u672a\u4f7f\u7528no_sync\u4e0a\u4e0b\u6587\u66f4\u5feb\u4e86\u4e9b\u3002 \u4e07\u5146\u7f51\u5361+\u68af\u5ea6no_sync\u4e0a\u4e0b\u6587\u540e\u51e0\u4e4e\u63a5\u8fd1\u8f83\u4e3a\u5b8c\u7f8e\u7684\u7ebf\u6027\u52a0\u901f\u6bd4 \uff0c\u5e76\u4e14\u4ece\u6570\u636e\u4e0a\u770b\uff0c\u4e07\u5146\u7f51\u5361\u662f\u51b3\u5b9a\u6027\u56e0\u7d20\u3002","title":"no_sync\u4e0a\u4e0b\u6587\u7684\u5f71\u54cd"},{"location":"asr/wenet%E6%80%BB%E4%BD%93%E8%A7%A3%E6%9E%90/#_13","text":"\u5355\u673a\u8bad\u7ec3\u4e0e\u591a\u673a\u8bad\u7ec3\u6700\u7ec8\u6a21\u578b\u7684CER\u7684\u5bf9\u6bd4\u5982\u4e0b\u3002 \u89e3\u7801\u65b9\u5f0f \u5355\u673a4\u5361 \u591a\u673a16\u5361 attention decoder 5.18 4.90 ctc greedy search 4.94 5.07 ctc prefix beam serach 4.94 5.06 attention rescoring 4.61 4.65 \u901a\u8fc7\u5bf9\u6bd4\u53ef\u4ee5\u770b\u5230\uff0c \u591a\u673a\u8bad\u7ec3\u7684\u8bc6\u522b\u6027\u80fd\u4e0e\u5355\u673a\u8bad\u7ec3\u7684\u8bc6\u522b\u6027\u80fd\u57fa\u672c\u4e00\u81f4 \u3002\u5728\u6a21\u578b\u6548\u679c\u51e0\u4e4e\u4e0d\u53d8\u7684\u60c5\u51b5\u4e0b\uff0cWeNet\u591a\u673a\u8bad\u7ec3\u8fd1\u4e4e\u8fbe\u5230\u4e86\u5b8c\u7f8e\u7684\u7ebf\u6027\u52a0\u901f\u3002\u53c2\u89c1wenet/examples/aishell/s0/README.md","title":"\u591a\u673a\u591a\u5361\u7684\u6a21\u578b\u6548\u679c\u5bf9\u6bd4"},{"location":"asr/wenet%E6%80%BB%E4%BD%93%E8%A7%A3%E6%9E%90/#nfs","text":"NFS\u662f\u4e00\u79cd\u4fbf\u4e8e\u6570\u636e\u5171\u4eab\u7684\u670d\u52a1\uff0c\u4f46\u5e76\u4e0d\u9002\u7528\u4e8e\u591a\u673a\u5206\u5e03\u5f0f\u9ad8\u6027\u80fd\u8ba1\u7b97\u3002\u6700\u4e3b\u8981\u7684\u539f\u56e0\u662f\u5728\u8fdb\u884c\u591a\u673a\u8bad\u7ec3\u65f6\uff0c\u4ececlient\u8282\u70b9\u4f1a\u4e0d\u65ad\u7684\u8bbf\u95ee\u5b58\u653e\u6570\u636e\u7684server\u8282\u70b9\uff0c\u6b64\u65f6 server\u8282\u70b9\u7684\u7f51\u7edc\u548c\u78c1\u76d8\u5e26\u5bbd\u4f1a\u6210\u4e3a\u7cfb\u7edf\u7684\u74f6\u9888 \u3002\u8fd9\u91cc\u6709\u4e00\u4e2a\u5c0ftrick\u53ef\u4ee5\u7f13\u89e3\u8fd9\u4e2a\u95ee\u9898\uff1a \u5c31\u662f\u5c06\u8981\u8bbf\u95ee\u7684\u6570\u636e\u7684\u5b58\u50a8\u5206\u6563\u81f3\u591a\u4e2aserver\u8282\u70b9\u4e0a \uff0c\u8fd9\u6837\u540c\u4e00\u65f6\u523b\uff0c\u6240\u6709\u8fdb\u7a0b\u60f3\u8981\u8bbf\u95ee\u7684\u6570\u636e\u4f1a\u5411\u4e0d\u540c\u7684NFS\u7684server\u8282\u70b9\u8bbf\u95ee\uff0c\u8fd9\u6837\u6781\u5927\u7684\u51cf\u5c0f\u4e86\u5355\u4e00server\u8282\u70b9\u65f6\u7684\u7f51\u7edc\u548c\u78c1\u76d8\u5e26\u5bbd\u95ee\u9898\u3002","title":"\u57fa\u4e8eNFS\u591a\u673a\u8bad\u7ec3"},{"location":"asr/wenet%E6%80%BB%E4%BD%93%E8%A7%A3%E6%9E%90/#_14","text":"\u4e07\u5146\u7f51\u5361\uff0c\u662f\u4fdd\u8bc1\u591a\u673a\u8bad\u7ec3\u7ebf\u6027\u52a0\u901f\u7684\u5173\u952e\u3002 no_sync\u4e0eacc_grad\u7684\u4f7f\u7528\u53ef\u4ee5\u6781\u5927\u964d\u4f4e\u591a\u673a\u8bad\u7ec3\u65f6\u7684\u6d41\u91cf\uff0c\u51cf\u5c0f\u7cfb\u7edf\u5bf9\u5e26\u5bbd\u7684\u9700\u6c42\uff0c\u53ef\u4ee5\u5f97\u5230\u66f4\u597d\u7684\u52a0\u901f\u6bd4\u3002 \u57fa\u4e8eNFS\u7684\u591a\u673a\u5b58\u50a8\u65b9\u6848\uff0cserver\u70b9\u7684\u5e26\u5bbd\u4f1a\u6210\u4e3a\u7cfb\u7edf\u74f6\u9888\uff0c\u4e3a\u6b64\u53ef\u4ee5\u5c06\u6587\u4ef6\u5206\u6563\u81f3\u4e0d\u540c\u8282\u70b9\u4e0a\uff0c\u8d1f\u8f7d\u5747\u8861\u5404\u8282\u70b9\u7f51\u7edc\u6d41\u91cf\u3002 \u7f51\u7edc\u5e26\u5bbd\u5bf9\u4e8e\u5206\u5e03\u5f0f\u8bad\u7ec3\u6765\u8bf4\u81f3\u5173\u91cd\u8981 \u3002\u9664\u4e0a\u8ff0\u7684\u65b9\u6cd5\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528amp\u6216apex\u7b49\u8f6f\u4ef6\u5305\u63d0\u4f9b\u7684 \u6df7\u5408\u7cbe\u5ea6\u8bad\u7ec3 \uff0c\u8fd9\u6837\u5728\u68af\u5ea6\u540c\u6b65\u65f6\uff0c\u4f7f\u7528fp16\u6765\u8fdb\u884c\u540c\u6b65\uff0c\u76f8\u8f83\u4e8e\u73b0\u5728fp32\u53ef\u51cf\u5c11\u4e00\u500d\u7684\u7f51\u7edc\u6d41\u91cf\u3002","title":"\u603b\u7ed3"},{"location":"asr/wenet%E7%9A%84ctc_alignment/","text":"wenet\u7684ctc_alignment \u5f3a\u5236\u5bf9\u9f50 \u5f3a\u5236\u5bf9\u9f50\uff08Force alignment\uff09\u5728\u8bed\u97f3\u8bc6\u522b\u3001\u8bed\u97f3\u5408\u6210\u7b49\u4efb\u52a1\u4e2d\u5e94\u7528\u5e7f\u6cdb\uff0c\u540c\u65f6\u4e5f\u662f\u5b57\u5e55\u65f6\u95f4\u8f74\u3001\u53e3\u8bed\u8bc4\u6d4b\u7b49\u4efb\u52a1\u7684\u6838\u5fc3\u7b97\u6cd5\u3002\u5f3a\u5236\u5bf9\u9f50\u548c\u8bed\u97f3\u8bc6\u522b\u90fd\u9700\u8981\u4e00\u4e2a\u5df2\u7ecf\u8bad\u7ec3\u597d\u7684\u58f0\u5b66\u6a21\u578b\u548c\u8f93\u5165\u8bed\u97f3\uff0c\u800c\u5f3a\u5236\u5bf9\u9f50\u8fd8\u9700\u8981\u8bed\u97f3\u5bf9\u5e94\u7684\u6b63\u786e\u6807\u6ce8\u6587\u672c\u3002\u5f3a\u5236\u5bf9\u9f50\u4ec5\u8f93\u51fa\u8bed\u97f3\u5e27\u548c\u6587\u672c\u4e4b\u95f4\u7684\u5bf9\u5e94\u5173\u7cfb\uff0c\u6bd4\u5982\u8bed\u97f3\u67099\u5e27\uff0c\u5bf9\u5e94\u7684\u6b63\u786e\u6807\u6ce8\u6587\u672c\u4e3a\u201ccat\u201d\uff0c\u5219\u5f3a\u5236\u5bf9\u9f50\u7684\u4e00\u4e2a\u53ef\u80fd\u8f93\u51fa\u4e3a [c,c,c,blank,a,a,t,t,blank] \u3002 WeNet\u7531\u4e8e\u4f7f\u7528\u4e86Joint CTC&AED\u7ed3\u679c\uff0c\u56e0\u6b64\u53ef\u4ee5\u5229\u7528CTC\u89e3\u7801\u5668\u6765\u5b8c\u6210\u5f3a\u5236\u5bf9\u9f50\u3002\u5f3a\u5236\u5bf9\u9f50\u7684\u5355\u5143\u4e0e\u58f0\u5b66\u6a21\u578b\u7684\u5efa\u6a21\u5355\u5143\u6709\u5173\uff0c\u6bd4\u5982WeNet\u4e2d\u6587\u6a21\u578b\u4e2d\u91c7\u7528\u4e86\u5b57\u7ea7\u522b\u7684\u5efa\u6a21\uff0c\u56e0\u6b64\u5f3a\u5236\u5bf9\u9f50\u4e5f\u662f\u5f97\u5230\u5b57\u7ea7\u522b\u7684\u5bf9\u9f50\u7ed3\u679c\uff0c\u800c\u5982\u679c\u9700\u8981\u97f3\u7d20\u7ea7\u522b\u7684\u5f3a\u5236\u5bf9\u9f50\u529f\u80fd\uff0c\u5219\u9700\u8981\u53e6\u5916\u8bad\u7ec3\u4e00\u4e2a\u97f3\u7d20\u7ea7\u522b\u7684\u6a21\u578b\u3002 \u5bf9\u9f50 \u8bed\u97f3\u8bc6\u522b\u662f\u9700\u8981\u5c06\u97f3\u9891\u5e8f\u5217\u8f6c\u6362\u5230\u6587\u672c\u5e8f\u5217\uff0c\u800c\u97f3\u9891\u5e8f\u5217\u957f\u5ea6\u4e00\u822c\u5927\u4e8e\u6587\u672c\u5e8f\u5217\u957f\u5ea6\uff0c\u5982\u679c\u80fd\u77e5\u9053\u6bcf\u4e00\u5e27\u97f3\u9891\u5bf9\u5e94\u7684\u6587\u672c\uff0c\u5c31\u53ef\u4ee5\u5c06\u8bed\u97f3\u8bc6\u522b\u8f6c\u6362\u4e3a\u97f3\u9891\u5e27\u7ea7\u522b\u4e0a\u7684\u5206\u7c7b\u4efb\u52a1\u3002\u4e3a\u4e86\u5f97\u5230\u8fd9\u79cd\u5bf9\u5e94\u5173\u7cfb\uff0c\u5e38\u5e38\u9700\u8981\u5bf9\u6587\u672c\u5e8f\u5217\u8fdb\u884c\u6269\u5c55\u3002\u5bf9\u8fd9\u7c7b\u5e8f\u5217\u5efa\u6a21\u4efb\u52a1\u7684\u6269\u5c55\u65b9\u6cd5\u5305\u62ec\uff1a\u5bf9\u8f93\u5165\u5e8f\u5217\u7684\u5355\u5143\u8fdb\u884c\u590d\u5236\uff0c\u4ee5\u53ca\u63d2\u5165\u5360\u4f4d\u7b26blank\u4e24\u79cd\u65b9\u6cd5\u3002HMM\u91c7\u7528\u4e86\u590d\u5236\u7684\u65b9\u5f0f\uff0cCTC\u4e24\u8005\u540c\u65f6\u4f7f\u7528\uff0cRNN-T\u5219\u53ea\u4f7f\u7528\u63d2\u5165\u5360\u4f4d\u7b26blank\u7684\u65b9\u6cd5\uff0c\u5982\u56fe\u6240\u793a\u3002 \u5728\u4f7f\u7528CTC\u76ee\u6807\u8bad\u7ec3\u65f6\uff0c\u672c\u8d28\u662f\u8003\u8651\u6240\u6709\u53ef\u80fd\u7684CTC\u5bf9\u9f50\uff0c\u5e76\u628a\u6bcf\u4e00\u79cd\u5bf9\u9f50\u60c5\u51b5\u4e0b\u7684\u5206\u7c7b\u635f\u5931\u52a0\u8d77\u6765\u4f5c\u4e3a\u76ee\u6807\u51fd\u6570\u3002\u5728\u5b9e\u9645\u5b9e\u73b0\u65f6\uff0c\u5e76\u4e0d\u4f1a\u771f\u7684\u7a77\u4e3e\u6240\u6709\u5bf9\u9f50\uff0c\u800c\u662f\u5229\u7528\u4e00\u79cd\u9ad8\u6548\u7b97\u6cd5\u8fdb\u884c\u8ba1\u7b97\u3002 \u5bf9\u4e8e\u5bf9\u9f50\u4efb\u52a1\u6765\u8bf4\uff0c\u76ee\u6807\u662f\u627e\u5230\u4e00\u6761\u6982\u7387\u6700\u5927\u7684CTC\u5bf9\u9f50\uff0c\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u4f7f\u7528\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u5bf9\u6240\u6709\u53ef\u80fd\u7684\u5bf9\u9f50\u8def\u5f84\u8fdb\u884c\u6253\u5206\uff0c\u9009\u62e9\u4e00\u6761\u6982\u7387\u6700\u9ad8\u7684CTC\u5bf9\u9f50\u8def\u5f84\u5373\u53ef\u3002\u4f46\u662f\u8fd9\u79cd\u7a77\u4e3e\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u6307\u6570\u7ea7\u522b\u7684\uff0c\u6b64\u65f6\u53ef\u4ee5\u4f7f\u7528\u7ef4\u7279\u6bd4\u7b97\u6cd5\u964d\u4f4e\u5bfb\u627e\u6700\u4f18\u8def\u5f84\u7684\u590d\u6742\u5ea6\u3002 \u7ef4\u7279\u6bd4\u7b97\u6cd5 \u5982\u4e0a\u56fe\u6240\u793a\uff0c\u5047\u5982\u8fb9\u4e0a\u6709\u503c\u8868\u793a\u957f\u5ea6\uff0c\u9700\u8981\u4eceS\u548cE\u4e4b\u95f4\u5bfb\u627e\u4e00\u6761\u6700\u77ed\u7684\u8def\u5f84\uff0c\u9664\u4e86\u7a77\u4e3e\u4e4b\u5916\uff0c\u66f4\u597d\u7684\u65b9\u6cd5\u662f\uff0c\u5229\u7528\u7ef4\u7279\u6bd4\uff08Viterbi\uff09\u7b97\u6cd5\u641c\u7d22\u6700\u4f18\u8def\u5f84\u3002 \u4e3a\u4e86\u5bfb\u627eS\u5230E\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5f84\uff0c\u53ef\u4ee5\u4ece\u5de6\u5411\u53f3\u4e00\u5217\u4e00\u5217\u63a8\u7b97\uff0c\u8d77\u70b9\u662fS\uff0c\u4eceS\u5230A\u5217\u7684\u8def\u5f84\u67093\u6761\uff1aS->A1\u3001S->A2\u3001S->A3\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002 \u81f3\u76ee\u524d\u4e3a\u6b62S->A1\u3001S->A2\u3001S->A3\u4e2d\u7684\u4efb\u4f55\u4e00\u6bb5\u5747\u53ef\u80fd\u662f\u5168\u5c40\u6700\u77ed\u8def\u5f84\u7684\u4e00\u90e8\u5206\u3002\u7ee7\u7eed\u5411\u53f3\u5230B\u5217\uff0c\u9996\u5148\u5206\u6790B1\uff1a \u5982\u4e0a\u56fe\uff0c\u7ecf\u8fc7B1\u7684\u6240\u6709\u8def\u5f84\u53ea\u67093\u6761\uff1a S->A1->B1 S->A2->B1 S->A3->B1 \u4ee5\u4e0a3\u6761\u8def\u5f84\u4e2d\uff0c\u5404\u8282\u70b9\u8ddd\u79bb\u52a0\u8d77\u6765\u6bd4\u8f83\u4e00\u4e0b\uff0c\u5c31\u53ef\u4ee5\u77e5\u9053\u54ea\u4e00\u6761\u662f\u6700\u77ed\u8def\u5f84\uff0c\u5047\u8bbeS->A3->B1\u662f\u6700\u77ed\u8def\u5f84\uff0c\u90a3\u4e48 \u7ecf\u8fc7B1\u7684\u6240\u6709\u8def\u5f84\u4e2dS->A3->B1\u662f\u6700\u77ed\u7684\uff0c\u5176\u5b83\u4e24\u6761\u8def\u5f84\u90fd\u7edd\u5bf9\u4e0d\u662f\u76ee\u6807\u7b54\u6848\uff0c\u53ef\u4ee5\u5927\u80c6\u5220\u9664 \u3002\u5047\u5982\u5168\u5c40\u6700\u77ed\u8def\u5f84\u771f\u7684\u7ecf\u8fc7\u4e86B1\uff0c\u90a3\u4e48\u5168\u5c40\u6700\u77ed\u8def\u5f84\u4e0aB1\u4e4b\u524d\u4e00\u5b9a\u662fA3\uff0c\u800c\u7edd\u5bf9\u4e0d\u662fA1\u6216A2\uff0c\u5426\u5219\u5c31\u4e0e\u201c\u7ecf\u8fc7B1\u7684\u6240\u6709\u8def\u5f84\u4e2dS->A3->B1\u662f\u6700\u77ed\u7684\u201d\u76f8\u77db\u76fe\u3002\u53ca\u65f6\u5220\u9664\u4e0d\u53ef\u80fd\u7684\u7b54\u6848\u662f\u7ef4\u7279\u6bd4\u7b97\u6cd5\u7684\u91cd\u70b9\uff0c\u4e5f\u662f\u7ef4\u7279\u6bd4\u7b97\u6cd5\u80fd\u591f\u964d\u4f4e\u590d\u6742\u5ea6\u7684\u539f\u56e0\u3002\u6b64\u65f6\u7ecf\u8fc7B1\u7684\u6240\u6709\u5907\u9009\u8def\u5f84\u5c31\u53ea\u5269\u4e0b\u4e00\u6761\u8def\u5f84\u4e86\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u4ee5\u6b64\u7c7b\u63a8\uff0c\u7ecf\u8fc7B2\u3001B3\u7684\u6240\u6709\u5907\u9009\u8def\u5f84\u5404\u81ea\u4e5f\u53ea\u5269\u4e0b\u4e00\u6761\uff1a \u6b64\u65f6\uff0cS->A3->B1\u3001S->A1->B2\u3001S->A2->B3\u5747\u6709\u53ef\u80fd\u662f\u5168\u5c40\u6700\u77ed\u8def\u5f84\u7684\u4e00\u90e8\u5206\uff0c\u7ee7\u7eed\u5411\u540e\u8fed\u4ee3\uff0c\u7c7b\u4f3c\u4e8eB\u5217\uff0c\u7ecf\u8fc7C1\u8282\u70b9\u7684\u8def\u5f84\u6709\uff1a \u5047\u8bbe\u6b64\u65f6\u7ecf\u8fc7C1\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u662fS->A3->B1->C1\uff0c\u5219\u53ca\u65f6\u5c06\u5176\u4f59\u4e24\u6761\u8def\u5f84\u5220\u9664\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u4ee5\u6b64\u7c7b\u63a8\uff0c\u53ef\u6c42\u5f97\u7ecf\u8fc7C2\u3001C3\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\uff0c\u5982\u4e0b\u56fe\uff1a \u6b64\u65f6\u4ecd\u7136\u65e0\u6cd5\u786e\u5b9a\u54ea\u4e00\u6761\u662f\u5168\u5c40\u6700\u77ed\uff0c\u7ee7\u7eed\u5411\u540e\u8fed\u4ee3\uff0c\u5230\u8fbeE\u5217\uff0c\u5230\u8fbeE\u8282\u70b9\u7684\u8def\u5f84\u6b64\u65f6\u53ea\u67093\u6761\uff1a E\u8282\u70b9\u5df2\u662f\u7ec8\u70b9\uff0c\u6b64\u65f6\u6bd4\u8f83\u8fd93\u6761\u8def\u5f84\u5c31\u53ef\u4ee5\u77e5\u9053\u54ea\u4e00\u6761\u662f\u5168\u5c40\u6700\u77ed\u8def\u5f84\u4e86\uff0c\u5982\u4e0b\u56fe\uff1a \u76f8\u6bd4\u4e8e\u7a77\u4e3e\u6240\u6709\u8def\u5f84\uff0c\u7ef4\u7279\u6bd4\u7b97\u6cd5\u6bcf\u5230\u8fbe\u4e00\u4e2a\u6b65\u9aa4\u90fd\u53ca\u65f6\u5220\u9664\u4e0d\u53ef\u80fd\u7b54\u6848\uff0c\u4ece\u800c\u5927\u5927\u964d\u4f4e\u65f6\u95f4\u590d\u6742\u5ea6\u3002\u7ef4\u7279\u6bd4\u7b97\u6cd5\u53ef\u4ee5\u6982\u51b5\u4e3a\u4ee5\u4e0b\u4e09\u70b9\uff1a \u5982\u679c\u6700\u4f18\u8def\u5f84\u7ecf\u8fc7\u67d0\u70b9\uff0c\u5219\u4ece\u8d77\u70b9\u5230\u8be5\u70b9\u7684\u5b50\u8def\u5f84\u4e00\u5b9a\u662f\u4ece\u8d77\u70b9\u5230\u8be5\u70b9\u7684\u6240\u6709\u8def\u5f84\u4e2d\u6700\u4f18\u7684\u3002 \u5047\u8bbe\u7b2c \\(t\\) \u65f6\u523b\u6709 \\(k\\) \u4e2a\u72b6\u6001\u53ef\u4f9b\u9009\u62e9\uff0c\u4ece\u5f00\u59cb\u5230 \\(t\\) \u65f6\u523b\u7684 \\(k\\) \u4e2a\u72b6\u6001\u6709 \\(k\\) \u6761\u6700\u77ed\u8def\u5f84\uff0c\u800c\u6700\u7ec8\u7684\u6700\u77ed\u8def\u5f84\u5fc5\u7136\u7ecf\u8fc7\u5176\u4e2d\u4e00\u6761\u3002 \u6839\u636e\u4ee5\u4e0a\u6027\u8d28\uff0c\u5728\u8ba1\u7b97\u7b2c \\(t+1\\) \u65f6\u523b\u7684\u6700\u77ed\u8def\u5f84\u65f6\uff0c\u53ea\u9700\u8981\u8003\u8651\u4ece\u5f00\u59cb\u5230\u5f53\u524d\u7684 \\(k\\) \u4e2a\u72b6\u6001\u503c\u7684\u6700\u77ed\u8def\u5f84\u548c\u5f53\u524d\u72b6\u6001\u503c\u5230\u7b2c \\(t+1\\) \u65f6\u523b\u7684\u6700\u77ed\u8def\u5f84\u5373\u53ef\u3002\u5982\u6c42 \\(t=3\\) \u65f6\u7684\u6700\u77ed\u8def\u5f84\uff0c\u7b49\u4e8e\u6c42 \\(t=2\\) \u65f6\uff0c\u4ece\u8d77\u70b9\u5230\u5f53\u524d\u65f6\u523b\u7684\u6240\u6709\u72b6\u6001\u7ed3\u70b9\u7684\u6700\u77ed\u8def\u5f84\u52a0\u4e0a \\(t=2\\) \u5230 \\(t=3\\) \u7684\u5404\u8282\u70b9\u6700\u77ed\u8def\u5f84\u3002 \u7ef4\u7279\u6bd4\u7b97\u6cd5\u7528\u4e8e\u6c42\u89e3\u591a\u6b65\u9aa4\uff0c\u6bcf\u4e2a\u6b65\u9aa4\u591a\u9009\u62e9\u7684\u6700\u4f18\u9009\u62e9\u95ee\u9898\u3002\u5bf9\u4e8e\u6bcf\u4e00\u6b65\u7684\u6240\u6709\u53ef\u80fd\u9009\u62e9\uff0c\u7ef4\u7279\u6bd4\u7b97\u6cd5\u90fd\u4fdd\u5b58\u524d\u5e8f\u6b65\u9aa4\u5230\u5f53\u524d\u6b65\u9aa4\u7684\u82e5\u5e72\u6700\u4f18\u8def\u5f84\u4ee5\u53ca\u5f53\u524d\u4ee3\u4ef7\u4e0b\u524d\u4e00\u6b65\u9aa4\u4e0a\u7684\u9009\u62e9\uff0c\u4f9d\u6b21\u8ba1\u7b97\u5b8c\u6240\u6709\u6b65\u9aa4\u540e\uff0c\u901a\u8fc7\u56de\u6eaf\u4e0d\u65ad\u5bfb\u627e\u524d\u4e00\u6b65\u9aa4\u4e0a\u7684\u9009\u62e9\uff0c\u4ece\u800c\u627e\u5230\u5b8c\u6574\u7684\u6700\u4f18\u9009\u62e9\u8def\u5f84\u3002 CTC\u7ef4\u7279\u6bd4\u7b97\u6cd5 \u7531\u4e8eCTC\u5f15\u5165\u4e86\u5360\u4f4d\u7b26blank\uff0c\u56e0\u6b64\u76f8\u6bd4\u666e\u901a\u7684\u7ef4\u7279\u6bd4\u7b97\u6cd5\uff0cCTC\u7ef4\u7279\u6bd4\u7b97\u6cd5\u6c42\u89e3\u72b6\u6001\u8df3\u8f6c\u6709\u6240\u4e0d\u540c\u3002\u5b9a\u4e49 \u72b6\u6001 \u4e3a\u6a21\u578b\u5728\u6bcf\u4e2a\u65f6\u523b\u7684\u8f93\u51fatoken\uff0c\u6bd4\u5982blank\u6216\u6807\u6ce8\u5e8f\u5217\u4e2d\u7684\u5b57\u7b26\u3002 \u521d\u59cb\u5316 \u5728\u521d\u59cb\u5316\u4e2d\uff0c\u7531\u4e8eCTC\u5f15\u5165\u4e86blank\uff0c\u56e0\u6b64\u7b2c\u4e00\u65f6\u523b\u7684\u521d\u59cb\u72b6\u6001\u53ef\u80fd\u662fblank\uff0c\u4e5f\u53ef\u80fd\u662f\u6807\u6ce8\u5e8f\u5217\u7684\u7b2c\u4e00\u4e2atoken\u3002 \u9012\u63a8 \u6839\u636eCTC\u89c4\u5219\uff0c\u5df2\u77e5\u5f53\u524d \\(t\\) \u65f6\u523b\u7684\u72b6\u6001 \\(s\\) \uff0c\u63a8\u5bfc\u8be5\u72b6\u6001\u53ef\u4ee5\u7531\u4e0a\u4e00\u65f6\u523b\u7684\u54ea\u4e9b\u72b6\u6001\u8df3\u8f6c\u800c\u6765\u3002 \u89c4\u5219 \u5982\u679c \\(t\\) \u65f6\u523b\u7684\u72b6\u6001 \\(s\\) \u4e3ablank\uff0c\u5219\u72b6\u6001 \\(s\\) \u53ef\u7531 \\(t-1\\) \u65f6\u523b\u7684 \\(s\\) \u6216 \\(s-1\\) \uff08\u4e24\u4e2a\u53ef\u80fd\u72b6\u6001\uff09\u8df3\u8f6c\u800c\u6765\u3002 \u5982\u679c \\(t\\) \u65f6\u523b\u7684\u72b6\u6001 \\(s\\) \u4e3a\u975eblank\uff0c\u4e14\u72b6\u6001 \\(s\\) \u4e0e \\(s-2\\) \u4e0d\u540c\uff0c\u5219\u72b6\u6001 \\(s\\) \u53ef\u7531 \\(t-1\\) \u65f6\u523b\u7684 \\(s\\) \u6216 \\(s-1\\) \u6216 \\(s-2\\) \uff08\u4e09\u4e2a\u53ef\u80fd\u72b6\u6001\uff09\u8df3\u8f6c\u800c\u6765\u3002 \u5982\u679c \\(t\\) \u65f6\u523b\u7684\u72b6\u6001 \\(s\\) \u4e3a\u975eblank\uff0c\u4e14\u72b6\u6001 \\(s\\) \u4e0e \\(s-2\\) \u76f8\u540c\uff0c\u5219\u72b6\u6001 \\(s\\) \u53ef\u7531 \\(t-1\\) \u65f6\u523b\u7684 \\(s\\) \u6216 \\(s-1\\) \uff08\u4e24\u4e2a\u53ef\u80fd\u72b6\u6001\uff09\u8df3\u8f6c\u800c\u6765\uff0c\u800c\u4e0d\u53ef\u80fd\u7531 \\(s-2\\) \u8df3\u8f6c\u800c\u6765\uff0c\u56e0\u4e3a\u6b64\u65f6 \\(s\\) \u548c \\(s-2\\) \u76f8\u540c\uff0c\u5982\u679c\u7531 \\(s-2\\) \u8df3\u8f6c\u5230 \\(s\\) \uff0c\u6309\u7167CTC\u89c4\u5219\uff0c\u8fd9\u4e24\u4e2a\u72b6\u6001\u5e94\u8be5\u5408\u5e76\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u60c5\u51b53\u548c\u60c5\u51b51\u7684\u4e0a\u4e00\u65f6\u523b\u53ef\u80fd\u72b6\u6001\u76f8\u540c\uff0c\u56e0\u6b64\u4ee3\u7801\u4e2d\u53ef\u4ee5\u5408\u5e76\u3002 \u4e3e\u4f8b \u5047\u8bbeCTC\u5b57\u7b26\u4e32\u5982\u4e0b\uff1a <blank1> s <blank2> e1 <blank3> e2 <blank4> \u5176\u4e2d\uff0c <blank> \u8868\u793a\u82e5\u5e72\u4e2ablank\u5b57\u7b26\uff0c\u4e3a\u53d9\u8ff0\u65b9\u4fbf\u6570\u5b57\u540e\u7f00\u7528\u4e8e\u533a\u5206\u4e0d\u540c\u4f4d\u7f6e\uff0c e1/e2 \u5747\u8868\u793a e \uff0c\u6570\u5b57\u540e\u7f00\u540c\u6837\u7528\u4e8e\u533a\u5206\u4e0d\u540c\u4f4d\u7f6e\uff0c\u56e0\u6b64\u8be5CTC\u5b57\u7b26\u4e32\u5bf9\u5e94\u7684\u89c4\u6574\u4e32\u4e3a see \u3002 \u6839\u636eCTC\u89c4\u5219\uff1a <blank2> \u53ea\u53ef\u80fd\u4ece <blank2> \u6216\u8005 s \u8df3\u8f6c\u800c\u6765\u3002 e1 \u53ef\u80fd\u4ece e1 \u6216\u8005 <blank2> \u6216\u8005 s \u8df3\u8f6c\u800c\u6765\u3002 e2 \u53ea\u53ef\u80fd\u4ece e2 \u6216\u8005 <blank3> \u8df3\u8f6c\u800c\u6765\uff0c\u800c\u4e0d\u53ef\u80fd\u4ece e1 \u8df3\u8f6c\u800c\u6765\uff0c\u5426\u5219 e1 e2 \u6309\u7167CTC\u89c4\u5219\u6700\u540e\u5c06\u88ab\u5408\u5e76\u4e3a e1 \u3002 \u7ec8\u6b62 \u5728CTC\u7ef4\u7279\u6bd4\u7b97\u6cd5\u4e2d\uff0c\u7ec8\u6b62\u72b6\u6001\u53ef\u4ee5\u662fblank\uff0c\u4e5f\u53ef\u4ee5\u662f\u6807\u6ce8\u5e8f\u5217\u7684\u6700\u540e\u4e00\u4e2atoken\u3002\u6bd4\u8f83\u4e24\u4e2a\u7ec8\u6b62\u72b6\u6001\u7ec4\u6210\u7684\u8def\u5f84\uff0c\u53ef\u4ee5\u83b7\u5f97\u6700\u4f18\u8def\u5f84\u4e0a\u7684\u7ec8\u6b62\u72b6\u6001\u3002 HMM\u4e2d\u91c7\u7528\u7684\u7ef4\u7279\u6bd4\u7b97\u6cd5\u53ea\u80fd\u5c06\u6807\u6ce8\u5e8f\u5217\u7684\u6700\u540e\u4e00\u4e2atoken\u4f5c\u4e3a\u7ec8\u6b62\u72b6\u6001\u3002 \u6700\u4f18\u8def\u5f84\u56de\u6eaf \u5728\u6700\u4f18\u8def\u5f84\u4e0a\uff0c\u6bcf\u4e2a\u65f6\u523b\u7684\u72b6\u6001\u5747\u4fdd\u5b58\u5bf9\u5e94\u7684\u4e0a\u4e00\u65f6\u523b\u72b6\u6001\uff0c\u4ece\u800c\u80fd\u591f\u83b7\u5f97\u5b8c\u6574\u7684\u6700\u4f18\u9009\u62e9\u8def\u5f84\u3002 WeNet\u4e2dCTC alignment\u7684\u5b9e\u73b0 \u521d\u59cb\u5316 \u5411\u6807\u6ce8\u5e8f\u5217\u6bcf\u4e24\u4e2atoken\u4e4b\u95f4\u63d2\u5165blank\uff0c\u6bd4\u5982\u6807\u6ce8\u5e8f\u5217\u4e3a\u201cc a t\u201d\uff0c\u5219\u63d2\u5165blank\u4e4b\u540e\u4e3a\u201d\u03f5 c \u03f5 a \u03f5 t \u03f5\u201c\u3002 ctc_probs \u8868\u793aCTC\u89e3\u7801\u5668\u8f93\u51fa\u7684\u6982\u7387\u5206\u5e03\uff0c\u5927\u5c0f\u4e3a [vocab_size,] \u3002 log_alpha[t,s] \u8868\u793a \\(t\\) \u65f6\u523b\u8df3\u8f6c\u5230\u72b6\u6001 \\(s\\) \u6240\u6709\u53ef\u80fd\u8def\u5f84\u4e2d\u7684\u6700\u9ad8\u5206\u3002 state_path[t,s] \u8868\u793a \\(t\\) \u65f6\u523b\u72b6\u6001 \\(s\\) \u7531\u524d\u4e00\u65f6\u523b\u54ea\u4e2a\u72b6\u6001\u8df3\u8f6c\u800c\u6765\uff0c\u7531\u4e8e\u7ef4\u7279\u6bd4\u7b97\u6cd5\u6700\u540e\u7684\u56de\u6eaf\u3002 1 2 3 4 5 6 7 8 9 10 11 12 # wenet/wenet/utils/ctc_util.py # \u6807\u6ce8\u5e8f\u5217\u6bcf\u4e24\u4e2atoken\u4e4b\u95f4\u63d2\u5165blank y_insert_blank = insert_blank ( y , blank_id ) # ctc_probs[t,s]\uff1aCTC\u89e3\u7801\u5668\u8f93\u51fa\u7684\u6982\u7387\u5206\u5e03\uff0c[vocab_size,] # log_alpha[t,s]\uff1at\u65f6\u523b\u8df3\u8f6c\u5230\u72b6\u6001s\u6240\u6709\u53ef\u80fd\u8def\u5f84\u7684\u6700\u9ad8\u5206 log_alpha = torch . zeros (( ctc_probs . size ( 0 ), len ( y_insert_blank ))) log_alpha = log_alpha - float ( 'inf' ) # log of zero # t\u65f6\u523b\u72b6\u6001s\u7531\u524d\u4e00\u65f6\u523b\u54ea\u4e2a\u72b6\u6001\u8df3\u8f6c\u800c\u6765 state_path = ( torch . zeros ( ( ctc_probs . size ( 0 ), len ( y_insert_blank )), dtype = torch . int16 ) - 1 ) # state path \u521d\u59cb\u5316 \\(t0\\) \u65f6\u523b\u7684blank\u548c\u6807\u6ce8\u5e8f\u5217\u7b2c\u4e00\u4e2atoken\u7684\u6982\u7387\u3002 1 2 3 # \u521d\u59cb\u5316\u5f00\u59cb\u72b6\u6001 log_alpha [ 0 , 0 ] = ctc_probs [ 0 ][ y_insert_blank [ 0 ]] log_alpha [ 0 , 1 ] = ctc_probs [ 0 ][ y_insert_blank [ 1 ]] \u9012\u63a8 \u6839\u636eCTC\u89c4\u5219\uff0c\u5bf9\u5f53\u524d \\(t\\) \u65f6\u523b\u7684\u72b6\u6001 \\(s\\) \uff0c\u627e\u5230\u5176\u7531\u4e0a\u4e00\u65f6\u523b\u7684\u54ea\u4e9b\u72b6\u6001\u8df3\u8f6c\u800c\u6765\uff1a \u4e24\u4e2a\u53ef\u80fd\u72b6\u6001\uff1a\u5206\u652f1 \u4e09\u4e2a\u53ef\u80fd\u72b6\u6001\uff1a\u5206\u652f2 \u8fd9\u4e9b\u72b6\u6001\u7531 prev_state \u8bb0\u5f55\u4e0b\u6765\uff0c\u8df3\u8f6c\u81f3\u8fd9\u4e9b\u72b6\u6001\u5bf9\u5e94\u8def\u5f84\u7684\u6700\u9ad8\u5f97\u5206\u7531 candidates \u8bb0\u5f55\u3002 \u7136\u540e\u8ba1\u7b97\u5f97\u5206\uff0c log_alpha[t,s] \u8bb0\u5f55\u9009\u53d6\u7684\u6700\u9ad8\u5f97\u5206\uff0c state_path[t,s] \u8bb0\u5f55\u9009\u53d6\u7684\u524d\u4e00\u65f6\u523b\u72b6\u6001\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 for t in range ( 1 , ctc_probs . size ( 0 )): for s in range ( len ( y_insert_blank )): # \u53ea\u80fd\u7531\u4e0a\u4e00\u65f6\u523b\u7684\u76f8\u540c\u72b6\u6001\u3001\u524d\u4e00\u72b6\u6001\u8df3\u8f6c\u800c\u6765\u7684\u60c5\u51b5 if y_insert_blank [ s ] == blank_id or s < 2 or y_insert_blank [ s ] == y_insert_blank [ s - 2 ]: # \u8df3\u8f6c\u81f3\u524d\u4e00\u65f6\u523b\u72b6\u6001\u4eec\u7684\u5019\u9009\u8def\u5f84\u5f97\u5206 candidates = torch . tensor ( [ log_alpha [ t - 1 , s ], log_alpha [ t - 1 , s - 1 ]]) # \u5019\u9009\u7684\u524d\u4e00\u65f6\u523b\u72b6\u6001 prev_state = [ s , s - 1 ] else : # \u53ef\u7531\u4e0a\u4e00\u65f6\u523b\u7684\u76f8\u540c\u72b6\u6001\u3001\u524d\u4e00\u72b6\u6001\u3001\u524d\u524d\u72b6\u6001\u8df3\u8f6c\u800c\u6765\u7684\u60c5\u51b5 # \u8df3\u8f6c\u81f3\u524d\u4e00\u65f6\u523b\u72b6\u6001\u4eec\u7684\u5019\u9009\u8def\u5f84\u5f97\u5206 candidates = torch . tensor ([ log_alpha [ t - 1 , s ], log_alpha [ t - 1 , s - 1 ], log_alpha [ t - 1 , s - 2 ], ]) # \u5019\u9009\u7684\u524d\u4e00\u65f6\u523b\u72b6\u6001 prev_state = [ s , s - 1 , s - 2 ] # \u8bb0\u5f55\u53ef\u80fd\u8df3\u8f6c\u81f3s\u7684\u8def\u5f84\u6700\u9ad8\u5f97\u5206 log_alpha [ t , s ] = torch . max ( candidates ) + ctc_probs [ t ][ y_insert_blank [ s ]] # \u526a\u679d\uff0c\u53ca\u65f6\u629b\u5f03\u4e0d\u53ef\u80fd\u8def\u5f84 # \u53ea\u4fdd\u7559\u6700\u53ef\u80fd\u8df3\u8f6c\u5230\u5f53\u524d\u72b6\u6001\u7684\u524d\u4e00\u65f6\u523b\u72b6\u6001, \u7528\u4e8e\u56de\u6eaf state_path [ t , s ] = prev_state [ torch . argmax ( candidates )] \u7ec8\u6b62 \u7ec8\u6b62\u5b57\u7b26\u53ef\u4ee5\u4e3ablank\u6216\u6807\u6ce8\u5e8f\u5217\u7684\u6700\u540e\u4e00\u4e2atoken\uff0c\u6bd4\u8f83\u6700\u7ec8\u65f6\u523b\u8df3\u8f6c\u81f3blank\u6240\u6709\u8def\u5f84\u7684\u6700\u9ad8\u5206 log_alpha[-1, len(y_insert_blank) - 1] \uff0c\u6700\u7ec8\u65f6\u523b\u8df3\u8f6c\u81f3\u6807\u6ce8\u5e8f\u5217\u6700\u540e\u4e00\u4e2atoken\u7684\u6700\u9ad8\u5206 log_alpha[-1, len(y_insert_blank) - 2] \uff0c\u4e24\u8005\u8f83\u9ad8\u5206\u5bf9\u5e94\u7684\u72b6\u6001\u5373\u4e3a\u7ec8\u6b62\u72b6\u6001\u3002 state_seq[t,0] \u8bb0\u5f55\u6700\u4f18\u8def\u5f84\u4e0a\u7684token id\u3002 1 2 3 4 5 6 7 8 9 10 11 12 # CTC\u4e2d\u7531\u4e8e\u5f15\u5165\u4e86blank\uff0c\u56e0\u6b64\u201c\u6700\u4f18\u7ec8\u70b9\u201d\u6709\u53ef\u80fd\u662fblank\uff0c\u4e5f\u6709\u53ef\u80fd\u662f\u6807\u6ce8\u5e8f\u5217\u7684\u6700\u540e\u4e00\u4e2atoken # \u7ec8\u70b9\u9636\u6bb5\u7684\u6bd4\u8f83\uff0c\u6b64\u65f6\u6bd4\u8f83\u8fd92\u6761\u8def\u5f84\u5c31\u53ef\u4ee5\u77e5\u9053\u54ea\u4e00\u6761\u662f\u5168\u5c40\u6700\u4f18\u8def\u5f84\u4e86 # state_seq\u7528\u4e8e\u8bb0\u5f55\u6700\u4f18\u8def\u5f84\u4e0a\u7684token id state_seq = - 1 * torch . ones (( ctc_probs . size ( 0 ), 1 ), dtype = torch . int16 ) candidates = torch . tensor ([ log_alpha [ - 1 , len ( y_insert_blank ) - 1 ], log_alpha [ - 1 , len ( y_insert_blank ) - 2 ] ]) prev_state = [ len ( y_insert_blank ) - 1 , len ( y_insert_blank ) - 2 ] state_seq [ - 1 ] = prev_state [ torch . argmax ( candidates )] \u56de\u6eaf \u901a\u8fc7\u4e0a\u4e00\u6b65\u786e\u5b9a\u7684\u6700\u540e\u65f6\u523b\u72b6\u6001\uff0c\u4e0d\u65ad\u56de\u6eaf\u627e\u5230\u524d\u4e00\u65f6\u523b\u7684\u72b6\u6001\uff0c\u76f4\u81f3\u627e\u5230\u7b2c\u4e00\u65f6\u523b\uff0c\u7ed3\u675f\u3002 1 2 for t in range ( ctc_probs . size ( 0 ) - 2 , - 1 , - 1 ): state_seq [ t ] = state_path [ t + 1 , state_seq [ t + 1 , 0 ]] \u8f93\u51fa 1 2 3 4 # \u5047\u8bbe\u8bed\u97f3\u67099\u5e27\uff0c\u5219output_alignment\u7684\u4e00\u4e2a\u53ef\u80fd\u7ed3\u679c\u662f[c,c,c,blank,a,a,t,t,blank] output_alignment = [] for t in range ( 0 , ctc_probs . size ( 0 )): output_alignment . append ( y_insert_blank [ state_seq [ t , 0 ]]) \u5c0f\u7ed3 CTC\u53ef\u5e2e\u52a9\u6a21\u578b\u5b66\u4e60\u8bed\u97f3\u548clabel\u4e4b\u95f4\u7684alignment\u3002 CTC\u53ef\u4ee5\u505a\u5230\u5e27\u540c\u6b65\u89e3\u7801\uff0c\u56e0\u6b64\u975e\u5e38\u9002\u5408\u505a\u6d41\u5f0f\u6a21\u578b\u3002 CTC\u8f93\u51fa\u662f\u76f8\u4e92\u72ec\u7acb\u7684\uff0c\u76f8\u5bf9\u4e8eSeq2Seq\u5efa\u6a21\u80fd\u529b\u8f83\u5dee\uff0c\u4e00\u822c\u9700\u8981\u5916\u6302\u8bed\u8a00\u6a21\u578b\u624d\u80fd\u5f97\u5230\u8f83\u597d\u7684\u6548\u679c\u3002 \u5982\u4f55\u901a\u4fd7\u5730\u8bb2\u89e3 viterbi \u7b97\u6cd5\uff1f \u674e\u5b8f\u6bc5NLP(\u81ea\u7136\u8bed\u8a00\u5904\u7406)-P6 WeNet\u66f4\u65b0\uff1a\u652f\u6301 CTC alignment","title":"wenet\u7684ctc_alignment"},{"location":"asr/wenet%E7%9A%84ctc_alignment/#wenetctc_alignment","text":"","title":"wenet\u7684ctc_alignment"},{"location":"asr/wenet%E7%9A%84ctc_alignment/#_1","text":"\u5f3a\u5236\u5bf9\u9f50\uff08Force alignment\uff09\u5728\u8bed\u97f3\u8bc6\u522b\u3001\u8bed\u97f3\u5408\u6210\u7b49\u4efb\u52a1\u4e2d\u5e94\u7528\u5e7f\u6cdb\uff0c\u540c\u65f6\u4e5f\u662f\u5b57\u5e55\u65f6\u95f4\u8f74\u3001\u53e3\u8bed\u8bc4\u6d4b\u7b49\u4efb\u52a1\u7684\u6838\u5fc3\u7b97\u6cd5\u3002\u5f3a\u5236\u5bf9\u9f50\u548c\u8bed\u97f3\u8bc6\u522b\u90fd\u9700\u8981\u4e00\u4e2a\u5df2\u7ecf\u8bad\u7ec3\u597d\u7684\u58f0\u5b66\u6a21\u578b\u548c\u8f93\u5165\u8bed\u97f3\uff0c\u800c\u5f3a\u5236\u5bf9\u9f50\u8fd8\u9700\u8981\u8bed\u97f3\u5bf9\u5e94\u7684\u6b63\u786e\u6807\u6ce8\u6587\u672c\u3002\u5f3a\u5236\u5bf9\u9f50\u4ec5\u8f93\u51fa\u8bed\u97f3\u5e27\u548c\u6587\u672c\u4e4b\u95f4\u7684\u5bf9\u5e94\u5173\u7cfb\uff0c\u6bd4\u5982\u8bed\u97f3\u67099\u5e27\uff0c\u5bf9\u5e94\u7684\u6b63\u786e\u6807\u6ce8\u6587\u672c\u4e3a\u201ccat\u201d\uff0c\u5219\u5f3a\u5236\u5bf9\u9f50\u7684\u4e00\u4e2a\u53ef\u80fd\u8f93\u51fa\u4e3a [c,c,c,blank,a,a,t,t,blank] \u3002 WeNet\u7531\u4e8e\u4f7f\u7528\u4e86Joint CTC&AED\u7ed3\u679c\uff0c\u56e0\u6b64\u53ef\u4ee5\u5229\u7528CTC\u89e3\u7801\u5668\u6765\u5b8c\u6210\u5f3a\u5236\u5bf9\u9f50\u3002\u5f3a\u5236\u5bf9\u9f50\u7684\u5355\u5143\u4e0e\u58f0\u5b66\u6a21\u578b\u7684\u5efa\u6a21\u5355\u5143\u6709\u5173\uff0c\u6bd4\u5982WeNet\u4e2d\u6587\u6a21\u578b\u4e2d\u91c7\u7528\u4e86\u5b57\u7ea7\u522b\u7684\u5efa\u6a21\uff0c\u56e0\u6b64\u5f3a\u5236\u5bf9\u9f50\u4e5f\u662f\u5f97\u5230\u5b57\u7ea7\u522b\u7684\u5bf9\u9f50\u7ed3\u679c\uff0c\u800c\u5982\u679c\u9700\u8981\u97f3\u7d20\u7ea7\u522b\u7684\u5f3a\u5236\u5bf9\u9f50\u529f\u80fd\uff0c\u5219\u9700\u8981\u53e6\u5916\u8bad\u7ec3\u4e00\u4e2a\u97f3\u7d20\u7ea7\u522b\u7684\u6a21\u578b\u3002","title":"\u5f3a\u5236\u5bf9\u9f50"},{"location":"asr/wenet%E7%9A%84ctc_alignment/#_2","text":"\u8bed\u97f3\u8bc6\u522b\u662f\u9700\u8981\u5c06\u97f3\u9891\u5e8f\u5217\u8f6c\u6362\u5230\u6587\u672c\u5e8f\u5217\uff0c\u800c\u97f3\u9891\u5e8f\u5217\u957f\u5ea6\u4e00\u822c\u5927\u4e8e\u6587\u672c\u5e8f\u5217\u957f\u5ea6\uff0c\u5982\u679c\u80fd\u77e5\u9053\u6bcf\u4e00\u5e27\u97f3\u9891\u5bf9\u5e94\u7684\u6587\u672c\uff0c\u5c31\u53ef\u4ee5\u5c06\u8bed\u97f3\u8bc6\u522b\u8f6c\u6362\u4e3a\u97f3\u9891\u5e27\u7ea7\u522b\u4e0a\u7684\u5206\u7c7b\u4efb\u52a1\u3002\u4e3a\u4e86\u5f97\u5230\u8fd9\u79cd\u5bf9\u5e94\u5173\u7cfb\uff0c\u5e38\u5e38\u9700\u8981\u5bf9\u6587\u672c\u5e8f\u5217\u8fdb\u884c\u6269\u5c55\u3002\u5bf9\u8fd9\u7c7b\u5e8f\u5217\u5efa\u6a21\u4efb\u52a1\u7684\u6269\u5c55\u65b9\u6cd5\u5305\u62ec\uff1a\u5bf9\u8f93\u5165\u5e8f\u5217\u7684\u5355\u5143\u8fdb\u884c\u590d\u5236\uff0c\u4ee5\u53ca\u63d2\u5165\u5360\u4f4d\u7b26blank\u4e24\u79cd\u65b9\u6cd5\u3002HMM\u91c7\u7528\u4e86\u590d\u5236\u7684\u65b9\u5f0f\uff0cCTC\u4e24\u8005\u540c\u65f6\u4f7f\u7528\uff0cRNN-T\u5219\u53ea\u4f7f\u7528\u63d2\u5165\u5360\u4f4d\u7b26blank\u7684\u65b9\u6cd5\uff0c\u5982\u56fe\u6240\u793a\u3002 \u5728\u4f7f\u7528CTC\u76ee\u6807\u8bad\u7ec3\u65f6\uff0c\u672c\u8d28\u662f\u8003\u8651\u6240\u6709\u53ef\u80fd\u7684CTC\u5bf9\u9f50\uff0c\u5e76\u628a\u6bcf\u4e00\u79cd\u5bf9\u9f50\u60c5\u51b5\u4e0b\u7684\u5206\u7c7b\u635f\u5931\u52a0\u8d77\u6765\u4f5c\u4e3a\u76ee\u6807\u51fd\u6570\u3002\u5728\u5b9e\u9645\u5b9e\u73b0\u65f6\uff0c\u5e76\u4e0d\u4f1a\u771f\u7684\u7a77\u4e3e\u6240\u6709\u5bf9\u9f50\uff0c\u800c\u662f\u5229\u7528\u4e00\u79cd\u9ad8\u6548\u7b97\u6cd5\u8fdb\u884c\u8ba1\u7b97\u3002 \u5bf9\u4e8e\u5bf9\u9f50\u4efb\u52a1\u6765\u8bf4\uff0c\u76ee\u6807\u662f\u627e\u5230\u4e00\u6761\u6982\u7387\u6700\u5927\u7684CTC\u5bf9\u9f50\uff0c\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u4f7f\u7528\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u5bf9\u6240\u6709\u53ef\u80fd\u7684\u5bf9\u9f50\u8def\u5f84\u8fdb\u884c\u6253\u5206\uff0c\u9009\u62e9\u4e00\u6761\u6982\u7387\u6700\u9ad8\u7684CTC\u5bf9\u9f50\u8def\u5f84\u5373\u53ef\u3002\u4f46\u662f\u8fd9\u79cd\u7a77\u4e3e\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u6307\u6570\u7ea7\u522b\u7684\uff0c\u6b64\u65f6\u53ef\u4ee5\u4f7f\u7528\u7ef4\u7279\u6bd4\u7b97\u6cd5\u964d\u4f4e\u5bfb\u627e\u6700\u4f18\u8def\u5f84\u7684\u590d\u6742\u5ea6\u3002","title":"\u5bf9\u9f50"},{"location":"asr/wenet%E7%9A%84ctc_alignment/#_3","text":"\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u5047\u5982\u8fb9\u4e0a\u6709\u503c\u8868\u793a\u957f\u5ea6\uff0c\u9700\u8981\u4eceS\u548cE\u4e4b\u95f4\u5bfb\u627e\u4e00\u6761\u6700\u77ed\u7684\u8def\u5f84\uff0c\u9664\u4e86\u7a77\u4e3e\u4e4b\u5916\uff0c\u66f4\u597d\u7684\u65b9\u6cd5\u662f\uff0c\u5229\u7528\u7ef4\u7279\u6bd4\uff08Viterbi\uff09\u7b97\u6cd5\u641c\u7d22\u6700\u4f18\u8def\u5f84\u3002 \u4e3a\u4e86\u5bfb\u627eS\u5230E\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5f84\uff0c\u53ef\u4ee5\u4ece\u5de6\u5411\u53f3\u4e00\u5217\u4e00\u5217\u63a8\u7b97\uff0c\u8d77\u70b9\u662fS\uff0c\u4eceS\u5230A\u5217\u7684\u8def\u5f84\u67093\u6761\uff1aS->A1\u3001S->A2\u3001S->A3\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002 \u81f3\u76ee\u524d\u4e3a\u6b62S->A1\u3001S->A2\u3001S->A3\u4e2d\u7684\u4efb\u4f55\u4e00\u6bb5\u5747\u53ef\u80fd\u662f\u5168\u5c40\u6700\u77ed\u8def\u5f84\u7684\u4e00\u90e8\u5206\u3002\u7ee7\u7eed\u5411\u53f3\u5230B\u5217\uff0c\u9996\u5148\u5206\u6790B1\uff1a \u5982\u4e0a\u56fe\uff0c\u7ecf\u8fc7B1\u7684\u6240\u6709\u8def\u5f84\u53ea\u67093\u6761\uff1a S->A1->B1 S->A2->B1 S->A3->B1 \u4ee5\u4e0a3\u6761\u8def\u5f84\u4e2d\uff0c\u5404\u8282\u70b9\u8ddd\u79bb\u52a0\u8d77\u6765\u6bd4\u8f83\u4e00\u4e0b\uff0c\u5c31\u53ef\u4ee5\u77e5\u9053\u54ea\u4e00\u6761\u662f\u6700\u77ed\u8def\u5f84\uff0c\u5047\u8bbeS->A3->B1\u662f\u6700\u77ed\u8def\u5f84\uff0c\u90a3\u4e48 \u7ecf\u8fc7B1\u7684\u6240\u6709\u8def\u5f84\u4e2dS->A3->B1\u662f\u6700\u77ed\u7684\uff0c\u5176\u5b83\u4e24\u6761\u8def\u5f84\u90fd\u7edd\u5bf9\u4e0d\u662f\u76ee\u6807\u7b54\u6848\uff0c\u53ef\u4ee5\u5927\u80c6\u5220\u9664 \u3002\u5047\u5982\u5168\u5c40\u6700\u77ed\u8def\u5f84\u771f\u7684\u7ecf\u8fc7\u4e86B1\uff0c\u90a3\u4e48\u5168\u5c40\u6700\u77ed\u8def\u5f84\u4e0aB1\u4e4b\u524d\u4e00\u5b9a\u662fA3\uff0c\u800c\u7edd\u5bf9\u4e0d\u662fA1\u6216A2\uff0c\u5426\u5219\u5c31\u4e0e\u201c\u7ecf\u8fc7B1\u7684\u6240\u6709\u8def\u5f84\u4e2dS->A3->B1\u662f\u6700\u77ed\u7684\u201d\u76f8\u77db\u76fe\u3002\u53ca\u65f6\u5220\u9664\u4e0d\u53ef\u80fd\u7684\u7b54\u6848\u662f\u7ef4\u7279\u6bd4\u7b97\u6cd5\u7684\u91cd\u70b9\uff0c\u4e5f\u662f\u7ef4\u7279\u6bd4\u7b97\u6cd5\u80fd\u591f\u964d\u4f4e\u590d\u6742\u5ea6\u7684\u539f\u56e0\u3002\u6b64\u65f6\u7ecf\u8fc7B1\u7684\u6240\u6709\u5907\u9009\u8def\u5f84\u5c31\u53ea\u5269\u4e0b\u4e00\u6761\u8def\u5f84\u4e86\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u4ee5\u6b64\u7c7b\u63a8\uff0c\u7ecf\u8fc7B2\u3001B3\u7684\u6240\u6709\u5907\u9009\u8def\u5f84\u5404\u81ea\u4e5f\u53ea\u5269\u4e0b\u4e00\u6761\uff1a \u6b64\u65f6\uff0cS->A3->B1\u3001S->A1->B2\u3001S->A2->B3\u5747\u6709\u53ef\u80fd\u662f\u5168\u5c40\u6700\u77ed\u8def\u5f84\u7684\u4e00\u90e8\u5206\uff0c\u7ee7\u7eed\u5411\u540e\u8fed\u4ee3\uff0c\u7c7b\u4f3c\u4e8eB\u5217\uff0c\u7ecf\u8fc7C1\u8282\u70b9\u7684\u8def\u5f84\u6709\uff1a \u5047\u8bbe\u6b64\u65f6\u7ecf\u8fc7C1\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u662fS->A3->B1->C1\uff0c\u5219\u53ca\u65f6\u5c06\u5176\u4f59\u4e24\u6761\u8def\u5f84\u5220\u9664\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u4ee5\u6b64\u7c7b\u63a8\uff0c\u53ef\u6c42\u5f97\u7ecf\u8fc7C2\u3001C3\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\uff0c\u5982\u4e0b\u56fe\uff1a \u6b64\u65f6\u4ecd\u7136\u65e0\u6cd5\u786e\u5b9a\u54ea\u4e00\u6761\u662f\u5168\u5c40\u6700\u77ed\uff0c\u7ee7\u7eed\u5411\u540e\u8fed\u4ee3\uff0c\u5230\u8fbeE\u5217\uff0c\u5230\u8fbeE\u8282\u70b9\u7684\u8def\u5f84\u6b64\u65f6\u53ea\u67093\u6761\uff1a E\u8282\u70b9\u5df2\u662f\u7ec8\u70b9\uff0c\u6b64\u65f6\u6bd4\u8f83\u8fd93\u6761\u8def\u5f84\u5c31\u53ef\u4ee5\u77e5\u9053\u54ea\u4e00\u6761\u662f\u5168\u5c40\u6700\u77ed\u8def\u5f84\u4e86\uff0c\u5982\u4e0b\u56fe\uff1a \u76f8\u6bd4\u4e8e\u7a77\u4e3e\u6240\u6709\u8def\u5f84\uff0c\u7ef4\u7279\u6bd4\u7b97\u6cd5\u6bcf\u5230\u8fbe\u4e00\u4e2a\u6b65\u9aa4\u90fd\u53ca\u65f6\u5220\u9664\u4e0d\u53ef\u80fd\u7b54\u6848\uff0c\u4ece\u800c\u5927\u5927\u964d\u4f4e\u65f6\u95f4\u590d\u6742\u5ea6\u3002\u7ef4\u7279\u6bd4\u7b97\u6cd5\u53ef\u4ee5\u6982\u51b5\u4e3a\u4ee5\u4e0b\u4e09\u70b9\uff1a \u5982\u679c\u6700\u4f18\u8def\u5f84\u7ecf\u8fc7\u67d0\u70b9\uff0c\u5219\u4ece\u8d77\u70b9\u5230\u8be5\u70b9\u7684\u5b50\u8def\u5f84\u4e00\u5b9a\u662f\u4ece\u8d77\u70b9\u5230\u8be5\u70b9\u7684\u6240\u6709\u8def\u5f84\u4e2d\u6700\u4f18\u7684\u3002 \u5047\u8bbe\u7b2c \\(t\\) \u65f6\u523b\u6709 \\(k\\) \u4e2a\u72b6\u6001\u53ef\u4f9b\u9009\u62e9\uff0c\u4ece\u5f00\u59cb\u5230 \\(t\\) \u65f6\u523b\u7684 \\(k\\) \u4e2a\u72b6\u6001\u6709 \\(k\\) \u6761\u6700\u77ed\u8def\u5f84\uff0c\u800c\u6700\u7ec8\u7684\u6700\u77ed\u8def\u5f84\u5fc5\u7136\u7ecf\u8fc7\u5176\u4e2d\u4e00\u6761\u3002 \u6839\u636e\u4ee5\u4e0a\u6027\u8d28\uff0c\u5728\u8ba1\u7b97\u7b2c \\(t+1\\) \u65f6\u523b\u7684\u6700\u77ed\u8def\u5f84\u65f6\uff0c\u53ea\u9700\u8981\u8003\u8651\u4ece\u5f00\u59cb\u5230\u5f53\u524d\u7684 \\(k\\) \u4e2a\u72b6\u6001\u503c\u7684\u6700\u77ed\u8def\u5f84\u548c\u5f53\u524d\u72b6\u6001\u503c\u5230\u7b2c \\(t+1\\) \u65f6\u523b\u7684\u6700\u77ed\u8def\u5f84\u5373\u53ef\u3002\u5982\u6c42 \\(t=3\\) \u65f6\u7684\u6700\u77ed\u8def\u5f84\uff0c\u7b49\u4e8e\u6c42 \\(t=2\\) \u65f6\uff0c\u4ece\u8d77\u70b9\u5230\u5f53\u524d\u65f6\u523b\u7684\u6240\u6709\u72b6\u6001\u7ed3\u70b9\u7684\u6700\u77ed\u8def\u5f84\u52a0\u4e0a \\(t=2\\) \u5230 \\(t=3\\) \u7684\u5404\u8282\u70b9\u6700\u77ed\u8def\u5f84\u3002 \u7ef4\u7279\u6bd4\u7b97\u6cd5\u7528\u4e8e\u6c42\u89e3\u591a\u6b65\u9aa4\uff0c\u6bcf\u4e2a\u6b65\u9aa4\u591a\u9009\u62e9\u7684\u6700\u4f18\u9009\u62e9\u95ee\u9898\u3002\u5bf9\u4e8e\u6bcf\u4e00\u6b65\u7684\u6240\u6709\u53ef\u80fd\u9009\u62e9\uff0c\u7ef4\u7279\u6bd4\u7b97\u6cd5\u90fd\u4fdd\u5b58\u524d\u5e8f\u6b65\u9aa4\u5230\u5f53\u524d\u6b65\u9aa4\u7684\u82e5\u5e72\u6700\u4f18\u8def\u5f84\u4ee5\u53ca\u5f53\u524d\u4ee3\u4ef7\u4e0b\u524d\u4e00\u6b65\u9aa4\u4e0a\u7684\u9009\u62e9\uff0c\u4f9d\u6b21\u8ba1\u7b97\u5b8c\u6240\u6709\u6b65\u9aa4\u540e\uff0c\u901a\u8fc7\u56de\u6eaf\u4e0d\u65ad\u5bfb\u627e\u524d\u4e00\u6b65\u9aa4\u4e0a\u7684\u9009\u62e9\uff0c\u4ece\u800c\u627e\u5230\u5b8c\u6574\u7684\u6700\u4f18\u9009\u62e9\u8def\u5f84\u3002","title":"\u7ef4\u7279\u6bd4\u7b97\u6cd5"},{"location":"asr/wenet%E7%9A%84ctc_alignment/#ctc","text":"\u7531\u4e8eCTC\u5f15\u5165\u4e86\u5360\u4f4d\u7b26blank\uff0c\u56e0\u6b64\u76f8\u6bd4\u666e\u901a\u7684\u7ef4\u7279\u6bd4\u7b97\u6cd5\uff0cCTC\u7ef4\u7279\u6bd4\u7b97\u6cd5\u6c42\u89e3\u72b6\u6001\u8df3\u8f6c\u6709\u6240\u4e0d\u540c\u3002\u5b9a\u4e49 \u72b6\u6001 \u4e3a\u6a21\u578b\u5728\u6bcf\u4e2a\u65f6\u523b\u7684\u8f93\u51fatoken\uff0c\u6bd4\u5982blank\u6216\u6807\u6ce8\u5e8f\u5217\u4e2d\u7684\u5b57\u7b26\u3002","title":"CTC\u7ef4\u7279\u6bd4\u7b97\u6cd5"},{"location":"asr/wenet%E7%9A%84ctc_alignment/#_4","text":"\u5728\u521d\u59cb\u5316\u4e2d\uff0c\u7531\u4e8eCTC\u5f15\u5165\u4e86blank\uff0c\u56e0\u6b64\u7b2c\u4e00\u65f6\u523b\u7684\u521d\u59cb\u72b6\u6001\u53ef\u80fd\u662fblank\uff0c\u4e5f\u53ef\u80fd\u662f\u6807\u6ce8\u5e8f\u5217\u7684\u7b2c\u4e00\u4e2atoken\u3002","title":"\u521d\u59cb\u5316"},{"location":"asr/wenet%E7%9A%84ctc_alignment/#_5","text":"\u6839\u636eCTC\u89c4\u5219\uff0c\u5df2\u77e5\u5f53\u524d \\(t\\) \u65f6\u523b\u7684\u72b6\u6001 \\(s\\) \uff0c\u63a8\u5bfc\u8be5\u72b6\u6001\u53ef\u4ee5\u7531\u4e0a\u4e00\u65f6\u523b\u7684\u54ea\u4e9b\u72b6\u6001\u8df3\u8f6c\u800c\u6765\u3002","title":"\u9012\u63a8"},{"location":"asr/wenet%E7%9A%84ctc_alignment/#_6","text":"\u5982\u679c \\(t\\) \u65f6\u523b\u7684\u72b6\u6001 \\(s\\) \u4e3ablank\uff0c\u5219\u72b6\u6001 \\(s\\) \u53ef\u7531 \\(t-1\\) \u65f6\u523b\u7684 \\(s\\) \u6216 \\(s-1\\) \uff08\u4e24\u4e2a\u53ef\u80fd\u72b6\u6001\uff09\u8df3\u8f6c\u800c\u6765\u3002 \u5982\u679c \\(t\\) \u65f6\u523b\u7684\u72b6\u6001 \\(s\\) \u4e3a\u975eblank\uff0c\u4e14\u72b6\u6001 \\(s\\) \u4e0e \\(s-2\\) \u4e0d\u540c\uff0c\u5219\u72b6\u6001 \\(s\\) \u53ef\u7531 \\(t-1\\) \u65f6\u523b\u7684 \\(s\\) \u6216 \\(s-1\\) \u6216 \\(s-2\\) \uff08\u4e09\u4e2a\u53ef\u80fd\u72b6\u6001\uff09\u8df3\u8f6c\u800c\u6765\u3002 \u5982\u679c \\(t\\) \u65f6\u523b\u7684\u72b6\u6001 \\(s\\) \u4e3a\u975eblank\uff0c\u4e14\u72b6\u6001 \\(s\\) \u4e0e \\(s-2\\) \u76f8\u540c\uff0c\u5219\u72b6\u6001 \\(s\\) \u53ef\u7531 \\(t-1\\) \u65f6\u523b\u7684 \\(s\\) \u6216 \\(s-1\\) \uff08\u4e24\u4e2a\u53ef\u80fd\u72b6\u6001\uff09\u8df3\u8f6c\u800c\u6765\uff0c\u800c\u4e0d\u53ef\u80fd\u7531 \\(s-2\\) \u8df3\u8f6c\u800c\u6765\uff0c\u56e0\u4e3a\u6b64\u65f6 \\(s\\) \u548c \\(s-2\\) \u76f8\u540c\uff0c\u5982\u679c\u7531 \\(s-2\\) \u8df3\u8f6c\u5230 \\(s\\) \uff0c\u6309\u7167CTC\u89c4\u5219\uff0c\u8fd9\u4e24\u4e2a\u72b6\u6001\u5e94\u8be5\u5408\u5e76\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u60c5\u51b53\u548c\u60c5\u51b51\u7684\u4e0a\u4e00\u65f6\u523b\u53ef\u80fd\u72b6\u6001\u76f8\u540c\uff0c\u56e0\u6b64\u4ee3\u7801\u4e2d\u53ef\u4ee5\u5408\u5e76\u3002","title":"\u89c4\u5219"},{"location":"asr/wenet%E7%9A%84ctc_alignment/#_7","text":"\u5047\u8bbeCTC\u5b57\u7b26\u4e32\u5982\u4e0b\uff1a <blank1> s <blank2> e1 <blank3> e2 <blank4> \u5176\u4e2d\uff0c <blank> \u8868\u793a\u82e5\u5e72\u4e2ablank\u5b57\u7b26\uff0c\u4e3a\u53d9\u8ff0\u65b9\u4fbf\u6570\u5b57\u540e\u7f00\u7528\u4e8e\u533a\u5206\u4e0d\u540c\u4f4d\u7f6e\uff0c e1/e2 \u5747\u8868\u793a e \uff0c\u6570\u5b57\u540e\u7f00\u540c\u6837\u7528\u4e8e\u533a\u5206\u4e0d\u540c\u4f4d\u7f6e\uff0c\u56e0\u6b64\u8be5CTC\u5b57\u7b26\u4e32\u5bf9\u5e94\u7684\u89c4\u6574\u4e32\u4e3a see \u3002 \u6839\u636eCTC\u89c4\u5219\uff1a <blank2> \u53ea\u53ef\u80fd\u4ece <blank2> \u6216\u8005 s \u8df3\u8f6c\u800c\u6765\u3002 e1 \u53ef\u80fd\u4ece e1 \u6216\u8005 <blank2> \u6216\u8005 s \u8df3\u8f6c\u800c\u6765\u3002 e2 \u53ea\u53ef\u80fd\u4ece e2 \u6216\u8005 <blank3> \u8df3\u8f6c\u800c\u6765\uff0c\u800c\u4e0d\u53ef\u80fd\u4ece e1 \u8df3\u8f6c\u800c\u6765\uff0c\u5426\u5219 e1 e2 \u6309\u7167CTC\u89c4\u5219\u6700\u540e\u5c06\u88ab\u5408\u5e76\u4e3a e1 \u3002","title":"\u4e3e\u4f8b"},{"location":"asr/wenet%E7%9A%84ctc_alignment/#_8","text":"\u5728CTC\u7ef4\u7279\u6bd4\u7b97\u6cd5\u4e2d\uff0c\u7ec8\u6b62\u72b6\u6001\u53ef\u4ee5\u662fblank\uff0c\u4e5f\u53ef\u4ee5\u662f\u6807\u6ce8\u5e8f\u5217\u7684\u6700\u540e\u4e00\u4e2atoken\u3002\u6bd4\u8f83\u4e24\u4e2a\u7ec8\u6b62\u72b6\u6001\u7ec4\u6210\u7684\u8def\u5f84\uff0c\u53ef\u4ee5\u83b7\u5f97\u6700\u4f18\u8def\u5f84\u4e0a\u7684\u7ec8\u6b62\u72b6\u6001\u3002 HMM\u4e2d\u91c7\u7528\u7684\u7ef4\u7279\u6bd4\u7b97\u6cd5\u53ea\u80fd\u5c06\u6807\u6ce8\u5e8f\u5217\u7684\u6700\u540e\u4e00\u4e2atoken\u4f5c\u4e3a\u7ec8\u6b62\u72b6\u6001\u3002","title":"\u7ec8\u6b62"},{"location":"asr/wenet%E7%9A%84ctc_alignment/#_9","text":"\u5728\u6700\u4f18\u8def\u5f84\u4e0a\uff0c\u6bcf\u4e2a\u65f6\u523b\u7684\u72b6\u6001\u5747\u4fdd\u5b58\u5bf9\u5e94\u7684\u4e0a\u4e00\u65f6\u523b\u72b6\u6001\uff0c\u4ece\u800c\u80fd\u591f\u83b7\u5f97\u5b8c\u6574\u7684\u6700\u4f18\u9009\u62e9\u8def\u5f84\u3002","title":"\u6700\u4f18\u8def\u5f84\u56de\u6eaf"},{"location":"asr/wenet%E7%9A%84ctc_alignment/#wenetctc-alignment","text":"","title":"WeNet\u4e2dCTC alignment\u7684\u5b9e\u73b0"},{"location":"asr/wenet%E7%9A%84ctc_alignment/#_10","text":"\u5411\u6807\u6ce8\u5e8f\u5217\u6bcf\u4e24\u4e2atoken\u4e4b\u95f4\u63d2\u5165blank\uff0c\u6bd4\u5982\u6807\u6ce8\u5e8f\u5217\u4e3a\u201cc a t\u201d\uff0c\u5219\u63d2\u5165blank\u4e4b\u540e\u4e3a\u201d\u03f5 c \u03f5 a \u03f5 t \u03f5\u201c\u3002 ctc_probs \u8868\u793aCTC\u89e3\u7801\u5668\u8f93\u51fa\u7684\u6982\u7387\u5206\u5e03\uff0c\u5927\u5c0f\u4e3a [vocab_size,] \u3002 log_alpha[t,s] \u8868\u793a \\(t\\) \u65f6\u523b\u8df3\u8f6c\u5230\u72b6\u6001 \\(s\\) \u6240\u6709\u53ef\u80fd\u8def\u5f84\u4e2d\u7684\u6700\u9ad8\u5206\u3002 state_path[t,s] \u8868\u793a \\(t\\) \u65f6\u523b\u72b6\u6001 \\(s\\) \u7531\u524d\u4e00\u65f6\u523b\u54ea\u4e2a\u72b6\u6001\u8df3\u8f6c\u800c\u6765\uff0c\u7531\u4e8e\u7ef4\u7279\u6bd4\u7b97\u6cd5\u6700\u540e\u7684\u56de\u6eaf\u3002 1 2 3 4 5 6 7 8 9 10 11 12 # wenet/wenet/utils/ctc_util.py # \u6807\u6ce8\u5e8f\u5217\u6bcf\u4e24\u4e2atoken\u4e4b\u95f4\u63d2\u5165blank y_insert_blank = insert_blank ( y , blank_id ) # ctc_probs[t,s]\uff1aCTC\u89e3\u7801\u5668\u8f93\u51fa\u7684\u6982\u7387\u5206\u5e03\uff0c[vocab_size,] # log_alpha[t,s]\uff1at\u65f6\u523b\u8df3\u8f6c\u5230\u72b6\u6001s\u6240\u6709\u53ef\u80fd\u8def\u5f84\u7684\u6700\u9ad8\u5206 log_alpha = torch . zeros (( ctc_probs . size ( 0 ), len ( y_insert_blank ))) log_alpha = log_alpha - float ( 'inf' ) # log of zero # t\u65f6\u523b\u72b6\u6001s\u7531\u524d\u4e00\u65f6\u523b\u54ea\u4e2a\u72b6\u6001\u8df3\u8f6c\u800c\u6765 state_path = ( torch . zeros ( ( ctc_probs . size ( 0 ), len ( y_insert_blank )), dtype = torch . int16 ) - 1 ) # state path \u521d\u59cb\u5316 \\(t0\\) \u65f6\u523b\u7684blank\u548c\u6807\u6ce8\u5e8f\u5217\u7b2c\u4e00\u4e2atoken\u7684\u6982\u7387\u3002 1 2 3 # \u521d\u59cb\u5316\u5f00\u59cb\u72b6\u6001 log_alpha [ 0 , 0 ] = ctc_probs [ 0 ][ y_insert_blank [ 0 ]] log_alpha [ 0 , 1 ] = ctc_probs [ 0 ][ y_insert_blank [ 1 ]]","title":"\u521d\u59cb\u5316"},{"location":"asr/wenet%E7%9A%84ctc_alignment/#_11","text":"\u6839\u636eCTC\u89c4\u5219\uff0c\u5bf9\u5f53\u524d \\(t\\) \u65f6\u523b\u7684\u72b6\u6001 \\(s\\) \uff0c\u627e\u5230\u5176\u7531\u4e0a\u4e00\u65f6\u523b\u7684\u54ea\u4e9b\u72b6\u6001\u8df3\u8f6c\u800c\u6765\uff1a \u4e24\u4e2a\u53ef\u80fd\u72b6\u6001\uff1a\u5206\u652f1 \u4e09\u4e2a\u53ef\u80fd\u72b6\u6001\uff1a\u5206\u652f2 \u8fd9\u4e9b\u72b6\u6001\u7531 prev_state \u8bb0\u5f55\u4e0b\u6765\uff0c\u8df3\u8f6c\u81f3\u8fd9\u4e9b\u72b6\u6001\u5bf9\u5e94\u8def\u5f84\u7684\u6700\u9ad8\u5f97\u5206\u7531 candidates \u8bb0\u5f55\u3002 \u7136\u540e\u8ba1\u7b97\u5f97\u5206\uff0c log_alpha[t,s] \u8bb0\u5f55\u9009\u53d6\u7684\u6700\u9ad8\u5f97\u5206\uff0c state_path[t,s] \u8bb0\u5f55\u9009\u53d6\u7684\u524d\u4e00\u65f6\u523b\u72b6\u6001\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 for t in range ( 1 , ctc_probs . size ( 0 )): for s in range ( len ( y_insert_blank )): # \u53ea\u80fd\u7531\u4e0a\u4e00\u65f6\u523b\u7684\u76f8\u540c\u72b6\u6001\u3001\u524d\u4e00\u72b6\u6001\u8df3\u8f6c\u800c\u6765\u7684\u60c5\u51b5 if y_insert_blank [ s ] == blank_id or s < 2 or y_insert_blank [ s ] == y_insert_blank [ s - 2 ]: # \u8df3\u8f6c\u81f3\u524d\u4e00\u65f6\u523b\u72b6\u6001\u4eec\u7684\u5019\u9009\u8def\u5f84\u5f97\u5206 candidates = torch . tensor ( [ log_alpha [ t - 1 , s ], log_alpha [ t - 1 , s - 1 ]]) # \u5019\u9009\u7684\u524d\u4e00\u65f6\u523b\u72b6\u6001 prev_state = [ s , s - 1 ] else : # \u53ef\u7531\u4e0a\u4e00\u65f6\u523b\u7684\u76f8\u540c\u72b6\u6001\u3001\u524d\u4e00\u72b6\u6001\u3001\u524d\u524d\u72b6\u6001\u8df3\u8f6c\u800c\u6765\u7684\u60c5\u51b5 # \u8df3\u8f6c\u81f3\u524d\u4e00\u65f6\u523b\u72b6\u6001\u4eec\u7684\u5019\u9009\u8def\u5f84\u5f97\u5206 candidates = torch . tensor ([ log_alpha [ t - 1 , s ], log_alpha [ t - 1 , s - 1 ], log_alpha [ t - 1 , s - 2 ], ]) # \u5019\u9009\u7684\u524d\u4e00\u65f6\u523b\u72b6\u6001 prev_state = [ s , s - 1 , s - 2 ] # \u8bb0\u5f55\u53ef\u80fd\u8df3\u8f6c\u81f3s\u7684\u8def\u5f84\u6700\u9ad8\u5f97\u5206 log_alpha [ t , s ] = torch . max ( candidates ) + ctc_probs [ t ][ y_insert_blank [ s ]] # \u526a\u679d\uff0c\u53ca\u65f6\u629b\u5f03\u4e0d\u53ef\u80fd\u8def\u5f84 # \u53ea\u4fdd\u7559\u6700\u53ef\u80fd\u8df3\u8f6c\u5230\u5f53\u524d\u72b6\u6001\u7684\u524d\u4e00\u65f6\u523b\u72b6\u6001, \u7528\u4e8e\u56de\u6eaf state_path [ t , s ] = prev_state [ torch . argmax ( candidates )]","title":"\u9012\u63a8"},{"location":"asr/wenet%E7%9A%84ctc_alignment/#_12","text":"\u7ec8\u6b62\u5b57\u7b26\u53ef\u4ee5\u4e3ablank\u6216\u6807\u6ce8\u5e8f\u5217\u7684\u6700\u540e\u4e00\u4e2atoken\uff0c\u6bd4\u8f83\u6700\u7ec8\u65f6\u523b\u8df3\u8f6c\u81f3blank\u6240\u6709\u8def\u5f84\u7684\u6700\u9ad8\u5206 log_alpha[-1, len(y_insert_blank) - 1] \uff0c\u6700\u7ec8\u65f6\u523b\u8df3\u8f6c\u81f3\u6807\u6ce8\u5e8f\u5217\u6700\u540e\u4e00\u4e2atoken\u7684\u6700\u9ad8\u5206 log_alpha[-1, len(y_insert_blank) - 2] \uff0c\u4e24\u8005\u8f83\u9ad8\u5206\u5bf9\u5e94\u7684\u72b6\u6001\u5373\u4e3a\u7ec8\u6b62\u72b6\u6001\u3002 state_seq[t,0] \u8bb0\u5f55\u6700\u4f18\u8def\u5f84\u4e0a\u7684token id\u3002 1 2 3 4 5 6 7 8 9 10 11 12 # CTC\u4e2d\u7531\u4e8e\u5f15\u5165\u4e86blank\uff0c\u56e0\u6b64\u201c\u6700\u4f18\u7ec8\u70b9\u201d\u6709\u53ef\u80fd\u662fblank\uff0c\u4e5f\u6709\u53ef\u80fd\u662f\u6807\u6ce8\u5e8f\u5217\u7684\u6700\u540e\u4e00\u4e2atoken # \u7ec8\u70b9\u9636\u6bb5\u7684\u6bd4\u8f83\uff0c\u6b64\u65f6\u6bd4\u8f83\u8fd92\u6761\u8def\u5f84\u5c31\u53ef\u4ee5\u77e5\u9053\u54ea\u4e00\u6761\u662f\u5168\u5c40\u6700\u4f18\u8def\u5f84\u4e86 # state_seq\u7528\u4e8e\u8bb0\u5f55\u6700\u4f18\u8def\u5f84\u4e0a\u7684token id state_seq = - 1 * torch . ones (( ctc_probs . size ( 0 ), 1 ), dtype = torch . int16 ) candidates = torch . tensor ([ log_alpha [ - 1 , len ( y_insert_blank ) - 1 ], log_alpha [ - 1 , len ( y_insert_blank ) - 2 ] ]) prev_state = [ len ( y_insert_blank ) - 1 , len ( y_insert_blank ) - 2 ] state_seq [ - 1 ] = prev_state [ torch . argmax ( candidates )]","title":"\u7ec8\u6b62"},{"location":"asr/wenet%E7%9A%84ctc_alignment/#_13","text":"\u901a\u8fc7\u4e0a\u4e00\u6b65\u786e\u5b9a\u7684\u6700\u540e\u65f6\u523b\u72b6\u6001\uff0c\u4e0d\u65ad\u56de\u6eaf\u627e\u5230\u524d\u4e00\u65f6\u523b\u7684\u72b6\u6001\uff0c\u76f4\u81f3\u627e\u5230\u7b2c\u4e00\u65f6\u523b\uff0c\u7ed3\u675f\u3002 1 2 for t in range ( ctc_probs . size ( 0 ) - 2 , - 1 , - 1 ): state_seq [ t ] = state_path [ t + 1 , state_seq [ t + 1 , 0 ]]","title":"\u56de\u6eaf"},{"location":"asr/wenet%E7%9A%84ctc_alignment/#_14","text":"1 2 3 4 # \u5047\u8bbe\u8bed\u97f3\u67099\u5e27\uff0c\u5219output_alignment\u7684\u4e00\u4e2a\u53ef\u80fd\u7ed3\u679c\u662f[c,c,c,blank,a,a,t,t,blank] output_alignment = [] for t in range ( 0 , ctc_probs . size ( 0 )): output_alignment . append ( y_insert_blank [ state_seq [ t , 0 ]])","title":"\u8f93\u51fa"},{"location":"asr/wenet%E7%9A%84ctc_alignment/#_15","text":"CTC\u53ef\u5e2e\u52a9\u6a21\u578b\u5b66\u4e60\u8bed\u97f3\u548clabel\u4e4b\u95f4\u7684alignment\u3002 CTC\u53ef\u4ee5\u505a\u5230\u5e27\u540c\u6b65\u89e3\u7801\uff0c\u56e0\u6b64\u975e\u5e38\u9002\u5408\u505a\u6d41\u5f0f\u6a21\u578b\u3002 CTC\u8f93\u51fa\u662f\u76f8\u4e92\u72ec\u7acb\u7684\uff0c\u76f8\u5bf9\u4e8eSeq2Seq\u5efa\u6a21\u80fd\u529b\u8f83\u5dee\uff0c\u4e00\u822c\u9700\u8981\u5916\u6302\u8bed\u8a00\u6a21\u578b\u624d\u80fd\u5f97\u5230\u8f83\u597d\u7684\u6548\u679c\u3002 \u5982\u4f55\u901a\u4fd7\u5730\u8bb2\u89e3 viterbi \u7b97\u6cd5\uff1f \u674e\u5b8f\u6bc5NLP(\u81ea\u7136\u8bed\u8a00\u5904\u7406)-P6 WeNet\u66f4\u65b0\uff1a\u652f\u6301 CTC alignment","title":"\u5c0f\u7ed3"},{"location":"asr/wenet%E7%9A%84ctc_prefix_beam_search/","text":"wenet\u7684ctc_prefix_beam_search CTC\u5b57\u7b26\u4e32\u548c\u89c4\u6574\u5b57\u7b26\u4e32 CTC\u5b57\u7b26\u4e32\uff1a\u6a21\u578b\u5728\u6bcf\u4e2a\u65f6\u523b\u8f93\u51fa\u5b57\u7b26\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\u3002 \u89c4\u6574\u5b57\u7b26\u4e32\uff1a CTC\u5b57\u7b26\u4e32 \u53bb\u9664\u8fde\u7eed\u91cd\u590d\u548cblank\u4e4b\u540e\u7684\u5b57\u7b26\u4e32\u3002 CTC\u5e38\u89c1\u7684\u89e3\u7801\u65b9\u5f0f greedy decode\u3002\u6bcf\u5e27\u8f93\u51fa\u6700\u5927\u503c\uff0c\u7136\u540e\u89c4\u6574\u3002 \u5728 CTC\u5b57\u7b26\u4e32 \u4e0a\u505abeam search\uff08\u4e5f\u79f0 CTC Beam Search \uff09\uff0c\u8f93\u51fan\u4e2a\u7ed3\u679c\u4e4b\u540e\u89c4\u6574\uff0c\u5408\u5e76\u76f8\u540c\u5e8f\u5217\uff0c\u7136\u540e\u518d\u5e94\u7528\u8bed\u8a00\u6a21\u578b\uff0c\u4e5f\u5373SecondPass LM\u3002 \u5728 \u89c4\u6574\u5b57\u7b26\u4e32 \u4e0a\u505abeam search\uff08\u4e5f\u79f0 CTC Prefix Beam Search \uff09\uff0c\u53ef\u989d\u5916\u5e94\u7528\u8bed\u8a00\u6a21\u578b\u3002\u53ef\u4ee5\u5728\u89e3\u7801\u8fc7\u7a0b\u4e2d\u76f4\u63a5\u5e94\u7528\u8bed\u8a00\u6a21\u578b\uff0c\u4e5f\u5373FirstPass LM\u3002 \u4f7f\u7528FST\u9759\u6001\u89e3\u7801\uff0c\u53ef\u5f15\u5165\u8bed\u8a00\u6a21\u578b\u548c\u5b57\u5178\u6a21\u578b\u3002 CTC\u5b57\u7b26\u4e32 \u4e0abeam search\uff08 CTC Beam Search \uff09\u548c \u89c4\u6574\u5b57\u7b26\u4e32 \u4e0abeam search\uff08 CTC Prefix Beam Search \uff09\u7684\u4e3b\u8981\u533a\u522b\u5728\u4e8e\uff0c\u540c\u6837\u7684beam size\u4e0b\uff0c\u524d\u8005\u4e22\u5f03\u7684CTC\u8def\u5f84\u66f4\u591a\uff0c\u56e0\u6b64\u6548\u679c\u66f4\u5dee\u4e00\u4e9b\uff1a CTC Beam Search \u5728\u89e3\u7801\u8fc7\u7a0b\u4e2d\u4ea7\u751f\u7684CTC\u5019\u9009\u8def\u5f84\u6709\u53ef\u80fd\u4ea7\u751f\u91cd\u590d\u9879\uff0c\u800c\u8fd9\u4e9b\u91cd\u590d\u9879\u5728 CTC Beam Search \u7684\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\u662f\u5404\u81ea\u72ec\u7acb\u7684\uff0c\u5360\u7528\u4e86beam\u6570\u3002 CTC Prefix Beam Search \u5728\u89e3\u7801\u8fc7\u7a0b\u4e2d\u5408\u5e76\u91cd\u590d\u9879\u7684\u6982\u7387\uff0c\u4ece\u800c\u63d0\u5347\u4e86\u89e3\u7801\u7684\u591a\u6837\u6027\u548c\u9c81\u68d2\u6027\u3002 \u5982\u4e0b\u56fe\uff0c\u76f4\u63a5\u5728 CTC\u5b57\u7b26\u4e32 \u4e0a\u505abeam search\uff0c\u5f53beam size=3\u65f6\uff0c\u6bcf\u4e2a\u65f6\u523b\u53ea\u6709\u4e09\u6761\u8def\u5f84\uff1a \u5728 \u89c4\u6574\u5b57\u7b26\u4e32 \u4e0a\u505abeam search\uff0c\u5f53beam size=3\u65f6\uff0c\u6bcf\u4e2a\u65f6\u523b\u5219\u53ef\u4ee5\u4fdd\u7559\u66f4\u591a\u7684\u8def\u5f84\uff1a CTC Prefix Beam Search\u4ecd\u7136\u4f1a\u4e22\u5931\u4e00\u4e9bCTC\u5e8f\u5217\u7684\u6982\u7387\uff0c\u6bd4\u5982\u4e0a\u4f8b\u4e2d\uff0c\u5f53\u65f6\u523b \\(t\\) \u7684beam\u4e2d\u53ea\u6709a\u800c\u6ca1\u6709ab\u65f6\uff0c\u5728 \\(t+1\\) \u65f6\u523b\u8ba1\u7b97ab\uff0c\u53ea\u4f7f\u7528\u4e86 \\(t\\) \u65f6\u523ba\u7684\u6269\u5c55\uff0c\u6b64\u65f6\u4f1a\u4e22\u5931\u6765\u81ea \\(t\\) \u65f6\u523bab\u7684\u5f97\u5206\u3002 CTC Prefix Beam Search\u539f\u7406 \u5229\u7528\u795e\u7ecf\u7f51\u7edc\u548cCTC\u5efa\u6a21\u5e8f\u5217\u95ee\u9898\u65f6\uff0c\u795e\u7ecf\u7f51\u7edc\u8f93\u51fa\u4e00\u4e2a \\(T\\times M\\) \u7684\u77e9\u9635\uff0c\u5176\u4e2d \\(T\\) \u8868\u793a\u97f3\u9891\u5e27\u6570\uff0c \\(M\\) \u8868\u793a\u8bcd\u5178\u7684\u5927\u5c0f\u3002CTC Prefix Beam Search\u7b97\u6cd5\u5219\u5728\u8be5\u77e9\u9635\u7684\u57fa\u7840\u4e0a\uff0c\u627e\u51fa\u6982\u7387\u6700\u9ad8\u7684N\u6761\u8def\u5f84\u3002 CTC Prefix Beam Search\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6bcf\u4e2a\u65f6\u523b\u5747\u6267\u884c\uff1a \u6269\u5c55\u3002\u6839\u636e\u524d\u7f00\u4e32\u548c\u5f53\u524d\u65f6\u523b\u7684\u8f93\u51fa\uff0c\u8ba1\u7b97\u6240\u6709\u5f53\u524d\u53ef\u80fd\u8f93\u51fa\u7684 \u89c4\u6574\u5b57\u7b26\u4e32 \u6982\u7387\u3002 \u89c4\u7ea6\u3002\u5c06\u89c4\u7ea6\u5f97\u5230\u7684\u76f8\u540c\u4e32\u5bf9\u5e94\u7684\u5019\u9009\u6982\u7387\u76f8\u52a0\u3002 \u88c1\u526a\u3002\u4ec5\u4fdd\u7559top k\u4e2a\u6700\u4f18\u7684\u5e8f\u5217\u505a\u4e0b\u4e00\u6b65\u6269\u5c55\u3002\u4e0a\u56fe\u4e2d \\(k=3\\) \uff0c\u7eff\u8272\u8868\u793a\u4fdd\u7559\uff0c\u7ea2\u8272\u8868\u793a\u88c1\u526a\u3002 \u5bf9\u4e8e \\(t\\) \u65f6\u523b\u5904\u5728beam\u4e2d\u7684\u6bcf\u4e2a\u89c4\u6574\u5b57\u7b26\u4e32\uff0c\u66f4\u65b0\u5176\u5bf9\u5e94\u7684 \\(t+1\\) \u65f6\u523b\u89c4\u6574\u5b57\u7b26\u4e32\u7684\u6982\u7387\u503c\uff0c\u6b64\u65f6\u5e76\u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528 \\(t\\) \u65f6\u523b\u89c4\u6574\u5b57\u7b26\u4e32\u7684\u6982\u7387\u4e58\u4e0a \\(t+1\\) \u65f6\u523b\u8f93\u51fa\u5b57\u7b26\u7684\u6982\u7387\u4ee5\u5f97\u5230 \\(t+1\\) \u65f6\u523b\u89c4\u6574\u5b57\u7b26\u4e32\u7684\u6982\u7387\uff0c\u4e3b\u8981\u539f\u56e0\u662f\u6839\u636eCTC\u89c4\u5219\uff0c\u4f7f\u7528\u76f8\u540c\u7684 \\(t\\) \u65f6\u523b\u89c4\u6574\u5b57\u7b26\u4e32\uff0c\u76f8\u540c\u7684 \\(t+1\\) \u65f6\u523b\u8f93\u51fa\u5b57\u7b26\u80fd\u591f\u5f97\u5230\u4e0d\u540c\u7684 \\(t+1\\) \u65f6\u523b\u89c4\u6574\u5b57\u7b26\u4e32\u3002\u6bd4\u5982 \\(t\\) \u65f6\u523bCTC\u5b57\u7b26\u4e32\u4e3aaa\u548ca-\uff08\u201c-\u201d\u8868\u793ablank\uff09\uff0c\u5bf9\u5e94\u7684\u89c4\u6574\u5b57\u7b26\u4e32\u5747\u4e3aa\uff0c\u5f53 \\(t+1\\) \u65f6\u523b\u8f93\u51fa\u5b57\u7b26a\u65f6\uff0c\u5f97\u5230\u7684 \\(t+1\\) \u65f6\u523b\u89c4\u6574\u5b57\u7b26\u4e32\u5206\u522b\u4e3aa\u548caa\u3002\u56e0\u6b64\u9700\u8981\u533a\u5206\u5bf9\u5f85blank\u548c\u975eblank\u7ed3\u5c3e\u7684CTC\u5b57\u7b26\u4e32\u89c4\u6574\u6982\u7387\uff1a \\(p_b(L)\\) \u8868\u793a\u6240\u6709\u4ee5blank\u7ed3\u5c3e\u4e14\u89c4\u6574\u540e\u5b57\u7b26\u4e32\u662fL\u7684\u5404\u4e2aCTC\u5b57\u7b26\u4e32\u6982\u7387\u4e4b\u548c\u3002 \\(p_{nb}(L)\\) \u8868\u793a\u6240\u6709\u4ee5\u975eblank\u7ed3\u5c3e\u4e14\u89c4\u6574\u540e\u5b57\u7b26\u4e32\u662fL\u7684\u5404\u4e2aCTC\u5b57\u7b26\u4e32\u6982\u7387\u4e4b\u548c\u3002 \u5047\u8bbe \\(t=3\\) \u65f6\u89c4\u6574\u5b57\u7b26\u4e32\u4e3aa\uff0c\u5219\uff1a \\[ p_b(a)=p(aa-)+p(-a-)+p(a--) \\] \\[ p_{nb}(a)=p(aaa)+p(-aa)+p(--a) \\] \u82e5 \\(t=4\\) \u65f6\u8f93\u51fa\u5b57\u7b26a\uff0c\u4ea7\u751f\u89c4\u6574\u5b57\u7b26\u4e32\u6709\u5982\u4e0b\u56db\u79cd\u60c5\u51b5\uff1a \u5f53 \\(t+1\\) \u8f93\u51fa\u662fblank\u65f6\uff0c\u4ea7\u751f\u89c4\u6574\u5b57\u7b26\u4e32a\u3002 \u5f53 \\(t+1\\) \u8f93\u51fa\u662fa\u65f6\uff0c\u53ef\u4ee5\u4ea7\u751f\u89c4\u6574\u5b57\u7b26\u4e32a\uff08 \\(t\\) \u65f6\u523b\u8f93\u51fa\u4e3a\u975eblank\uff09\u3002 \u5f53 \\(t+1\\) \u8f93\u51fa\u662fa\u65f6\uff0c\u4e5f\u53ef\u4ee5\u4ea7\u751f\u89c4\u6574\u5b57\u7b26\u4e32aa\uff08 \\(t\\) \u65f6\u523b\u8f93\u51fa\u4e3ablank\uff09\u3002 \u5f53 \\(t+1\\) \u8f93\u51fa\u4e3ab\u65f6\uff0c\u4ea7\u751f\u89c4\u6574\u5b57\u7b26\u4e32ab\u3002 \u56db\u79cd\u60c5\u51b5\u9700\u8981\u66f4\u65b0\u7684\u7edf\u8ba1\u91cf\u5982\u4e0b\uff1a \\[ p_b^{t+1}(a)+=[p_b^t(a)+p_{nb}^t(a)]p_{ctc}^{t+1}(-) \\] \\[ p_{nb}^{t+1}(a)+=p_{nb}^t(a)p_{ctc}^{t+1}(a) \\] \\[ p_{nb}^{t+1}(aa)+=p_{b}^t(a)p_{ctc}^{t+1}(a) \\] \\[ p_{nb}^{t+1}(ab)+=[p_b^t(a)+p_{nb}^t(a)]p_{ctc}^{t+1}(b) \\] \u5982\u4e0a\u5f0f\uff0c\u5728\u60c5\u51b51\u548c4\u4e2d\uff0c\u53ef\u4ee5\u901a\u8fc72\u79cd\u9014\u5f84\u83b7\u5f97\u6240\u9700\u8981\u7684 \\(t\\) \u65f6\u523b\u89c4\u6574\u5b57\u7b26\u4e32a\uff0c\u56e0\u6b64\u9700\u8981\u9075\u5faa\u6982\u7387\u8bba\u4e2d\u7684\u52a0\u6cd5\u539f\u7406\uff0c\u5c06\u4e24\u4e2a\u6982\u7387\u503c\u52a0\u8d77\u6765\uff1b\u7136\u540e\u9075\u5faa\u4e58\u6cd5\u539f\u7406\uff0c\u4e58\u7b2c \\(t+1\\) \u65f6\u523b\u7684\u6982\u7387\u503c\u3002 \u603b\u4e4b\uff0c\u5982\u679c\u5f53\u524d\u65f6\u523b\u8f93\u51fa\u5b57\u7b26\uff08\u4e0d\u542bblank\uff09\u548c\u89c4\u6574\u5b57\u7b26\u4e32\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u4e0d\u540c\uff0c\u5219\u4e0d\u9700\u8981\u533a\u5206blank\u548c\u975eblank\u89c4\u6574\u6982\u7387\uff0c\u4e24\u8005\u52a0\u8d77\u6765\u4e4b\u540e\u4e58\u5f53\u524d\u5b57\u7b26\u6982\u7387\u5373\u53ef\uff1b\u5982\u679c\u5f53\u524d\u65f6\u523b\u8f93\u51fa\u5b57\u7b26\uff08\u4e0d\u542bblank\uff09\u548c\u89c4\u6574\u5b57\u7b26\u4e32\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u76f8\u540c\uff0c\u6b64\u65f6\u6709\u53ef\u80fd\u51fa\u73b0\u76f8\u540c\u89c4\u6574\u5b57\u7b26\u4e32\u548c\u5f53\u524d\u8f93\u51fa\u5b57\u7b26\uff0c\u4ea7\u751f\u5f53\u524d\u65f6\u523b\u4e0d\u540c\u89c4\u6574\u5b57\u7b26\u4e32\u7684\u60c5\u51b5\uff0c\u56e0\u6b64\u9700\u8981\u533a\u5206blank\u548c\u975eblank\u89c4\u6574\u6982\u7387\u3002 \u5982\u4e0a\u56fe\u6240\u793a\uff0c\u5047\u8bbe\u5de6\u4e0a\u89d2\u4e3a\u795e\u7ecf\u7f51\u7edc\u8f93\u51fa\u7684 \\(T\\times M\\) \u77e9\u9635\uff0c\u5176\u4e2d \\(T=3,M=3\\) \u3002\u4ee5\u4e0a\u56fe \\(T=2\\) \uff0c\u7eff\u6846 \\(a\\) \u6269\u5c55\u5230 \\(T=3\\) \u7684\u8fc7\u7a0b\u4e3a\u4f8b\u3002 \u5728\u6b65\u9aa41\u4e2d\uff1a \u5047\u8bbe \\(a\\) \u6269\u5c55\u5230 \\(\\epsilon\\) \uff0c\u67e5\u9605\u8868\u683c\u53ef\u77e5\uff0c\u8be5\u8fc7\u7a0b\u7684\u6982\u7387\u4e3a0.10\uff0c\u56e0\u6b64\u8ba1\u7b97\u5f97\u5230\u7684\u6982\u7387\u4e3a \\(0.3875\\times 0.10=0.03875\\) \uff0c\u6ce8\u610f\u5230\u4e58\u6570\u4e3a0.3875\uff0c\u800c\u975e0.2275\u6216\u80050.16\uff0c\u8fd9\u662f\u56e0\u4e3a\u4e0b\u4e00\u4e2a\u5b57\u7b26\u4e3a \\(\\epsilon\\) \uff0c\u4e0e\u5f53\u524d\u5b57\u7b26a\u4e0d\u540c\uff0c\u5e94\u8be5\u4f7f\u7528\u5019\u9009\u6982\u7387\u7684\u52a0\u548c\u503c\u3002 \u5047\u8bbe \\(a\\) \u6269\u5c55\u5230 \\(a\\) \uff0c\u67e5\u9605\u8868\u683c\u53ef\u77e5\uff0c\u8be5\u8fc7\u7a0b\u7684\u6982\u7387\u4e3a0.50\uff0c\u7531\u4e8e\u5f53\u524d\u5b57\u7b26\u548c\u4e0b\u4e00\u4e2a\u5b57\u7b26\u76f8\u540c\uff0c\u56e0\u6b64\u4e58\u6570\u5e94\u91c7\u7528\u5404\u81ea\u7684\u5019\u9009\u6982\u7387\uff0c\u5206\u522b\u662f \\(0.2275\\times 0.50=0.11375\\) \u548c \\(0.16\\times 0.50=0.08000\\) \u3002 \u5047\u8bbe \\(a\\) \u6269\u5c55\u5230 \\(b\\) \uff0c\u67e5\u9605\u8868\u683c\u53ef\u77e5\uff0c\u8be5\u8fc7\u7a0b\u7684\u6982\u7387\u4e3a0.40\uff0c\u5e76\u4e14\u5f53\u524d\u5b57\u7b26\u548c\u4e0b\u4e00\u4e2a\u5b57\u7b26\u4e0d\u540c\uff0c\u4e58\u6570\u5e94\u91c7\u7528\u5019\u9009\u6982\u7387\u7684\u52a0\u548c\u503c\uff0c\u56e0\u6b64\u8ba1\u7b97\u5f97\u5230\u7684\u6982\u7387\u4e3a \\(0.3875\\times 0.40=0.1150\\) \u3002 \u4ee5\u6b64\u7c7b\u63a8\uff0c\u8ba1\u7b97\u51fa\u5176\u5b83\u7684\u6982\u7387\u503c\u3002\u6ce8\u610f\u5230\uff0c\u901a\u8fc7\u4e0d\u540c\u7684\u8def\u5f84\u89c4\u7ea6\u4e4b\u540e\u53ef\u4ee5\u5f97\u5230\u76f8\u540c\u4e32\uff0c\u6bd4\u5982 \\(a\\to a,a\\epsilon \\to a\\) \uff0c\u56e0\u6b64\u6839\u636e\u6b65\u9aa42\u5c06\u89c4\u7ea6\u5f97\u5230\u7684\u76f8\u540c\u4e32\u5bf9\u5e94\u7684\u5019\u9009\u6982\u7387\u76f8\u52a0\uff0c\u5f97\u5230a\u5bf9\u5e94\u7684\u6982\u7387\u52a0\u548c\u503c\u4e3a \\(0.11375+0.03875=0.1525\\) \u3002 \u5728\u6b65\u9aa43\u4e2d\uff0c\u7531\u4e8e \\(k=3\\) \uff0c\u5219\u4fdd\u7559\u6982\u7387\u6700\u9ad8\u76843\u7ec4\u6700\u4f18\u5e8f\u5217\uff0c\u4e0a\u56fe\u4e2d\u4ee5\u7eff\u8272\u6807\u6ce8\u3002 \u5177\u4f53\u6b65\u9aa4\u548cPython\u5b9e\u73b0 \u5728 First-Pass Large Vocabulary Continuous Speech Recognition using Bi-Directional Recurrent DNNs \u4e2d\u7ed9\u51faCTC Prefix Beam Search\u7684\u5177\u4f53\u6b65\u9aa4\u5982\u4e0b\uff1a \u5982\u4e0a\u7b97\u6cd5\u6d41\u7a0b\u56fe\u4e2d\uff0c\u9664\u4e86 else if c = space then \uff0c\u5206\u522b\u5bf9\u5e94\u4e0a\u8ff0\u60c5\u51b51~4\u3002 \u5bf9\u5e94\u7684Python\u5b9e\u73b0\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 \"\"\" Author: Awni Hannun This is an example CTC decoder written in Python. The code is intended to be a simple example and is not designed to be especially efficient. The algorithm is a prefix beam search for a model trained with the CTC loss function. For more details checkout either of these references: https://distill.pub/2017/ctc/#inference https://arxiv.org/abs/1408.2873 \"\"\" import numpy as np import math import collections NEG_INF = - float ( \"inf\" ) def decode ( probs , beam_size = 10 , blank = 0 ): \"\"\" Performs inference for the given output probabilities. Arguments: probs: The output probabilities (e.g. log post-softmax) for each time step. Should be an array of shape (time x output dim). beam_size (int): Size of the beam to use during inference. blank (int): Index of the CTC blank label. Returns the output label sequence and the corresponding negative log-likelihood estimated by the decoder. \"\"\" T , S = probs . shape # Elements in the beam are (prefix, (p_blank, p_no_blank)) # Initialize the beam with the empty sequence, a probability of # 1 for ending in blank and zero for ending in non-blank # (in log space). beam = [( tuple (), ( 0.0 , NEG_INF ))] for t in range ( T ): # Loop over time # A default dictionary to store the next step candidates. next_beam = make_new_beam () for s in range ( S ): # Loop over vocab p = probs [ t , s ] # The variables p_b and p_nb are respectively the # probabilities for the prefix given that it ends in a # blank and does not end in a blank at this time step. for prefix , ( p_b , p_nb ) in beam : # Loop over beam # \u60c5\u51b51 # If we propose a blank the prefix doesn't change. # Only the probability of ending in blank gets updated. if s == blank : # n_p_b\uff1a\u5f53\u524d\u65f6\u523bblank\u6982\u7387\uff0cn_p_nb\uff1a\u5f53\u524d\u65f6\u523b\u975eblank\u6982\u7387 n_p_b , n_p_nb = next_beam [ prefix ] # logsumexp(n_p_b, p_b + p, p_nb + p): # n_p_b x ((p_b + p) + (p_nb + p)) n_p_b = logsumexp ( n_p_b , p_b + p , p_nb + p ) next_beam [ prefix ] = ( n_p_b , n_p_nb ) continue # Extend the prefix by the new character s and add it to # the beam. Only the probability of not ending in blank # gets updated. end_t = prefix [ - 1 ] if prefix else None n_prefix = prefix + ( s ,) n_p_b , n_p_nb = next_beam [ n_prefix ] if s != end_t : # \u60c5\u51b54 n_p_nb = logsumexp ( n_p_nb , p_b + p , p_nb + p ) else : # \u60c5\u51b52\u548c3 # We don't include the previous probability of not ending # in blank (p_nb) if s is repeated at the end. The CTC # algorithm merges characters not separated by a blank. n_p_nb = logsumexp ( n_p_nb , p_b + p ) # *NB* this would be a good place to include an LM score. next_beam [ n_prefix ] = ( n_p_b , n_p_nb ) # If s is repeated at the end we also update the unchanged # prefix. This is the merging case. if s == end_t : # \u60c5\u51b52\uff0c\u89c4\u6574\u5b57\u7b26\u4e32\u4e0d\u53d8\uff0c\u4f46\u89c4\u6574\u6982\u7387\u9700\u8981\u66f4\u65b0 n_p_b , n_p_nb = next_beam [ prefix ] n_p_nb = logsumexp ( n_p_nb , p_nb + p ) next_beam [ prefix ] = ( n_p_b , n_p_nb ) # Sort and trim the beam before moving on to the # next time-step. beam = sorted ( next_beam . items (), key = lambda x : logsumexp ( * x [ 1 ]), reverse = True ) beam = beam [: beam_size ] best = beam [ 0 ] return best [ 0 ], - logsumexp ( * best [ 1 ]) WeNet\u4e2d\u83b7\u53d6\u5b57\u7ea7\u522b\u7684\u65f6\u95f4\u6233 \u5728\u8bed\u97f3\u8bc6\u522b\u7684\u4e00\u4e9b\u4efb\u52a1\u4e2d\uff0c\u5b57\u7ea7\u522b\u7684\u65f6\u95f4\u6233\u548cN-best\u626e\u6f14\u7740\u91cd\u8981\u7684\u4f5c\u7528\uff0c\u6bd4\u5982\u89c6\u9891\u5e94\u7528\u4e2d\uff0c\u8bed\u97f3\u8bc6\u522b\u7ed3\u5408\u5b57\u7ea7\u522b\u7684\u65f6\u95f4\u6233\u53ef\u4ee5\u5728\u7cbe\u786e\u7684\u65f6\u95f4\u663e\u793a\u5b57\u5e55\uff0c\u5728\u4f1a\u8bae\u573a\u666f\u4e2d\uff0c\u5b57\u7ea7\u522b\u7684\u65f6\u95f4\u6233\u53ef\u4ee5\u6807\u5b9a\u4e0e\u4f1a\u8005\u8bf4\u67d0\u53e5\u8bdd\u67d0\u4e2a\u5b57\u7684\u7cbe\u786e\u65f6\u95f4\u3002 \u6bcf\u4e2a\u524d\u7f00\u4e32\u53ef\u4ee5\u7531\u591a\u4e2a\u4e32\u89c4\u7ea6\u800c\u6210\u3002WeNet \u4f7f\u7528\u524d\u7f00\u4e32\u7684\u88ab\u89c4\u7ea6\u4e32\u4e2d\u6700\u4f18\u7684\u4e00\u6761\u8def\u5f84\uff0c\u5373viterbi\u8def\u5f84\u6765\u8bb0\u5f55\u65f6\u95f4\u4fe1\u606f\uff0cviterbi\u8def\u5f84\u8bb0\u5f55\u4e86\u6bcf\u4e2a\u5b57\u5cf0\u503c\u7684\u65f6\u95f4\u3002 \u5982\u4e0a\u56fe\u6240\u793a\uff0c\u89e3\u7801\u540e\u4e00\u5171\u5f97\u5230\u4e09\u4e2a\u89e3\u7801\u7ed3\u679c\uff1aa\uff0cab\u548cba\uff1a \u5bf9\u4e8e\u89e3\u7801\u7ed3\u679ca\u6765\u8bf4\uff0c\u8003\u8651\u5230\u526a\u679d\u7b56\u7565\uff0c\u56e0\u6b64\u89c4\u7ea6\u524d\u7684\u4e32\u53ea\u53ef\u80fd\u662f \\(\\epsilon a\\epsilon\\) \uff0c \\(\\epsilon a a\\) \u6216\u8005 \\(aaa\\) \u3002 viterbi\u5206\u6570\u8f83\u9ad8\u7684\u662f \\(aaa\\) \uff0c\u4e3a \\(0.40\\times 0.35\\times 0.50=0.07\\) \u3002 a\u7684\u5cf0\u503c\u5728 \\(T=3\\) \uff0c\u5bf9\u5e94\u7684\u6982\u7387\u4e3a \\(0.50\\) \uff0c\u5bf9\u5e94\u7684\u65f6\u95f4\u6233 \\(T=[3]\\) \u3002 \u5bf9\u4e8e\u89e3\u7801\u7ed3\u679cab\u6765\u8bf4\uff0c\u89c4\u7ea6\u524d\u7684\u4e32\u53ef\u80fd\u662faab\u6216\u8005 \\(a\\epsilon b\\) \u3002 viterbi\u5206\u6570\u8f83\u9ad8\u7684\u662f \\(a\\epsilon b\\) \uff0c\u4e3a \\(0.40\\times 0.40\\times 0.40=0.064\\) \u3002 a\u548cb\u5bf9\u5e94\u7684\u65f6\u95f4\u6233\u4e3a \\(T=[1,3]\\) \u3002 \u5bf9\u4e8e\u89e3\u7801\u7ed3\u679cba\u6765\u8bf4\uff0c\u89c4\u7ea6\u524d\u7684\u4e32\u53ef\u80fd\u662f \\(\\epsilon ba,b\\epsilon a,ba\\epsilon ,baa\\) \u6216\u8005 \\(bba\\) \u3002 viterbi\u5206\u6570\u8f83\u9ad8\u7684\u662f \\(b\\epsilon a\\) \uff0c\u4e3a \\(0.35\\times 0.40\\times 0.50=0.07\\) \u3002 b\u548ca\u7684\u65f6\u95f4\u6233\u4e3a \\(T=[1,3]\\) \u3002 \u901a\u5e38\u4e00\u4e2a\u5b57\u7684\u65f6\u95f4\u6233\u4fe1\u606f\u5e94\u8be5\u5305\u62ec\u8d77\u59cb\u65f6\u95f4\u548c\u7ec8\u6b62\u65f6\u95f4\uff0c\u800c\u4f7f\u7528\u4e0a\u8ff0\u7b97\u6cd5\uff0c\u53ea\u80fd\u83b7\u53d6\u8be5\u5b57\u5cf0\u503c\u6240\u5728\u7684\u65f6\u95f4\uff0c\u56e0\u6b64\u5728WeNet\u5b9e\u73b0\u4e2d\uff0c\u8003\u8651\u5230\u5ef6\u8fdf\u7b49\u56e0\u7d20\uff0c\u5c06\u5cf0\u503c\u6240\u5728\u7684\u65f6\u95f4\u5f53\u505a\u8be5\u5b57\u7684\u7ec8\u6b62\u65f6\u95f4\uff0c\u4e0a\u4e00\u4e2a\u5b57\u5cf0\u503c\u6240\u5728\u7684\u65f6\u95f4\u5f53\u505a\u8d77\u59cb\u65f6\u95f4\u3002 \u4ee3\u7801\u5b9e\u73b0 WeNet\u4f7f\u7528HashMap\u4fdd\u5b58\u89e3\u7801\u8fc7\u7a0b\u4e2d\u4ea7\u751f\u7684\u89c4\u6574\u5b57\u7b26\u4e32\uff08\u5b57\u7b26\u5bf9\u5e94\u7684ID\u5e8f\u5217\uff09\u53ca\u5176\u5bf9\u5e94\u7684\u5206\u6570\u4fe1\u606f\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 // wenet/runtime/core/decoder/ctc_prefix_beam_search.cc std :: unordered_map < std :: vector < int > , PrefixScore , PrefixHash > next_hyps ; // wenet/runtime/core/decoder/ctc_prefix_beam_search.h struct PrefixScore { float s = - kFloatMax ; // \u4ee5blank\u7ed3\u5c3e\u7684\u5206\u6570 float ns = - kFloatMax ; // \u4ee5\u975eblank\u7ed3\u5c3e\u7684\u5206\u6570 float v_s = - kFloatMax ; // \u4ee5blank\u7ed3\u5c3e\u7684viterbi\u5206\u6570 float v_ns = - kFloatMax ; // \u4ee5\u975eblank\u7ed3\u5c3e\u7684viterbi\u5206\u6570 float cur_token_prob = - kFloatMax ; // \u5f53\u524dtoken\u5cf0\u503c\u7684\u6982\u7387 std :: vector < int > times_s ; // \u4ee5blank\u7ed3\u5c3eviterbi\u8def\u5f84\u7684\u65f6\u95f4\u6233 std :: vector < int > times_ns ; // \u4ee5\u975eblank\u7ed3\u5c3eviterbi\u8def\u5f84\u7684\u65f6\u95f4\u6233 // blank\u548c\u975eblank\u89c4\u6574\u6982\u7387\u4e4b\u548c float score () const { return LogAdd ( s , ns ); } // viterbi\u5206\u6570\u4e3ablank\u548c\u975eblank\u7ef4\u7279\u6bd4\u5206\u6570\u7684\u6700\u5927\u503c float viterbi_score () const { return v_s > v_ns ? v_s : v_ns ; } // \u6839\u636eviterbi\u5206\u6570\u9009\u62e9\u89c4\u6574\u4e32\u7684\u65f6\u95f4\u6233 const std :: vector < int >& times () const { return v_s > v_ns ? times_s : times_ns ; } ... // \u8bed\u8a00\u6a21\u578b\u548ce2e\u58f0\u5b66\u6a21\u578b\u5206\u6570\u4e4b\u548c float total_score () const { return score () + context_score ; } }; \u5728\u89e3\u7801\u8fc7\u7a0b\u4e2d\uff0c\u901a\u8fc7 for \u5faa\u73af\u904d\u5386\u6bcf\u4e2a\u65f6\u523b\uff0c\u83b7\u53d6\u6bcf\u4e2a\u65f6\u523b\u7684\u8f93\u51fa\uff0c\u7136\u540e\u6267\u884cCTC Prefix Beam Search\u3002 \u7b2c\u4e00\u6b21\u526a\u679d \u58f0\u5b66\u6a21\u578b\u6bcf\u4e2a\u65f6\u523b\u8f93\u51fa vocab_size \u4e2a\u6982\u7387\u503c\uff0c\u7b2c\u4e00\u6b21\u526a\u679d\u65f6\uff0c\u9009\u53d6\u524d opts_.first_beam_size \uff08\u9ed8\u8ba4\u503c10\uff09\u4e2a\u5b57\u7b26\u548c\u5bf9\u5e94\u6982\u7387\u503c\u3002 1 2 3 4 5 // wenet/runtime/core/decoder/ctc_prefix_beam_search.cc // 1. First beam prune, only select topk candidates std :: tuple < Tensor , Tensor > topk = logp_t . topk ( opts_ . first_beam_size ); Tensor topk_score = std :: get < 0 > ( topk ); Tensor topk_index = std :: get < 1 > ( topk ); \u4ee4\u724c\u4f20\u64ad \u4ee4\u724c\u4f20\u64ad\uff08Token Passing\uff09\u4e2d\u904d\u5386\u5f53\u524d\u65f6\u523b\u7684 opts_.first_beam_size \u4e2a\u8f93\u51fa\uff0c\u5bf9\u6bcf\u4e00\u4e2a\u8f93\u51fa\u6267\u884cCTC Prefix Beam Search\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 // 2. Token Passing // next_hyps \u8bb0\u5f55\u4e0b\u4e00\u4e2a\u65f6\u523b\u7684\u89c4\u7ea6\u5b57\u7b26\u4e32\uff0c\u907f\u514d\u66f4\u65b0\u5f53\u524d\u65f6\u523b\u7684\u89c4\u7ea6\u5b57\u7b26\u4e32 std :: unordered_map < std :: vector < int > , PrefixScore , PrefixHash > next_hyps ; ... for ( int i = 0 ; i < topk_index . size (); ++ i ) { // \u904d\u5386\u5f53\u524dbeam_size\u4e2a\u8f93\u51fa int id = topk_index [ i ]; auto prob = topk_score [ i ]; for ( const auto & it : cur_hyps_ ) { const std :: vector < int >& prefix = it . first ; const PrefixScore & prefix_score = it . second ; // \u5982\u679c prefix \u4e0d\u5728 next_hyps \u4e2d, next_hyps[prefix] \u5219\u4f1a\u63d2\u5165\u9ed8\u8ba4\u7684\u5206\u6570\u4fe1\u606f // \u4e5f\u5373PrefixScore(-inf, -inf) // \u4ee3\u7801\u4e2d\u5229\u7528\u5bf9\u6570\uff0c\u5c06\u4e58\u6cd5\u8f6c\u5316\u4e3a\u52a0\u6cd5\uff1aLogAdd() // \u4e3a\u53d9\u8ff0\u65b9\u4fbf\uff0c\u4e0b\u8ff0\u5c06\u5f53\u524d\u65f6\u523b\u65b0\u7684\u89c4\u6574\u5b57\u7b26\u4e32\u79f0\u4f5c\u201c\u65b0\u4e32\u201d // \u524d\u4e00\u65f6\u523b\u7684\u89c4\u6574\u5b57\u7b26\u4e32\u79f0\u4f5c\u201c\u524d\u7f00\u4e32\u201d if ( id == opts_ . blank ) { // \u60c5\u51b51\uff1a\u5f53\u524d\u65f6\u523b\u8f93\u51fablank\uff0c\u5219\u65b0\u4e32\u548c\u524d\u7f00\u4e32\u76f8\u540c // Case 0: *a + \u03b5 => *a PrefixScore & next_score = next_hyps [ prefix ]; // \u65b0\u4e32\u4ee5 \u03b5 \u7ed3\u5c3e\u7684\u5206\u6570 next_score.s \u4e3a\u4e24\u8005\u4e4b\u548c\uff1a // 1. \u65b0\u4e32\u4ee5 \u03b5 \u7ed3\u5c3e\u7684\u5206\u6570 next_score.s // 2. \u524d\u7f00\u4e32\u7684\u5206\u6570 prefix_score.score() \u4e0e\u5f53\u524d\u8f93\u51fa\u7684\u6982\u7387\u7684\u5bf9\u6570 prob \u4e4b\u548c next_score . s = LogAdd ( next_score . s , prefix_score . score () + prob ); // \u65b0\u4e32\u4ee5 \u03b5 \u7ed3\u5c3e\u7684 viterbi \u5206\u6570 next_score.v_s \u4e3a\uff1a // \u524d\u7f00\u4e32\u7684 viterbi \u5206\u6570 prefix_score.viterbi_score() \u4e0e\u5f53\u524d\u8f93\u51fa\u7684\u6982\u7387 prob \u7684\u5bf9\u6570\u548c next_score . v_s = prefix_score . viterbi_score () + prob ; // \u65b0\u4e32\u4ee5 \u03b5 \u7ed3\u5c3e\u7684 viterbi \u8def\u5f84\u7684\u65f6\u95f4\u6233 next_score.times_s \u7b49\u4e8e\uff1a // \u524d\u7f00\u4e32\u7684\u65f6\u95f4\u6233 prefix_score.times() next_score . times_s = prefix_score . times (); // \u4e0a\u4e0b\u6587\u504f\u7f6e\uff08context biasing\uff09\uff0c\u901a\u8fc7\u504f\u7f6e\u77ed\u8bed\u5217\u8868\u4f7f\u6a21\u578b\u503e\u5411\u4e8e\u8bc6\u522b\u7279\u5b9a\u8bcd // Prefix not changed, copy the context from prefix. if ( context_graph_ && ! next_score . has_context ) { next_score . CopyContext ( prefix_score ); next_score . has_context = true ; } } else if ( ! prefix . empty () && id == prefix . back ()) { // \u60c5\u51b52\uff1a\u5f53\u524d\u65f6\u523b\u7684\u8f93\u51fa\u5b57\u7b26\uff08\u4e0d\u542bblank\uff09\uff0c\u4e0eCTC\u5b57\u7b26\u4e32\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u76f8\u540c\uff08\u56e0\u6b64\u4e0e\u524d\u7f00\u4e32\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u4e5f\u76f8\u540c\uff09 // \u5219\u65b0\u4e32\u548c\u524d\u7f00\u4e32\u76f8\u540c // Case 2: *a + a => *a PrefixScore & next_score1 = next_hyps [ prefix ]; // \u65b0\u4e32\u4ee5\u975e \u03b5 \u7ed3\u5c3e\u7684\u5206\u6570 next_score1.ns \u4e3a\u4e24\u8005\u4e4b\u548c\uff1a // 1. \u65b0\u4e32\u4ee5\u975e \u03b5 \u7ed3\u5c3e\u7684\u5206\u6570 next_score1.ns // 2. \u524d\u7f00\u4e32\u4ee5\u975e \u03b5 \u7ed3\u5c3e\u7684\u5206\u6570 prefix_score.ns \u548c\u5f53\u524d\u8f93\u51fa\u7684\u6982\u7387 prob \u7684\u5bf9\u6570\u548c next_score1 . ns = LogAdd ( next_score1 . ns , prefix_score . ns + prob ); // \u5224\u65ad\u662f\u5426\u9700\u8981\u66f4\u65b0\u4ee5\u975e \u03b5 \u7ed3\u5c3e\u7684\u65b0\u4e32 viterbi \u5206\u6570 next_score1.v_ns if ( next_score1 . v_ns < prefix_score . v_ns + prob ) { next_score1 . v_ns = prefix_score . v_ns + prob ; // \u5224\u65ad\u662f\u5426\u9700\u8981\u66f4\u65b0\u65b0\u4e32\u4e2d\u6700\u540e\u4e00\u4e2a\u5b57\u5cf0\u503c\u7684\u6982\u7387 next_score1.cur_token_prob if ( next_score1 . cur_token_prob < prob ) { next_score1 . cur_token_prob = prob ; // \u65b0\u4e32\u4ee5\u975e \u03b5 \u7ed3\u5c3e\u7684 viterbi \u8def\u5f84\u7684\u65f6\u95f4\u6233 next_score1.times_ns \u7b49\u4e8e\uff1a // \u524d\u7f00\u4e32\u4ee5\u975e \u03b5 \u7ed3\u5c3e\u7684 viterbi \u8def\u5f84\u7684\u65f6\u95f4\u6233 prefix_score.times_ns next_score1 . times_ns = prefix_score . times_ns ; CHECK_GT ( next_score1 . times_ns . size (), 0 ); // \u66f4\u65b0\u65b0\u4e32\u4e2d\u6700\u540e\u4e00\u4e2a\u5b57\u5cf0\u503c\u7684\u4f4d\u7f6e next_score1.times_ns.back() next_score1 . times_ns . back () = abs_time_step_ ; } } // \u4e0a\u4e0b\u6587\u504f\u7f6e if ( context_graph_ && ! next_score1 . has_context ) { next_score1 . CopyContext ( prefix_score ); next_score1 . has_context = true ; } // \u60c5\u51b53\uff1a\u5f53\u524d\u65f6\u523b\u7684\u8f93\u51fa\u5b57\u7b26\uff08\u4e0d\u542bblank\uff09\uff0c\u4e0e\u524d\u7f00\u4e32\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u76f8\u540c\uff0c\u4f46CTC\u5b57\u7b26\u4e32\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u4e3ablank // \u5219\u65b0\u4e32\u5728\u524d\u7f00\u4e32\u7684\u57fa\u7840\u4e0a\u52a0\u4e0a\u5f53\u524d\u65f6\u523b\u7684\u8f93\u51fa\u5b57\u7b26 // Case 3: *a\u03b5 + a => *aa std :: vector < int > new_prefix ( prefix ); // \u5c06\u5f53\u524d\u65f6\u523b\u7684\u8f93\u51fa\u62fc\u63a5\u5230\u524d\u7f00\u4e32\u4e0a\uff0c\u5f97\u5230\u65b0\u4e32 new_prefix . emplace_back ( id ); PrefixScore & next_score2 = next_hyps [ new_prefix ]; // \u65b0\u4e32\u4ee5\u975e \u03b5 \u7ed3\u5c3e\u7684\u5206\u6570 next_score2.ns \u4e3a\u4e24\u8005\u4e4b\u548c\uff1a // 1. \u65b0\u4e32\u4ee5\u975e \u03b5 \u7ed3\u5c3e\u7684\u5206\u6570 next_score2.ns // 2. \u524d\u7f00\u4e32\u4ee5 \u03b5 \u7ed3\u5c3e\u7684\u5206\u6570 prefix_score.s \u548c\u5f53\u524d\u8f93\u51fa\u7684\u6982\u7387 prob \u7684\u5bf9\u6570\u548c next_score2 . ns = LogAdd ( next_score2 . ns , prefix_score . s + prob ); // \u5224\u65ad\u662f\u5426\u9700\u8981\u66f4\u65b0\u65b0\u4e32\u4ee5\u975e \u03b5 \u7ed3\u5c3e\u7684 viterbi \u5206\u6570 next_score2.v_ns if ( next_score2 . v_ns < prefix_score . v_s + prob ) { next_score2 . v_ns = prefix_score . v_s + prob ; next_score2 . cur_token_prob = prob ; // \u65b0\u4e32\u4ee5\u975e \u03b5 \u7ed3\u5c3e\u7684 viterbi \u8def\u5f84\u7684\u65f6\u95f4\u6233 next_score2.times_ns \u7b49\u4e8e\uff1a // \u524d\u7f00\u4e32\u4ee5 \u03b5 \u7ed3\u5c3e\u7684 viterbi \u8def\u5f84\u7684\u65f6\u95f4\u6233 prefix_score.times_s\uff0c\u62fc\u63a5\u4e0a\u5f53\u524d\u65f6\u95f4\u6b65 abs_time_step_ next_score2 . times_ns = prefix_score . times_s ; next_score2 . times_ns . emplace_back ( abs_time_step_ ); } if ( context_graph_ && ! next_score2 . has_context ) { // \u4e0a\u4e0b\u6587\u504f\u7f6e // Prefix changed, calculate the context score. next_score2 . UpdateContext ( context_graph_ , prefix_score , id , prefix . size ()); next_score2 . has_context = true ; } } else { // \u60c5\u51b54\uff1a\u5f53\u524d\u65f6\u523b\u7684\u8f93\u51fa\u5b57\u7b26\uff08\u4e0d\u542bblank\uff09\uff0c\u4e0eCTC\u5b57\u7b26\u4e32\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u4e0d\u540c\uff08\u56e0\u6b64\u4e0e\u524d\u7f00\u4e32\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u4e5f\u4e0d\u540c\uff09 // \u5219\u65b0\u4e32\u5728\u524d\u7f00\u4e32\u7684\u57fa\u7840\u4e0a\u52a0\u4e0a\u5f53\u524d\u65f6\u523b\u7684\u8f93\u51fa\u5b57\u7b26 // Case 4: *a + b => *ab, *a\u03b5 + b => *ab std :: vector < int > new_prefix ( prefix ); // \u5c06\u5f53\u524d\u65f6\u523b\u7684\u8f93\u51fa\u62fc\u63a5\u5230\u524d\u7f00\u4e32\u4e0a\uff0c\u5f97\u5230\u65b0\u4e32 new_prefix . emplace_back ( id ); PrefixScore & next_score = next_hyps [ new_prefix ]; // \u65b0\u4e32\u4ee5\u975e \u03b5 \u7ed3\u5c3e\u7684\u5206\u6570 next_score.ns \u4e3a\u4e24\u8005\u4e4b\u548c\uff1a // 1. \u65b0\u4e32\u4ee5\u975e \u03b5 \u7ed3\u5c3e\u7684\u5206\u6570 next_score.ns // 2. \u524d\u7f00\u4e32\u7684\u5206\u6570 prefix_score.score() \u548c\u5f53\u524d\u8f93\u51fa\u7684\u6982\u7387 prob \u7684\u5bf9\u6570\u548c next_score . ns = LogAdd ( next_score . ns , prefix_score . score () + prob ); // \u5224\u65ad\u662f\u5426\u9700\u8981\u66f4\u65b0\u65b0\u4e32\u4ee5\u975e \u03b5 \u7ed3\u5c3e\u7684 viterbi \u5206\u6570 next_score.v_ns if ( next_score . v_ns < prefix_score . viterbi_score () + prob ) { next_score . v_ns = prefix_score . viterbi_score () + prob ; // \u66f4\u65b0\u524d\u7f00\u4e32\u6700\u540e\u4e00\u4e2a\u5b57\u5cf0\u503c\u7684\u6982\u7387 next_score . cur_token_prob = prob ; // \u65b0\u4e32\u4ee5\u975e \u03b5 \u7ed3\u5c3e\u7684 viterbi \u8def\u5f84\u7684\u65f6\u95f4\u6233 next_score.times_ns \u7b49\u4e8e\uff1a // \u524d\u7f00\u4e32 viterbi \u8def\u5f84\u7684\u65f6\u95f4\u6233 prefix_score.times()\uff0c\u62fc\u63a5\u4e0a\u5f53\u524d\u65f6\u95f4\u6b65 abs_time_step_ next_score . times_ns = prefix_score . times (); next_score . times_ns . emplace_back ( abs_time_step_ ); } if ( context_graph_ && ! next_score . has_context ) { // \u4e0a\u4e0b\u6587\u504f\u7f6e // Calculate the context score. next_score . UpdateContext ( context_graph_ , prefix_score , id , prefix . size ()); next_score . has_context = true ; } } } } \u7b2c\u4e8c\u6b21\u526a\u679d \u7b2c\u4e8c\u6b21\u526a\u679d\u65f6\u53ea\u4fdd\u7559\u5206\u6570\u6700\u9ad8\u7684 opts_.second_beam_size \u6761\u8def\u5f84\uff08N-Best\uff09\uff0c\u4fbf\u4e8e\u540e\u7eed\u7684\u91cd\u6253\u5206\u3002 1 2 3 4 5 6 7 8 9 // 3. Second beam prune, only keep top n best paths std :: vector < std :: pair < std :: vector < int > , PrefixScore >> arr ( next_hyps . begin (), next_hyps . end ()); int second_beam_size = std :: min ( static_cast < int > ( arr . size ()), opts_ . second_beam_size ); std :: nth_element ( arr . begin (), arr . begin () + second_beam_size , arr . end (), PrefixScoreCompare ); arr . resize ( second_beam_size ); std :: sort ( arr . begin (), arr . end (), PrefixScoreCompare ); \u66f4\u65b0\u89c4\u6574\u5b57\u7b26\u4e32 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 cur_hyps_ . clear (); outputs_ . clear (); hypotheses_ . clear (); likelihood_ . clear (); viterbi_likelihood_ . clear (); times_ . clear (); for ( auto & item : hpys ) { // \u66f4\u65b0\u524d\u7f00\u4e32 cur_hyps_ [ item . first ] = item . second ; // \u66f4\u65b0\u8bed\u8a00\u6a21\u578b\u7684Context Graph UpdateOutputs ( item ); // \u66f4\u65b0\u89e3\u7801\u7ed3\u679c hypotheses_ . emplace_back ( std :: move ( item . first )); // \u66f4\u65b0\u6bcf\u4e2a\u89e3\u7801\u7ed3\u679c\u7684\u5206\u6570 likelihood_ . emplace_back ( item . second . total_score ()); // \u66f4\u65b0\u6bcf\u4e2a\u89e3\u7801\u7ed3\u679c\u7684viterbi\u5206\u6570 viterbi_likelihood_ . emplace_back ( item . second . viterbi_score ()); // \u66f4\u65b0\u6bcf\u4e2a\u89e3\u7801\u7ed3\u679c\u7684\u65f6\u95f4\u6233\u4fe1\u606f times_ . emplace_back ( item . second . times ()); } CTC\u7684Decode\u7b97\u6cd5-Prefix Beam Search First-Pass Large Vocabulary Continuous Speech Recognition using Bi-Directional Recurrent DNNs Distill-Sequence Modeling With CTC WeNet \u66f4\u65b0\uff1a\u652f\u6301\u5b57\u7ea7\u65f6\u95f4\u6233\u548c N-best","title":"wenet\u7684ctc_prefix_beam_search"},{"location":"asr/wenet%E7%9A%84ctc_prefix_beam_search/#wenetctc_prefix_beam_search","text":"","title":"wenet\u7684ctc_prefix_beam_search"},{"location":"asr/wenet%E7%9A%84ctc_prefix_beam_search/#ctc","text":"CTC\u5b57\u7b26\u4e32\uff1a\u6a21\u578b\u5728\u6bcf\u4e2a\u65f6\u523b\u8f93\u51fa\u5b57\u7b26\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\u3002 \u89c4\u6574\u5b57\u7b26\u4e32\uff1a CTC\u5b57\u7b26\u4e32 \u53bb\u9664\u8fde\u7eed\u91cd\u590d\u548cblank\u4e4b\u540e\u7684\u5b57\u7b26\u4e32\u3002","title":"CTC\u5b57\u7b26\u4e32\u548c\u89c4\u6574\u5b57\u7b26\u4e32"},{"location":"asr/wenet%E7%9A%84ctc_prefix_beam_search/#ctc_1","text":"greedy decode\u3002\u6bcf\u5e27\u8f93\u51fa\u6700\u5927\u503c\uff0c\u7136\u540e\u89c4\u6574\u3002 \u5728 CTC\u5b57\u7b26\u4e32 \u4e0a\u505abeam search\uff08\u4e5f\u79f0 CTC Beam Search \uff09\uff0c\u8f93\u51fan\u4e2a\u7ed3\u679c\u4e4b\u540e\u89c4\u6574\uff0c\u5408\u5e76\u76f8\u540c\u5e8f\u5217\uff0c\u7136\u540e\u518d\u5e94\u7528\u8bed\u8a00\u6a21\u578b\uff0c\u4e5f\u5373SecondPass LM\u3002 \u5728 \u89c4\u6574\u5b57\u7b26\u4e32 \u4e0a\u505abeam search\uff08\u4e5f\u79f0 CTC Prefix Beam Search \uff09\uff0c\u53ef\u989d\u5916\u5e94\u7528\u8bed\u8a00\u6a21\u578b\u3002\u53ef\u4ee5\u5728\u89e3\u7801\u8fc7\u7a0b\u4e2d\u76f4\u63a5\u5e94\u7528\u8bed\u8a00\u6a21\u578b\uff0c\u4e5f\u5373FirstPass LM\u3002 \u4f7f\u7528FST\u9759\u6001\u89e3\u7801\uff0c\u53ef\u5f15\u5165\u8bed\u8a00\u6a21\u578b\u548c\u5b57\u5178\u6a21\u578b\u3002 CTC\u5b57\u7b26\u4e32 \u4e0abeam search\uff08 CTC Beam Search \uff09\u548c \u89c4\u6574\u5b57\u7b26\u4e32 \u4e0abeam search\uff08 CTC Prefix Beam Search \uff09\u7684\u4e3b\u8981\u533a\u522b\u5728\u4e8e\uff0c\u540c\u6837\u7684beam size\u4e0b\uff0c\u524d\u8005\u4e22\u5f03\u7684CTC\u8def\u5f84\u66f4\u591a\uff0c\u56e0\u6b64\u6548\u679c\u66f4\u5dee\u4e00\u4e9b\uff1a CTC Beam Search \u5728\u89e3\u7801\u8fc7\u7a0b\u4e2d\u4ea7\u751f\u7684CTC\u5019\u9009\u8def\u5f84\u6709\u53ef\u80fd\u4ea7\u751f\u91cd\u590d\u9879\uff0c\u800c\u8fd9\u4e9b\u91cd\u590d\u9879\u5728 CTC Beam Search \u7684\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\u662f\u5404\u81ea\u72ec\u7acb\u7684\uff0c\u5360\u7528\u4e86beam\u6570\u3002 CTC Prefix Beam Search \u5728\u89e3\u7801\u8fc7\u7a0b\u4e2d\u5408\u5e76\u91cd\u590d\u9879\u7684\u6982\u7387\uff0c\u4ece\u800c\u63d0\u5347\u4e86\u89e3\u7801\u7684\u591a\u6837\u6027\u548c\u9c81\u68d2\u6027\u3002 \u5982\u4e0b\u56fe\uff0c\u76f4\u63a5\u5728 CTC\u5b57\u7b26\u4e32 \u4e0a\u505abeam search\uff0c\u5f53beam size=3\u65f6\uff0c\u6bcf\u4e2a\u65f6\u523b\u53ea\u6709\u4e09\u6761\u8def\u5f84\uff1a \u5728 \u89c4\u6574\u5b57\u7b26\u4e32 \u4e0a\u505abeam search\uff0c\u5f53beam size=3\u65f6\uff0c\u6bcf\u4e2a\u65f6\u523b\u5219\u53ef\u4ee5\u4fdd\u7559\u66f4\u591a\u7684\u8def\u5f84\uff1a CTC Prefix Beam Search\u4ecd\u7136\u4f1a\u4e22\u5931\u4e00\u4e9bCTC\u5e8f\u5217\u7684\u6982\u7387\uff0c\u6bd4\u5982\u4e0a\u4f8b\u4e2d\uff0c\u5f53\u65f6\u523b \\(t\\) \u7684beam\u4e2d\u53ea\u6709a\u800c\u6ca1\u6709ab\u65f6\uff0c\u5728 \\(t+1\\) \u65f6\u523b\u8ba1\u7b97ab\uff0c\u53ea\u4f7f\u7528\u4e86 \\(t\\) \u65f6\u523ba\u7684\u6269\u5c55\uff0c\u6b64\u65f6\u4f1a\u4e22\u5931\u6765\u81ea \\(t\\) \u65f6\u523bab\u7684\u5f97\u5206\u3002","title":"CTC\u5e38\u89c1\u7684\u89e3\u7801\u65b9\u5f0f"},{"location":"asr/wenet%E7%9A%84ctc_prefix_beam_search/#ctc-prefix-beam-search","text":"\u5229\u7528\u795e\u7ecf\u7f51\u7edc\u548cCTC\u5efa\u6a21\u5e8f\u5217\u95ee\u9898\u65f6\uff0c\u795e\u7ecf\u7f51\u7edc\u8f93\u51fa\u4e00\u4e2a \\(T\\times M\\) \u7684\u77e9\u9635\uff0c\u5176\u4e2d \\(T\\) \u8868\u793a\u97f3\u9891\u5e27\u6570\uff0c \\(M\\) \u8868\u793a\u8bcd\u5178\u7684\u5927\u5c0f\u3002CTC Prefix Beam Search\u7b97\u6cd5\u5219\u5728\u8be5\u77e9\u9635\u7684\u57fa\u7840\u4e0a\uff0c\u627e\u51fa\u6982\u7387\u6700\u9ad8\u7684N\u6761\u8def\u5f84\u3002 CTC Prefix Beam Search\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6bcf\u4e2a\u65f6\u523b\u5747\u6267\u884c\uff1a \u6269\u5c55\u3002\u6839\u636e\u524d\u7f00\u4e32\u548c\u5f53\u524d\u65f6\u523b\u7684\u8f93\u51fa\uff0c\u8ba1\u7b97\u6240\u6709\u5f53\u524d\u53ef\u80fd\u8f93\u51fa\u7684 \u89c4\u6574\u5b57\u7b26\u4e32 \u6982\u7387\u3002 \u89c4\u7ea6\u3002\u5c06\u89c4\u7ea6\u5f97\u5230\u7684\u76f8\u540c\u4e32\u5bf9\u5e94\u7684\u5019\u9009\u6982\u7387\u76f8\u52a0\u3002 \u88c1\u526a\u3002\u4ec5\u4fdd\u7559top k\u4e2a\u6700\u4f18\u7684\u5e8f\u5217\u505a\u4e0b\u4e00\u6b65\u6269\u5c55\u3002\u4e0a\u56fe\u4e2d \\(k=3\\) \uff0c\u7eff\u8272\u8868\u793a\u4fdd\u7559\uff0c\u7ea2\u8272\u8868\u793a\u88c1\u526a\u3002 \u5bf9\u4e8e \\(t\\) \u65f6\u523b\u5904\u5728beam\u4e2d\u7684\u6bcf\u4e2a\u89c4\u6574\u5b57\u7b26\u4e32\uff0c\u66f4\u65b0\u5176\u5bf9\u5e94\u7684 \\(t+1\\) \u65f6\u523b\u89c4\u6574\u5b57\u7b26\u4e32\u7684\u6982\u7387\u503c\uff0c\u6b64\u65f6\u5e76\u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528 \\(t\\) \u65f6\u523b\u89c4\u6574\u5b57\u7b26\u4e32\u7684\u6982\u7387\u4e58\u4e0a \\(t+1\\) \u65f6\u523b\u8f93\u51fa\u5b57\u7b26\u7684\u6982\u7387\u4ee5\u5f97\u5230 \\(t+1\\) \u65f6\u523b\u89c4\u6574\u5b57\u7b26\u4e32\u7684\u6982\u7387\uff0c\u4e3b\u8981\u539f\u56e0\u662f\u6839\u636eCTC\u89c4\u5219\uff0c\u4f7f\u7528\u76f8\u540c\u7684 \\(t\\) \u65f6\u523b\u89c4\u6574\u5b57\u7b26\u4e32\uff0c\u76f8\u540c\u7684 \\(t+1\\) \u65f6\u523b\u8f93\u51fa\u5b57\u7b26\u80fd\u591f\u5f97\u5230\u4e0d\u540c\u7684 \\(t+1\\) \u65f6\u523b\u89c4\u6574\u5b57\u7b26\u4e32\u3002\u6bd4\u5982 \\(t\\) \u65f6\u523bCTC\u5b57\u7b26\u4e32\u4e3aaa\u548ca-\uff08\u201c-\u201d\u8868\u793ablank\uff09\uff0c\u5bf9\u5e94\u7684\u89c4\u6574\u5b57\u7b26\u4e32\u5747\u4e3aa\uff0c\u5f53 \\(t+1\\) \u65f6\u523b\u8f93\u51fa\u5b57\u7b26a\u65f6\uff0c\u5f97\u5230\u7684 \\(t+1\\) \u65f6\u523b\u89c4\u6574\u5b57\u7b26\u4e32\u5206\u522b\u4e3aa\u548caa\u3002\u56e0\u6b64\u9700\u8981\u533a\u5206\u5bf9\u5f85blank\u548c\u975eblank\u7ed3\u5c3e\u7684CTC\u5b57\u7b26\u4e32\u89c4\u6574\u6982\u7387\uff1a \\(p_b(L)\\) \u8868\u793a\u6240\u6709\u4ee5blank\u7ed3\u5c3e\u4e14\u89c4\u6574\u540e\u5b57\u7b26\u4e32\u662fL\u7684\u5404\u4e2aCTC\u5b57\u7b26\u4e32\u6982\u7387\u4e4b\u548c\u3002 \\(p_{nb}(L)\\) \u8868\u793a\u6240\u6709\u4ee5\u975eblank\u7ed3\u5c3e\u4e14\u89c4\u6574\u540e\u5b57\u7b26\u4e32\u662fL\u7684\u5404\u4e2aCTC\u5b57\u7b26\u4e32\u6982\u7387\u4e4b\u548c\u3002 \u5047\u8bbe \\(t=3\\) \u65f6\u89c4\u6574\u5b57\u7b26\u4e32\u4e3aa\uff0c\u5219\uff1a \\[ p_b(a)=p(aa-)+p(-a-)+p(a--) \\] \\[ p_{nb}(a)=p(aaa)+p(-aa)+p(--a) \\] \u82e5 \\(t=4\\) \u65f6\u8f93\u51fa\u5b57\u7b26a\uff0c\u4ea7\u751f\u89c4\u6574\u5b57\u7b26\u4e32\u6709\u5982\u4e0b\u56db\u79cd\u60c5\u51b5\uff1a \u5f53 \\(t+1\\) \u8f93\u51fa\u662fblank\u65f6\uff0c\u4ea7\u751f\u89c4\u6574\u5b57\u7b26\u4e32a\u3002 \u5f53 \\(t+1\\) \u8f93\u51fa\u662fa\u65f6\uff0c\u53ef\u4ee5\u4ea7\u751f\u89c4\u6574\u5b57\u7b26\u4e32a\uff08 \\(t\\) \u65f6\u523b\u8f93\u51fa\u4e3a\u975eblank\uff09\u3002 \u5f53 \\(t+1\\) \u8f93\u51fa\u662fa\u65f6\uff0c\u4e5f\u53ef\u4ee5\u4ea7\u751f\u89c4\u6574\u5b57\u7b26\u4e32aa\uff08 \\(t\\) \u65f6\u523b\u8f93\u51fa\u4e3ablank\uff09\u3002 \u5f53 \\(t+1\\) \u8f93\u51fa\u4e3ab\u65f6\uff0c\u4ea7\u751f\u89c4\u6574\u5b57\u7b26\u4e32ab\u3002 \u56db\u79cd\u60c5\u51b5\u9700\u8981\u66f4\u65b0\u7684\u7edf\u8ba1\u91cf\u5982\u4e0b\uff1a \\[ p_b^{t+1}(a)+=[p_b^t(a)+p_{nb}^t(a)]p_{ctc}^{t+1}(-) \\] \\[ p_{nb}^{t+1}(a)+=p_{nb}^t(a)p_{ctc}^{t+1}(a) \\] \\[ p_{nb}^{t+1}(aa)+=p_{b}^t(a)p_{ctc}^{t+1}(a) \\] \\[ p_{nb}^{t+1}(ab)+=[p_b^t(a)+p_{nb}^t(a)]p_{ctc}^{t+1}(b) \\] \u5982\u4e0a\u5f0f\uff0c\u5728\u60c5\u51b51\u548c4\u4e2d\uff0c\u53ef\u4ee5\u901a\u8fc72\u79cd\u9014\u5f84\u83b7\u5f97\u6240\u9700\u8981\u7684 \\(t\\) \u65f6\u523b\u89c4\u6574\u5b57\u7b26\u4e32a\uff0c\u56e0\u6b64\u9700\u8981\u9075\u5faa\u6982\u7387\u8bba\u4e2d\u7684\u52a0\u6cd5\u539f\u7406\uff0c\u5c06\u4e24\u4e2a\u6982\u7387\u503c\u52a0\u8d77\u6765\uff1b\u7136\u540e\u9075\u5faa\u4e58\u6cd5\u539f\u7406\uff0c\u4e58\u7b2c \\(t+1\\) \u65f6\u523b\u7684\u6982\u7387\u503c\u3002 \u603b\u4e4b\uff0c\u5982\u679c\u5f53\u524d\u65f6\u523b\u8f93\u51fa\u5b57\u7b26\uff08\u4e0d\u542bblank\uff09\u548c\u89c4\u6574\u5b57\u7b26\u4e32\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u4e0d\u540c\uff0c\u5219\u4e0d\u9700\u8981\u533a\u5206blank\u548c\u975eblank\u89c4\u6574\u6982\u7387\uff0c\u4e24\u8005\u52a0\u8d77\u6765\u4e4b\u540e\u4e58\u5f53\u524d\u5b57\u7b26\u6982\u7387\u5373\u53ef\uff1b\u5982\u679c\u5f53\u524d\u65f6\u523b\u8f93\u51fa\u5b57\u7b26\uff08\u4e0d\u542bblank\uff09\u548c\u89c4\u6574\u5b57\u7b26\u4e32\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u76f8\u540c\uff0c\u6b64\u65f6\u6709\u53ef\u80fd\u51fa\u73b0\u76f8\u540c\u89c4\u6574\u5b57\u7b26\u4e32\u548c\u5f53\u524d\u8f93\u51fa\u5b57\u7b26\uff0c\u4ea7\u751f\u5f53\u524d\u65f6\u523b\u4e0d\u540c\u89c4\u6574\u5b57\u7b26\u4e32\u7684\u60c5\u51b5\uff0c\u56e0\u6b64\u9700\u8981\u533a\u5206blank\u548c\u975eblank\u89c4\u6574\u6982\u7387\u3002 \u5982\u4e0a\u56fe\u6240\u793a\uff0c\u5047\u8bbe\u5de6\u4e0a\u89d2\u4e3a\u795e\u7ecf\u7f51\u7edc\u8f93\u51fa\u7684 \\(T\\times M\\) \u77e9\u9635\uff0c\u5176\u4e2d \\(T=3,M=3\\) \u3002\u4ee5\u4e0a\u56fe \\(T=2\\) \uff0c\u7eff\u6846 \\(a\\) \u6269\u5c55\u5230 \\(T=3\\) \u7684\u8fc7\u7a0b\u4e3a\u4f8b\u3002 \u5728\u6b65\u9aa41\u4e2d\uff1a \u5047\u8bbe \\(a\\) \u6269\u5c55\u5230 \\(\\epsilon\\) \uff0c\u67e5\u9605\u8868\u683c\u53ef\u77e5\uff0c\u8be5\u8fc7\u7a0b\u7684\u6982\u7387\u4e3a0.10\uff0c\u56e0\u6b64\u8ba1\u7b97\u5f97\u5230\u7684\u6982\u7387\u4e3a \\(0.3875\\times 0.10=0.03875\\) \uff0c\u6ce8\u610f\u5230\u4e58\u6570\u4e3a0.3875\uff0c\u800c\u975e0.2275\u6216\u80050.16\uff0c\u8fd9\u662f\u56e0\u4e3a\u4e0b\u4e00\u4e2a\u5b57\u7b26\u4e3a \\(\\epsilon\\) \uff0c\u4e0e\u5f53\u524d\u5b57\u7b26a\u4e0d\u540c\uff0c\u5e94\u8be5\u4f7f\u7528\u5019\u9009\u6982\u7387\u7684\u52a0\u548c\u503c\u3002 \u5047\u8bbe \\(a\\) \u6269\u5c55\u5230 \\(a\\) \uff0c\u67e5\u9605\u8868\u683c\u53ef\u77e5\uff0c\u8be5\u8fc7\u7a0b\u7684\u6982\u7387\u4e3a0.50\uff0c\u7531\u4e8e\u5f53\u524d\u5b57\u7b26\u548c\u4e0b\u4e00\u4e2a\u5b57\u7b26\u76f8\u540c\uff0c\u56e0\u6b64\u4e58\u6570\u5e94\u91c7\u7528\u5404\u81ea\u7684\u5019\u9009\u6982\u7387\uff0c\u5206\u522b\u662f \\(0.2275\\times 0.50=0.11375\\) \u548c \\(0.16\\times 0.50=0.08000\\) \u3002 \u5047\u8bbe \\(a\\) \u6269\u5c55\u5230 \\(b\\) \uff0c\u67e5\u9605\u8868\u683c\u53ef\u77e5\uff0c\u8be5\u8fc7\u7a0b\u7684\u6982\u7387\u4e3a0.40\uff0c\u5e76\u4e14\u5f53\u524d\u5b57\u7b26\u548c\u4e0b\u4e00\u4e2a\u5b57\u7b26\u4e0d\u540c\uff0c\u4e58\u6570\u5e94\u91c7\u7528\u5019\u9009\u6982\u7387\u7684\u52a0\u548c\u503c\uff0c\u56e0\u6b64\u8ba1\u7b97\u5f97\u5230\u7684\u6982\u7387\u4e3a \\(0.3875\\times 0.40=0.1150\\) \u3002 \u4ee5\u6b64\u7c7b\u63a8\uff0c\u8ba1\u7b97\u51fa\u5176\u5b83\u7684\u6982\u7387\u503c\u3002\u6ce8\u610f\u5230\uff0c\u901a\u8fc7\u4e0d\u540c\u7684\u8def\u5f84\u89c4\u7ea6\u4e4b\u540e\u53ef\u4ee5\u5f97\u5230\u76f8\u540c\u4e32\uff0c\u6bd4\u5982 \\(a\\to a,a\\epsilon \\to a\\) \uff0c\u56e0\u6b64\u6839\u636e\u6b65\u9aa42\u5c06\u89c4\u7ea6\u5f97\u5230\u7684\u76f8\u540c\u4e32\u5bf9\u5e94\u7684\u5019\u9009\u6982\u7387\u76f8\u52a0\uff0c\u5f97\u5230a\u5bf9\u5e94\u7684\u6982\u7387\u52a0\u548c\u503c\u4e3a \\(0.11375+0.03875=0.1525\\) \u3002 \u5728\u6b65\u9aa43\u4e2d\uff0c\u7531\u4e8e \\(k=3\\) \uff0c\u5219\u4fdd\u7559\u6982\u7387\u6700\u9ad8\u76843\u7ec4\u6700\u4f18\u5e8f\u5217\uff0c\u4e0a\u56fe\u4e2d\u4ee5\u7eff\u8272\u6807\u6ce8\u3002","title":"CTC Prefix Beam Search\u539f\u7406"},{"location":"asr/wenet%E7%9A%84ctc_prefix_beam_search/#python","text":"\u5728 First-Pass Large Vocabulary Continuous Speech Recognition using Bi-Directional Recurrent DNNs \u4e2d\u7ed9\u51faCTC Prefix Beam Search\u7684\u5177\u4f53\u6b65\u9aa4\u5982\u4e0b\uff1a \u5982\u4e0a\u7b97\u6cd5\u6d41\u7a0b\u56fe\u4e2d\uff0c\u9664\u4e86 else if c = space then \uff0c\u5206\u522b\u5bf9\u5e94\u4e0a\u8ff0\u60c5\u51b51~4\u3002 \u5bf9\u5e94\u7684Python\u5b9e\u73b0\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 \"\"\" Author: Awni Hannun This is an example CTC decoder written in Python. The code is intended to be a simple example and is not designed to be especially efficient. The algorithm is a prefix beam search for a model trained with the CTC loss function. For more details checkout either of these references: https://distill.pub/2017/ctc/#inference https://arxiv.org/abs/1408.2873 \"\"\" import numpy as np import math import collections NEG_INF = - float ( \"inf\" ) def decode ( probs , beam_size = 10 , blank = 0 ): \"\"\" Performs inference for the given output probabilities. Arguments: probs: The output probabilities (e.g. log post-softmax) for each time step. Should be an array of shape (time x output dim). beam_size (int): Size of the beam to use during inference. blank (int): Index of the CTC blank label. Returns the output label sequence and the corresponding negative log-likelihood estimated by the decoder. \"\"\" T , S = probs . shape # Elements in the beam are (prefix, (p_blank, p_no_blank)) # Initialize the beam with the empty sequence, a probability of # 1 for ending in blank and zero for ending in non-blank # (in log space). beam = [( tuple (), ( 0.0 , NEG_INF ))] for t in range ( T ): # Loop over time # A default dictionary to store the next step candidates. next_beam = make_new_beam () for s in range ( S ): # Loop over vocab p = probs [ t , s ] # The variables p_b and p_nb are respectively the # probabilities for the prefix given that it ends in a # blank and does not end in a blank at this time step. for prefix , ( p_b , p_nb ) in beam : # Loop over beam # \u60c5\u51b51 # If we propose a blank the prefix doesn't change. # Only the probability of ending in blank gets updated. if s == blank : # n_p_b\uff1a\u5f53\u524d\u65f6\u523bblank\u6982\u7387\uff0cn_p_nb\uff1a\u5f53\u524d\u65f6\u523b\u975eblank\u6982\u7387 n_p_b , n_p_nb = next_beam [ prefix ] # logsumexp(n_p_b, p_b + p, p_nb + p): # n_p_b x ((p_b + p) + (p_nb + p)) n_p_b = logsumexp ( n_p_b , p_b + p , p_nb + p ) next_beam [ prefix ] = ( n_p_b , n_p_nb ) continue # Extend the prefix by the new character s and add it to # the beam. Only the probability of not ending in blank # gets updated. end_t = prefix [ - 1 ] if prefix else None n_prefix = prefix + ( s ,) n_p_b , n_p_nb = next_beam [ n_prefix ] if s != end_t : # \u60c5\u51b54 n_p_nb = logsumexp ( n_p_nb , p_b + p , p_nb + p ) else : # \u60c5\u51b52\u548c3 # We don't include the previous probability of not ending # in blank (p_nb) if s is repeated at the end. The CTC # algorithm merges characters not separated by a blank. n_p_nb = logsumexp ( n_p_nb , p_b + p ) # *NB* this would be a good place to include an LM score. next_beam [ n_prefix ] = ( n_p_b , n_p_nb ) # If s is repeated at the end we also update the unchanged # prefix. This is the merging case. if s == end_t : # \u60c5\u51b52\uff0c\u89c4\u6574\u5b57\u7b26\u4e32\u4e0d\u53d8\uff0c\u4f46\u89c4\u6574\u6982\u7387\u9700\u8981\u66f4\u65b0 n_p_b , n_p_nb = next_beam [ prefix ] n_p_nb = logsumexp ( n_p_nb , p_nb + p ) next_beam [ prefix ] = ( n_p_b , n_p_nb ) # Sort and trim the beam before moving on to the # next time-step. beam = sorted ( next_beam . items (), key = lambda x : logsumexp ( * x [ 1 ]), reverse = True ) beam = beam [: beam_size ] best = beam [ 0 ] return best [ 0 ], - logsumexp ( * best [ 1 ])","title":"\u5177\u4f53\u6b65\u9aa4\u548cPython\u5b9e\u73b0"},{"location":"asr/wenet%E7%9A%84ctc_prefix_beam_search/#wenet","text":"\u5728\u8bed\u97f3\u8bc6\u522b\u7684\u4e00\u4e9b\u4efb\u52a1\u4e2d\uff0c\u5b57\u7ea7\u522b\u7684\u65f6\u95f4\u6233\u548cN-best\u626e\u6f14\u7740\u91cd\u8981\u7684\u4f5c\u7528\uff0c\u6bd4\u5982\u89c6\u9891\u5e94\u7528\u4e2d\uff0c\u8bed\u97f3\u8bc6\u522b\u7ed3\u5408\u5b57\u7ea7\u522b\u7684\u65f6\u95f4\u6233\u53ef\u4ee5\u5728\u7cbe\u786e\u7684\u65f6\u95f4\u663e\u793a\u5b57\u5e55\uff0c\u5728\u4f1a\u8bae\u573a\u666f\u4e2d\uff0c\u5b57\u7ea7\u522b\u7684\u65f6\u95f4\u6233\u53ef\u4ee5\u6807\u5b9a\u4e0e\u4f1a\u8005\u8bf4\u67d0\u53e5\u8bdd\u67d0\u4e2a\u5b57\u7684\u7cbe\u786e\u65f6\u95f4\u3002 \u6bcf\u4e2a\u524d\u7f00\u4e32\u53ef\u4ee5\u7531\u591a\u4e2a\u4e32\u89c4\u7ea6\u800c\u6210\u3002WeNet \u4f7f\u7528\u524d\u7f00\u4e32\u7684\u88ab\u89c4\u7ea6\u4e32\u4e2d\u6700\u4f18\u7684\u4e00\u6761\u8def\u5f84\uff0c\u5373viterbi\u8def\u5f84\u6765\u8bb0\u5f55\u65f6\u95f4\u4fe1\u606f\uff0cviterbi\u8def\u5f84\u8bb0\u5f55\u4e86\u6bcf\u4e2a\u5b57\u5cf0\u503c\u7684\u65f6\u95f4\u3002 \u5982\u4e0a\u56fe\u6240\u793a\uff0c\u89e3\u7801\u540e\u4e00\u5171\u5f97\u5230\u4e09\u4e2a\u89e3\u7801\u7ed3\u679c\uff1aa\uff0cab\u548cba\uff1a \u5bf9\u4e8e\u89e3\u7801\u7ed3\u679ca\u6765\u8bf4\uff0c\u8003\u8651\u5230\u526a\u679d\u7b56\u7565\uff0c\u56e0\u6b64\u89c4\u7ea6\u524d\u7684\u4e32\u53ea\u53ef\u80fd\u662f \\(\\epsilon a\\epsilon\\) \uff0c \\(\\epsilon a a\\) \u6216\u8005 \\(aaa\\) \u3002 viterbi\u5206\u6570\u8f83\u9ad8\u7684\u662f \\(aaa\\) \uff0c\u4e3a \\(0.40\\times 0.35\\times 0.50=0.07\\) \u3002 a\u7684\u5cf0\u503c\u5728 \\(T=3\\) \uff0c\u5bf9\u5e94\u7684\u6982\u7387\u4e3a \\(0.50\\) \uff0c\u5bf9\u5e94\u7684\u65f6\u95f4\u6233 \\(T=[3]\\) \u3002 \u5bf9\u4e8e\u89e3\u7801\u7ed3\u679cab\u6765\u8bf4\uff0c\u89c4\u7ea6\u524d\u7684\u4e32\u53ef\u80fd\u662faab\u6216\u8005 \\(a\\epsilon b\\) \u3002 viterbi\u5206\u6570\u8f83\u9ad8\u7684\u662f \\(a\\epsilon b\\) \uff0c\u4e3a \\(0.40\\times 0.40\\times 0.40=0.064\\) \u3002 a\u548cb\u5bf9\u5e94\u7684\u65f6\u95f4\u6233\u4e3a \\(T=[1,3]\\) \u3002 \u5bf9\u4e8e\u89e3\u7801\u7ed3\u679cba\u6765\u8bf4\uff0c\u89c4\u7ea6\u524d\u7684\u4e32\u53ef\u80fd\u662f \\(\\epsilon ba,b\\epsilon a,ba\\epsilon ,baa\\) \u6216\u8005 \\(bba\\) \u3002 viterbi\u5206\u6570\u8f83\u9ad8\u7684\u662f \\(b\\epsilon a\\) \uff0c\u4e3a \\(0.35\\times 0.40\\times 0.50=0.07\\) \u3002 b\u548ca\u7684\u65f6\u95f4\u6233\u4e3a \\(T=[1,3]\\) \u3002 \u901a\u5e38\u4e00\u4e2a\u5b57\u7684\u65f6\u95f4\u6233\u4fe1\u606f\u5e94\u8be5\u5305\u62ec\u8d77\u59cb\u65f6\u95f4\u548c\u7ec8\u6b62\u65f6\u95f4\uff0c\u800c\u4f7f\u7528\u4e0a\u8ff0\u7b97\u6cd5\uff0c\u53ea\u80fd\u83b7\u53d6\u8be5\u5b57\u5cf0\u503c\u6240\u5728\u7684\u65f6\u95f4\uff0c\u56e0\u6b64\u5728WeNet\u5b9e\u73b0\u4e2d\uff0c\u8003\u8651\u5230\u5ef6\u8fdf\u7b49\u56e0\u7d20\uff0c\u5c06\u5cf0\u503c\u6240\u5728\u7684\u65f6\u95f4\u5f53\u505a\u8be5\u5b57\u7684\u7ec8\u6b62\u65f6\u95f4\uff0c\u4e0a\u4e00\u4e2a\u5b57\u5cf0\u503c\u6240\u5728\u7684\u65f6\u95f4\u5f53\u505a\u8d77\u59cb\u65f6\u95f4\u3002","title":"WeNet\u4e2d\u83b7\u53d6\u5b57\u7ea7\u522b\u7684\u65f6\u95f4\u6233"},{"location":"asr/wenet%E7%9A%84ctc_prefix_beam_search/#_1","text":"WeNet\u4f7f\u7528HashMap\u4fdd\u5b58\u89e3\u7801\u8fc7\u7a0b\u4e2d\u4ea7\u751f\u7684\u89c4\u6574\u5b57\u7b26\u4e32\uff08\u5b57\u7b26\u5bf9\u5e94\u7684ID\u5e8f\u5217\uff09\u53ca\u5176\u5bf9\u5e94\u7684\u5206\u6570\u4fe1\u606f\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 // wenet/runtime/core/decoder/ctc_prefix_beam_search.cc std :: unordered_map < std :: vector < int > , PrefixScore , PrefixHash > next_hyps ; // wenet/runtime/core/decoder/ctc_prefix_beam_search.h struct PrefixScore { float s = - kFloatMax ; // \u4ee5blank\u7ed3\u5c3e\u7684\u5206\u6570 float ns = - kFloatMax ; // \u4ee5\u975eblank\u7ed3\u5c3e\u7684\u5206\u6570 float v_s = - kFloatMax ; // \u4ee5blank\u7ed3\u5c3e\u7684viterbi\u5206\u6570 float v_ns = - kFloatMax ; // \u4ee5\u975eblank\u7ed3\u5c3e\u7684viterbi\u5206\u6570 float cur_token_prob = - kFloatMax ; // \u5f53\u524dtoken\u5cf0\u503c\u7684\u6982\u7387 std :: vector < int > times_s ; // \u4ee5blank\u7ed3\u5c3eviterbi\u8def\u5f84\u7684\u65f6\u95f4\u6233 std :: vector < int > times_ns ; // \u4ee5\u975eblank\u7ed3\u5c3eviterbi\u8def\u5f84\u7684\u65f6\u95f4\u6233 // blank\u548c\u975eblank\u89c4\u6574\u6982\u7387\u4e4b\u548c float score () const { return LogAdd ( s , ns ); } // viterbi\u5206\u6570\u4e3ablank\u548c\u975eblank\u7ef4\u7279\u6bd4\u5206\u6570\u7684\u6700\u5927\u503c float viterbi_score () const { return v_s > v_ns ? v_s : v_ns ; } // \u6839\u636eviterbi\u5206\u6570\u9009\u62e9\u89c4\u6574\u4e32\u7684\u65f6\u95f4\u6233 const std :: vector < int >& times () const { return v_s > v_ns ? times_s : times_ns ; } ... // \u8bed\u8a00\u6a21\u578b\u548ce2e\u58f0\u5b66\u6a21\u578b\u5206\u6570\u4e4b\u548c float total_score () const { return score () + context_score ; } }; \u5728\u89e3\u7801\u8fc7\u7a0b\u4e2d\uff0c\u901a\u8fc7 for \u5faa\u73af\u904d\u5386\u6bcf\u4e2a\u65f6\u523b\uff0c\u83b7\u53d6\u6bcf\u4e2a\u65f6\u523b\u7684\u8f93\u51fa\uff0c\u7136\u540e\u6267\u884cCTC Prefix Beam Search\u3002","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"asr/wenet%E7%9A%84ctc_prefix_beam_search/#_2","text":"\u58f0\u5b66\u6a21\u578b\u6bcf\u4e2a\u65f6\u523b\u8f93\u51fa vocab_size \u4e2a\u6982\u7387\u503c\uff0c\u7b2c\u4e00\u6b21\u526a\u679d\u65f6\uff0c\u9009\u53d6\u524d opts_.first_beam_size \uff08\u9ed8\u8ba4\u503c10\uff09\u4e2a\u5b57\u7b26\u548c\u5bf9\u5e94\u6982\u7387\u503c\u3002 1 2 3 4 5 // wenet/runtime/core/decoder/ctc_prefix_beam_search.cc // 1. First beam prune, only select topk candidates std :: tuple < Tensor , Tensor > topk = logp_t . topk ( opts_ . first_beam_size ); Tensor topk_score = std :: get < 0 > ( topk ); Tensor topk_index = std :: get < 1 > ( topk );","title":"\u7b2c\u4e00\u6b21\u526a\u679d"},{"location":"asr/wenet%E7%9A%84ctc_prefix_beam_search/#_3","text":"\u4ee4\u724c\u4f20\u64ad\uff08Token Passing\uff09\u4e2d\u904d\u5386\u5f53\u524d\u65f6\u523b\u7684 opts_.first_beam_size \u4e2a\u8f93\u51fa\uff0c\u5bf9\u6bcf\u4e00\u4e2a\u8f93\u51fa\u6267\u884cCTC Prefix Beam Search\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 // 2. Token Passing // next_hyps \u8bb0\u5f55\u4e0b\u4e00\u4e2a\u65f6\u523b\u7684\u89c4\u7ea6\u5b57\u7b26\u4e32\uff0c\u907f\u514d\u66f4\u65b0\u5f53\u524d\u65f6\u523b\u7684\u89c4\u7ea6\u5b57\u7b26\u4e32 std :: unordered_map < std :: vector < int > , PrefixScore , PrefixHash > next_hyps ; ... for ( int i = 0 ; i < topk_index . size (); ++ i ) { // \u904d\u5386\u5f53\u524dbeam_size\u4e2a\u8f93\u51fa int id = topk_index [ i ]; auto prob = topk_score [ i ]; for ( const auto & it : cur_hyps_ ) { const std :: vector < int >& prefix = it . first ; const PrefixScore & prefix_score = it . second ; // \u5982\u679c prefix \u4e0d\u5728 next_hyps \u4e2d, next_hyps[prefix] \u5219\u4f1a\u63d2\u5165\u9ed8\u8ba4\u7684\u5206\u6570\u4fe1\u606f // \u4e5f\u5373PrefixScore(-inf, -inf) // \u4ee3\u7801\u4e2d\u5229\u7528\u5bf9\u6570\uff0c\u5c06\u4e58\u6cd5\u8f6c\u5316\u4e3a\u52a0\u6cd5\uff1aLogAdd() // \u4e3a\u53d9\u8ff0\u65b9\u4fbf\uff0c\u4e0b\u8ff0\u5c06\u5f53\u524d\u65f6\u523b\u65b0\u7684\u89c4\u6574\u5b57\u7b26\u4e32\u79f0\u4f5c\u201c\u65b0\u4e32\u201d // \u524d\u4e00\u65f6\u523b\u7684\u89c4\u6574\u5b57\u7b26\u4e32\u79f0\u4f5c\u201c\u524d\u7f00\u4e32\u201d if ( id == opts_ . blank ) { // \u60c5\u51b51\uff1a\u5f53\u524d\u65f6\u523b\u8f93\u51fablank\uff0c\u5219\u65b0\u4e32\u548c\u524d\u7f00\u4e32\u76f8\u540c // Case 0: *a + \u03b5 => *a PrefixScore & next_score = next_hyps [ prefix ]; // \u65b0\u4e32\u4ee5 \u03b5 \u7ed3\u5c3e\u7684\u5206\u6570 next_score.s \u4e3a\u4e24\u8005\u4e4b\u548c\uff1a // 1. \u65b0\u4e32\u4ee5 \u03b5 \u7ed3\u5c3e\u7684\u5206\u6570 next_score.s // 2. \u524d\u7f00\u4e32\u7684\u5206\u6570 prefix_score.score() \u4e0e\u5f53\u524d\u8f93\u51fa\u7684\u6982\u7387\u7684\u5bf9\u6570 prob \u4e4b\u548c next_score . s = LogAdd ( next_score . s , prefix_score . score () + prob ); // \u65b0\u4e32\u4ee5 \u03b5 \u7ed3\u5c3e\u7684 viterbi \u5206\u6570 next_score.v_s \u4e3a\uff1a // \u524d\u7f00\u4e32\u7684 viterbi \u5206\u6570 prefix_score.viterbi_score() \u4e0e\u5f53\u524d\u8f93\u51fa\u7684\u6982\u7387 prob \u7684\u5bf9\u6570\u548c next_score . v_s = prefix_score . viterbi_score () + prob ; // \u65b0\u4e32\u4ee5 \u03b5 \u7ed3\u5c3e\u7684 viterbi \u8def\u5f84\u7684\u65f6\u95f4\u6233 next_score.times_s \u7b49\u4e8e\uff1a // \u524d\u7f00\u4e32\u7684\u65f6\u95f4\u6233 prefix_score.times() next_score . times_s = prefix_score . times (); // \u4e0a\u4e0b\u6587\u504f\u7f6e\uff08context biasing\uff09\uff0c\u901a\u8fc7\u504f\u7f6e\u77ed\u8bed\u5217\u8868\u4f7f\u6a21\u578b\u503e\u5411\u4e8e\u8bc6\u522b\u7279\u5b9a\u8bcd // Prefix not changed, copy the context from prefix. if ( context_graph_ && ! next_score . has_context ) { next_score . CopyContext ( prefix_score ); next_score . has_context = true ; } } else if ( ! prefix . empty () && id == prefix . back ()) { // \u60c5\u51b52\uff1a\u5f53\u524d\u65f6\u523b\u7684\u8f93\u51fa\u5b57\u7b26\uff08\u4e0d\u542bblank\uff09\uff0c\u4e0eCTC\u5b57\u7b26\u4e32\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u76f8\u540c\uff08\u56e0\u6b64\u4e0e\u524d\u7f00\u4e32\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u4e5f\u76f8\u540c\uff09 // \u5219\u65b0\u4e32\u548c\u524d\u7f00\u4e32\u76f8\u540c // Case 2: *a + a => *a PrefixScore & next_score1 = next_hyps [ prefix ]; // \u65b0\u4e32\u4ee5\u975e \u03b5 \u7ed3\u5c3e\u7684\u5206\u6570 next_score1.ns \u4e3a\u4e24\u8005\u4e4b\u548c\uff1a // 1. \u65b0\u4e32\u4ee5\u975e \u03b5 \u7ed3\u5c3e\u7684\u5206\u6570 next_score1.ns // 2. \u524d\u7f00\u4e32\u4ee5\u975e \u03b5 \u7ed3\u5c3e\u7684\u5206\u6570 prefix_score.ns \u548c\u5f53\u524d\u8f93\u51fa\u7684\u6982\u7387 prob \u7684\u5bf9\u6570\u548c next_score1 . ns = LogAdd ( next_score1 . ns , prefix_score . ns + prob ); // \u5224\u65ad\u662f\u5426\u9700\u8981\u66f4\u65b0\u4ee5\u975e \u03b5 \u7ed3\u5c3e\u7684\u65b0\u4e32 viterbi \u5206\u6570 next_score1.v_ns if ( next_score1 . v_ns < prefix_score . v_ns + prob ) { next_score1 . v_ns = prefix_score . v_ns + prob ; // \u5224\u65ad\u662f\u5426\u9700\u8981\u66f4\u65b0\u65b0\u4e32\u4e2d\u6700\u540e\u4e00\u4e2a\u5b57\u5cf0\u503c\u7684\u6982\u7387 next_score1.cur_token_prob if ( next_score1 . cur_token_prob < prob ) { next_score1 . cur_token_prob = prob ; // \u65b0\u4e32\u4ee5\u975e \u03b5 \u7ed3\u5c3e\u7684 viterbi \u8def\u5f84\u7684\u65f6\u95f4\u6233 next_score1.times_ns \u7b49\u4e8e\uff1a // \u524d\u7f00\u4e32\u4ee5\u975e \u03b5 \u7ed3\u5c3e\u7684 viterbi \u8def\u5f84\u7684\u65f6\u95f4\u6233 prefix_score.times_ns next_score1 . times_ns = prefix_score . times_ns ; CHECK_GT ( next_score1 . times_ns . size (), 0 ); // \u66f4\u65b0\u65b0\u4e32\u4e2d\u6700\u540e\u4e00\u4e2a\u5b57\u5cf0\u503c\u7684\u4f4d\u7f6e next_score1.times_ns.back() next_score1 . times_ns . back () = abs_time_step_ ; } } // \u4e0a\u4e0b\u6587\u504f\u7f6e if ( context_graph_ && ! next_score1 . has_context ) { next_score1 . CopyContext ( prefix_score ); next_score1 . has_context = true ; } // \u60c5\u51b53\uff1a\u5f53\u524d\u65f6\u523b\u7684\u8f93\u51fa\u5b57\u7b26\uff08\u4e0d\u542bblank\uff09\uff0c\u4e0e\u524d\u7f00\u4e32\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u76f8\u540c\uff0c\u4f46CTC\u5b57\u7b26\u4e32\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u4e3ablank // \u5219\u65b0\u4e32\u5728\u524d\u7f00\u4e32\u7684\u57fa\u7840\u4e0a\u52a0\u4e0a\u5f53\u524d\u65f6\u523b\u7684\u8f93\u51fa\u5b57\u7b26 // Case 3: *a\u03b5 + a => *aa std :: vector < int > new_prefix ( prefix ); // \u5c06\u5f53\u524d\u65f6\u523b\u7684\u8f93\u51fa\u62fc\u63a5\u5230\u524d\u7f00\u4e32\u4e0a\uff0c\u5f97\u5230\u65b0\u4e32 new_prefix . emplace_back ( id ); PrefixScore & next_score2 = next_hyps [ new_prefix ]; // \u65b0\u4e32\u4ee5\u975e \u03b5 \u7ed3\u5c3e\u7684\u5206\u6570 next_score2.ns \u4e3a\u4e24\u8005\u4e4b\u548c\uff1a // 1. \u65b0\u4e32\u4ee5\u975e \u03b5 \u7ed3\u5c3e\u7684\u5206\u6570 next_score2.ns // 2. \u524d\u7f00\u4e32\u4ee5 \u03b5 \u7ed3\u5c3e\u7684\u5206\u6570 prefix_score.s \u548c\u5f53\u524d\u8f93\u51fa\u7684\u6982\u7387 prob \u7684\u5bf9\u6570\u548c next_score2 . ns = LogAdd ( next_score2 . ns , prefix_score . s + prob ); // \u5224\u65ad\u662f\u5426\u9700\u8981\u66f4\u65b0\u65b0\u4e32\u4ee5\u975e \u03b5 \u7ed3\u5c3e\u7684 viterbi \u5206\u6570 next_score2.v_ns if ( next_score2 . v_ns < prefix_score . v_s + prob ) { next_score2 . v_ns = prefix_score . v_s + prob ; next_score2 . cur_token_prob = prob ; // \u65b0\u4e32\u4ee5\u975e \u03b5 \u7ed3\u5c3e\u7684 viterbi \u8def\u5f84\u7684\u65f6\u95f4\u6233 next_score2.times_ns \u7b49\u4e8e\uff1a // \u524d\u7f00\u4e32\u4ee5 \u03b5 \u7ed3\u5c3e\u7684 viterbi \u8def\u5f84\u7684\u65f6\u95f4\u6233 prefix_score.times_s\uff0c\u62fc\u63a5\u4e0a\u5f53\u524d\u65f6\u95f4\u6b65 abs_time_step_ next_score2 . times_ns = prefix_score . times_s ; next_score2 . times_ns . emplace_back ( abs_time_step_ ); } if ( context_graph_ && ! next_score2 . has_context ) { // \u4e0a\u4e0b\u6587\u504f\u7f6e // Prefix changed, calculate the context score. next_score2 . UpdateContext ( context_graph_ , prefix_score , id , prefix . size ()); next_score2 . has_context = true ; } } else { // \u60c5\u51b54\uff1a\u5f53\u524d\u65f6\u523b\u7684\u8f93\u51fa\u5b57\u7b26\uff08\u4e0d\u542bblank\uff09\uff0c\u4e0eCTC\u5b57\u7b26\u4e32\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u4e0d\u540c\uff08\u56e0\u6b64\u4e0e\u524d\u7f00\u4e32\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u4e5f\u4e0d\u540c\uff09 // \u5219\u65b0\u4e32\u5728\u524d\u7f00\u4e32\u7684\u57fa\u7840\u4e0a\u52a0\u4e0a\u5f53\u524d\u65f6\u523b\u7684\u8f93\u51fa\u5b57\u7b26 // Case 4: *a + b => *ab, *a\u03b5 + b => *ab std :: vector < int > new_prefix ( prefix ); // \u5c06\u5f53\u524d\u65f6\u523b\u7684\u8f93\u51fa\u62fc\u63a5\u5230\u524d\u7f00\u4e32\u4e0a\uff0c\u5f97\u5230\u65b0\u4e32 new_prefix . emplace_back ( id ); PrefixScore & next_score = next_hyps [ new_prefix ]; // \u65b0\u4e32\u4ee5\u975e \u03b5 \u7ed3\u5c3e\u7684\u5206\u6570 next_score.ns \u4e3a\u4e24\u8005\u4e4b\u548c\uff1a // 1. \u65b0\u4e32\u4ee5\u975e \u03b5 \u7ed3\u5c3e\u7684\u5206\u6570 next_score.ns // 2. \u524d\u7f00\u4e32\u7684\u5206\u6570 prefix_score.score() \u548c\u5f53\u524d\u8f93\u51fa\u7684\u6982\u7387 prob \u7684\u5bf9\u6570\u548c next_score . ns = LogAdd ( next_score . ns , prefix_score . score () + prob ); // \u5224\u65ad\u662f\u5426\u9700\u8981\u66f4\u65b0\u65b0\u4e32\u4ee5\u975e \u03b5 \u7ed3\u5c3e\u7684 viterbi \u5206\u6570 next_score.v_ns if ( next_score . v_ns < prefix_score . viterbi_score () + prob ) { next_score . v_ns = prefix_score . viterbi_score () + prob ; // \u66f4\u65b0\u524d\u7f00\u4e32\u6700\u540e\u4e00\u4e2a\u5b57\u5cf0\u503c\u7684\u6982\u7387 next_score . cur_token_prob = prob ; // \u65b0\u4e32\u4ee5\u975e \u03b5 \u7ed3\u5c3e\u7684 viterbi \u8def\u5f84\u7684\u65f6\u95f4\u6233 next_score.times_ns \u7b49\u4e8e\uff1a // \u524d\u7f00\u4e32 viterbi \u8def\u5f84\u7684\u65f6\u95f4\u6233 prefix_score.times()\uff0c\u62fc\u63a5\u4e0a\u5f53\u524d\u65f6\u95f4\u6b65 abs_time_step_ next_score . times_ns = prefix_score . times (); next_score . times_ns . emplace_back ( abs_time_step_ ); } if ( context_graph_ && ! next_score . has_context ) { // \u4e0a\u4e0b\u6587\u504f\u7f6e // Calculate the context score. next_score . UpdateContext ( context_graph_ , prefix_score , id , prefix . size ()); next_score . has_context = true ; } } } }","title":"\u4ee4\u724c\u4f20\u64ad"},{"location":"asr/wenet%E7%9A%84ctc_prefix_beam_search/#_4","text":"\u7b2c\u4e8c\u6b21\u526a\u679d\u65f6\u53ea\u4fdd\u7559\u5206\u6570\u6700\u9ad8\u7684 opts_.second_beam_size \u6761\u8def\u5f84\uff08N-Best\uff09\uff0c\u4fbf\u4e8e\u540e\u7eed\u7684\u91cd\u6253\u5206\u3002 1 2 3 4 5 6 7 8 9 // 3. Second beam prune, only keep top n best paths std :: vector < std :: pair < std :: vector < int > , PrefixScore >> arr ( next_hyps . begin (), next_hyps . end ()); int second_beam_size = std :: min ( static_cast < int > ( arr . size ()), opts_ . second_beam_size ); std :: nth_element ( arr . begin (), arr . begin () + second_beam_size , arr . end (), PrefixScoreCompare ); arr . resize ( second_beam_size ); std :: sort ( arr . begin (), arr . end (), PrefixScoreCompare );","title":"\u7b2c\u4e8c\u6b21\u526a\u679d"},{"location":"asr/wenet%E7%9A%84ctc_prefix_beam_search/#_5","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 cur_hyps_ . clear (); outputs_ . clear (); hypotheses_ . clear (); likelihood_ . clear (); viterbi_likelihood_ . clear (); times_ . clear (); for ( auto & item : hpys ) { // \u66f4\u65b0\u524d\u7f00\u4e32 cur_hyps_ [ item . first ] = item . second ; // \u66f4\u65b0\u8bed\u8a00\u6a21\u578b\u7684Context Graph UpdateOutputs ( item ); // \u66f4\u65b0\u89e3\u7801\u7ed3\u679c hypotheses_ . emplace_back ( std :: move ( item . first )); // \u66f4\u65b0\u6bcf\u4e2a\u89e3\u7801\u7ed3\u679c\u7684\u5206\u6570 likelihood_ . emplace_back ( item . second . total_score ()); // \u66f4\u65b0\u6bcf\u4e2a\u89e3\u7801\u7ed3\u679c\u7684viterbi\u5206\u6570 viterbi_likelihood_ . emplace_back ( item . second . viterbi_score ()); // \u66f4\u65b0\u6bcf\u4e2a\u89e3\u7801\u7ed3\u679c\u7684\u65f6\u95f4\u6233\u4fe1\u606f times_ . emplace_back ( item . second . times ()); } CTC\u7684Decode\u7b97\u6cd5-Prefix Beam Search First-Pass Large Vocabulary Continuous Speech Recognition using Bi-Directional Recurrent DNNs Distill-Sequence Modeling With CTC WeNet \u66f4\u65b0\uff1a\u652f\u6301\u5b57\u7ea7\u65f6\u95f4\u6233\u548c N-best","title":"\u66f4\u65b0\u89c4\u6574\u5b57\u7b26\u4e32"},{"location":"asr/wenet%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B/","text":"wenet\u8bed\u8a00\u6a21\u578b WeNet\u4e2d\u9009\u62e9\u57fa\u4e8en-gram\u7684\u7edf\u8ba1\u8bed\u8a00\u6a21\u578b\uff08Language Model\uff0cLM\uff09\uff0c\u7ed3\u5408\u52a0\u6743\u6709\u9650\u72b6\u6001\u673a\uff08Weighted Finite State Transducer\uff0cWFST\uff09\u548c\u4f20\u7edf\u8bed\u97f3\u8bc6\u522b\u89e3\u7801\u65b9\u6cd5\uff0c\u4ee5\u652f\u6301\u8bed\u8a00\u6a21\u578b\u3002 \u7cfb\u7edf\u7ed3\u6784 \u5982\u4e0a\u56fe\uff0cWeNet\u91c7\u7528U2\uff08Unified Two Pass\uff09\u65b9\u6848\u4ee5\u5b9e\u73b0\u6d41\u5f0f\u89e3\u7801\uff1a First Pass\u4f7f\u7528CTC\u89e3\u7801\u7ed3\u679c\u4f5c\u4e3a\u4e2d\u95f4\u7ed3\u679c\uff0c\u4f7f\u7528CTC prefix beam search\u6216CTC WFST search\u7b97\u6cd5\u4ea7\u751fN-best\uff0c\u5176\u4e2dCTC WFST search\u652f\u6301\u8bed\u8a00\u6a21\u578b\u751f\u6210N-best\u3002WFST search \u662f\u4f9d\u9760\u4f20\u7edf\u89e3\u7801\u56fe\u7684\u89e3\u7801\u65b9\u5f0f\u3002 Second Pass\u5229\u7528Attention Decoder\u5bf9CTC\u4ea7\u751f\u7684\u5019\u9009\u7ed3\u679cN-best\u8fdb\u884c\u91cd\u6253\u5206\u3002 \u5982\u4e0a\u56fe\u6240\u793a\uff0cCTC WFST search\u652f\u6301\u8bed\u8a00\u6a21\u578b\u3002\u91c7\u7528\u8bed\u8a00\u6a21\u578b\u8fdb\u884c\u89e3\u7801\u7684\u8fc7\u7a0b\u5305\u62ec\u89e3\u7801\u56fe\u7684\u6784\u5efa\u548c\u89e3\u7801\u5668\u7684\u89e3\u7801\u3002 \u89e3\u7801\u56fe\u7684\u6784\u5efa \u7aef\u5230\u7aef\u8bed\u97f3\u8bc6\u522b\u6a21\u578b\u901a\u5e38\u4f7f\u7528TLG\u89e3\u7801\u56fe\uff0c\u6784\u5efaTLG\u89e3\u7801\u56fe\u5c31\u662f\u5c06\u5efa\u6a21\u5355\u5143T\uff0c\u8bcd\u5178L\u548c\u8bed\u8a00\u6a21\u578bG\u4e09\u4e2a\u5c42\u6b21\u7684\u4fe1\u606f\u7ec4\u5408\u8fdb\u4e00\u4e2a\u89e3\u7801\u56feTLG\u4e2d\uff0c\u5176\u4e2d\uff1a T\u4e3a\u7aef\u5230\u7aef\u8bed\u97f3\u8bc6\u522b\u6a21\u578b\u7684\u5efa\u6a21\u5355\u5143\uff0c\u4e00\u822c\u6765\u8bf4\uff0c\u5bf9\u4e2d\u6587\u7684\u5efa\u6a21\u5355\u5143\u4e3a\u6c49\u5b57\uff0c\u82f1\u6587\u4e3a\u82f1\u6587\u5b57\u6bcd\u6216BPE\u5355\u5143\u3002 L\u4e3a\u8bcd\u5178\uff0c\u8be5\u8bcd\u5178\u6bd4\u8f83\u7b80\u5355\uff0c\u76f4\u63a5\u5c06\u5355\u8bcd\u62c6\u5206\u4e3a\u5bf9\u5e94\u7684\u5efa\u6a21\u5355\u5143\u5e8f\u5217\u5373\u53ef\u3002\u6bd4\u5982\uff0c\u5728\u4e2d\u6587\u4e2d\uff0c\u5c06\u5355\u8bcd\u201d\u6211\u4eec\u201c\u62c6\u5206\u4e3a\u201d\u6211\u201c\u3001\u201d\u4eec\u201c\u4e24\u4e2a\u5efa\u6a21\u5355\u5143\uff0c\u5219\u8bcd\u5178\u4e2d\u7684\u4e00\u4e2a\u8bcd\u6761\u7c7b\u4f3c\u4e8e\uff1a \u6211\u4eec \u6211 \u4eec \uff0c\u5728\u82f1\u6587\u4e2d\uff0c\u5c06\u5355\u8bcd\u201dwe\u201c\u62c6\u5206\u4e3a\u201dw\u201c\u3001\u201de\u201c\u4e24\u4e2a\u82f1\u6587\u5b57\u6bcd\uff0c\u5219\u8bcd\u5178\u4e2d\u7684\u4e00\u4e2a\u8bcd\u6761\u7c7b\u4f3c\u4e8e\uff1a we w e \u3002\u53ef\u4ee5\u770b\u5230\uff0c\u8be5\u8bcd\u5178\u6ca1\u6709\u4f20\u7edf\u8bcd\u5178\u4e2d\u97f3\u7d20\u7684\u6982\u5ff5\uff0c\u65e0\u9700\u4eba\u4e3a\u8bbe\u8ba1\u53d1\u97f3\u5e8f\u5217\u3002 G\u4e3a\u8bed\u8a00\u6a21\u578b\uff0c\u4e5f\u5c31\u662f\u5c06n-gram\u8bed\u8a00\u6a21\u578b\u8f6c\u6362\u4e3aWFST\u5f62\u5f0f\u3002 \u56e0\u6b64CTC WFST Beam Search\u5728\u89e3\u7801\u65f6\uff0c\u4f7f\u7528\u6784\u5efa\u7684TLG\u89e3\u7801\u56fe\uff0c\u5b9e\u9645\u5df2\u7ecf\u5229\u7528\u4e86\u8bed\u8a00\u6a21\u578b\u3002 \u89e3\u7801\u5668\u7684\u89e3\u7801 \u89e3\u7801\u5668\u89e3\u7801\u548c\u4f20\u7edf\u8bed\u97f3\u8bc6\u522b\u4e2d\u89e3\u7801\u5668\u4e00\u81f4\uff0c\u4f7f\u7528\u6807\u51c6Viterbi Beam Search\u7b97\u6cd5\u8fdb\u884c\u89e3\u7801\u3002 \u5de5\u7a0b\u5b9e\u73b0 \u76f4\u63a5\u91c7\u7528Kaldi\u4e2d\u7684 LatticeFasterDecoder \u89e3\u7801\u5668\u548c\u76f8\u5173\u5de5\u5177\u5b9e\u73b0\u57fa\u4e8eTLG\u7684\u96c6\u6210\uff0c\u5e76\u5b9e\u73b0\u4e86blank frame skipping\u7b97\u6cd5\uff0c\u4ee5\u52a0\u901f\u89e3\u7801\u3002\u5bf9\u4e8e\u5f15\u7528\u7684Kaldi\u4ee3\u7801\uff0c\u4fdd\u6301\u4e86\u5176\u539f\u6709\u7684\u76ee\u5f55\u7ed3\u6784\uff0c\u5e76\u5229\u7528 glog \u66ff\u6362\u539f\u59cb\u7684\u65e5\u5fd7\u7cfb\u7edf: 1 2 3 4 5 6 7 8 9 #define KALDI_WARN \\ google::LogMessage(__FILE__, __LINE__, google::GLOG_WARNING).stream() #define KALDI_ERR \\ google::LogMessage(__FILE__, __LINE__, google::GLOG_ERROR).stream() #define KALDI_INFO \\ google::LogMessage(__FILE__, __LINE__, google::GLOG_INFO).stream() #define KALDI_VLOG(v) VLOG(v) #define KALDI_ASSERT(condition) CHECK(condition) \u53c2\u89c1 wenet/runtime/core/decoder/ctc_wfst_beam_search.cc \u76f8\u5173\u4ee3\u7801\u3002 WeNet\u4e2d\u8bed\u8a00\u6a21\u578b\u7684\u4f7f\u7528\u65b9\u6cd5 wenet/examples/aishell/s0/run.sh \u4e2d\u7ed9\u51fa\u4e86\u51c6\u5907\u8bcd\u5178\u3001\u8bad\u7ec3\u8bed\u8a00\u6a21\u578b\u3001\u6784\u5efa\u89e3\u7801\u56fe\u548c\u5229\u7528TLG\u89e3\u7801\u7684\u793a\u4f8b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 # wenet/examples/aishell/s0/run.sh # 7.1 Prepare dict unit_file = $dict mkdir -p data/local/dict cp $unit_file data/local/dict/units.txt # tools/fst/prepare_dict.py usage: # sys.argv[1]: e2e model unit file(lang_char.txt) # sys.argv[2]: raw lexicon file # sys.argv[3]: output lexicon file # sys.argv[4]: bpemodel tools/fst/prepare_dict.py $unit_file ${ data } /resource_aishell/lexicon.txt \\ data/local/dict/lexicon.txt # 7.2 Train lm lm = data/local/lm mkdir -p $lm tools/filter_scp.pl data/train/text \\ $data /data_aishell/transcript/aishell_transcript_v0.8.txt > $lm /text # train LM by SRILM tools # This script takes no arguments. # It takes as input the files # data/local/lm/text # data/local/dict/lexicon.txt local/aishell_train_lms.sh # 7.3 Build decoding TLG # usage: tools/fst/compile_lexicon_token_fst.sh <dict-src-dir> <tmp-dir> <lang-dir> tools/fst/compile_lexicon_token_fst.sh \\ data/local/dict data/local/tmp data/local/lang # usage: make_tlg.sh <lm-dir> <src-lang> <tgt-lang> tools/fst/make_tlg.sh data/local/lm data/local/lang data/lang_test || exit 1 ; # 7.4 Decoding with runtime # usage: $0 [options] <wav.scp> <label_file> <model_file> <dict_file> <output_dir> ./tools/decode.sh --nj 16 \\ --beam 15 .0 --lattice_beam 7 .5 --max_active 7000 \\ --blank_skip_thresh 0 .98 --ctc_weight 0 .5 --rescoring_weight 1 .0 \\ --fst_path data/lang_test/TLG.fst \\ data/test/wav.scp data/test/text $dir /final.zip \\ data/lang_test/words.txt $dir /lm_with_runtime \u8bed\u8a00\u6a21\u578b\u53c2\u4e0e\u6700\u7ec8\u6253\u5206 \u5bf9\u4e8e\u89e3\u7801\u7684\u5019\u9009\u7ed3\u679c\u8fdb\u884c\u6253\u5206\uff0c\u9664\u4e86\u6709\u58f0\u5b66\u6a21\u578b\u7684\u5206\u6570\u5916\uff0c\u8fd8\u53ef\u80fd\u4f1a\u6709\u989d\u5916\u7684\u8bed\u8a00\u6a21\u578b\u548c\u957f\u5ea6\u60e9\u7f5a\u5206\u3002\u5047\u8bbe \\(W\\) \u4e3a\u89e3\u7801\u7ed3\u679c\uff0c \\(X\\) \u4e3a\u8f93\u5165\u8bed\u97f3\uff0c \\(\\alpha,\\beta\\) \u5206\u522b\u4e3a\u8d85\u53c2\u6570,\u5219\u6700\u7ec8\u5f97\u5206\u7684\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b\uff1a \\[ score=P_{am}(W|X)\\cdot P_{lm}(W)^{\\alpha}\\cdot |W|^{\\beta} \\] WeNet \u66f4\u65b0\uff1a\u652f\u6301\u8bed\u8a00\u6a21\u578b github/wenet/kaldi github/wenet/lm_doc LiJian-kaldi\u642d\u5efa\u5728\u7ebf\u8bed\u97f3\u8bc6\u522b\u7cfb\u7edf/P4 \u6d2a\u300a\u8bed\u97f3\u8bc6\u522b\u300b-P185~P191 \u9648\u300a\u8bed\u97f3\u8bc6\u522b\u5b9e\u6218\u300b-P123\uff08transition-id\uff09","title":"wenet\u8bed\u8a00\u6a21\u578b"},{"location":"asr/wenet%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B/#wenet","text":"WeNet\u4e2d\u9009\u62e9\u57fa\u4e8en-gram\u7684\u7edf\u8ba1\u8bed\u8a00\u6a21\u578b\uff08Language Model\uff0cLM\uff09\uff0c\u7ed3\u5408\u52a0\u6743\u6709\u9650\u72b6\u6001\u673a\uff08Weighted Finite State Transducer\uff0cWFST\uff09\u548c\u4f20\u7edf\u8bed\u97f3\u8bc6\u522b\u89e3\u7801\u65b9\u6cd5\uff0c\u4ee5\u652f\u6301\u8bed\u8a00\u6a21\u578b\u3002","title":"wenet\u8bed\u8a00\u6a21\u578b"},{"location":"asr/wenet%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B/#_1","text":"\u5982\u4e0a\u56fe\uff0cWeNet\u91c7\u7528U2\uff08Unified Two Pass\uff09\u65b9\u6848\u4ee5\u5b9e\u73b0\u6d41\u5f0f\u89e3\u7801\uff1a First Pass\u4f7f\u7528CTC\u89e3\u7801\u7ed3\u679c\u4f5c\u4e3a\u4e2d\u95f4\u7ed3\u679c\uff0c\u4f7f\u7528CTC prefix beam search\u6216CTC WFST search\u7b97\u6cd5\u4ea7\u751fN-best\uff0c\u5176\u4e2dCTC WFST search\u652f\u6301\u8bed\u8a00\u6a21\u578b\u751f\u6210N-best\u3002WFST search \u662f\u4f9d\u9760\u4f20\u7edf\u89e3\u7801\u56fe\u7684\u89e3\u7801\u65b9\u5f0f\u3002 Second Pass\u5229\u7528Attention Decoder\u5bf9CTC\u4ea7\u751f\u7684\u5019\u9009\u7ed3\u679cN-best\u8fdb\u884c\u91cd\u6253\u5206\u3002 \u5982\u4e0a\u56fe\u6240\u793a\uff0cCTC WFST search\u652f\u6301\u8bed\u8a00\u6a21\u578b\u3002\u91c7\u7528\u8bed\u8a00\u6a21\u578b\u8fdb\u884c\u89e3\u7801\u7684\u8fc7\u7a0b\u5305\u62ec\u89e3\u7801\u56fe\u7684\u6784\u5efa\u548c\u89e3\u7801\u5668\u7684\u89e3\u7801\u3002","title":"\u7cfb\u7edf\u7ed3\u6784"},{"location":"asr/wenet%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B/#_2","text":"\u7aef\u5230\u7aef\u8bed\u97f3\u8bc6\u522b\u6a21\u578b\u901a\u5e38\u4f7f\u7528TLG\u89e3\u7801\u56fe\uff0c\u6784\u5efaTLG\u89e3\u7801\u56fe\u5c31\u662f\u5c06\u5efa\u6a21\u5355\u5143T\uff0c\u8bcd\u5178L\u548c\u8bed\u8a00\u6a21\u578bG\u4e09\u4e2a\u5c42\u6b21\u7684\u4fe1\u606f\u7ec4\u5408\u8fdb\u4e00\u4e2a\u89e3\u7801\u56feTLG\u4e2d\uff0c\u5176\u4e2d\uff1a T\u4e3a\u7aef\u5230\u7aef\u8bed\u97f3\u8bc6\u522b\u6a21\u578b\u7684\u5efa\u6a21\u5355\u5143\uff0c\u4e00\u822c\u6765\u8bf4\uff0c\u5bf9\u4e2d\u6587\u7684\u5efa\u6a21\u5355\u5143\u4e3a\u6c49\u5b57\uff0c\u82f1\u6587\u4e3a\u82f1\u6587\u5b57\u6bcd\u6216BPE\u5355\u5143\u3002 L\u4e3a\u8bcd\u5178\uff0c\u8be5\u8bcd\u5178\u6bd4\u8f83\u7b80\u5355\uff0c\u76f4\u63a5\u5c06\u5355\u8bcd\u62c6\u5206\u4e3a\u5bf9\u5e94\u7684\u5efa\u6a21\u5355\u5143\u5e8f\u5217\u5373\u53ef\u3002\u6bd4\u5982\uff0c\u5728\u4e2d\u6587\u4e2d\uff0c\u5c06\u5355\u8bcd\u201d\u6211\u4eec\u201c\u62c6\u5206\u4e3a\u201d\u6211\u201c\u3001\u201d\u4eec\u201c\u4e24\u4e2a\u5efa\u6a21\u5355\u5143\uff0c\u5219\u8bcd\u5178\u4e2d\u7684\u4e00\u4e2a\u8bcd\u6761\u7c7b\u4f3c\u4e8e\uff1a \u6211\u4eec \u6211 \u4eec \uff0c\u5728\u82f1\u6587\u4e2d\uff0c\u5c06\u5355\u8bcd\u201dwe\u201c\u62c6\u5206\u4e3a\u201dw\u201c\u3001\u201de\u201c\u4e24\u4e2a\u82f1\u6587\u5b57\u6bcd\uff0c\u5219\u8bcd\u5178\u4e2d\u7684\u4e00\u4e2a\u8bcd\u6761\u7c7b\u4f3c\u4e8e\uff1a we w e \u3002\u53ef\u4ee5\u770b\u5230\uff0c\u8be5\u8bcd\u5178\u6ca1\u6709\u4f20\u7edf\u8bcd\u5178\u4e2d\u97f3\u7d20\u7684\u6982\u5ff5\uff0c\u65e0\u9700\u4eba\u4e3a\u8bbe\u8ba1\u53d1\u97f3\u5e8f\u5217\u3002 G\u4e3a\u8bed\u8a00\u6a21\u578b\uff0c\u4e5f\u5c31\u662f\u5c06n-gram\u8bed\u8a00\u6a21\u578b\u8f6c\u6362\u4e3aWFST\u5f62\u5f0f\u3002 \u56e0\u6b64CTC WFST Beam Search\u5728\u89e3\u7801\u65f6\uff0c\u4f7f\u7528\u6784\u5efa\u7684TLG\u89e3\u7801\u56fe\uff0c\u5b9e\u9645\u5df2\u7ecf\u5229\u7528\u4e86\u8bed\u8a00\u6a21\u578b\u3002","title":"\u89e3\u7801\u56fe\u7684\u6784\u5efa"},{"location":"asr/wenet%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B/#_3","text":"\u89e3\u7801\u5668\u89e3\u7801\u548c\u4f20\u7edf\u8bed\u97f3\u8bc6\u522b\u4e2d\u89e3\u7801\u5668\u4e00\u81f4\uff0c\u4f7f\u7528\u6807\u51c6Viterbi Beam Search\u7b97\u6cd5\u8fdb\u884c\u89e3\u7801\u3002","title":"\u89e3\u7801\u5668\u7684\u89e3\u7801"},{"location":"asr/wenet%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B/#_4","text":"\u76f4\u63a5\u91c7\u7528Kaldi\u4e2d\u7684 LatticeFasterDecoder \u89e3\u7801\u5668\u548c\u76f8\u5173\u5de5\u5177\u5b9e\u73b0\u57fa\u4e8eTLG\u7684\u96c6\u6210\uff0c\u5e76\u5b9e\u73b0\u4e86blank frame skipping\u7b97\u6cd5\uff0c\u4ee5\u52a0\u901f\u89e3\u7801\u3002\u5bf9\u4e8e\u5f15\u7528\u7684Kaldi\u4ee3\u7801\uff0c\u4fdd\u6301\u4e86\u5176\u539f\u6709\u7684\u76ee\u5f55\u7ed3\u6784\uff0c\u5e76\u5229\u7528 glog \u66ff\u6362\u539f\u59cb\u7684\u65e5\u5fd7\u7cfb\u7edf: 1 2 3 4 5 6 7 8 9 #define KALDI_WARN \\ google::LogMessage(__FILE__, __LINE__, google::GLOG_WARNING).stream() #define KALDI_ERR \\ google::LogMessage(__FILE__, __LINE__, google::GLOG_ERROR).stream() #define KALDI_INFO \\ google::LogMessage(__FILE__, __LINE__, google::GLOG_INFO).stream() #define KALDI_VLOG(v) VLOG(v) #define KALDI_ASSERT(condition) CHECK(condition) \u53c2\u89c1 wenet/runtime/core/decoder/ctc_wfst_beam_search.cc \u76f8\u5173\u4ee3\u7801\u3002","title":"\u5de5\u7a0b\u5b9e\u73b0"},{"location":"asr/wenet%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B/#wenet_1","text":"wenet/examples/aishell/s0/run.sh \u4e2d\u7ed9\u51fa\u4e86\u51c6\u5907\u8bcd\u5178\u3001\u8bad\u7ec3\u8bed\u8a00\u6a21\u578b\u3001\u6784\u5efa\u89e3\u7801\u56fe\u548c\u5229\u7528TLG\u89e3\u7801\u7684\u793a\u4f8b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 # wenet/examples/aishell/s0/run.sh # 7.1 Prepare dict unit_file = $dict mkdir -p data/local/dict cp $unit_file data/local/dict/units.txt # tools/fst/prepare_dict.py usage: # sys.argv[1]: e2e model unit file(lang_char.txt) # sys.argv[2]: raw lexicon file # sys.argv[3]: output lexicon file # sys.argv[4]: bpemodel tools/fst/prepare_dict.py $unit_file ${ data } /resource_aishell/lexicon.txt \\ data/local/dict/lexicon.txt # 7.2 Train lm lm = data/local/lm mkdir -p $lm tools/filter_scp.pl data/train/text \\ $data /data_aishell/transcript/aishell_transcript_v0.8.txt > $lm /text # train LM by SRILM tools # This script takes no arguments. # It takes as input the files # data/local/lm/text # data/local/dict/lexicon.txt local/aishell_train_lms.sh # 7.3 Build decoding TLG # usage: tools/fst/compile_lexicon_token_fst.sh <dict-src-dir> <tmp-dir> <lang-dir> tools/fst/compile_lexicon_token_fst.sh \\ data/local/dict data/local/tmp data/local/lang # usage: make_tlg.sh <lm-dir> <src-lang> <tgt-lang> tools/fst/make_tlg.sh data/local/lm data/local/lang data/lang_test || exit 1 ; # 7.4 Decoding with runtime # usage: $0 [options] <wav.scp> <label_file> <model_file> <dict_file> <output_dir> ./tools/decode.sh --nj 16 \\ --beam 15 .0 --lattice_beam 7 .5 --max_active 7000 \\ --blank_skip_thresh 0 .98 --ctc_weight 0 .5 --rescoring_weight 1 .0 \\ --fst_path data/lang_test/TLG.fst \\ data/test/wav.scp data/test/text $dir /final.zip \\ data/lang_test/words.txt $dir /lm_with_runtime","title":"WeNet\u4e2d\u8bed\u8a00\u6a21\u578b\u7684\u4f7f\u7528\u65b9\u6cd5"},{"location":"asr/wenet%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B/#_5","text":"\u5bf9\u4e8e\u89e3\u7801\u7684\u5019\u9009\u7ed3\u679c\u8fdb\u884c\u6253\u5206\uff0c\u9664\u4e86\u6709\u58f0\u5b66\u6a21\u578b\u7684\u5206\u6570\u5916\uff0c\u8fd8\u53ef\u80fd\u4f1a\u6709\u989d\u5916\u7684\u8bed\u8a00\u6a21\u578b\u548c\u957f\u5ea6\u60e9\u7f5a\u5206\u3002\u5047\u8bbe \\(W\\) \u4e3a\u89e3\u7801\u7ed3\u679c\uff0c \\(X\\) \u4e3a\u8f93\u5165\u8bed\u97f3\uff0c \\(\\alpha,\\beta\\) \u5206\u522b\u4e3a\u8d85\u53c2\u6570,\u5219\u6700\u7ec8\u5f97\u5206\u7684\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b\uff1a \\[ score=P_{am}(W|X)\\cdot P_{lm}(W)^{\\alpha}\\cdot |W|^{\\beta} \\] WeNet \u66f4\u65b0\uff1a\u652f\u6301\u8bed\u8a00\u6a21\u578b github/wenet/kaldi github/wenet/lm_doc LiJian-kaldi\u642d\u5efa\u5728\u7ebf\u8bed\u97f3\u8bc6\u522b\u7cfb\u7edf/P4 \u6d2a\u300a\u8bed\u97f3\u8bc6\u522b\u300b-P185~P191 \u9648\u300a\u8bed\u97f3\u8bc6\u522b\u5b9e\u6218\u300b-P123\uff08transition-id\uff09","title":"\u8bed\u8a00\u6a21\u578b\u53c2\u4e0e\u6700\u7ec8\u6253\u5206"},{"location":"asr/%E5%8A%A0%E6%9D%83%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA/","text":"\u52a0\u6743\u6709\u9650\u72b6\u6001\u673a \u6982\u8ff0 \u57fa\u4e8e\u52a0\u6743\u6709\u9650\u72b6\u6001\u673a\uff08Weighted Finite-State Transducers\uff0cWFST\uff09\u751f\u6210\u7684\u89e3\u7801\u56fe\uff0c\u914d\u5408\u58f0\u5b66\u6a21\u578b\u8fdb\u884c\u7ef4\u7279\u6bd4\u89e3\u7801\u662f\u8bed\u97f3\u8bc6\u522b\u4e2d\u57fa\u7840\u7684\u89e3\u7801\u65b9\u6cd5\u3002 \u6709\u9650\u72b6\u6001\u673a\uff08Finite-State Transducers\uff0cFST\uff09\u548cWFST\u7684\u533a\u522b\u5728\u4e8e\u540e\u8005\u8f6c\u79fb\u8def\u5f84\u4e0a\u5e26\u6709\u6743\u91cd\uff0c\u52a0\u6743\u6709\u9650\u72b6\u6001\u63a5\u6536\u5668\uff08Weighted Finite-State Acceptor\uff0cWFSA\uff09\u548cWFST\u7684\u533a\u522b\u5728\u4e8e\u524d\u8005\u7684\u72b6\u6001\u8f6c\u79fb\u4e0a\u53ea\u6709\u4e00\u4e2a\u6807\u7b7e\uff0c\u53ef\u4ee5\u770b\u4f5c\u662fstring->double\u7684\u5b57\u5178\uff0c\u800c\u540e\u8005\u65e2\u6709\u8f93\u5165\u6807\u7b7e\u53c8\u6709\u8f93\u51fa\u6807\u7b7e\u3002 WFST\u5b58\u5728\u4e00\u4e2a\u6709\u9650\u7684\u72b6\u6001\u96c6\u5408\u4ee5\u53ca\u72b6\u6001\u95f4\u7684\u8df3\u8f6c\uff0c\u5982\u679c\u5b58\u5728\u4e00\u6761\u4ece\u521d\u59cb\u72b6\u6001\u5230\u7ec8\u6b62\u72b6\u6001\u7684\u8def\u5f84\uff0c\u4f7f\u5f97\u8def\u5f84\u4e0a\u7684\u6807\u7b7e\u5e8f\u5217\u6b63\u597d\u7b49\u4e8e\u8f93\u5165\u5e8f\u5217\uff0c\u5219\u8f93\u51fa\u4e00\u4e2a\u65b0\u7684\u5e8f\u5217\u548c\u5bf9\u5e94\u7684\u6743\u503c\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u8f93\u5165\u201cac\u201d\uff0c\u5339\u914d\u52300-1\uff0c1-2\u8fd9\u6761\u8def\u5f84\uff0c\u5219\u8f93\u51fa\u201cqs\u201d\uff0c\u5bf9\u5e94\u7684\u6743\u503c\u4e3a \\(1+0.63=1.63\\) \u3002 OpenFST \u662fWFST\u53ca\u5176\u76f8\u5173\u7b97\u6cd5\u7684\u5f00\u6e90\u5b9e\u73b0\u3002 \u590d\u5408\uff08Composition\uff09\u64cd\u4f5c \u590d\u5408\u64cd\u4f5c\u7528\u6765\u628a\u4e24\u4e2a\u4e0d\u540c\u5c42\u7ea7\u7684WFST\u201c\u590d\u5408\u201d\u6210\u4e00\u4e2aWFST\u3002\u6bd4\u5982\u53d1\u97f3\u8bcd\u5178\u4f1a\u544a\u8bc9\u4e00\u4e2a\u5355\u8bcd\u5bf9\u5e94\u7684\u56e0\u5b50\uff08\u6bd4\u5982\u97f3\u7d20\u7b49\uff09\uff0c\u56e0\u6b64\u53ef\u4ee5\u6784\u9020\u4e00\u4e2aWFST L \u6765\u628a\u56e0\u5b50\u7684\u5e8f\u5217\u8f6c\u6362\u6210\u5355\u8bcd\u7684\u5e8f\u5217\u4ee5\u53ca\u5bf9\u5e94\u7684\u6982\u7387\uff0c\u5982\u4e0a\u56feb\u3002\u6b64\u5916\u6709\u4e00\u4e2a\u6587\u6cd5\uff08\u6216\u8005\u7edf\u8ba1\u8bed\u8a00\u6a21\u578b\uff09\u544a\u8bc9\u5355\u8bcd\u5e8f\u5217\u6982\u7387\uff0c\u56e0\u6b64\u4e5f\u53ef\u4ee5\u6784\u9020\u4e00\u4e2aWFST G \u6765\u8868\u793a\u8be5\u6587\u6cd5\u6216\u8005\u7edf\u8ba1\u8bed\u8a00\u6a21\u578b\uff0c\u5982\u4e0a\u56fea\uff0c\u4e0d\u8fc7WFST G \u7684\u7279\u70b9\u662f\uff1a\u8f93\u5165\u548c\u8f93\u51fa\u662f\u4e00\u6837\u7684\uff0c\u56e0\u6b64\u5b9e\u9645\u53ea\u9700\u8981\u5176\u6743\u503c\u3002\u8fd9\u6837\u901a\u8fc7\u590d\u5408\u64cd\u4f5c \\(L\\circ G\\) \u6765\u5f97\u5230\u4e00\u4e2a\u65b0\u7684WFST\uff0c\u8be5WFST\u7684\u8f93\u5165\u662f\u4e00\u4e2a\u56e0\u5b50\u7684\u5e8f\u5217\uff0c\u8f93\u51fa\u662f\u5355\u8bcd\u5e8f\u5217\u53ca\u5176\u5bf9\u5e94\u6982\u7387\u3002 \u5982\u4e0a\u56fe\u6240\u793a\uff0cWFST C \u7531WFST A \u548cWFST B \u590d\u5408\u800c\u6765\uff0cC\u53ef\u4ee5\u770b\u4f5c\u662fA\u3001B\u7684\u7ea7\u8054\u3002 \u786e\u5b9a\u5316\uff08Determinization\uff09\u64cd\u4f5c \u5982\u679cWFST\u6709\u7a7a\u8f6c\u79fb\u7684\u8fb9\uff0c\u6216\u8005\u4ece\u4e00\u4e2a\u72b6\u6001\u9047\u5230\u4e00\u4e2a\u5b57\u6bcd\u4f1a\u6709\u4e24\u6761\u53ca\u5176\u4ee5\u4e0a\u7684\u8fb9\uff0c\u90a3\u4e48\u5b83\u5c31\u662f\u975e\u786e\u5b9a\u7684\u3002\u975e\u786e\u5b9a\u7684WFST/WFSA/FSA\u76f8\u6bd4\u4e8e\u786e\u5b9a\u7684WFST/WFSA/FSA\u4f1a\u66f4\u52a0\u96be\u4e8e\u5224\u5b9a\u67d0\u4e2a\u5b57\u7b26\u4e32\u662f\u5426\u53ef\u4ee5\u63a5\u53d7\u3002\u786e\u5b9a\u5316\u7b97\u6cd5\u5c31\u662f\u628a\u4e00\u4e2a\u975e\u786e\u5b9a\u7684WFST\u8f6c\u6362\u6210\u7b49\u4ef7\u4e14\u786e\u5b9a\u7684WFST\u7684\u7b97\u6cd5\u3002\u4e24\u4e2aWFST\u7b49\u4ef7\u7684\u5b9a\u4e49\u662f\uff1a\u5982\u679c\u7b2c\u4e00\u4e2aWFST\u63a5\u53d7\u8f93\u5165x\u5e76\u4e14\u53ef\u4ee5\u628a\u5b83\u6620\u5c04\u6210y\u4e14\u6743\u91cd\u662fw\uff0c\u90a3\u4e48\u7b2c\u4e8c\u4e2aWFST\u4e5f\u4e00\u5b9a\u63a5\u53d7\u8f93\u5165x\u5e76\u4e14\u80fd\u628a\u5b83\u6620\u5c04\u6210y\uff0c\u6743\u91cd\u4e5f\u662fw\uff1b\u53cd\u4e4b\u4ea6\u7136\u3002 \u5982\u4e0a\u56fe\u6240\u793a\uff0c\u56fea\u662f\u975e\u786e\u5b9a\u7684WFSA\uff0c\u56feb\u662f\u4e0e\u4e4b\u7b49\u4ef7\u4e14\u786e\u5b9a\u7684WFSA\u3002 \u6700\u5c0f\u5316\uff08Minimization\uff09\u64cd\u4f5c WFST\u53ef\u4ee5\u901a\u8fc7\u6700\u5c0f\u5316\u64cd\u4f5c\u6765\u8fdb\u4e00\u6b65\u538b\u7f29\u7a7a\u95f4\u548c\u63d0\u9ad8\u8bc6\u522b\u901f\u5ea6\u3002 \u5982\u4e0a\u56fe\u6240\u793a\uff0c\u56fec\u4e3a\u56fea\u7ecf\u8fc7\u6700\u5c0f\u5316\u4e4b\u540e\u7684WFSA\u3002 TLG\u89e3\u7801\u56fe \u8fd1\u5e74\u6765\uff0c\u7aef\u5230\u7aef\u58f0\u5b66\u6a21\u578b\u5e38\u5e38\u4e0eTLG\u89e3\u7801\u56fe\u642d\u914d\u4f7f\u7528\uff0c\u800cKaldi\u4e2d\u7684\u89e3\u7801\u56fe\u7531HCLG\u6784\u6210\u3002 \u8f93\u5165 \u8f93\u51fa T(token) \u5e27\u7ea7\u522b\u7684CTC\u6807\u7b7e\u5e8f\u5217\uff08\u58f0\u5b66\u5efa\u6a21\u5355\u5143\uff09 lexicon\u5efa\u6a21\u5355\u5143 L(lexicon) lexicon\u5efa\u6a21\u5355\u5143\uff08\u6587\u672c\u5efa\u6a21\u5355\u5143\uff09 \u8bcd G(grammer) \u8bcd \u8bcd T\u7684\u6784\u56fe \u4ee5\u201cis\u201d\u4e2d/i/\u7684\u53d1\u97f3\u4e3a\u4f8b\uff1a L\u7684\u6784\u56fe \u4ee5\u201cis\u201d\u7684\u53d1\u97f3/iz/\u4e3a\u4f8b\uff1a G\u7684\u6784\u56fe \u7b80\u5355\u7684\u8bed\u8a00\u6a21\u578b\u6784\u56fe\u5982\u4e0b\uff0c\u4ee5\u201chow are you\u201d/\u201chow is it\u201d\u4e3a\u4f8b\uff1a \u901a\u8fc7TLG\u7684\u590d\u5408\u64cd\u4f5c\uff0c\u5c06\u58f0\u5b66\u5efa\u6a21\u5355\u5143\u3001\u8bcd\u5178\u548c\u8bed\u8a00\u6a21\u578b\u878d\u5408\u5728\u4e00\u8d77\uff0c\u4ea7\u751f\u9759\u6001\u7684\u89e3\u7801\u7f51\u7edc\u3002\u5728\u7ed3\u679c\u8fc7\u7a0b\u4e2d\u91c7\u7528\u641c\u7d22\u7b56\u7565\uff0c\u5f97\u5230\u8f93\u5165\u8bed\u97f3\u7684\u6700\u4f18\u89e3\u7801\u7ed3\u679c\u3002 \u66ff\u6362\uff08Replace\uff09\u64cd\u4f5c \u672c\u8d28\u662f\u589e\u5f3a\u56fa\u5b9a\u53e5\u5f0f\u7684\u8bed\u97f3\u8bc6\u522b\u6548\u679c\u3002\u6bd4\u5982\u53e5\u5b50\u542b\u6709\u69fd\u4f4d\uff08slot\uff09\uff0c\u69fd\u4f4d\u6709\u82e5\u5e72\u53ef\u80fd\uff0c\u53ef\u4ee5\u5229\u7528WFST\u66ff\u6362\u64cd\u4f5c\u589e\u5f3a\u8be5\u573a\u666f\u7684\u8bc6\u522b\u51c6\u786e\u7387\u3002 \u4ee5\u8bc6\u522b\u8bed\u53e5\u201c\u6253\u8f66\u5230_\u201d\u4e3a\u4f8b\uff0c\u5176\u4e2d _ \u8868\u793a\u69fd\u4f4d\u3002\u5982\u4e0b\u56fe\u662f\u5e26\u69fd\u4f4d <address_slot> \u7684G\uff1a \u4e0b\u56fe\u4e3a <address_slot> \u7684Slot WFST\uff0c\u53ef\u4ee5\u5b9a\u5236\u6dfb\u52a0\u9700\u8981\u8bc6\u522b\u7684\u5730\u70b9\uff1a \u4e0b\u56fe\u4e3aSlot WFST\u66ff\u6362\u5230G\u4e2d <address_slot> \u540e\u7684WFST\uff1a \u53ef\u4ee5\u4f7f\u7528OpenFST\u4e2d\u7684 fstreplace \u5b9e\u73b0\u8be5\u66ff\u6362\u64cd\u4f5c\u3002 WFST\u7b80\u4ecb - \u674e\u7406\u7684\u535a\u5ba2 \u98de\u6868AI Studio - \u4eba\u5de5\u667a\u80fd\u5b66\u4e60\u4e0e\u5b9e\u8bad\u793e\u533a","title":"\u52a0\u6743\u6709\u9650\u72b6\u6001\u673a"},{"location":"asr/%E5%8A%A0%E6%9D%83%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA/#_1","text":"","title":"\u52a0\u6743\u6709\u9650\u72b6\u6001\u673a"},{"location":"asr/%E5%8A%A0%E6%9D%83%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA/#_2","text":"\u57fa\u4e8e\u52a0\u6743\u6709\u9650\u72b6\u6001\u673a\uff08Weighted Finite-State Transducers\uff0cWFST\uff09\u751f\u6210\u7684\u89e3\u7801\u56fe\uff0c\u914d\u5408\u58f0\u5b66\u6a21\u578b\u8fdb\u884c\u7ef4\u7279\u6bd4\u89e3\u7801\u662f\u8bed\u97f3\u8bc6\u522b\u4e2d\u57fa\u7840\u7684\u89e3\u7801\u65b9\u6cd5\u3002 \u6709\u9650\u72b6\u6001\u673a\uff08Finite-State Transducers\uff0cFST\uff09\u548cWFST\u7684\u533a\u522b\u5728\u4e8e\u540e\u8005\u8f6c\u79fb\u8def\u5f84\u4e0a\u5e26\u6709\u6743\u91cd\uff0c\u52a0\u6743\u6709\u9650\u72b6\u6001\u63a5\u6536\u5668\uff08Weighted Finite-State Acceptor\uff0cWFSA\uff09\u548cWFST\u7684\u533a\u522b\u5728\u4e8e\u524d\u8005\u7684\u72b6\u6001\u8f6c\u79fb\u4e0a\u53ea\u6709\u4e00\u4e2a\u6807\u7b7e\uff0c\u53ef\u4ee5\u770b\u4f5c\u662fstring->double\u7684\u5b57\u5178\uff0c\u800c\u540e\u8005\u65e2\u6709\u8f93\u5165\u6807\u7b7e\u53c8\u6709\u8f93\u51fa\u6807\u7b7e\u3002 WFST\u5b58\u5728\u4e00\u4e2a\u6709\u9650\u7684\u72b6\u6001\u96c6\u5408\u4ee5\u53ca\u72b6\u6001\u95f4\u7684\u8df3\u8f6c\uff0c\u5982\u679c\u5b58\u5728\u4e00\u6761\u4ece\u521d\u59cb\u72b6\u6001\u5230\u7ec8\u6b62\u72b6\u6001\u7684\u8def\u5f84\uff0c\u4f7f\u5f97\u8def\u5f84\u4e0a\u7684\u6807\u7b7e\u5e8f\u5217\u6b63\u597d\u7b49\u4e8e\u8f93\u5165\u5e8f\u5217\uff0c\u5219\u8f93\u51fa\u4e00\u4e2a\u65b0\u7684\u5e8f\u5217\u548c\u5bf9\u5e94\u7684\u6743\u503c\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u8f93\u5165\u201cac\u201d\uff0c\u5339\u914d\u52300-1\uff0c1-2\u8fd9\u6761\u8def\u5f84\uff0c\u5219\u8f93\u51fa\u201cqs\u201d\uff0c\u5bf9\u5e94\u7684\u6743\u503c\u4e3a \\(1+0.63=1.63\\) \u3002 OpenFST \u662fWFST\u53ca\u5176\u76f8\u5173\u7b97\u6cd5\u7684\u5f00\u6e90\u5b9e\u73b0\u3002","title":"\u6982\u8ff0"},{"location":"asr/%E5%8A%A0%E6%9D%83%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA/#composition","text":"\u590d\u5408\u64cd\u4f5c\u7528\u6765\u628a\u4e24\u4e2a\u4e0d\u540c\u5c42\u7ea7\u7684WFST\u201c\u590d\u5408\u201d\u6210\u4e00\u4e2aWFST\u3002\u6bd4\u5982\u53d1\u97f3\u8bcd\u5178\u4f1a\u544a\u8bc9\u4e00\u4e2a\u5355\u8bcd\u5bf9\u5e94\u7684\u56e0\u5b50\uff08\u6bd4\u5982\u97f3\u7d20\u7b49\uff09\uff0c\u56e0\u6b64\u53ef\u4ee5\u6784\u9020\u4e00\u4e2aWFST L \u6765\u628a\u56e0\u5b50\u7684\u5e8f\u5217\u8f6c\u6362\u6210\u5355\u8bcd\u7684\u5e8f\u5217\u4ee5\u53ca\u5bf9\u5e94\u7684\u6982\u7387\uff0c\u5982\u4e0a\u56feb\u3002\u6b64\u5916\u6709\u4e00\u4e2a\u6587\u6cd5\uff08\u6216\u8005\u7edf\u8ba1\u8bed\u8a00\u6a21\u578b\uff09\u544a\u8bc9\u5355\u8bcd\u5e8f\u5217\u6982\u7387\uff0c\u56e0\u6b64\u4e5f\u53ef\u4ee5\u6784\u9020\u4e00\u4e2aWFST G \u6765\u8868\u793a\u8be5\u6587\u6cd5\u6216\u8005\u7edf\u8ba1\u8bed\u8a00\u6a21\u578b\uff0c\u5982\u4e0a\u56fea\uff0c\u4e0d\u8fc7WFST G \u7684\u7279\u70b9\u662f\uff1a\u8f93\u5165\u548c\u8f93\u51fa\u662f\u4e00\u6837\u7684\uff0c\u56e0\u6b64\u5b9e\u9645\u53ea\u9700\u8981\u5176\u6743\u503c\u3002\u8fd9\u6837\u901a\u8fc7\u590d\u5408\u64cd\u4f5c \\(L\\circ G\\) \u6765\u5f97\u5230\u4e00\u4e2a\u65b0\u7684WFST\uff0c\u8be5WFST\u7684\u8f93\u5165\u662f\u4e00\u4e2a\u56e0\u5b50\u7684\u5e8f\u5217\uff0c\u8f93\u51fa\u662f\u5355\u8bcd\u5e8f\u5217\u53ca\u5176\u5bf9\u5e94\u6982\u7387\u3002 \u5982\u4e0a\u56fe\u6240\u793a\uff0cWFST C \u7531WFST A \u548cWFST B \u590d\u5408\u800c\u6765\uff0cC\u53ef\u4ee5\u770b\u4f5c\u662fA\u3001B\u7684\u7ea7\u8054\u3002","title":"\u590d\u5408\uff08Composition\uff09\u64cd\u4f5c"},{"location":"asr/%E5%8A%A0%E6%9D%83%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA/#determinization","text":"\u5982\u679cWFST\u6709\u7a7a\u8f6c\u79fb\u7684\u8fb9\uff0c\u6216\u8005\u4ece\u4e00\u4e2a\u72b6\u6001\u9047\u5230\u4e00\u4e2a\u5b57\u6bcd\u4f1a\u6709\u4e24\u6761\u53ca\u5176\u4ee5\u4e0a\u7684\u8fb9\uff0c\u90a3\u4e48\u5b83\u5c31\u662f\u975e\u786e\u5b9a\u7684\u3002\u975e\u786e\u5b9a\u7684WFST/WFSA/FSA\u76f8\u6bd4\u4e8e\u786e\u5b9a\u7684WFST/WFSA/FSA\u4f1a\u66f4\u52a0\u96be\u4e8e\u5224\u5b9a\u67d0\u4e2a\u5b57\u7b26\u4e32\u662f\u5426\u53ef\u4ee5\u63a5\u53d7\u3002\u786e\u5b9a\u5316\u7b97\u6cd5\u5c31\u662f\u628a\u4e00\u4e2a\u975e\u786e\u5b9a\u7684WFST\u8f6c\u6362\u6210\u7b49\u4ef7\u4e14\u786e\u5b9a\u7684WFST\u7684\u7b97\u6cd5\u3002\u4e24\u4e2aWFST\u7b49\u4ef7\u7684\u5b9a\u4e49\u662f\uff1a\u5982\u679c\u7b2c\u4e00\u4e2aWFST\u63a5\u53d7\u8f93\u5165x\u5e76\u4e14\u53ef\u4ee5\u628a\u5b83\u6620\u5c04\u6210y\u4e14\u6743\u91cd\u662fw\uff0c\u90a3\u4e48\u7b2c\u4e8c\u4e2aWFST\u4e5f\u4e00\u5b9a\u63a5\u53d7\u8f93\u5165x\u5e76\u4e14\u80fd\u628a\u5b83\u6620\u5c04\u6210y\uff0c\u6743\u91cd\u4e5f\u662fw\uff1b\u53cd\u4e4b\u4ea6\u7136\u3002 \u5982\u4e0a\u56fe\u6240\u793a\uff0c\u56fea\u662f\u975e\u786e\u5b9a\u7684WFSA\uff0c\u56feb\u662f\u4e0e\u4e4b\u7b49\u4ef7\u4e14\u786e\u5b9a\u7684WFSA\u3002","title":"\u786e\u5b9a\u5316\uff08Determinization\uff09\u64cd\u4f5c"},{"location":"asr/%E5%8A%A0%E6%9D%83%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA/#minimization","text":"WFST\u53ef\u4ee5\u901a\u8fc7\u6700\u5c0f\u5316\u64cd\u4f5c\u6765\u8fdb\u4e00\u6b65\u538b\u7f29\u7a7a\u95f4\u548c\u63d0\u9ad8\u8bc6\u522b\u901f\u5ea6\u3002 \u5982\u4e0a\u56fe\u6240\u793a\uff0c\u56fec\u4e3a\u56fea\u7ecf\u8fc7\u6700\u5c0f\u5316\u4e4b\u540e\u7684WFSA\u3002","title":"\u6700\u5c0f\u5316\uff08Minimization\uff09\u64cd\u4f5c"},{"location":"asr/%E5%8A%A0%E6%9D%83%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA/#tlg","text":"\u8fd1\u5e74\u6765\uff0c\u7aef\u5230\u7aef\u58f0\u5b66\u6a21\u578b\u5e38\u5e38\u4e0eTLG\u89e3\u7801\u56fe\u642d\u914d\u4f7f\u7528\uff0c\u800cKaldi\u4e2d\u7684\u89e3\u7801\u56fe\u7531HCLG\u6784\u6210\u3002 \u8f93\u5165 \u8f93\u51fa T(token) \u5e27\u7ea7\u522b\u7684CTC\u6807\u7b7e\u5e8f\u5217\uff08\u58f0\u5b66\u5efa\u6a21\u5355\u5143\uff09 lexicon\u5efa\u6a21\u5355\u5143 L(lexicon) lexicon\u5efa\u6a21\u5355\u5143\uff08\u6587\u672c\u5efa\u6a21\u5355\u5143\uff09 \u8bcd G(grammer) \u8bcd \u8bcd","title":"TLG\u89e3\u7801\u56fe"},{"location":"asr/%E5%8A%A0%E6%9D%83%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA/#t","text":"\u4ee5\u201cis\u201d\u4e2d/i/\u7684\u53d1\u97f3\u4e3a\u4f8b\uff1a","title":"T\u7684\u6784\u56fe"},{"location":"asr/%E5%8A%A0%E6%9D%83%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA/#l","text":"\u4ee5\u201cis\u201d\u7684\u53d1\u97f3/iz/\u4e3a\u4f8b\uff1a","title":"L\u7684\u6784\u56fe"},{"location":"asr/%E5%8A%A0%E6%9D%83%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA/#g","text":"\u7b80\u5355\u7684\u8bed\u8a00\u6a21\u578b\u6784\u56fe\u5982\u4e0b\uff0c\u4ee5\u201chow are you\u201d/\u201chow is it\u201d\u4e3a\u4f8b\uff1a \u901a\u8fc7TLG\u7684\u590d\u5408\u64cd\u4f5c\uff0c\u5c06\u58f0\u5b66\u5efa\u6a21\u5355\u5143\u3001\u8bcd\u5178\u548c\u8bed\u8a00\u6a21\u578b\u878d\u5408\u5728\u4e00\u8d77\uff0c\u4ea7\u751f\u9759\u6001\u7684\u89e3\u7801\u7f51\u7edc\u3002\u5728\u7ed3\u679c\u8fc7\u7a0b\u4e2d\u91c7\u7528\u641c\u7d22\u7b56\u7565\uff0c\u5f97\u5230\u8f93\u5165\u8bed\u97f3\u7684\u6700\u4f18\u89e3\u7801\u7ed3\u679c\u3002","title":"G\u7684\u6784\u56fe"},{"location":"asr/%E5%8A%A0%E6%9D%83%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA/#replace","text":"\u672c\u8d28\u662f\u589e\u5f3a\u56fa\u5b9a\u53e5\u5f0f\u7684\u8bed\u97f3\u8bc6\u522b\u6548\u679c\u3002\u6bd4\u5982\u53e5\u5b50\u542b\u6709\u69fd\u4f4d\uff08slot\uff09\uff0c\u69fd\u4f4d\u6709\u82e5\u5e72\u53ef\u80fd\uff0c\u53ef\u4ee5\u5229\u7528WFST\u66ff\u6362\u64cd\u4f5c\u589e\u5f3a\u8be5\u573a\u666f\u7684\u8bc6\u522b\u51c6\u786e\u7387\u3002 \u4ee5\u8bc6\u522b\u8bed\u53e5\u201c\u6253\u8f66\u5230_\u201d\u4e3a\u4f8b\uff0c\u5176\u4e2d _ \u8868\u793a\u69fd\u4f4d\u3002\u5982\u4e0b\u56fe\u662f\u5e26\u69fd\u4f4d <address_slot> \u7684G\uff1a \u4e0b\u56fe\u4e3a <address_slot> \u7684Slot WFST\uff0c\u53ef\u4ee5\u5b9a\u5236\u6dfb\u52a0\u9700\u8981\u8bc6\u522b\u7684\u5730\u70b9\uff1a \u4e0b\u56fe\u4e3aSlot WFST\u66ff\u6362\u5230G\u4e2d <address_slot> \u540e\u7684WFST\uff1a \u53ef\u4ee5\u4f7f\u7528OpenFST\u4e2d\u7684 fstreplace \u5b9e\u73b0\u8be5\u66ff\u6362\u64cd\u4f5c\u3002 WFST\u7b80\u4ecb - \u674e\u7406\u7684\u535a\u5ba2 \u98de\u6868AI Studio - \u4eba\u5de5\u667a\u80fd\u5b66\u4e60\u4e0e\u5b9e\u8bad\u793e\u533a","title":"\u66ff\u6362\uff08Replace\uff09\u64cd\u4f5c"},{"location":"develop/cpp/cpp%E4%B8%AD%E7%9A%84int_t/","text":"cpp\u4e2d\u7684int_t int_t int_t\u662f\u4e00\u7c7b\u57fa\u672c\u6570\u636e\u7c7b\u578b\u7684\u7f29\u5199\uff0c\u5e76\u975e\u65b0\u7684\u6570\u636e\u7c7b\u578b\u3002\u7531\u4e8e\u8de8\u5e73\u53f0\uff0c\u4e0d\u540c\u7684\u5e73\u53f0\u4f1a\u6709\u4e0d\u540c\u7684\u5b57\u957f\uff0c\u6240\u4ee5\u5229\u7528\u9884\u7f16\u8bd1\u548c typedef \u53ef\u4ee5\u6700\u6709\u6548\u5730\u7ef4\u62a4\u4ee3\u7801\u3002 1 2 3 4 5 6 7 8 9 10 11 // stdint.h /* 7.18.1.1 Exact-width integer types */ typedef signed char int8_t ; typedef unsigned char uint8_t ; typedef short int16_t ; typedef unsigned short uint16_t ; typedef int int32_t ; typedef unsigned uint32_t ; __MINGW_EXTENSION typedef long long int64_t ; __MINGW_EXTENSION typedef unsigned long long uint64_t ; ... C\u4e2dint8_t\u3001int16_t\u3001int32_t\u3001int64_t\u3001uint8_t\u3001size_t\u3001ssize_t\u533a\u522b_yz930618\u7684\u535a\u5ba2-CSDN\u535a\u5ba2_int8_t","title":"cpp\u4e2d\u7684int_t"},{"location":"develop/cpp/cpp%E4%B8%AD%E7%9A%84int_t/#cppint_t","text":"","title":"cpp\u4e2d\u7684int_t"},{"location":"develop/cpp/cpp%E4%B8%AD%E7%9A%84int_t/#int_t","text":"int_t\u662f\u4e00\u7c7b\u57fa\u672c\u6570\u636e\u7c7b\u578b\u7684\u7f29\u5199\uff0c\u5e76\u975e\u65b0\u7684\u6570\u636e\u7c7b\u578b\u3002\u7531\u4e8e\u8de8\u5e73\u53f0\uff0c\u4e0d\u540c\u7684\u5e73\u53f0\u4f1a\u6709\u4e0d\u540c\u7684\u5b57\u957f\uff0c\u6240\u4ee5\u5229\u7528\u9884\u7f16\u8bd1\u548c typedef \u53ef\u4ee5\u6700\u6709\u6548\u5730\u7ef4\u62a4\u4ee3\u7801\u3002 1 2 3 4 5 6 7 8 9 10 11 // stdint.h /* 7.18.1.1 Exact-width integer types */ typedef signed char int8_t ; typedef unsigned char uint8_t ; typedef short int16_t ; typedef unsigned short uint16_t ; typedef int int32_t ; typedef unsigned uint32_t ; __MINGW_EXTENSION typedef long long int64_t ; __MINGW_EXTENSION typedef unsigned long long uint64_t ; ... C\u4e2dint8_t\u3001int16_t\u3001int32_t\u3001int64_t\u3001uint8_t\u3001size_t\u3001ssize_t\u533a\u522b_yz930618\u7684\u535a\u5ba2-CSDN\u535a\u5ba2_int8_t","title":"int_t"},{"location":"develop/cpp/cpp%E5%85%B3%E9%94%AE%E5%AD%97const%E4%BF%AE%E9%A5%B0%E5%87%BD%E6%95%B0/","text":"cpp\u5173\u952e\u5b57const\u4fee\u9970\u51fd\u6570 \u6982\u5ff5 \u5f53const\u5728\u51fd\u6570\u540d\u524d\u9762\u7684\u65f6\u5019\uff0c\u4fee\u9970\u7684\u662f\u51fd\u6570\u8fd4\u56de\u503c\u3002 \u5f53const\u5728\u51fd\u6570\u540d\u540e\u9762\u8868\u793a\u662f\u5e38\u6210\u5458\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u4e0d\u80fd\u4fee\u6539\u5bf9\u8c61\u5185\u7684\u4efb\u4f55\u6210\u5458\uff0c\u53ea\u80fd\u6267\u884c\u8bfb\u64cd\u4f5c\uff0c\u4e0d\u80fd\u6267\u884c\u5199\u64cd\u4f5c\u3002 C++\u51fd\u6570\u524d\u548c\u51fd\u6570\u540e\u52a0const\u4fee\u9970\u7b26\u533a\u522b - MATU - \u535a\u5ba2\u56ed \u68b3\u7406c++ const \u4fee\u9970\u51fd\u6570 - \u77e5\u4e4e","title":"cpp\u5173\u952e\u5b57const\u4fee\u9970\u51fd\u6570"},{"location":"develop/cpp/cpp%E5%85%B3%E9%94%AE%E5%AD%97const%E4%BF%AE%E9%A5%B0%E5%87%BD%E6%95%B0/#cppconst","text":"","title":"cpp\u5173\u952e\u5b57const\u4fee\u9970\u51fd\u6570"},{"location":"develop/cpp/cpp%E5%85%B3%E9%94%AE%E5%AD%97const%E4%BF%AE%E9%A5%B0%E5%87%BD%E6%95%B0/#_1","text":"\u5f53const\u5728\u51fd\u6570\u540d\u524d\u9762\u7684\u65f6\u5019\uff0c\u4fee\u9970\u7684\u662f\u51fd\u6570\u8fd4\u56de\u503c\u3002 \u5f53const\u5728\u51fd\u6570\u540d\u540e\u9762\u8868\u793a\u662f\u5e38\u6210\u5458\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u4e0d\u80fd\u4fee\u6539\u5bf9\u8c61\u5185\u7684\u4efb\u4f55\u6210\u5458\uff0c\u53ea\u80fd\u6267\u884c\u8bfb\u64cd\u4f5c\uff0c\u4e0d\u80fd\u6267\u884c\u5199\u64cd\u4f5c\u3002 C++\u51fd\u6570\u524d\u548c\u51fd\u6570\u540e\u52a0const\u4fee\u9970\u7b26\u533a\u522b - MATU - \u535a\u5ba2\u56ed \u68b3\u7406c++ const \u4fee\u9970\u51fd\u6570 - \u77e5\u4e4e","title":"\u6982\u5ff5"},{"location":"develop/cpp/cpp%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8/","text":"cpp\u53f3\u503c\u5f15\u7528\u548cstd::move \u5de6\u503c\u548c\u53f3\u503c\u7684\u533a\u522b \u5de6\u503c\u53ef\u4ee5\u53d6\u5730\u5740\uff0c\u4f4d\u4e8e\u7b49\u53f7\u5de6\u8fb9\u3002\u6bd4\u5982\u53d8\u91cf\u3002 \u53f3\u503c\u65e0\u6cd5\u53d6\u5730\u5740\uff0c\u4f4d\u4e8e\u7b49\u53f7\u53f3\u8fb9\u3002\u6bd4\u5982\u5b57\u9762\u503c\u3001\u4e34\u65f6\u503c\u3002 1 2 int a = 5 ; // \u53d8\u91cfa\u662f\u5de6\u503c\uff0c\u53ef\u4ee5\u901a\u8fc7&\u53d6\u5730\u5740\uff0c\u4f4d\u4e8e\u7b49\u53f7\u5de6\u8fb9\uff1b5\u662f\u53f3\u503c\uff0c\u65e0\u6cd5\u53d6\u5730\u5740\uff0c\u4f4d\u4e8e\u7b49\u53f7\u53f3\u8fb9 A a = A (); // A\u662f\u7ed3\u6784\u4f53\u540d\u3002\u5bf9\u8c61a\u662f\u5de6\u503c\uff1bA()\u662f\u4e34\u65f6\u503c\uff0c\u662f\u53f3\u503c\u3002 \u5de6\u503c\u5f15\u7528\u548c\u53f3\u503c\u5f15\u7528 \u5f15\u7528\u672c\u8d28\u662f\u522b\u540d\uff0c\u4f7f\u7528\u5f15\u7528\u4f20\u53c2\u65f6\u53ef\u907f\u514d\u62f7\u8d1d\uff0c\u4ece\u800c\u63d0\u9ad8\u6027\u80fd\u3002 \u5de6\u503c\u5f15\u7528 & \u80fd\u6307\u5411\u5de6\u503c\uff0c\u4e0d\u80fd\u6307\u5411\u53f3\u503c\u3002 1 2 3 int a = 5 ; int & ref_a = a ; // \u7f16\u8bd1\u901a\u8fc7\uff0c\u5de6\u503c\u5f15\u7528 int & ref_a = 5 ; // \u7f16\u8bd1\u5931\u8d25\uff0c\u5de6\u503c\u5f15\u7528\u65e0\u6cd5\u6307\u5411\u53f3\u503c \u53f3\u503c\u5f15\u7528 && \u53ef\u4ee5\u6307\u5411\u53f3\u503c\uff0c\u4e0d\u80fd\u6307\u5411\u5de6\u503c\u3002 1 2 3 4 int && ref_a_right = 5 ; // \u7f16\u8bd1\u901a\u8fc7\uff0c\u53f3\u503c\u5f15\u7528 int a = 5 ; int && ref_a_right = a ; // \u7f16\u8bd1\u5931\u8d25\uff0c\u53f3\u503c\u5f15\u7528\u65e0\u6cd5\u6307\u5411\u5de6\u503c std::move std::move \u5c06\u5de6\u503c\u5f3a\u5236\u8f6c\u6362\u4e3a\u53f3\u503c\uff0c\u8ba9\u53f3\u503c\u5f15\u7528\u53ef\u4ee5\u6307\u5411\u5de6\u503c\uff0c\u7b49\u540c\u4e8e\u7c7b\u578b\u8f6c\u6362\uff1a 1 2 // std::move\u7b49\u540c\u4e8e\uff1a\u5c06\u5de6\u503c\u5f3a\u8f6c\u5230\u53f3\u503c\u7684\u7c7b\u578b\u8f6c\u6362 std :: move == static_cast < T &&> ( lvalue ); \u53ef\u79fb\u52a8\u5bf9\u8c61\u5728\u201c\u9700\u8981\u62f7\u8d1d\u4e14 \u88ab\u62f7\u8d1d\u8005\u4e0d\u518d\u9700\u8981 \u201d\u7684\u573a\u666f\u4e0b\uff0c\u53ef\u4ee5\u4f7f\u7528 std::move \u89e6\u53d1\u79fb\u52a8\u8bed\u4e49\uff0c\u63d0\u5347\u6027\u80fd\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 class Array { public : ...... // \u53f3\u503c\u5f15\u7528\u4e3a\u53c2\u6570\u7684`\u79fb\u52a8\u6784\u9020\u51fd\u6570` Array ( Array && temp_array ) { data_ = temp_array . data_ ; size_ = temp_array . size_ ; // \u4e3a\u9632\u6b62temp_array\u6790\u6784\u65f6delete data\uff0c\u63d0\u524d\u7f6e\u7a7a\u5176data_ temp_array . data_ = nullptr ; } public : int * data_ ; int size_ ; }; // \u4f7f\u7528 int main (){ Array a ; // \u5bf9\u8c61a\u662f\u5de6\u503c\uff0c\u672c\u8eab\u53f3\u503c\u5f15\u7528\u65e0\u6cd5\u6307\u5411\u5bf9\u8c61a // \u505a\u4e00\u4e9b\u64cd\u4f5c ..... // \u5de6\u503ca\uff0c\u7528std::move\u8f6c\u5316\u4e3a\u53f3\u503c Array b ( std :: move ( a )); } \u53ef\u4ee5\u770b\u5230\uff0c std::move \u672c\u8eab\u53ea\u505a\u7c7b\u578b\u8f6c\u6362\uff0c\u5bf9\u6027\u80fd\u65e0\u5f71\u54cd\u3002 \u4f46\u662f\u53ef\u4ee5\u5728\u7c7b\u4e2d\u5b9e\u73b0 \u79fb\u52a8 \u8bed\u4e49\uff0c\u53ea\u8f6c\u79fb\u5185\u90e8\u5bf9\u8c61\u6240\u6709\u6743\uff08\u6d45\u62f7\u8d1d\uff09\uff0c\u907f\u514d\u6df1\u62f7\u8d1d\uff0c\u4ece\u800c\u63d0\u9ad8\u6027\u80fd\u3002 STL\u7684\u5f88\u591a\u5bb9\u5668\u4e2d\uff0c\u90fd\u5b9e\u73b0\u4e86\u4ee5\u53f3\u503c\u5f15\u7528\u4e3a\u53c2\u6570\u7684 \u79fb\u52a8\u6784\u9020\u51fd\u6570 \u548c \u79fb\u52a8\u8d4b\u503c\u91cd\u8f7d\u51fd\u6570 \uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 // std::vector\u65b9\u6cd5\u5b9a\u4e49 void push_back ( const value_type & val ); void push_back ( value_type && val ); void emplace_back ( Args && ... args ); // \u4f7f\u7528 std :: string str1 = \"aacasxs\" ; std :: vector < std :: string > vec ; vec . push_back ( str1 ); // \u4f20\u7edf\u65b9\u6cd5\uff0ccopy vec . push_back ( std :: move ( str1 )); // \u8c03\u7528\u79fb\u52a8\u8bed\u4e49\u7684push_back\u65b9\u6cd5\uff0c\u907f\u514d\u62f7\u8d1d\uff0cstr1\u4f1a\u5931\u53bb\u539f\u6709\u503c\uff0c\u53d8\u6210\u7a7a\u5b57\u7b26\u4e32 vec . emplace_back ( std :: move ( str1 )); // emplace_back\u6548\u679c\u76f8\u540c\uff0cstr1\u4f1a\u5931\u53bb\u539f\u6709\u503c vec . emplace_back ( \"axcsddcas\" ); // \u5f53\u7136\u53ef\u4ee5\u76f4\u63a5\u63a5\u53f3\u503c \u4e00\u6587\u8bfb\u61c2C++\u53f3\u503c\u5f15\u7528\u548cstd::move","title":"cpp\u53f3\u503c\u5f15\u7528\u548cstd::move"},{"location":"develop/cpp/cpp%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8/#cppstdmove","text":"","title":"cpp\u53f3\u503c\u5f15\u7528\u548cstd::move"},{"location":"develop/cpp/cpp%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8/#_1","text":"\u5de6\u503c\u53ef\u4ee5\u53d6\u5730\u5740\uff0c\u4f4d\u4e8e\u7b49\u53f7\u5de6\u8fb9\u3002\u6bd4\u5982\u53d8\u91cf\u3002 \u53f3\u503c\u65e0\u6cd5\u53d6\u5730\u5740\uff0c\u4f4d\u4e8e\u7b49\u53f7\u53f3\u8fb9\u3002\u6bd4\u5982\u5b57\u9762\u503c\u3001\u4e34\u65f6\u503c\u3002 1 2 int a = 5 ; // \u53d8\u91cfa\u662f\u5de6\u503c\uff0c\u53ef\u4ee5\u901a\u8fc7&\u53d6\u5730\u5740\uff0c\u4f4d\u4e8e\u7b49\u53f7\u5de6\u8fb9\uff1b5\u662f\u53f3\u503c\uff0c\u65e0\u6cd5\u53d6\u5730\u5740\uff0c\u4f4d\u4e8e\u7b49\u53f7\u53f3\u8fb9 A a = A (); // A\u662f\u7ed3\u6784\u4f53\u540d\u3002\u5bf9\u8c61a\u662f\u5de6\u503c\uff1bA()\u662f\u4e34\u65f6\u503c\uff0c\u662f\u53f3\u503c\u3002","title":"\u5de6\u503c\u548c\u53f3\u503c\u7684\u533a\u522b"},{"location":"develop/cpp/cpp%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8/#_2","text":"\u5f15\u7528\u672c\u8d28\u662f\u522b\u540d\uff0c\u4f7f\u7528\u5f15\u7528\u4f20\u53c2\u65f6\u53ef\u907f\u514d\u62f7\u8d1d\uff0c\u4ece\u800c\u63d0\u9ad8\u6027\u80fd\u3002 \u5de6\u503c\u5f15\u7528 & \u80fd\u6307\u5411\u5de6\u503c\uff0c\u4e0d\u80fd\u6307\u5411\u53f3\u503c\u3002 1 2 3 int a = 5 ; int & ref_a = a ; // \u7f16\u8bd1\u901a\u8fc7\uff0c\u5de6\u503c\u5f15\u7528 int & ref_a = 5 ; // \u7f16\u8bd1\u5931\u8d25\uff0c\u5de6\u503c\u5f15\u7528\u65e0\u6cd5\u6307\u5411\u53f3\u503c \u53f3\u503c\u5f15\u7528 && \u53ef\u4ee5\u6307\u5411\u53f3\u503c\uff0c\u4e0d\u80fd\u6307\u5411\u5de6\u503c\u3002 1 2 3 4 int && ref_a_right = 5 ; // \u7f16\u8bd1\u901a\u8fc7\uff0c\u53f3\u503c\u5f15\u7528 int a = 5 ; int && ref_a_right = a ; // \u7f16\u8bd1\u5931\u8d25\uff0c\u53f3\u503c\u5f15\u7528\u65e0\u6cd5\u6307\u5411\u5de6\u503c","title":"\u5de6\u503c\u5f15\u7528\u548c\u53f3\u503c\u5f15\u7528"},{"location":"develop/cpp/cpp%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8/#stdmove","text":"std::move \u5c06\u5de6\u503c\u5f3a\u5236\u8f6c\u6362\u4e3a\u53f3\u503c\uff0c\u8ba9\u53f3\u503c\u5f15\u7528\u53ef\u4ee5\u6307\u5411\u5de6\u503c\uff0c\u7b49\u540c\u4e8e\u7c7b\u578b\u8f6c\u6362\uff1a 1 2 // std::move\u7b49\u540c\u4e8e\uff1a\u5c06\u5de6\u503c\u5f3a\u8f6c\u5230\u53f3\u503c\u7684\u7c7b\u578b\u8f6c\u6362 std :: move == static_cast < T &&> ( lvalue ); \u53ef\u79fb\u52a8\u5bf9\u8c61\u5728\u201c\u9700\u8981\u62f7\u8d1d\u4e14 \u88ab\u62f7\u8d1d\u8005\u4e0d\u518d\u9700\u8981 \u201d\u7684\u573a\u666f\u4e0b\uff0c\u53ef\u4ee5\u4f7f\u7528 std::move \u89e6\u53d1\u79fb\u52a8\u8bed\u4e49\uff0c\u63d0\u5347\u6027\u80fd\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 class Array { public : ...... // \u53f3\u503c\u5f15\u7528\u4e3a\u53c2\u6570\u7684`\u79fb\u52a8\u6784\u9020\u51fd\u6570` Array ( Array && temp_array ) { data_ = temp_array . data_ ; size_ = temp_array . size_ ; // \u4e3a\u9632\u6b62temp_array\u6790\u6784\u65f6delete data\uff0c\u63d0\u524d\u7f6e\u7a7a\u5176data_ temp_array . data_ = nullptr ; } public : int * data_ ; int size_ ; }; // \u4f7f\u7528 int main (){ Array a ; // \u5bf9\u8c61a\u662f\u5de6\u503c\uff0c\u672c\u8eab\u53f3\u503c\u5f15\u7528\u65e0\u6cd5\u6307\u5411\u5bf9\u8c61a // \u505a\u4e00\u4e9b\u64cd\u4f5c ..... // \u5de6\u503ca\uff0c\u7528std::move\u8f6c\u5316\u4e3a\u53f3\u503c Array b ( std :: move ( a )); } \u53ef\u4ee5\u770b\u5230\uff0c std::move \u672c\u8eab\u53ea\u505a\u7c7b\u578b\u8f6c\u6362\uff0c\u5bf9\u6027\u80fd\u65e0\u5f71\u54cd\u3002 \u4f46\u662f\u53ef\u4ee5\u5728\u7c7b\u4e2d\u5b9e\u73b0 \u79fb\u52a8 \u8bed\u4e49\uff0c\u53ea\u8f6c\u79fb\u5185\u90e8\u5bf9\u8c61\u6240\u6709\u6743\uff08\u6d45\u62f7\u8d1d\uff09\uff0c\u907f\u514d\u6df1\u62f7\u8d1d\uff0c\u4ece\u800c\u63d0\u9ad8\u6027\u80fd\u3002 STL\u7684\u5f88\u591a\u5bb9\u5668\u4e2d\uff0c\u90fd\u5b9e\u73b0\u4e86\u4ee5\u53f3\u503c\u5f15\u7528\u4e3a\u53c2\u6570\u7684 \u79fb\u52a8\u6784\u9020\u51fd\u6570 \u548c \u79fb\u52a8\u8d4b\u503c\u91cd\u8f7d\u51fd\u6570 \uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 // std::vector\u65b9\u6cd5\u5b9a\u4e49 void push_back ( const value_type & val ); void push_back ( value_type && val ); void emplace_back ( Args && ... args ); // \u4f7f\u7528 std :: string str1 = \"aacasxs\" ; std :: vector < std :: string > vec ; vec . push_back ( str1 ); // \u4f20\u7edf\u65b9\u6cd5\uff0ccopy vec . push_back ( std :: move ( str1 )); // \u8c03\u7528\u79fb\u52a8\u8bed\u4e49\u7684push_back\u65b9\u6cd5\uff0c\u907f\u514d\u62f7\u8d1d\uff0cstr1\u4f1a\u5931\u53bb\u539f\u6709\u503c\uff0c\u53d8\u6210\u7a7a\u5b57\u7b26\u4e32 vec . emplace_back ( std :: move ( str1 )); // emplace_back\u6548\u679c\u76f8\u540c\uff0cstr1\u4f1a\u5931\u53bb\u539f\u6709\u503c vec . emplace_back ( \"axcsddcas\" ); // \u5f53\u7136\u53ef\u4ee5\u76f4\u63a5\u63a5\u53f3\u503c \u4e00\u6587\u8bfb\u61c2C++\u53f3\u503c\u5f15\u7528\u548cstd::move","title":"std::move"},{"location":"develop/cpp/cpp%E5%AE%BD%E5%AD%97%E7%AC%A6wchar/","text":"cpp\u5bbd\u5b57\u7b26wchar std::string \u57fa\u4e8echar\uff0c8bit\u3002 std::wstring \u57fa\u4e8e wchar_t \uff0cLinux\u4e0a4\u5b57\u8282\uff0cWindows\u4e0a2\u5b57\u8282\u3002\u5728Windows\u4e0a\u4e00\u822c\u8981\u7528 std::wstring \u800c\u975e std::string \u3002 1 2 3 4 5 6 7 8 9 10 11 12 // wenet/runtime/core/utils/string.cc #ifdef _MSC_VER std :: wstring ToWString ( const std :: string & str ) { unsigned len = str . size () * 2 ; setlocale ( LC_CTYPE , \"\" ); wchar_t * p = new wchar_t [ len ]; mbstowcs ( p , str . c_str (), len ); std :: wstring wstr ( p ); delete [] p ; return wstr ; } #endif c++ - std::wstring VS std::string - Stack Overflow","title":"cpp\u5bbd\u5b57\u7b26wchar"},{"location":"develop/cpp/cpp%E5%AE%BD%E5%AD%97%E7%AC%A6wchar/#cppwchar","text":"std::string \u57fa\u4e8echar\uff0c8bit\u3002 std::wstring \u57fa\u4e8e wchar_t \uff0cLinux\u4e0a4\u5b57\u8282\uff0cWindows\u4e0a2\u5b57\u8282\u3002\u5728Windows\u4e0a\u4e00\u822c\u8981\u7528 std::wstring \u800c\u975e std::string \u3002 1 2 3 4 5 6 7 8 9 10 11 12 // wenet/runtime/core/utils/string.cc #ifdef _MSC_VER std :: wstring ToWString ( const std :: string & str ) { unsigned len = str . size () * 2 ; setlocale ( LC_CTYPE , \"\" ); wchar_t * p = new wchar_t [ len ]; mbstowcs ( p , str . c_str (), len ); std :: wstring wstr ( p ); delete [] p ; return wstr ; } #endif c++ - std::wstring VS std::string - Stack Overflow","title":"cpp\u5bbd\u5b57\u7b26wchar"},{"location":"develop/cpp/cpp%E5%B8%B8%E7%94%A8%E5%BA%93gflags_glog_gtest/","text":"cpp\u5e38\u7528\u5e93gflags/glog/gtest gflags\u5904\u7406\u547d\u4ee4\u884c\u53c2\u6570 \u7b80\u4ecb \u5982\u679c\u9879\u76ee\u901a\u8fc7CMake\u6784\u5efa\uff0c\u53ea\u9700\u8981\u5728CMakeLists.txt\u4e2d\u52a0\u5165\u7c7b\u4f3c\u4ee5\u4e0b\u914d\u7f6e\u5373\u53ef\uff1a 1 2 3 4 5 find_package (gflags REQUIRED) include_directories (${gflags_INCLUDE_DIR}) add_executable (main main.cpp) target_link_libraries (main gflags) \u7b80\u8981\u7528\u6cd5 gflags \u5934\u6587\u4ef6 1 #include <gflags/gflags.h> \u5b9a\u4e49\u547d\u4ee4\u884c\u53c2\u6570 1 DEFINE_string ( < \u53d8\u91cf\u540d > , < \u9ed8\u8ba4\u503c > , < \u63cf\u8ff0 > ); \u6bd4\u5982\uff1a 1 DEFINE_string ( mystr , \"hello\" , \"help for demo\" ); \u5176\u4e2d\uff0c DEFINE_string \u53ea\u662f\u5176\u4e2d\u4e00\u79cd\u6570\u636e\u7c7b\u578b\uff0c\u652f\u6301\u7684\u5168\u90e8\u6570\u636e\u7c7b\u578b\u6709\uff1a gflags\u5b9a\u4e49\u7c7b\u578b \u63cf\u8ff0 DEFINE_bool \u5e03\u5c14\u7c7b\u578b DEFINE_int32 32\u4f4d\u6574\u578b DEFINE_int64 64\u4f4d\u6574\u578b DEFINE_uint64 \u65e0\u7b26\u53f764\u4f4d\u6574\u578b DEFINE_double \u6d6e\u70b9\u7c7b\u578b DEFINE_string C++ string\u7c7b\u578b \u5728 main() \u51fd\u6570\u52a0\u5165\u5982\u4e0b\u4ee3\u7801\uff0c\u89e3\u6790\u547d\u4ee4\u884c\u53c2\u6570\uff1a 1 gflags :: ParseCommandLineFlags ( & argc , & argv , true ); \u4e00\u822c\u90fd\u5c06\u4e0a\u8ff0\u4ee3\u7801\u653e\u5230 main() \u51fd\u6570\u7684\u5f00\u59cb\u4f4d\u7f6e\u3002 \u4ee3\u7801\u5185\u8bbf\u95ee\u4f20\u5165\u7684\u53c2\u6570 \u4f7f\u7528 FLAGS_<\u53d8\u91cf\u540d> \u5c31\u53ef\u4ee5\u5728\u4ee3\u7801\u4e2d\u8bbf\u95ee\u89e3\u6790\u5f97\u5230\u7684\u53c2\u6570\u503c\u3002\u4f8b\u5982\uff1a 1 std :: cout << \"My str is: \" << FLAGS_mystr << std :: endl ; \u4f7f\u7528 1 2 3 >>> g++ <gflags_demo.cpp> -o gflags_demo -lgflags -lpthread # -l \u94fe\u63a5\u5e93\u8fdb\u884c\u7f16\u8bd1 >>> ./gflags_demo -mystr = \"this is a value of gflags member\" My str is: this is a value of gflags member \u5176\u5b83\u53d8\u91cf\u7c7b\u578b\u7c7b\u4f3c\uff0c\u4f46\u5e03\u5c14\u7c7b\u578b\u7684\u53c2\u6570\u6709\u4e9b\u72ec\u7279\u6027\u3002\u6bd4\u5982\u5b9a\u4e49\u4e00\u4e2a\u5e03\u5c14\u7c7b\u578b\u7684\u53c2\u6570 debug_bool \uff0c\u5728\u547d\u4ee4\u884c\u4e2d\u53ef\u4ee5\u8fdb\u884c\u5982\u4e0b\u6307\u5b9a\uff1a 1 2 3 4 >>> ./gflags_demo -debug_bool # debug_bool\u7684\u503c\u4e3atrue >>> ./gflags_demo -debug_bool = true # debug_bool\u7684\u503c\u4e3atrue >>> ./gflags_demo -debug_bool = 1 # debug_bool\u7684\u503c\u4e3atrue >>> ./gflags_demo -debug_bool = 0 # \u548c\u76f4\u63a5\u4f20\u5165false\u4e00\u6837\uff0cdebug_bool\u7684\u503c\u4e3afalse \u8fdb\u9636 \u8de8\u6587\u4ef6\u8c03\u7528 \u8bbf\u95ee\u5728\u53e6\u4e00\u4e2a\u6587\u4ef6\u4e2d\u5b9a\u4e49\u7684 gflags\u53d8\u91cf \uff1a\u4f7f\u7528 DECLARE_ \uff0c\u4f5c\u7528\u7c7b\u4f3c\u4e8e extern \u58f0\u660e\u53d8\u91cf\u3002 \u4e3a\u4e86\u65b9\u4fbf\u7ba1\u7406\u53d8\u91cf\uff0c\u63a8\u8350\u5728 *.cpp/*.cc \u6587\u4ef6\u4e2d DEFINE_ \u53d8\u91cf\uff0c\u5728\u5bf9\u5e94\u7684 *.h \u6587\u4ef6\u6216\u5355\u5143\u6d4b\u8bd5\u4e2d DECLARE_ \u53d8\u91cf\u3002\u6bd4\u5982\uff1a 1 2 3 4 5 6 // foo.cpp # include \"foo.h\" DEFINE_string ( mystr , \"hello\" , \"help for demo\" ); // \u5b9a\u4e49\u4e00\u4e2agflags\u53d8\u91cfname // foo.h DECLARE_string ( mystr ); // extern\u58f0\u660e\u53d8\u91cfname \u53c2\u6570\u68c0\u67e5 1 gflags :: RegisterFlagValidator gflags\u4f7f\u7528\u914d\u7f6e\u6587\u4ef6\u4f20\u5165\u53c2\u6570 \u914d\u7f6e\u6587\u4ef6\u5185\u5bb9\u7c7b\u4f3c\u4e8e\uff1a 1 2 3 // my.flags\u914d\u7f6e\u6587\u4ef6\u7684\u5185\u5bb9 --mystr=\"hello\" --myvalue=10 \u4f7f\u7528\u65f6\uff0c\u76f4\u63a5\u901a\u8fc7 --flagfile \u6307\u5b9a\u8be5\u914d\u7f6e\u6587\u4ef6my.flags\u5373\u53ef\uff1a 1 >>> ./gflags_demo --flagfile my.flags C++ gflags\u5e93\u4f7f\u7528\u8bf4\u660e gflags glog\u8f7b\u91cf\u7ea7\u65e5\u5fd7 \u7b80\u4ecb \u5b89\u88c5glog\u4e4b\u524d\u9700\u8981\u5b89\u88c5gflags\uff0c\u8fd9\u6837glog\u5c31\u53ef\u4ee5\u4f7f\u7528gflags\u53bb\u89e3\u6790\u547d\u4ee4\u884c\u53c2\u6570\u3002\u5982\u679c\u9879\u76ee\u901a\u8fc7CMake\u6784\u5efa\uff0c\u53ea\u9700\u8981\u5728CMakeLists.txt\u4e2d\u52a0\u5165\u7c7b\u4f3c\u4ee5\u4e0b\u914d\u7f6e\u5373\u53ef\uff1a 1 2 3 4 5 # \u5229\u7528CMakeLists.txt\u914d\u7f6eglog\u7684\u793a\u4f8b find_package (glog 0.3.5 REQUIRED) add_executable (main main.cpp) target_link_libraries (main glog::glog) \u7b80\u8981\u7528\u6cd5 glog \u5934\u6587\u4ef6 1 #include <glog/logging.h> \u521d\u59cb\u5316 main() \u51fd\u6570\u52a0\u5165\u4ee5\u4e0b\u4ee3\u7801\uff0c\u521d\u59cb\u5316 glog \uff1a 1 2 3 4 // \u89e3\u6790\u547d\u4ee4\u884c\u53c2\u6570 gflags :: ParseCommandLineFlags ( & argc , & argv , true ); // \u521d\u59cb\u5316\u65e5\u5fd7\u5e93 google :: InitGoogleLogging ( argv [ 0 ]); \u4f7f\u7528 1 LOG ( ERROR ) << \"Hello, World!\" ; \u8fdb\u9636 \u65e5\u5fd7\u7ea7\u522b LOG(<level>) \u9ed8\u8ba44\u4e2a\u7ea7\u522b\uff0c <level> \u53ef\u9009\u9879\uff1a INFO/WARNING/ERROR/FATAL \u3002 \u6761\u4ef6\u65e5\u5fd7\uff1a LOG_IF/LOG_EVERY_N/LOG_IF_EVERY_N/LOG_FIRST_N \u3002 \u81ea\u5b9a\u4e49\u7ea7\u522b\u5b8f VLOG(n) \u3002\u81ea\u5b9a\u4e49\u65e5\u5fd7\u7ea7\u522b\uff0c\u901a\u8fc7\u53c2\u6570 --v=<val> \u6307\u5b9a\u8f93\u51fa\u7684\u65e5\u5fd7\u7ea7\u522b\u3002\u6bd4\u5982\uff1a --v=3 \u5219\u53ea\u8f93\u51fa n<=3 \u7684\u65e5\u5fd7\u3002\u540c\u6837\uff0c\u81ea\u5b9a\u4e49\u7ea7\u522b\u5b8f VLOG \u4e5f\u652f\u6301 VLOG_IF/VLOG_EVERY_N/VLOG_IF_EVERY_N \u7b49\u3002 \u5728 LOG \u5b8f\u540d\u524d\u52a0 D \uff0c\u6307\u5b9a\u53ea\u5728Debug\u6a21\u5f0f\uff08\u5373\u6ca1\u6709\u5f00\u542f NDEBUG \uff09\u4e0b\u751f\u6548\uff0c\u6bd4\u5982 DLOG/DLOG_IF/DLOG_EVERY_N \u7b49\u3002 \u5e38\u7528\u547d\u4ee4\u884c\u53c2\u6570 glog \u4f9d\u8d56\u4e8e gflags \uff0c\u4ee5\u4e0b\u4e3a glog \u5e38\u89c1\u7684\u547d\u4ee4\u884c\u53c2\u6570\u3002 \u547d\u4ee4\u884c\u53c2\u6570 \u63cf\u8ff0 --logtostderr \u9ed8\u8ba4false\u3002\u5c06\u6240\u6709\u65e5\u5fd7\u4fe1\u606f\u90fd\u8f93\u51fa\u5230stderr\u4e0a --log_dir \u65e5\u5fd7\u8f93\u51fa\u76ee\u5f55\uff0c\u9ed8\u8ba4\u4e3a/tmp/\u3002\u5f53 --logtostderr \u8bbe\u7f6e\u4e3afalse\u65f6\uff0c\u5219\u65e5\u5fd7\u8f93\u51fa\u5230\u6587\u4ef6 --minloglevel \u8d85\u8fc7\u8be5\u7ea7\u522b\u7684\u65e5\u5fd7\u624d\u4f1a\u8bb0\u5f55 --stderrthreshold \u8d85\u8fc7\u8be5\u7ea7\u522b\u7684\u65e5\u5fd7\u9664\u4e86\u8f93\u51fa\u5230\u65e5\u5fd7\u5916\uff0c\u8fd8\u4f1a\u8f93\u51fa\u5230stderr --v VLOG(<level>) \u7684\u6700\u5927\u8f93\u51fa\u65e5\u5fd7\u7ea7\u522b --vmodule \u5206\u6a21\u5757/\u6587\u4ef6\u540d\u6307\u5b9a VLOG(<level>) \u7684\u6700\u5927\u8f93\u51fa\u65e5\u5fd7\u7ea7\u522b\uff0c\u4ee5\u5b57\u7b26\u4e32 <module1>=<level1>,<module2>=<level2>... \u5f62\u5f0f\u6307\u5b9a\uff0c\u652f\u6301\u901a\u914d\u7b26\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e --v CHECK \u5b8f\u68c0\u67e5\u9519\u8bef \u5f53 CHECK() \u7684\u6761\u4ef6\u4e0d\u6ee1\u8db3\u65f6\uff0c glog \u4f1a\u8bb0\u5f55 FATAL \u7ea7\u522b\u65e5\u5fd7\uff0c\u5e76\u8f93\u51fa\u8c03\u7528\u5806\u6808\u3002 1 CHECK ( fun () == 0 ) << \"Call fun() failed!\" ; \u548cC++\u81ea\u5e26\u7684\u65ad\u8a00 assert() \u4e0d\u540c\uff0c\u65e0\u8bba\u662f\u5426\u5f00\u542f NDEBUG \uff0c CHECK() \u90fd\u4f1a\u6267\u884c\u3002\u9664\u4e86 CHECK() \uff0c glog \u8fd8\u63d0\u4f9b\u5176\u5b83\u7684\u5b8f\uff0c\u5305\u62ec\uff1a CHECK_XXX \u6761\u4ef6 CHECK_EQ(x,y) x==y CHECK_NE(x,y) x!=y CHECK_LE(x,y) x<=y CHECK_LT(x,y) x<y CHECK_GE(x,y) x>=y CHECK_GT(x,y) x>y \u5728\u5224\u65ad\u6307\u9488\u662f\u5426\u4e3a\u7a7a\u65f6\uff0c\u9700\u8981\u5c06 NULL \u8f6c\u6362\u4e3a\u76f8\u5e94\u7684\u7c7b\u578b\u518d\u8fdb\u884c\u6bd4\u8f83\uff0c\u6bd4\u5982\uff1a 1 CHECK_EQ ( some_ptr , static_cast < SomeType *> ( NULL )) << \"some_ptr is a null pointer\" ; \u5728\u5224\u65ad char * \u7c7b\u578b\u7684\u5b57\u7b26\u4e32\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528 CHECK_STREQ()/CHECK_STRNE() \uff0c\u76f8\u5bf9\u5e94\u5e26\u6709CASE\u7684\u7248\u672c CHECK_STRCASEEQ()/CHECK_STRCASENE() \u4e3a\u5927\u5c0f\u5199\u4e0d\u654f\u611f\u7684\u3002\u4f20\u9012NULL\u503c\u7ed9\u8fd9\u4e9b\u5b8f\u662f\u5b89\u5168\u7684\u3002 \u53ef\u4ee5\u4f7f\u7528 CHECK_DOUBLE_EQ() \u68c0\u67e5\u4e24\u4e2a\u6d6e\u70b9\u6570\u662f\u5426\u76f8\u7b49\uff0c\u5e76\u5141\u8bb8\u51fa\u73b0\u6bd4\u8f83\u5c0f\u7684\u8bef\u5dee\u3002\u5982\u679c\u9700\u8981\u81ea\u5df1\u63d0\u4f9b\u7684\u8bef\u5dee\u8303\u56f4\uff0c\u53ef\u4ee5\u4f7f\u7528 CHECK_NEAR() \uff0c\u8be5\u5b8f\u7684\u7b2c\u4e09\u4e2a\u53c2\u6570\u5c31\u662f\u6307\u5b9a\u7684\u8bef\u5dee\u8303\u56f4\u3002 \u5176\u5b83 \u5f53\u9700\u8981\u7ebf\u7a0b\u5b89\u5168\u65f6\uff0c\u4f7f\u7528 RAW_LOG/RAW_CHECK \u7b49\uff1b \u7cfb\u7edf\u7ea7\u65e5\u5fd7\u8bb0\u5f55 SYSLOG/SYSLOG_IF/SYSLOG_EVERY_N \u5b8f\uff0c\u5c06\u8c03\u7528syslog()\u51fd\u6570\u6765\u8bb0\u5f55\u7cfb\u7edf\u7ea7\u522b\u7684\u65e5\u5fd7\uff1b perror\u98ce\u683c\u65e5\u5fd7 PLOG/PLOG_IF \u7cbe\u7b80\u65e5\u5fd7\u4fe1\u606f\uff0c\u5220\u9664\u65e5\u5fd7\u7ea7\u522b\u3001\u6240\u5728\u4ee3\u7801\u884c\u6570\u7b49\u4fe1\u606f\uff1a 1 2 #define GOOGLE_STRIP_LOG 1 // this must go before the #include! #include <glog/logging.h> glog How To Use Google Logging Library (glog) \u4f7f\u7528 Google \u7684 glog \u65e5\u5fd7\u5e93 Google C++\u5e93 gtest\u65ad\u8a00 ASSERT_* \u7cfb\u5217\u7684\u65ad\u8a00\uff0c\u5f53\u68c0\u67e5\u70b9\u5931\u8d25\u65f6\uff0c\u9000\u51fa\u6267\u884c\u3002 EXPECT_* \u7cfb\u5217\u7684\u65ad\u8a00\uff0c\u5f53\u68c0\u67e5\u70b9\u5931\u8d25\u65f6\uff0c\u7ee7\u7eed\u5411\u4e0b\u6267\u884c\u3002 \u8fd8\u6709 testing::StaticAssertTypeEq<int, T>(); \u53ef\u4ee5\u7528\u6765\u68c0\u67e5\u7c7b\u578bT\u662f\u4e0d\u662fint\u7c7b\u578b\uff0c\u5426\u5219\u4ea7\u751f\u4e00\u4e2a\u7f16\u8bd1\u65f6\u7684\u9759\u6001\u65ad\u8a00\u9519\u8bef\u3002","title":"cpp\u5e38\u7528\u5e93gflags/glog/gtest"},{"location":"develop/cpp/cpp%E5%B8%B8%E7%94%A8%E5%BA%93gflags_glog_gtest/#cppgflagsgloggtest","text":"","title":"cpp\u5e38\u7528\u5e93gflags/glog/gtest"},{"location":"develop/cpp/cpp%E5%B8%B8%E7%94%A8%E5%BA%93gflags_glog_gtest/#gflags","text":"","title":"gflags\u5904\u7406\u547d\u4ee4\u884c\u53c2\u6570"},{"location":"develop/cpp/cpp%E5%B8%B8%E7%94%A8%E5%BA%93gflags_glog_gtest/#_1","text":"\u5982\u679c\u9879\u76ee\u901a\u8fc7CMake\u6784\u5efa\uff0c\u53ea\u9700\u8981\u5728CMakeLists.txt\u4e2d\u52a0\u5165\u7c7b\u4f3c\u4ee5\u4e0b\u914d\u7f6e\u5373\u53ef\uff1a 1 2 3 4 5 find_package (gflags REQUIRED) include_directories (${gflags_INCLUDE_DIR}) add_executable (main main.cpp) target_link_libraries (main gflags)","title":"\u7b80\u4ecb"},{"location":"develop/cpp/cpp%E5%B8%B8%E7%94%A8%E5%BA%93gflags_glog_gtest/#_2","text":"","title":"\u7b80\u8981\u7528\u6cd5"},{"location":"develop/cpp/cpp%E5%B8%B8%E7%94%A8%E5%BA%93gflags_glog_gtest/#gflags_1","text":"1 #include <gflags/gflags.h>","title":"gflags\u5934\u6587\u4ef6"},{"location":"develop/cpp/cpp%E5%B8%B8%E7%94%A8%E5%BA%93gflags_glog_gtest/#_3","text":"1 DEFINE_string ( < \u53d8\u91cf\u540d > , < \u9ed8\u8ba4\u503c > , < \u63cf\u8ff0 > ); \u6bd4\u5982\uff1a 1 DEFINE_string ( mystr , \"hello\" , \"help for demo\" ); \u5176\u4e2d\uff0c DEFINE_string \u53ea\u662f\u5176\u4e2d\u4e00\u79cd\u6570\u636e\u7c7b\u578b\uff0c\u652f\u6301\u7684\u5168\u90e8\u6570\u636e\u7c7b\u578b\u6709\uff1a gflags\u5b9a\u4e49\u7c7b\u578b \u63cf\u8ff0 DEFINE_bool \u5e03\u5c14\u7c7b\u578b DEFINE_int32 32\u4f4d\u6574\u578b DEFINE_int64 64\u4f4d\u6574\u578b DEFINE_uint64 \u65e0\u7b26\u53f764\u4f4d\u6574\u578b DEFINE_double \u6d6e\u70b9\u7c7b\u578b DEFINE_string C++ string\u7c7b\u578b","title":"\u5b9a\u4e49\u547d\u4ee4\u884c\u53c2\u6570"},{"location":"develop/cpp/cpp%E5%B8%B8%E7%94%A8%E5%BA%93gflags_glog_gtest/#main","text":"1 gflags :: ParseCommandLineFlags ( & argc , & argv , true ); \u4e00\u822c\u90fd\u5c06\u4e0a\u8ff0\u4ee3\u7801\u653e\u5230 main() \u51fd\u6570\u7684\u5f00\u59cb\u4f4d\u7f6e\u3002","title":"\u5728main()\u51fd\u6570\u52a0\u5165\u5982\u4e0b\u4ee3\u7801\uff0c\u89e3\u6790\u547d\u4ee4\u884c\u53c2\u6570\uff1a"},{"location":"develop/cpp/cpp%E5%B8%B8%E7%94%A8%E5%BA%93gflags_glog_gtest/#_4","text":"\u4f7f\u7528 FLAGS_<\u53d8\u91cf\u540d> \u5c31\u53ef\u4ee5\u5728\u4ee3\u7801\u4e2d\u8bbf\u95ee\u89e3\u6790\u5f97\u5230\u7684\u53c2\u6570\u503c\u3002\u4f8b\u5982\uff1a 1 std :: cout << \"My str is: \" << FLAGS_mystr << std :: endl ;","title":"\u4ee3\u7801\u5185\u8bbf\u95ee\u4f20\u5165\u7684\u53c2\u6570"},{"location":"develop/cpp/cpp%E5%B8%B8%E7%94%A8%E5%BA%93gflags_glog_gtest/#_5","text":"1 2 3 >>> g++ <gflags_demo.cpp> -o gflags_demo -lgflags -lpthread # -l \u94fe\u63a5\u5e93\u8fdb\u884c\u7f16\u8bd1 >>> ./gflags_demo -mystr = \"this is a value of gflags member\" My str is: this is a value of gflags member \u5176\u5b83\u53d8\u91cf\u7c7b\u578b\u7c7b\u4f3c\uff0c\u4f46\u5e03\u5c14\u7c7b\u578b\u7684\u53c2\u6570\u6709\u4e9b\u72ec\u7279\u6027\u3002\u6bd4\u5982\u5b9a\u4e49\u4e00\u4e2a\u5e03\u5c14\u7c7b\u578b\u7684\u53c2\u6570 debug_bool \uff0c\u5728\u547d\u4ee4\u884c\u4e2d\u53ef\u4ee5\u8fdb\u884c\u5982\u4e0b\u6307\u5b9a\uff1a 1 2 3 4 >>> ./gflags_demo -debug_bool # debug_bool\u7684\u503c\u4e3atrue >>> ./gflags_demo -debug_bool = true # debug_bool\u7684\u503c\u4e3atrue >>> ./gflags_demo -debug_bool = 1 # debug_bool\u7684\u503c\u4e3atrue >>> ./gflags_demo -debug_bool = 0 # \u548c\u76f4\u63a5\u4f20\u5165false\u4e00\u6837\uff0cdebug_bool\u7684\u503c\u4e3afalse","title":"\u4f7f\u7528"},{"location":"develop/cpp/cpp%E5%B8%B8%E7%94%A8%E5%BA%93gflags_glog_gtest/#_6","text":"","title":"\u8fdb\u9636"},{"location":"develop/cpp/cpp%E5%B8%B8%E7%94%A8%E5%BA%93gflags_glog_gtest/#_7","text":"\u8bbf\u95ee\u5728\u53e6\u4e00\u4e2a\u6587\u4ef6\u4e2d\u5b9a\u4e49\u7684 gflags\u53d8\u91cf \uff1a\u4f7f\u7528 DECLARE_ \uff0c\u4f5c\u7528\u7c7b\u4f3c\u4e8e extern \u58f0\u660e\u53d8\u91cf\u3002 \u4e3a\u4e86\u65b9\u4fbf\u7ba1\u7406\u53d8\u91cf\uff0c\u63a8\u8350\u5728 *.cpp/*.cc \u6587\u4ef6\u4e2d DEFINE_ \u53d8\u91cf\uff0c\u5728\u5bf9\u5e94\u7684 *.h \u6587\u4ef6\u6216\u5355\u5143\u6d4b\u8bd5\u4e2d DECLARE_ \u53d8\u91cf\u3002\u6bd4\u5982\uff1a 1 2 3 4 5 6 // foo.cpp # include \"foo.h\" DEFINE_string ( mystr , \"hello\" , \"help for demo\" ); // \u5b9a\u4e49\u4e00\u4e2agflags\u53d8\u91cfname // foo.h DECLARE_string ( mystr ); // extern\u58f0\u660e\u53d8\u91cfname","title":"\u8de8\u6587\u4ef6\u8c03\u7528"},{"location":"develop/cpp/cpp%E5%B8%B8%E7%94%A8%E5%BA%93gflags_glog_gtest/#_8","text":"1 gflags :: RegisterFlagValidator","title":"\u53c2\u6570\u68c0\u67e5"},{"location":"develop/cpp/cpp%E5%B8%B8%E7%94%A8%E5%BA%93gflags_glog_gtest/#gflags_2","text":"\u914d\u7f6e\u6587\u4ef6\u5185\u5bb9\u7c7b\u4f3c\u4e8e\uff1a 1 2 3 // my.flags\u914d\u7f6e\u6587\u4ef6\u7684\u5185\u5bb9 --mystr=\"hello\" --myvalue=10 \u4f7f\u7528\u65f6\uff0c\u76f4\u63a5\u901a\u8fc7 --flagfile \u6307\u5b9a\u8be5\u914d\u7f6e\u6587\u4ef6my.flags\u5373\u53ef\uff1a 1 >>> ./gflags_demo --flagfile my.flags C++ gflags\u5e93\u4f7f\u7528\u8bf4\u660e gflags","title":"gflags\u4f7f\u7528\u914d\u7f6e\u6587\u4ef6\u4f20\u5165\u53c2\u6570"},{"location":"develop/cpp/cpp%E5%B8%B8%E7%94%A8%E5%BA%93gflags_glog_gtest/#glog","text":"","title":"glog\u8f7b\u91cf\u7ea7\u65e5\u5fd7"},{"location":"develop/cpp/cpp%E5%B8%B8%E7%94%A8%E5%BA%93gflags_glog_gtest/#_9","text":"\u5b89\u88c5glog\u4e4b\u524d\u9700\u8981\u5b89\u88c5gflags\uff0c\u8fd9\u6837glog\u5c31\u53ef\u4ee5\u4f7f\u7528gflags\u53bb\u89e3\u6790\u547d\u4ee4\u884c\u53c2\u6570\u3002\u5982\u679c\u9879\u76ee\u901a\u8fc7CMake\u6784\u5efa\uff0c\u53ea\u9700\u8981\u5728CMakeLists.txt\u4e2d\u52a0\u5165\u7c7b\u4f3c\u4ee5\u4e0b\u914d\u7f6e\u5373\u53ef\uff1a 1 2 3 4 5 # \u5229\u7528CMakeLists.txt\u914d\u7f6eglog\u7684\u793a\u4f8b find_package (glog 0.3.5 REQUIRED) add_executable (main main.cpp) target_link_libraries (main glog::glog)","title":"\u7b80\u4ecb"},{"location":"develop/cpp/cpp%E5%B8%B8%E7%94%A8%E5%BA%93gflags_glog_gtest/#_10","text":"","title":"\u7b80\u8981\u7528\u6cd5"},{"location":"develop/cpp/cpp%E5%B8%B8%E7%94%A8%E5%BA%93gflags_glog_gtest/#glog_1","text":"1 #include <glog/logging.h>","title":"glog\u5934\u6587\u4ef6"},{"location":"develop/cpp/cpp%E5%B8%B8%E7%94%A8%E5%BA%93gflags_glog_gtest/#_11","text":"main() \u51fd\u6570\u52a0\u5165\u4ee5\u4e0b\u4ee3\u7801\uff0c\u521d\u59cb\u5316 glog \uff1a 1 2 3 4 // \u89e3\u6790\u547d\u4ee4\u884c\u53c2\u6570 gflags :: ParseCommandLineFlags ( & argc , & argv , true ); // \u521d\u59cb\u5316\u65e5\u5fd7\u5e93 google :: InitGoogleLogging ( argv [ 0 ]);","title":"\u521d\u59cb\u5316"},{"location":"develop/cpp/cpp%E5%B8%B8%E7%94%A8%E5%BA%93gflags_glog_gtest/#_12","text":"1 LOG ( ERROR ) << \"Hello, World!\" ;","title":"\u4f7f\u7528"},{"location":"develop/cpp/cpp%E5%B8%B8%E7%94%A8%E5%BA%93gflags_glog_gtest/#_13","text":"","title":"\u8fdb\u9636"},{"location":"develop/cpp/cpp%E5%B8%B8%E7%94%A8%E5%BA%93gflags_glog_gtest/#_14","text":"LOG(<level>) \u9ed8\u8ba44\u4e2a\u7ea7\u522b\uff0c <level> \u53ef\u9009\u9879\uff1a INFO/WARNING/ERROR/FATAL \u3002 \u6761\u4ef6\u65e5\u5fd7\uff1a LOG_IF/LOG_EVERY_N/LOG_IF_EVERY_N/LOG_FIRST_N \u3002 \u81ea\u5b9a\u4e49\u7ea7\u522b\u5b8f VLOG(n) \u3002\u81ea\u5b9a\u4e49\u65e5\u5fd7\u7ea7\u522b\uff0c\u901a\u8fc7\u53c2\u6570 --v=<val> \u6307\u5b9a\u8f93\u51fa\u7684\u65e5\u5fd7\u7ea7\u522b\u3002\u6bd4\u5982\uff1a --v=3 \u5219\u53ea\u8f93\u51fa n<=3 \u7684\u65e5\u5fd7\u3002\u540c\u6837\uff0c\u81ea\u5b9a\u4e49\u7ea7\u522b\u5b8f VLOG \u4e5f\u652f\u6301 VLOG_IF/VLOG_EVERY_N/VLOG_IF_EVERY_N \u7b49\u3002 \u5728 LOG \u5b8f\u540d\u524d\u52a0 D \uff0c\u6307\u5b9a\u53ea\u5728Debug\u6a21\u5f0f\uff08\u5373\u6ca1\u6709\u5f00\u542f NDEBUG \uff09\u4e0b\u751f\u6548\uff0c\u6bd4\u5982 DLOG/DLOG_IF/DLOG_EVERY_N \u7b49\u3002","title":"\u65e5\u5fd7\u7ea7\u522b"},{"location":"develop/cpp/cpp%E5%B8%B8%E7%94%A8%E5%BA%93gflags_glog_gtest/#_15","text":"glog \u4f9d\u8d56\u4e8e gflags \uff0c\u4ee5\u4e0b\u4e3a glog \u5e38\u89c1\u7684\u547d\u4ee4\u884c\u53c2\u6570\u3002 \u547d\u4ee4\u884c\u53c2\u6570 \u63cf\u8ff0 --logtostderr \u9ed8\u8ba4false\u3002\u5c06\u6240\u6709\u65e5\u5fd7\u4fe1\u606f\u90fd\u8f93\u51fa\u5230stderr\u4e0a --log_dir \u65e5\u5fd7\u8f93\u51fa\u76ee\u5f55\uff0c\u9ed8\u8ba4\u4e3a/tmp/\u3002\u5f53 --logtostderr \u8bbe\u7f6e\u4e3afalse\u65f6\uff0c\u5219\u65e5\u5fd7\u8f93\u51fa\u5230\u6587\u4ef6 --minloglevel \u8d85\u8fc7\u8be5\u7ea7\u522b\u7684\u65e5\u5fd7\u624d\u4f1a\u8bb0\u5f55 --stderrthreshold \u8d85\u8fc7\u8be5\u7ea7\u522b\u7684\u65e5\u5fd7\u9664\u4e86\u8f93\u51fa\u5230\u65e5\u5fd7\u5916\uff0c\u8fd8\u4f1a\u8f93\u51fa\u5230stderr --v VLOG(<level>) \u7684\u6700\u5927\u8f93\u51fa\u65e5\u5fd7\u7ea7\u522b --vmodule \u5206\u6a21\u5757/\u6587\u4ef6\u540d\u6307\u5b9a VLOG(<level>) \u7684\u6700\u5927\u8f93\u51fa\u65e5\u5fd7\u7ea7\u522b\uff0c\u4ee5\u5b57\u7b26\u4e32 <module1>=<level1>,<module2>=<level2>... \u5f62\u5f0f\u6307\u5b9a\uff0c\u652f\u6301\u901a\u914d\u7b26\uff0c\u4f18\u5148\u7ea7\u9ad8\u4e8e --v","title":"\u5e38\u7528\u547d\u4ee4\u884c\u53c2\u6570"},{"location":"develop/cpp/cpp%E5%B8%B8%E7%94%A8%E5%BA%93gflags_glog_gtest/#check","text":"\u5f53 CHECK() \u7684\u6761\u4ef6\u4e0d\u6ee1\u8db3\u65f6\uff0c glog \u4f1a\u8bb0\u5f55 FATAL \u7ea7\u522b\u65e5\u5fd7\uff0c\u5e76\u8f93\u51fa\u8c03\u7528\u5806\u6808\u3002 1 CHECK ( fun () == 0 ) << \"Call fun() failed!\" ; \u548cC++\u81ea\u5e26\u7684\u65ad\u8a00 assert() \u4e0d\u540c\uff0c\u65e0\u8bba\u662f\u5426\u5f00\u542f NDEBUG \uff0c CHECK() \u90fd\u4f1a\u6267\u884c\u3002\u9664\u4e86 CHECK() \uff0c glog \u8fd8\u63d0\u4f9b\u5176\u5b83\u7684\u5b8f\uff0c\u5305\u62ec\uff1a CHECK_XXX \u6761\u4ef6 CHECK_EQ(x,y) x==y CHECK_NE(x,y) x!=y CHECK_LE(x,y) x<=y CHECK_LT(x,y) x<y CHECK_GE(x,y) x>=y CHECK_GT(x,y) x>y \u5728\u5224\u65ad\u6307\u9488\u662f\u5426\u4e3a\u7a7a\u65f6\uff0c\u9700\u8981\u5c06 NULL \u8f6c\u6362\u4e3a\u76f8\u5e94\u7684\u7c7b\u578b\u518d\u8fdb\u884c\u6bd4\u8f83\uff0c\u6bd4\u5982\uff1a 1 CHECK_EQ ( some_ptr , static_cast < SomeType *> ( NULL )) << \"some_ptr is a null pointer\" ; \u5728\u5224\u65ad char * \u7c7b\u578b\u7684\u5b57\u7b26\u4e32\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528 CHECK_STREQ()/CHECK_STRNE() \uff0c\u76f8\u5bf9\u5e94\u5e26\u6709CASE\u7684\u7248\u672c CHECK_STRCASEEQ()/CHECK_STRCASENE() \u4e3a\u5927\u5c0f\u5199\u4e0d\u654f\u611f\u7684\u3002\u4f20\u9012NULL\u503c\u7ed9\u8fd9\u4e9b\u5b8f\u662f\u5b89\u5168\u7684\u3002 \u53ef\u4ee5\u4f7f\u7528 CHECK_DOUBLE_EQ() \u68c0\u67e5\u4e24\u4e2a\u6d6e\u70b9\u6570\u662f\u5426\u76f8\u7b49\uff0c\u5e76\u5141\u8bb8\u51fa\u73b0\u6bd4\u8f83\u5c0f\u7684\u8bef\u5dee\u3002\u5982\u679c\u9700\u8981\u81ea\u5df1\u63d0\u4f9b\u7684\u8bef\u5dee\u8303\u56f4\uff0c\u53ef\u4ee5\u4f7f\u7528 CHECK_NEAR() \uff0c\u8be5\u5b8f\u7684\u7b2c\u4e09\u4e2a\u53c2\u6570\u5c31\u662f\u6307\u5b9a\u7684\u8bef\u5dee\u8303\u56f4\u3002","title":"CHECK\u5b8f\u68c0\u67e5\u9519\u8bef"},{"location":"develop/cpp/cpp%E5%B8%B8%E7%94%A8%E5%BA%93gflags_glog_gtest/#_16","text":"\u5f53\u9700\u8981\u7ebf\u7a0b\u5b89\u5168\u65f6\uff0c\u4f7f\u7528 RAW_LOG/RAW_CHECK \u7b49\uff1b \u7cfb\u7edf\u7ea7\u65e5\u5fd7\u8bb0\u5f55 SYSLOG/SYSLOG_IF/SYSLOG_EVERY_N \u5b8f\uff0c\u5c06\u8c03\u7528syslog()\u51fd\u6570\u6765\u8bb0\u5f55\u7cfb\u7edf\u7ea7\u522b\u7684\u65e5\u5fd7\uff1b perror\u98ce\u683c\u65e5\u5fd7 PLOG/PLOG_IF \u7cbe\u7b80\u65e5\u5fd7\u4fe1\u606f\uff0c\u5220\u9664\u65e5\u5fd7\u7ea7\u522b\u3001\u6240\u5728\u4ee3\u7801\u884c\u6570\u7b49\u4fe1\u606f\uff1a 1 2 #define GOOGLE_STRIP_LOG 1 // this must go before the #include! #include <glog/logging.h> glog How To Use Google Logging Library (glog) \u4f7f\u7528 Google \u7684 glog \u65e5\u5fd7\u5e93 Google C++\u5e93","title":"\u5176\u5b83"},{"location":"develop/cpp/cpp%E5%B8%B8%E7%94%A8%E5%BA%93gflags_glog_gtest/#gtest","text":"ASSERT_* \u7cfb\u5217\u7684\u65ad\u8a00\uff0c\u5f53\u68c0\u67e5\u70b9\u5931\u8d25\u65f6\uff0c\u9000\u51fa\u6267\u884c\u3002 EXPECT_* \u7cfb\u5217\u7684\u65ad\u8a00\uff0c\u5f53\u68c0\u67e5\u70b9\u5931\u8d25\u65f6\uff0c\u7ee7\u7eed\u5411\u4e0b\u6267\u884c\u3002 \u8fd8\u6709 testing::StaticAssertTypeEq<int, T>(); \u53ef\u4ee5\u7528\u6765\u68c0\u67e5\u7c7b\u578bT\u662f\u4e0d\u662fint\u7c7b\u578b\uff0c\u5426\u5219\u4ea7\u751f\u4e00\u4e2a\u7f16\u8bd1\u65f6\u7684\u9759\u6001\u65ad\u8a00\u9519\u8bef\u3002","title":"gtest\u65ad\u8a00"},{"location":"develop/cpp/cpp%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/","text":"cpp\u5e76\u53d1\u7f16\u7a0b \u4e92\u65a5\u9501\u548c\u81ea\u65cb\u9501 \u5e76\u53d1\u7f16\u7a0b\u65f6\uff0c\u52a0\u9501\u7684\u76ee\u7684\u662f\u4fdd\u8bc1\u5171\u4eab\u8d44\u6e90\u5728\u4efb\u610f\u65f6\u95f4\u5185\uff0c\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u53ef\u4ee5\u8bbf\u95ee\uff0c\u907f\u514d\u6570\u636e\u5171\u4eab\u5bfc\u81f4\u7684\u9519\u4e71\u3002\u6700\u5e95\u5c42\u662f\u4e92\u65a5\u9501\u548c\u81ea\u65cb\u9501\uff0c\u5176\u5b83\u9ad8\u7ea7\u9501\u6bd4\u5982\u8bfb\u5199\u9501\u3001\u60b2\u89c2\u9501\u3001\u4e50\u89c2\u9501\u7b49\u90fd\u662f\u57fa\u4e8e\u5b83\u4eec\u5b9e\u73b0\u3002 \u5047\u5982\u4e00\u4e2a\u7ebf\u7a0b\u52a0\u9501\u6210\u529f\uff0c\u5176\u5b83\u7ebf\u7a0b\u8bd5\u56fe\u52a0\u9501\u5219\u4f1a\u5931\u8d25\uff0c\u5931\u8d25\u7ebf\u7a0b\u7684\u5904\u7406\u65b9\u5f0f\u5982\u4e0b\uff1a \u4e92\u65a5\u9501 \u52a0\u9501\u5931\u8d25\u540e\uff0c\u7ebf\u7a0b\u91ca\u653eCPU\uff0c\u7ed9\u5176\u5b83\u7ebf\u7a0b\u3002 \u81ea\u65cb\u9501 \u52a0\u9501\u5931\u8d25\u540e\uff0c\u7ebf\u7a0b\u4f1a\u5fd9\u7b49\u5f85\uff0c\u76f4\u5230\u62ff\u5230\u9501\u3002 \u56e0\u6b64\uff0c\u6301\u6709\u4e92\u65a5\u9501\u7684 \u5931\u8d25 \u7ebf\u7a0b\u4f1a\u9000\u51fa\uff0c\u7b49\u5f85\u9501\u91ca\u653e\u65f6\u81ea\u5df1\u88ab\u7cfb\u7edf\u5524\u9192\uff1b\u800c\u6301\u6709\u81ea\u65cb\u9501\u7684 \u5931\u8d25 \u7ebf\u7a0b\u4f1a\u201cwhile\u5faa\u73af\u201d\u53cd\u590d\u4e89\u593a\u8d44\u6e90\u3002\u4f46\u7531\u4e8e\u4e92\u65a5\u9501\u52a0\u9501\u5931\u8d25\u4f1a\u8fdb\u884c\u4e0a\u4e0b\u6587\u5207\u6362\uff0c\u4ece\u800c\u5f15\u5165\u4e00\u5b9a\u5f00\u9500\uff0c\u56e0\u6b64\u5982\u679c\u9501\u4f4f\u7684\u4ee3\u7801\u6267\u884c\u65f6\u95f4\u6bd4\u8f83\u77ed\uff0c\u7b49\u5f85\u5f00\u9500\u5c0f\u4e8e\u4e0a\u4e0b\u6587\u5207\u6362\u7684\u5f00\u9500\uff0c\u6b64\u65f6\u4e92\u65a5\u9501\u5c31\u6709\u4f18\u52bf\u3002 \u4e92\u65a5\u9501 \u4e92\u65a5\u9501\u662f\u4e00\u79cd\u201c\u72ec\u5360\u9501\u201d\uff0c\u7ade\u4e89\u52a0\u9501\u5931\u8d25\u7684\u7ebf\u7a0b\u4f1a\u91ca\u653e\u6389CPU\uff0c\u81ea\u7136\u8be5\u7ebf\u7a0b\u52a0\u9501\u7684\u4ee3\u7801\u5c31\u4f1a\u88ab\u963b\u585e\u3002\u4e92\u65a5\u9501\u52a0\u9501\u5931\u8d25\u800c\u963b\u585e\u7684\u73b0\u8c61\u662f\u7531\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u5b9e\u73b0\u7684\uff0c\u5f53\u4e92\u65a5\u9501\u52a0\u9501\u5931\u8d25\uff0c\u5c31\u4f1a\u4ece\u7528\u6237\u6001\u8fdb\u5165\u5185\u6838\u6001\uff0c\u5185\u6838\u4f1a\u5207\u6362\u7ebf\u7a0b\uff0c\u6b64\u65f6\u4f1a\u6709\u4e24\u6b21\u7ebf\u7a0b\u4e0a\u4e0b\u6587\u5207\u6362\u7684\u6027\u80fd\u6210\u672c\uff1a \u5f53\u7ebf\u7a0b\u52a0\u9501\u5931\u8d25\u65f6\uff0c\u5185\u6838\u5c06\u7ebf\u7a0b\u4ece\u201c\u8fd0\u884c\u201d\u72b6\u6001\u8bbe\u7f6e\u4e3a\u201c\u7761\u7720\u201d\u72b6\u6001\uff0c\u7136\u540e\u5c06CPU\u5207\u6362\u7ed9\u5176\u5b83\u7ebf\u7a0b\u4f7f\u7528\u3002 \u5f53\u9501\u91ca\u653e\u65f6\uff0c\u4e4b\u524d\u201c\u7761\u7720\u201d\u72b6\u6001\u7684\u7ebf\u7a0b\u4f1a\u53d8\u4e3a\u201c\u5c31\u7eea\u201d\u72b6\u6001\uff0c\u7136\u540e\u5185\u6838\u4f1a\u5728\u5408\u9002\u7684\u65f6\u95f4\u5c06CPU\u5207\u6362\u7ed9\u8be5\u7ebf\u7a0b\u4f7f\u7528\u3002 \u5f53\u4e24\u4e2a\u7ebf\u7a0b\u540c\u5c5e\u4e8e\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u5728\u7ebf\u7a0b\u4e0a\u4e0b\u6587\u5207\u6362\u65f6\uff0c\u7531\u4e8e\u865a\u62df\u5185\u5b58\u662f\u5171\u4eab\u7684\uff0c\u56e0\u6b64\u4e0d\u9700\u8981\u53d8\u52a8\uff0c\u53ea\u9700\u8981\u5207\u6362\u7ebf\u7a0b\u7684\u79c1\u6709\u6570\u636e\u3001\u5bc4\u5b58\u5668\u7b49\u4e0d\u5171\u4eab\u7684\u6570\u636e\u3002 \u5728\u591a\u6838\u73af\u5883\u4e0b\uff0c\u6267\u884c test and set \u65e0\u6cd5\u786e\u4fdd\u64cd\u4f5c\u7684\u539f\u5b50\u6027\uff0c\u56e0\u6b64\u4e92\u65a5\u9501\u7684\u539f\u7406\u662f\u5bf9\u5185\u5b58\u603b\u7ebf\u8fdb\u884c\u52a0\u9501\u3002 \u81ea\u65cb\u9501 \u81ea\u65cb\u9501\u4f1a\u4e00\u76f4\u81ea\u65cb\uff0c\u5229\u7528CPU\u5468\u671f\uff0c\u76f4\u5230\u9501\u53ef\u7528\u3002\u5728\u5355\u6838CPU\u4e0a\uff0c\u9700\u8981\u62a2\u5360\u5f0f\u7684\u8c03\u5ea6\u5668\uff0c\u5373\u901a\u8fc7\u65f6\u949f\u7ec8\u7aef\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u8fd0\u884c\u5176\u5b83\u7ebf\u7a0b\u3002\u5426\u5219\uff0c\u81ea\u65cb\u9501\u5728\u5355CPU\u4e0a\u65e0\u6cd5\u4f7f\u7528\uff0c\u56e0\u4e3a\u4e00\u4e2a\u81ea\u65cb\u7684\u7ebf\u7a0b\u6c38\u8fdc\u4e0d\u4f1a\u653e\u5f03CPU\u3002 \u5f53\u52a0\u9501\u5931\u8d25\u65f6\uff0c\u4e92\u65a5\u9501\u8fdb\u884c\u201c\u7ebf\u7a0b\u5207\u6362\u201d\uff0c\u81ea\u65cb\u9501\u8fdb\u884c\u201c\u5fd9\u7b49\u5f85\u201d\u3002 \u5fd9\u7b49\u5f85 \u53ef\u4ee5\u7528while\u5faa\u73af\u6765\u5b9e\u73b0\uff0c\u4f46\u6700\u597d\u4f7f\u7528CPU\u63d0\u4f9b\u7684 PAUSE \u6307\u4ee4\u6765\u5b9e\u73b0\u5fd9\u7b49\u5f85\u3002 \u5982\u679c\u88ab\u9501\u4f4f\u7684\u4ee3\u7801\u6267\u884c\u65f6\u95f4\u5f88\u77ed\uff0c\u90a3\u4e48\u201c\u5fd9\u7b49\u5f85\u201d\u65f6\u95f4\u76f8\u5e94\u4e5f\u5f88\u77ed\uff0c\u6b64\u65f6\u9002\u5408\u91c7\u7528\u81ea\u65cb\u9501\u3002\u4f46\u5b9e\u9645\u4f7f\u7528\u65f6\uff0c\u4e92\u65a5\u9501\u66f4\u4e3a\u666e\u904d\u3002\u4f46\u65e0\u8bba\u4f7f\u7528\u4f55\u79cd\u9501\uff0c\u52a0\u9501\u7684\u4ee3\u7801\u8303\u56f4\u5e94\u5c3d\u53ef\u80fd\u5c0f\uff0c\u4e5f\u5c31\u662f\u52a0\u9501\u7684\u7c92\u5ea6\u8981\u5c3d\u53ef\u80fd\u7ec6\uff0c\u4ee5\u52a0\u5feb\u6267\u884c\u901f\u5ea6\u3002 \u4e92\u65a5\u9501\u7684\u57fa\u672c\u6982\u5ff5 \u4e92\u65a5\u91cf\uff08mutex\uff09\u63d0\u4f9b\u4e86\u72ec\u5360\u6240\u6709\u6743\u7684\u6982\u5ff5\uff0c\u53ef\u4ee5\u63a7\u5236\u5bf9\u8d44\u6e90\u7684\u8bbf\u95ee\u3002\u4fe1\u53f7\u91cf\uff08semaphore\uff09\u5219\u662f\u4e00\u4e2a\u8ba1\u6570\u5668\uff0c\u9650\u5236\u4e86\u5e76\u53d1\u8bbf\u95ee\u540c\u4e00\u8d44\u6e90\u7684\u7ebf\u7a0b\u6570\u91cf\u3002 Standard C++ \u5728\u521b\u5efa\u4fe1\u53f7\u91cf\u65f6\uff0c\u8ba1\u6570\u5668\u7684\u503c\u603b\u662f\u57280\u548c\u6700\u5927\u503c\u4e4b\u95f4\uff0c\u5f53\u8ba1\u6570\u5668\u7684\u503c\u4e25\u683c\u5927\u4e8e0\u65f6\uff0c\u5bf9 Wait() \u7684\u8c03\u7528\u4f1a\u7acb\u523b\u8fd4\u56de\uff0c\u5e76\u5c06\u8ba1\u6570\u5668\u7684\u503c\u51cf\u4e00\uff1b\u5f53\u8ba1\u6570\u5668\u7684\u503c\u4e3a0\u65f6\uff0c\u5bf9 Wait() \u7684\u8c03\u7528\u4f1a\u963b\u585e\u3002\u5bf9\u4e8e\u963b\u585e\u7684\u4fe1\u53f7\u91cf\uff0c\u53ea\u6709 Signal() \u8c03\u7528\u540e\uff0c\u8ba1\u6570\u5668\u7684\u503c\u91cd\u65b0\u5927\u4e8e0\uff0c\u6b64\u65f6\u624d\u4f1a\u8fd4\u56de\u3002\u4fe1\u53f7\u91cf\u9002\u7528\u573a\u666f\u4e3a\uff1a\u540c\u4e00\u65f6\u523b\u53ea\u6709\u56fa\u5b9a\u6570\u91cf\u6d88\u8d39\u8005\u8bbf\u95ee\u5171\u4eab\u8d44\u6e90\uff0c\u6bd4\u5982\u4fe1\u53f7\u91cf\u53ef\u4ee5\u770b\u505a\u9152\u5e97\u4e2d\u53ef\u9884\u8ba2\u7684\u623f\u95f4\u6570\u91cf\uff0c\u623f\u95f4\u88ab\u9884\u5b9a\u8868\u793a\u4e00\u6b21\u5bf9\u4fe1\u53f7\u91cf Wait() \u7684\u8c03\u7528\uff0c\u9000\u623f\u8868\u793a\u5bf9 Signal() \u7684\u8c03\u7528\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #include <mutex> #include <condition_variable> // Simplest implementation class Semaphore { public : explicit Semaphore ( int count = 0 ) : count_ ( count ) {} // \u91ca\u653e\u4e00\u4e2a\u4fe1\u53f7\u91cf\uff0c\u8ba1\u6570\u5668\u52a0\u4e00 void Signal () { std :: unique_lock < std :: mutex > lock ( mutex_ ); ++ count_ ; cv_ . notify_one (); } // \u6d88\u8017\u4e00\u4e2a\u4fe1\u53f7\u91cf\uff0c\u8ba1\u6570\u5668\u51cf\u4e00 void Wait () { std :: unique_lock < std :: mutex > lock ( mutex_ ); cv_ . wait ( lock , [ = ] { return count_ > 0 ; }); -- count_ ; } private : std :: mutex mutex_ ; // \u4e92\u65a5\u91cf\uff0c\u8868\u793a\u72ec\u5360\u6240\u6709\u6743 std :: condition_variable cv_ ; // \u6761\u4ef6\u53d8\u91cf int count_ ; // \u4fe1\u53f7\u91cf\u7684\u8ba1\u6570\u5668 }; mutex \u5934\u6587\u4ef6 cpp\u4e2dmutex\u548c\u9501\u7c7b\u578b\u7684\u7c7b\u548c\u51fd\u6570\u90fd\u58f0\u660e\u5728 <mutex> \u5934\u6587\u4ef6\u4e2d\u3002 mutex\u7c7b\uff08\u56db\u79cd\uff09 std::mutex \uff1a\u6700\u57fa\u672c\u7684mutex\u7c7b\u3002 std::recursive_mutex \uff1a\u9012\u5f52mutex\u7c7b\uff0c\u5141\u8bb8\u540c\u4e00\u4e2a\u7ebf\u7a0b\u5bf9\u4e92\u65a5\u91cf\u591a\u6b21\u4e0a\u9501\uff08\u4e5f\u5373\u9012\u5f52\u4e0a\u9501\uff09\uff0c\u91ca\u653e\u4e92\u65a5\u91cf\u65f6\u4e5f\u9700\u8981\u8c03\u7528\u548c\u52a0\u9501\u6b21\u6570\u76f8\u540c\u7684 unlock() \u3002 std::time_mutex \uff1a\u5b9a\u65f6mutex\u7c7b\uff0c\u6210\u5458\u51fd\u6570 try_lock_for() \u63a5\u53d7\u4e00\u4e2a\u65f6\u95f4\u8303\u56f4\uff0c\u5982\u679c\u5728\u8be5\u65f6\u95f4\u8303\u56f4\u5185\u7ebf\u7a0b\u6ca1\u6709\u52a0\u9501\u6210\u529f\u5219\u963b\u585e\uff0c try_lock_until() \u63a5\u53d7\u4e00\u4e2a\u65f6\u95f4\u70b9\uff0c\u5982\u679c\u5728\u8be5\u65f6\u95f4\u70b9\u4e4b\u524d\u6ca1\u6709\u52a0\u9501\u6210\u529f\u5219\u963b\u585e\u3002 std::recursive_timed_mutex \uff1a\u5b9a\u65f6\u9012\u5f52mutex\u7c7b\u3002 lock\u7c7b\uff08\u4e24\u79cd\uff09 std::lock_guard \uff1a\u63d0\u4f9b\u7ebf\u7a0b\u5bf9\u4e92\u65a5\u91cf\u81ea\u52a8\u52a0\u89e3\u9501\u7684\u529f\u80fd\u3002 std::unique_lock \uff1a\u63d0\u4f9b\u7ebf\u7a0b\u5bf9\u4e92\u65a5\u91cf\u81ea\u52a8\u52a0\u89e3\u9501\u7684\u529f\u80fd\uff0c\u5e76\u53ef\u4ee5\u4e2d\u9014\u89e3\u9501\u3002\u53ef\u914d\u5408\u6761\u4ef6\u53d8\u91cf condition_variable \u89e3\u51b3\u201c\u751f\u4ea7\u8005-\u6d88\u8d39\u8005\u201d\u95ee\u9898\u3002 \u51fd\u6570 std::lock \uff1a\u5bf9\u4e92\u65a5\u91cf\u52a0\u9501\uff0c\u52a0\u9501\u5931\u8d25\u5219\u672c\u7ebf\u7a0b\u963b\u585e\u3002 std::try_lock \uff1a\u5c1d\u8bd5\u5bf9\u4e92\u65a5\u91cf\u52a0\u9501\uff0c\u52a0\u9501\u5931\u8d25\u672c\u7ebf\u7a0b\u4e0d\u4f1a\u963b\u585e\u3002 std::call_once \uff1a\u591a\u4e2a\u7ebf\u7a0b\u540c\u65f6\u8c03\u7528\u67d0\u4e2a\u51fd\u6570\uff0c call_once() \u53ef\u4ee5\u786e\u4fdd\u591a\u4e2a\u7ebf\u7a0b\u53ea\u8c03\u7528\u8be5\u51fd\u6570\u4e00\u6b21\u3002 \u6784\u9020\u51fd\u6570 std::mutex() \u4e0d\u5141\u8bb8\u62f7\u8d1d\u6784\u9020\uff0c\u4e5f\u4e0d\u5141\u8bb8move\u62f7\u8d1d\uff0c\u6700\u521d\u4ea7\u751f\u7684mutex\u5bf9\u8c61\u5904\u4e8e\u89e3\u9501\uff08unlock\uff09\u72b6\u6001\u3002 \u793a\u4f8b 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #include <iostream> // std::cout #include <thread> // std::thread #include <mutex> // std::mutex volatile int counter ( 0 ); // non-atomic counter std :: mutex mtx ; // \u5b9a\u4e49\u4e92\u65a5\u91cf\uff0c\u8be5\u4e92\u65a5\u91cf\u63a7\u5236\u975e\u539f\u5b50\u8ba1\u6570\u5668counter\u7684\u81ea\u589e void attempt_10k_increases () { for ( int i = 0 ; i < 10000 ; ++ i ) { if ( mtx . try_lock ()) { // \u5c1d\u8bd5\u52a0\u9501\uff0c\u4e5f\u5373\u4ec5\u5728\u672a\u52a0\u9501\u72b6\u6001\u4e0b\u624d\u4f1a\u81ea\u589ecounter ++ counter ; mtx . unlock (); // \u89e3\u9501 } } } int main ( int argc , const char * argv []) { std :: thread threads [ 10 ]; for ( int i = 0 ; i < 10 ; ++ i ) threads [ i ] = std :: thread ( attempt_10k_increases ); for ( auto & th : threads ) th . join (); std :: cout << counter << \" successful increases of the counter. \\n \" ; return 0 ; } lock_guard\u548cunique_lock \u4e3a\u4e86\u65b9\u4fbfmutex\u52a0\u89e3\u9501\uff0c\u907f\u514d\u52a0\u9501\u540e\u5fd8\u8bb0\u89e3\u9501\uff0ccpp\u5f15\u5165 lock_guard \u548c unique_lock \u5b9e\u73b0\u81ea\u52a8\u52a0\u9501\u4e0e\u89e3\u9501\u529f\u80fd\uff0c\u8fd9\u6709\u70b9\u7c7b\u4f3c\u4e8e\u666e\u901a\u6307\u9488\u548c\u667a\u80fd\u6307\u9488\u4e4b\u95f4\u7684\u5173\u7cfb\u3002 lock_guard lock_guard \u5728\u6784\u9020\u51fd\u6570\u65f6\u52a0\u9501\uff0c\u5728\u6790\u6784\u51fd\u6570\u65f6\u89e3\u9501\u3002\u6bd4\u5982\uff1a 1 2 3 4 5 6 mutable std :: mutex mutex_ ; // \u5b9a\u4e49\u4e92\u65a5\u91cf bool Empty () const { std :: lock_guard < std :: mutex > lock ( mutex_ ); // \u8c03\u7528lock_guard\u6784\u9020\u51fd\u6570\uff0c\u6b64\u65f6\u52a0\u9501 return queue_ . empty (); } // \u5927\u62ec\u53f7{}\u7ed3\u675f\uff0c\u79bb\u5f00\u4f5c\u7528\u57df\uff0c\u8c03\u7528lock_guard\u6790\u6784\u51fd\u6570\uff0c\u81ea\u52a8\u89e3\u9501 \u5728\u5b9e\u4f8b\u5316 lock_guard \u5bf9\u8c61\u65f6\u4f1a\u8c03\u7528\u6784\u9020\u51fd\u6570\u52a0\u9501\uff0c\u5728\u79bb\u5f00\u4f5c\u7528\u57df\u65f6 lock_guard \u4f1a\u88ab\u9500\u6bc1\uff0c\u81ea\u52a8\u89e3\u9501\uff0c\u4f46\u5982\u679c\u8fd9\u4e2a\u4f5c\u7528\u57df\u6bd4\u8f83\u5927\uff0c\u52a0\u9501\u7684\u4ee3\u7801\u8303\u56f4\u4f1a\u504f\u5927\uff0c\u4ece\u800c\u5f71\u54cd\u6267\u884c\u6548\u7387\u3002 unique_lock unique_lock \u540c\u6837\u4f1a\u5728\u6784\u9020\u51fd\u6570\u65f6\u52a0\u9501\uff0c\u5728\u6790\u6784\u51fd\u6570\u65f6\u89e3\u9501\u3002\u4f46\u53ef\u4ee5\u5229\u7528 unique_lock.unlock() \u6765\u89e3\u9501\uff0c\u6216\u8005\u53ef\u4ee5\u914d\u5408\u201c\u6761\u4ef6\u53d8\u91cf\u201d\uff08condition variable\uff09\u7b49\u4f7f\u7528\uff0c\u5728\u6790\u6784\u65f6\u4f1a\u5224\u65ad\u5f53\u524d\u9501\u7684\u72b6\u6001\u4ee5\u51b3\u5b9a\u662f\u5426\u89e3\u9501\uff0c\u56e0\u6b64\u53ef\u4ee5\u65b9\u4fbf\u5730\u63a7\u5236\u9501\u7684\u7c92\u5ea6\u3002\u800c lock_guard \u5728\u6790\u6784\u65f6\u4e00\u5b9a\u4f1a\u89e3\u9501\uff0c\u4e5f\u6ca1\u6709\u4e2d\u9014\u89e3\u9501\u7684\u529f\u80fd\u3002 unique_lock \u5185\u90e8\u4f1a\u7ef4\u62a4\u4e00\u4e2a\u9501\u7684\u72b6\u6001\uff0c\u6240\u4ee5\u6548\u7387\u4f1a\u6bd4 lock_guard \u6162\u3002 condition_variable \u6761\u4ef6\u53d8\u91cf\uff08condition variable\uff09\u7684\u4e00\u822c\u7528\u6cd5\u662f\uff1a\u7ebf\u7a0bA\u7b49\u5f85\u67d0\u4e2a\u6761\u4ef6\u5e76\u6302\u8d77\uff0c\u76f4\u5230\u7ebf\u7a0bB\u8bbe\u7f6e\u5e76\u901a\u77e5\u6761\u4ef6\u53d8\u91cf\uff0c\u7ebf\u7a0bA\u624d\u4f1a\u88ab\u5524\u9192\u3002\u6761\u4ef6\u53d8\u91cf\u53ef\u89e3\u51b3\u7ecf\u5178\u7684\u201c\u751f\u4ea7\u8005-\u6d88\u8d39\u8005\u201d\u95ee\u9898\u3002 \u7b49\u5f85\u7684\u7ebf\u7a0b\u53ef\u80fd\u6709\u591a\u4e2a\uff0c\u56e0\u6b64\u901a\u77e5\u7ebf\u7a0b\u53ef\u4ee5\u9009\u62e9\u4e00\u6b21\u901a\u77e5\u4e00\u4e2a condition_variable.notify_one() \uff0c\u8fd8\u662f\u4e00\u6b21\u901a\u77e5\u6240\u6709\u7b49\u5f85\u7ebf\u7a0b condition_variable.notify_all() \u3002\u6bd4\u5982\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 mutable std :: mutex mutex_ ; // \u5b9a\u4e49\u4e92\u65a5\u91cf void Push ( const T & value ) { { std :: unique_lock < std :: mutex > lock ( mutex_ ); // \u8c03\u7528\u6784\u9020\u51fd\u6570\uff0c\u6b64\u65f6\u52a0\u9501 // \u6761\u4ef6\u53d8\u91cf\u88ab\u901a\u77e5\u540e\uff0c\u672c\u7ebf\u7a0b\u88ab\u5524\u9192\uff0c\u4f46\u6709\u53ef\u80fd\u662f\u8d85\u65f6\u7b49\u5047\u5524\u9192\uff0c\u56e0\u6b64\u9700\u8981while\u68c0\u67e5\u6761\u4ef6\u662f\u5426\u6ee1\u8db3 while ( queue_ . size () >= capacity_ ) { // wait()\u89e3\u9501\u5e76\u5c06\u672c\u7ebf\u7a0b\u6302\u8d77\uff0cCPU\u4ea4\u7ed9\u5176\u5b83\u7ebf\u7a0b\u4f7f\u7528\uff0c\u7b49\u5f85\u5524\u9192 not_full_condition_ . wait ( lock ); } queue_ . push ( value ); } // \u79bb\u5f00\u6b64\u5927\u62ec\u53f7\uff0c\u8c03\u7528\u6790\u6784\u51fd\u6570\uff0c\u81ea\u52a8\u89e3\u9501 not_empty_condition_ . notify_one (); // \u901a\u77e5\u4e00\u4e2a\u5176\u5b83\u7ebf\u7a0b } \u7531\u4e8e lock_gurad \u4e0d\u80fd\u4e2d\u9014\u89e3\u9501\uff0c\u56e0\u6b64\u548c\u6761\u4ef6\u53d8\u91cf\uff08condition variable\uff09\u642d\u914d\u4f7f\u7528\u7684\u9501\u5fc5\u987b\u662f unique_lock \uff0c\u800c\u4e0d\u80fd\u662f lock_guard \u3002 \u6761\u4ef6\u53d8\u91cf\u88ab\u901a\u77e5\u540e\uff0c\u6302\u8d77\u7684\u7ebf\u7a0b\u4f1a\u88ab\u5524\u9192\uff0c\u4f46\u662f\u5524\u9192\u6709\u53ef\u80fd\u662f\u8d85\u65f6\u7b49\u5f02\u5e38\u60c5\u51b5\u5bfc\u81f4\u7684\u5047\u5524\u9192\uff0c\u56e0\u6b64\u88ab\u5524\u9192\u7684\u7ebf\u7a0b\u9700\u8981\u68c0\u67e5\u6761\u4ef6\u662f\u5426\u6ee1\u8db3\uff0c\u56e0\u6b64 wait() \u8981\u653e\u5230\u6761\u4ef6\u5faa\u73af\u4e2d\uff0c\u786e\u4fdd\u662f\u201c\u771f\u5524\u9192\u201d\u3002 C++11 \u5e76\u53d1\u6307\u5357\u7cfb\u5217 - Haippy - \u535a\u5ba2\u56ed C++11 \u5e76\u53d1\u6307\u5357\u4e09(std::mutex \u8be6\u89e3) - Haippy - \u535a\u5ba2\u56ed C++11 \u5e76\u53d1\u6307\u5357\u4e94(std::condition_variable \u8be6\u89e3) C++11\u591a\u7ebf\u7a0b\u7f16\u7a0b(\u4e09)\u2014\u2014lock_guard\u548cunique_lock - \u77e5\u4e4e \u5bf9\u6bd4\u4ecb\u7ecd\uff1a\u4e92\u65a5\u9501 vs \u81ea\u65cb\u9501 - \u77e5\u4e4e Mutex and Semaphore - \u77e5\u4e4e C++ \u591a\u7ebf\u7a0b (4) \u4e92\u65a5\u91cf\uff08mutex\uff09\u4e0e\u9501\uff08lock\uff09 - \u4e00\u62b9\u70df\u971e - \u535a\u5ba2\u56ed","title":"cpp\u5e76\u53d1\u7f16\u7a0b"},{"location":"develop/cpp/cpp%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/#cpp","text":"","title":"cpp\u5e76\u53d1\u7f16\u7a0b"},{"location":"develop/cpp/cpp%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/#_1","text":"\u5e76\u53d1\u7f16\u7a0b\u65f6\uff0c\u52a0\u9501\u7684\u76ee\u7684\u662f\u4fdd\u8bc1\u5171\u4eab\u8d44\u6e90\u5728\u4efb\u610f\u65f6\u95f4\u5185\uff0c\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u53ef\u4ee5\u8bbf\u95ee\uff0c\u907f\u514d\u6570\u636e\u5171\u4eab\u5bfc\u81f4\u7684\u9519\u4e71\u3002\u6700\u5e95\u5c42\u662f\u4e92\u65a5\u9501\u548c\u81ea\u65cb\u9501\uff0c\u5176\u5b83\u9ad8\u7ea7\u9501\u6bd4\u5982\u8bfb\u5199\u9501\u3001\u60b2\u89c2\u9501\u3001\u4e50\u89c2\u9501\u7b49\u90fd\u662f\u57fa\u4e8e\u5b83\u4eec\u5b9e\u73b0\u3002 \u5047\u5982\u4e00\u4e2a\u7ebf\u7a0b\u52a0\u9501\u6210\u529f\uff0c\u5176\u5b83\u7ebf\u7a0b\u8bd5\u56fe\u52a0\u9501\u5219\u4f1a\u5931\u8d25\uff0c\u5931\u8d25\u7ebf\u7a0b\u7684\u5904\u7406\u65b9\u5f0f\u5982\u4e0b\uff1a \u4e92\u65a5\u9501 \u52a0\u9501\u5931\u8d25\u540e\uff0c\u7ebf\u7a0b\u91ca\u653eCPU\uff0c\u7ed9\u5176\u5b83\u7ebf\u7a0b\u3002 \u81ea\u65cb\u9501 \u52a0\u9501\u5931\u8d25\u540e\uff0c\u7ebf\u7a0b\u4f1a\u5fd9\u7b49\u5f85\uff0c\u76f4\u5230\u62ff\u5230\u9501\u3002 \u56e0\u6b64\uff0c\u6301\u6709\u4e92\u65a5\u9501\u7684 \u5931\u8d25 \u7ebf\u7a0b\u4f1a\u9000\u51fa\uff0c\u7b49\u5f85\u9501\u91ca\u653e\u65f6\u81ea\u5df1\u88ab\u7cfb\u7edf\u5524\u9192\uff1b\u800c\u6301\u6709\u81ea\u65cb\u9501\u7684 \u5931\u8d25 \u7ebf\u7a0b\u4f1a\u201cwhile\u5faa\u73af\u201d\u53cd\u590d\u4e89\u593a\u8d44\u6e90\u3002\u4f46\u7531\u4e8e\u4e92\u65a5\u9501\u52a0\u9501\u5931\u8d25\u4f1a\u8fdb\u884c\u4e0a\u4e0b\u6587\u5207\u6362\uff0c\u4ece\u800c\u5f15\u5165\u4e00\u5b9a\u5f00\u9500\uff0c\u56e0\u6b64\u5982\u679c\u9501\u4f4f\u7684\u4ee3\u7801\u6267\u884c\u65f6\u95f4\u6bd4\u8f83\u77ed\uff0c\u7b49\u5f85\u5f00\u9500\u5c0f\u4e8e\u4e0a\u4e0b\u6587\u5207\u6362\u7684\u5f00\u9500\uff0c\u6b64\u65f6\u4e92\u65a5\u9501\u5c31\u6709\u4f18\u52bf\u3002","title":"\u4e92\u65a5\u9501\u548c\u81ea\u65cb\u9501"},{"location":"develop/cpp/cpp%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/#_2","text":"\u4e92\u65a5\u9501\u662f\u4e00\u79cd\u201c\u72ec\u5360\u9501\u201d\uff0c\u7ade\u4e89\u52a0\u9501\u5931\u8d25\u7684\u7ebf\u7a0b\u4f1a\u91ca\u653e\u6389CPU\uff0c\u81ea\u7136\u8be5\u7ebf\u7a0b\u52a0\u9501\u7684\u4ee3\u7801\u5c31\u4f1a\u88ab\u963b\u585e\u3002\u4e92\u65a5\u9501\u52a0\u9501\u5931\u8d25\u800c\u963b\u585e\u7684\u73b0\u8c61\u662f\u7531\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u5b9e\u73b0\u7684\uff0c\u5f53\u4e92\u65a5\u9501\u52a0\u9501\u5931\u8d25\uff0c\u5c31\u4f1a\u4ece\u7528\u6237\u6001\u8fdb\u5165\u5185\u6838\u6001\uff0c\u5185\u6838\u4f1a\u5207\u6362\u7ebf\u7a0b\uff0c\u6b64\u65f6\u4f1a\u6709\u4e24\u6b21\u7ebf\u7a0b\u4e0a\u4e0b\u6587\u5207\u6362\u7684\u6027\u80fd\u6210\u672c\uff1a \u5f53\u7ebf\u7a0b\u52a0\u9501\u5931\u8d25\u65f6\uff0c\u5185\u6838\u5c06\u7ebf\u7a0b\u4ece\u201c\u8fd0\u884c\u201d\u72b6\u6001\u8bbe\u7f6e\u4e3a\u201c\u7761\u7720\u201d\u72b6\u6001\uff0c\u7136\u540e\u5c06CPU\u5207\u6362\u7ed9\u5176\u5b83\u7ebf\u7a0b\u4f7f\u7528\u3002 \u5f53\u9501\u91ca\u653e\u65f6\uff0c\u4e4b\u524d\u201c\u7761\u7720\u201d\u72b6\u6001\u7684\u7ebf\u7a0b\u4f1a\u53d8\u4e3a\u201c\u5c31\u7eea\u201d\u72b6\u6001\uff0c\u7136\u540e\u5185\u6838\u4f1a\u5728\u5408\u9002\u7684\u65f6\u95f4\u5c06CPU\u5207\u6362\u7ed9\u8be5\u7ebf\u7a0b\u4f7f\u7528\u3002 \u5f53\u4e24\u4e2a\u7ebf\u7a0b\u540c\u5c5e\u4e8e\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u5728\u7ebf\u7a0b\u4e0a\u4e0b\u6587\u5207\u6362\u65f6\uff0c\u7531\u4e8e\u865a\u62df\u5185\u5b58\u662f\u5171\u4eab\u7684\uff0c\u56e0\u6b64\u4e0d\u9700\u8981\u53d8\u52a8\uff0c\u53ea\u9700\u8981\u5207\u6362\u7ebf\u7a0b\u7684\u79c1\u6709\u6570\u636e\u3001\u5bc4\u5b58\u5668\u7b49\u4e0d\u5171\u4eab\u7684\u6570\u636e\u3002 \u5728\u591a\u6838\u73af\u5883\u4e0b\uff0c\u6267\u884c test and set \u65e0\u6cd5\u786e\u4fdd\u64cd\u4f5c\u7684\u539f\u5b50\u6027\uff0c\u56e0\u6b64\u4e92\u65a5\u9501\u7684\u539f\u7406\u662f\u5bf9\u5185\u5b58\u603b\u7ebf\u8fdb\u884c\u52a0\u9501\u3002","title":"\u4e92\u65a5\u9501"},{"location":"develop/cpp/cpp%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/#_3","text":"\u81ea\u65cb\u9501\u4f1a\u4e00\u76f4\u81ea\u65cb\uff0c\u5229\u7528CPU\u5468\u671f\uff0c\u76f4\u5230\u9501\u53ef\u7528\u3002\u5728\u5355\u6838CPU\u4e0a\uff0c\u9700\u8981\u62a2\u5360\u5f0f\u7684\u8c03\u5ea6\u5668\uff0c\u5373\u901a\u8fc7\u65f6\u949f\u7ec8\u7aef\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u8fd0\u884c\u5176\u5b83\u7ebf\u7a0b\u3002\u5426\u5219\uff0c\u81ea\u65cb\u9501\u5728\u5355CPU\u4e0a\u65e0\u6cd5\u4f7f\u7528\uff0c\u56e0\u4e3a\u4e00\u4e2a\u81ea\u65cb\u7684\u7ebf\u7a0b\u6c38\u8fdc\u4e0d\u4f1a\u653e\u5f03CPU\u3002 \u5f53\u52a0\u9501\u5931\u8d25\u65f6\uff0c\u4e92\u65a5\u9501\u8fdb\u884c\u201c\u7ebf\u7a0b\u5207\u6362\u201d\uff0c\u81ea\u65cb\u9501\u8fdb\u884c\u201c\u5fd9\u7b49\u5f85\u201d\u3002 \u5fd9\u7b49\u5f85 \u53ef\u4ee5\u7528while\u5faa\u73af\u6765\u5b9e\u73b0\uff0c\u4f46\u6700\u597d\u4f7f\u7528CPU\u63d0\u4f9b\u7684 PAUSE \u6307\u4ee4\u6765\u5b9e\u73b0\u5fd9\u7b49\u5f85\u3002 \u5982\u679c\u88ab\u9501\u4f4f\u7684\u4ee3\u7801\u6267\u884c\u65f6\u95f4\u5f88\u77ed\uff0c\u90a3\u4e48\u201c\u5fd9\u7b49\u5f85\u201d\u65f6\u95f4\u76f8\u5e94\u4e5f\u5f88\u77ed\uff0c\u6b64\u65f6\u9002\u5408\u91c7\u7528\u81ea\u65cb\u9501\u3002\u4f46\u5b9e\u9645\u4f7f\u7528\u65f6\uff0c\u4e92\u65a5\u9501\u66f4\u4e3a\u666e\u904d\u3002\u4f46\u65e0\u8bba\u4f7f\u7528\u4f55\u79cd\u9501\uff0c\u52a0\u9501\u7684\u4ee3\u7801\u8303\u56f4\u5e94\u5c3d\u53ef\u80fd\u5c0f\uff0c\u4e5f\u5c31\u662f\u52a0\u9501\u7684\u7c92\u5ea6\u8981\u5c3d\u53ef\u80fd\u7ec6\uff0c\u4ee5\u52a0\u5feb\u6267\u884c\u901f\u5ea6\u3002","title":"\u81ea\u65cb\u9501"},{"location":"develop/cpp/cpp%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/#_4","text":"\u4e92\u65a5\u91cf\uff08mutex\uff09\u63d0\u4f9b\u4e86\u72ec\u5360\u6240\u6709\u6743\u7684\u6982\u5ff5\uff0c\u53ef\u4ee5\u63a7\u5236\u5bf9\u8d44\u6e90\u7684\u8bbf\u95ee\u3002\u4fe1\u53f7\u91cf\uff08semaphore\uff09\u5219\u662f\u4e00\u4e2a\u8ba1\u6570\u5668\uff0c\u9650\u5236\u4e86\u5e76\u53d1\u8bbf\u95ee\u540c\u4e00\u8d44\u6e90\u7684\u7ebf\u7a0b\u6570\u91cf\u3002 Standard C++ \u5728\u521b\u5efa\u4fe1\u53f7\u91cf\u65f6\uff0c\u8ba1\u6570\u5668\u7684\u503c\u603b\u662f\u57280\u548c\u6700\u5927\u503c\u4e4b\u95f4\uff0c\u5f53\u8ba1\u6570\u5668\u7684\u503c\u4e25\u683c\u5927\u4e8e0\u65f6\uff0c\u5bf9 Wait() \u7684\u8c03\u7528\u4f1a\u7acb\u523b\u8fd4\u56de\uff0c\u5e76\u5c06\u8ba1\u6570\u5668\u7684\u503c\u51cf\u4e00\uff1b\u5f53\u8ba1\u6570\u5668\u7684\u503c\u4e3a0\u65f6\uff0c\u5bf9 Wait() \u7684\u8c03\u7528\u4f1a\u963b\u585e\u3002\u5bf9\u4e8e\u963b\u585e\u7684\u4fe1\u53f7\u91cf\uff0c\u53ea\u6709 Signal() \u8c03\u7528\u540e\uff0c\u8ba1\u6570\u5668\u7684\u503c\u91cd\u65b0\u5927\u4e8e0\uff0c\u6b64\u65f6\u624d\u4f1a\u8fd4\u56de\u3002\u4fe1\u53f7\u91cf\u9002\u7528\u573a\u666f\u4e3a\uff1a\u540c\u4e00\u65f6\u523b\u53ea\u6709\u56fa\u5b9a\u6570\u91cf\u6d88\u8d39\u8005\u8bbf\u95ee\u5171\u4eab\u8d44\u6e90\uff0c\u6bd4\u5982\u4fe1\u53f7\u91cf\u53ef\u4ee5\u770b\u505a\u9152\u5e97\u4e2d\u53ef\u9884\u8ba2\u7684\u623f\u95f4\u6570\u91cf\uff0c\u623f\u95f4\u88ab\u9884\u5b9a\u8868\u793a\u4e00\u6b21\u5bf9\u4fe1\u53f7\u91cf Wait() \u7684\u8c03\u7528\uff0c\u9000\u623f\u8868\u793a\u5bf9 Signal() \u7684\u8c03\u7528\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #include <mutex> #include <condition_variable> // Simplest implementation class Semaphore { public : explicit Semaphore ( int count = 0 ) : count_ ( count ) {} // \u91ca\u653e\u4e00\u4e2a\u4fe1\u53f7\u91cf\uff0c\u8ba1\u6570\u5668\u52a0\u4e00 void Signal () { std :: unique_lock < std :: mutex > lock ( mutex_ ); ++ count_ ; cv_ . notify_one (); } // \u6d88\u8017\u4e00\u4e2a\u4fe1\u53f7\u91cf\uff0c\u8ba1\u6570\u5668\u51cf\u4e00 void Wait () { std :: unique_lock < std :: mutex > lock ( mutex_ ); cv_ . wait ( lock , [ = ] { return count_ > 0 ; }); -- count_ ; } private : std :: mutex mutex_ ; // \u4e92\u65a5\u91cf\uff0c\u8868\u793a\u72ec\u5360\u6240\u6709\u6743 std :: condition_variable cv_ ; // \u6761\u4ef6\u53d8\u91cf int count_ ; // \u4fe1\u53f7\u91cf\u7684\u8ba1\u6570\u5668 };","title":"\u4e92\u65a5\u9501\u7684\u57fa\u672c\u6982\u5ff5"},{"location":"develop/cpp/cpp%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/#mutex","text":"","title":"mutex"},{"location":"develop/cpp/cpp%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/#_5","text":"cpp\u4e2dmutex\u548c\u9501\u7c7b\u578b\u7684\u7c7b\u548c\u51fd\u6570\u90fd\u58f0\u660e\u5728 <mutex> \u5934\u6587\u4ef6\u4e2d\u3002","title":"\u5934\u6587\u4ef6"},{"location":"develop/cpp/cpp%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/#mutex_1","text":"std::mutex \uff1a\u6700\u57fa\u672c\u7684mutex\u7c7b\u3002 std::recursive_mutex \uff1a\u9012\u5f52mutex\u7c7b\uff0c\u5141\u8bb8\u540c\u4e00\u4e2a\u7ebf\u7a0b\u5bf9\u4e92\u65a5\u91cf\u591a\u6b21\u4e0a\u9501\uff08\u4e5f\u5373\u9012\u5f52\u4e0a\u9501\uff09\uff0c\u91ca\u653e\u4e92\u65a5\u91cf\u65f6\u4e5f\u9700\u8981\u8c03\u7528\u548c\u52a0\u9501\u6b21\u6570\u76f8\u540c\u7684 unlock() \u3002 std::time_mutex \uff1a\u5b9a\u65f6mutex\u7c7b\uff0c\u6210\u5458\u51fd\u6570 try_lock_for() \u63a5\u53d7\u4e00\u4e2a\u65f6\u95f4\u8303\u56f4\uff0c\u5982\u679c\u5728\u8be5\u65f6\u95f4\u8303\u56f4\u5185\u7ebf\u7a0b\u6ca1\u6709\u52a0\u9501\u6210\u529f\u5219\u963b\u585e\uff0c try_lock_until() \u63a5\u53d7\u4e00\u4e2a\u65f6\u95f4\u70b9\uff0c\u5982\u679c\u5728\u8be5\u65f6\u95f4\u70b9\u4e4b\u524d\u6ca1\u6709\u52a0\u9501\u6210\u529f\u5219\u963b\u585e\u3002 std::recursive_timed_mutex \uff1a\u5b9a\u65f6\u9012\u5f52mutex\u7c7b\u3002","title":"mutex\u7c7b\uff08\u56db\u79cd\uff09"},{"location":"develop/cpp/cpp%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/#lock","text":"std::lock_guard \uff1a\u63d0\u4f9b\u7ebf\u7a0b\u5bf9\u4e92\u65a5\u91cf\u81ea\u52a8\u52a0\u89e3\u9501\u7684\u529f\u80fd\u3002 std::unique_lock \uff1a\u63d0\u4f9b\u7ebf\u7a0b\u5bf9\u4e92\u65a5\u91cf\u81ea\u52a8\u52a0\u89e3\u9501\u7684\u529f\u80fd\uff0c\u5e76\u53ef\u4ee5\u4e2d\u9014\u89e3\u9501\u3002\u53ef\u914d\u5408\u6761\u4ef6\u53d8\u91cf condition_variable \u89e3\u51b3\u201c\u751f\u4ea7\u8005-\u6d88\u8d39\u8005\u201d\u95ee\u9898\u3002","title":"lock\u7c7b\uff08\u4e24\u79cd\uff09"},{"location":"develop/cpp/cpp%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/#_6","text":"std::lock \uff1a\u5bf9\u4e92\u65a5\u91cf\u52a0\u9501\uff0c\u52a0\u9501\u5931\u8d25\u5219\u672c\u7ebf\u7a0b\u963b\u585e\u3002 std::try_lock \uff1a\u5c1d\u8bd5\u5bf9\u4e92\u65a5\u91cf\u52a0\u9501\uff0c\u52a0\u9501\u5931\u8d25\u672c\u7ebf\u7a0b\u4e0d\u4f1a\u963b\u585e\u3002 std::call_once \uff1a\u591a\u4e2a\u7ebf\u7a0b\u540c\u65f6\u8c03\u7528\u67d0\u4e2a\u51fd\u6570\uff0c call_once() \u53ef\u4ee5\u786e\u4fdd\u591a\u4e2a\u7ebf\u7a0b\u53ea\u8c03\u7528\u8be5\u51fd\u6570\u4e00\u6b21\u3002","title":"\u51fd\u6570"},{"location":"develop/cpp/cpp%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/#_7","text":"std::mutex() \u4e0d\u5141\u8bb8\u62f7\u8d1d\u6784\u9020\uff0c\u4e5f\u4e0d\u5141\u8bb8move\u62f7\u8d1d\uff0c\u6700\u521d\u4ea7\u751f\u7684mutex\u5bf9\u8c61\u5904\u4e8e\u89e3\u9501\uff08unlock\uff09\u72b6\u6001\u3002","title":"\u6784\u9020\u51fd\u6570"},{"location":"develop/cpp/cpp%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/#_8","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #include <iostream> // std::cout #include <thread> // std::thread #include <mutex> // std::mutex volatile int counter ( 0 ); // non-atomic counter std :: mutex mtx ; // \u5b9a\u4e49\u4e92\u65a5\u91cf\uff0c\u8be5\u4e92\u65a5\u91cf\u63a7\u5236\u975e\u539f\u5b50\u8ba1\u6570\u5668counter\u7684\u81ea\u589e void attempt_10k_increases () { for ( int i = 0 ; i < 10000 ; ++ i ) { if ( mtx . try_lock ()) { // \u5c1d\u8bd5\u52a0\u9501\uff0c\u4e5f\u5373\u4ec5\u5728\u672a\u52a0\u9501\u72b6\u6001\u4e0b\u624d\u4f1a\u81ea\u589ecounter ++ counter ; mtx . unlock (); // \u89e3\u9501 } } } int main ( int argc , const char * argv []) { std :: thread threads [ 10 ]; for ( int i = 0 ; i < 10 ; ++ i ) threads [ i ] = std :: thread ( attempt_10k_increases ); for ( auto & th : threads ) th . join (); std :: cout << counter << \" successful increases of the counter. \\n \" ; return 0 ; }","title":"\u793a\u4f8b"},{"location":"develop/cpp/cpp%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/#lock_guardunique_lock","text":"\u4e3a\u4e86\u65b9\u4fbfmutex\u52a0\u89e3\u9501\uff0c\u907f\u514d\u52a0\u9501\u540e\u5fd8\u8bb0\u89e3\u9501\uff0ccpp\u5f15\u5165 lock_guard \u548c unique_lock \u5b9e\u73b0\u81ea\u52a8\u52a0\u9501\u4e0e\u89e3\u9501\u529f\u80fd\uff0c\u8fd9\u6709\u70b9\u7c7b\u4f3c\u4e8e\u666e\u901a\u6307\u9488\u548c\u667a\u80fd\u6307\u9488\u4e4b\u95f4\u7684\u5173\u7cfb\u3002","title":"lock_guard\u548cunique_lock"},{"location":"develop/cpp/cpp%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/#lock_guard","text":"lock_guard \u5728\u6784\u9020\u51fd\u6570\u65f6\u52a0\u9501\uff0c\u5728\u6790\u6784\u51fd\u6570\u65f6\u89e3\u9501\u3002\u6bd4\u5982\uff1a 1 2 3 4 5 6 mutable std :: mutex mutex_ ; // \u5b9a\u4e49\u4e92\u65a5\u91cf bool Empty () const { std :: lock_guard < std :: mutex > lock ( mutex_ ); // \u8c03\u7528lock_guard\u6784\u9020\u51fd\u6570\uff0c\u6b64\u65f6\u52a0\u9501 return queue_ . empty (); } // \u5927\u62ec\u53f7{}\u7ed3\u675f\uff0c\u79bb\u5f00\u4f5c\u7528\u57df\uff0c\u8c03\u7528lock_guard\u6790\u6784\u51fd\u6570\uff0c\u81ea\u52a8\u89e3\u9501 \u5728\u5b9e\u4f8b\u5316 lock_guard \u5bf9\u8c61\u65f6\u4f1a\u8c03\u7528\u6784\u9020\u51fd\u6570\u52a0\u9501\uff0c\u5728\u79bb\u5f00\u4f5c\u7528\u57df\u65f6 lock_guard \u4f1a\u88ab\u9500\u6bc1\uff0c\u81ea\u52a8\u89e3\u9501\uff0c\u4f46\u5982\u679c\u8fd9\u4e2a\u4f5c\u7528\u57df\u6bd4\u8f83\u5927\uff0c\u52a0\u9501\u7684\u4ee3\u7801\u8303\u56f4\u4f1a\u504f\u5927\uff0c\u4ece\u800c\u5f71\u54cd\u6267\u884c\u6548\u7387\u3002","title":"lock_guard"},{"location":"develop/cpp/cpp%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/#unique_lock","text":"unique_lock \u540c\u6837\u4f1a\u5728\u6784\u9020\u51fd\u6570\u65f6\u52a0\u9501\uff0c\u5728\u6790\u6784\u51fd\u6570\u65f6\u89e3\u9501\u3002\u4f46\u53ef\u4ee5\u5229\u7528 unique_lock.unlock() \u6765\u89e3\u9501\uff0c\u6216\u8005\u53ef\u4ee5\u914d\u5408\u201c\u6761\u4ef6\u53d8\u91cf\u201d\uff08condition variable\uff09\u7b49\u4f7f\u7528\uff0c\u5728\u6790\u6784\u65f6\u4f1a\u5224\u65ad\u5f53\u524d\u9501\u7684\u72b6\u6001\u4ee5\u51b3\u5b9a\u662f\u5426\u89e3\u9501\uff0c\u56e0\u6b64\u53ef\u4ee5\u65b9\u4fbf\u5730\u63a7\u5236\u9501\u7684\u7c92\u5ea6\u3002\u800c lock_guard \u5728\u6790\u6784\u65f6\u4e00\u5b9a\u4f1a\u89e3\u9501\uff0c\u4e5f\u6ca1\u6709\u4e2d\u9014\u89e3\u9501\u7684\u529f\u80fd\u3002 unique_lock \u5185\u90e8\u4f1a\u7ef4\u62a4\u4e00\u4e2a\u9501\u7684\u72b6\u6001\uff0c\u6240\u4ee5\u6548\u7387\u4f1a\u6bd4 lock_guard \u6162\u3002","title":"unique_lock"},{"location":"develop/cpp/cpp%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/#condition_variable","text":"\u6761\u4ef6\u53d8\u91cf\uff08condition variable\uff09\u7684\u4e00\u822c\u7528\u6cd5\u662f\uff1a\u7ebf\u7a0bA\u7b49\u5f85\u67d0\u4e2a\u6761\u4ef6\u5e76\u6302\u8d77\uff0c\u76f4\u5230\u7ebf\u7a0bB\u8bbe\u7f6e\u5e76\u901a\u77e5\u6761\u4ef6\u53d8\u91cf\uff0c\u7ebf\u7a0bA\u624d\u4f1a\u88ab\u5524\u9192\u3002\u6761\u4ef6\u53d8\u91cf\u53ef\u89e3\u51b3\u7ecf\u5178\u7684\u201c\u751f\u4ea7\u8005-\u6d88\u8d39\u8005\u201d\u95ee\u9898\u3002 \u7b49\u5f85\u7684\u7ebf\u7a0b\u53ef\u80fd\u6709\u591a\u4e2a\uff0c\u56e0\u6b64\u901a\u77e5\u7ebf\u7a0b\u53ef\u4ee5\u9009\u62e9\u4e00\u6b21\u901a\u77e5\u4e00\u4e2a condition_variable.notify_one() \uff0c\u8fd8\u662f\u4e00\u6b21\u901a\u77e5\u6240\u6709\u7b49\u5f85\u7ebf\u7a0b condition_variable.notify_all() \u3002\u6bd4\u5982\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 mutable std :: mutex mutex_ ; // \u5b9a\u4e49\u4e92\u65a5\u91cf void Push ( const T & value ) { { std :: unique_lock < std :: mutex > lock ( mutex_ ); // \u8c03\u7528\u6784\u9020\u51fd\u6570\uff0c\u6b64\u65f6\u52a0\u9501 // \u6761\u4ef6\u53d8\u91cf\u88ab\u901a\u77e5\u540e\uff0c\u672c\u7ebf\u7a0b\u88ab\u5524\u9192\uff0c\u4f46\u6709\u53ef\u80fd\u662f\u8d85\u65f6\u7b49\u5047\u5524\u9192\uff0c\u56e0\u6b64\u9700\u8981while\u68c0\u67e5\u6761\u4ef6\u662f\u5426\u6ee1\u8db3 while ( queue_ . size () >= capacity_ ) { // wait()\u89e3\u9501\u5e76\u5c06\u672c\u7ebf\u7a0b\u6302\u8d77\uff0cCPU\u4ea4\u7ed9\u5176\u5b83\u7ebf\u7a0b\u4f7f\u7528\uff0c\u7b49\u5f85\u5524\u9192 not_full_condition_ . wait ( lock ); } queue_ . push ( value ); } // \u79bb\u5f00\u6b64\u5927\u62ec\u53f7\uff0c\u8c03\u7528\u6790\u6784\u51fd\u6570\uff0c\u81ea\u52a8\u89e3\u9501 not_empty_condition_ . notify_one (); // \u901a\u77e5\u4e00\u4e2a\u5176\u5b83\u7ebf\u7a0b } \u7531\u4e8e lock_gurad \u4e0d\u80fd\u4e2d\u9014\u89e3\u9501\uff0c\u56e0\u6b64\u548c\u6761\u4ef6\u53d8\u91cf\uff08condition variable\uff09\u642d\u914d\u4f7f\u7528\u7684\u9501\u5fc5\u987b\u662f unique_lock \uff0c\u800c\u4e0d\u80fd\u662f lock_guard \u3002 \u6761\u4ef6\u53d8\u91cf\u88ab\u901a\u77e5\u540e\uff0c\u6302\u8d77\u7684\u7ebf\u7a0b\u4f1a\u88ab\u5524\u9192\uff0c\u4f46\u662f\u5524\u9192\u6709\u53ef\u80fd\u662f\u8d85\u65f6\u7b49\u5f02\u5e38\u60c5\u51b5\u5bfc\u81f4\u7684\u5047\u5524\u9192\uff0c\u56e0\u6b64\u88ab\u5524\u9192\u7684\u7ebf\u7a0b\u9700\u8981\u68c0\u67e5\u6761\u4ef6\u662f\u5426\u6ee1\u8db3\uff0c\u56e0\u6b64 wait() \u8981\u653e\u5230\u6761\u4ef6\u5faa\u73af\u4e2d\uff0c\u786e\u4fdd\u662f\u201c\u771f\u5524\u9192\u201d\u3002 C++11 \u5e76\u53d1\u6307\u5357\u7cfb\u5217 - Haippy - \u535a\u5ba2\u56ed C++11 \u5e76\u53d1\u6307\u5357\u4e09(std::mutex \u8be6\u89e3) - Haippy - \u535a\u5ba2\u56ed C++11 \u5e76\u53d1\u6307\u5357\u4e94(std::condition_variable \u8be6\u89e3) C++11\u591a\u7ebf\u7a0b\u7f16\u7a0b(\u4e09)\u2014\u2014lock_guard\u548cunique_lock - \u77e5\u4e4e \u5bf9\u6bd4\u4ecb\u7ecd\uff1a\u4e92\u65a5\u9501 vs \u81ea\u65cb\u9501 - \u77e5\u4e4e Mutex and Semaphore - \u77e5\u4e4e C++ \u591a\u7ebf\u7a0b (4) \u4e92\u65a5\u91cf\uff08mutex\uff09\u4e0e\u9501\uff08lock\uff09 - \u4e00\u62b9\u70df\u971e - \u535a\u5ba2\u56ed","title":"condition_variable"},{"location":"develop/cpp/cpp%E7%9A%84%E7%B1%BB%E8%AE%BF%E9%97%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6/","text":"cpp\u7684\u7c7b\u8bbf\u95ee\u4fee\u9970\u7b26 \u7c7b\u6210\u5458\u8bbf\u95ee\u4fee\u9970\u7b26 \u516c\u6709\u6210\u5458\u3002\u4f7f\u7528 public \u4fee\u9970\uff0c\u7c7b\u5185\u90e8\u53ef\u4ee5\u8bbf\u95ee\u7c7b\u4e2dpublic\u548cprotected\u6210\u5458\uff0c\u4f46\u662f\u7c7b\u5916\u53ea\u80fd\u901a\u8fc7\u7c7b\u5bf9\u8c61\u8bbf\u95ee\u7c7b\u7684public\u6210\u5458\u3002 \u53d7\u4fdd\u62a4\u6210\u5458\u3002\u4f7f\u7528 protected \u4fee\u9970\uff0c\u7c7b\u5916\u4e0d\u80fd\u901a\u8fc7\u7c7b\u5bf9\u8c61\u8bbf\u95ee\u7c7b\u7684\u6210\u5458\uff0c\u4f46\u53ef\u4ee5\u5728\u7c7b\u4e2d\u6dfb\u52a0\u516c\u6709\u6210\u5458\u51fd\u6570\u63a5\u53e3\u95f4\u63a5\u8bbf\u95ee\u7c7b\u4e2d\u7684protected\u6210\u5458\u3002 \u79c1\u6709\u6210\u5458\u3002\u4f7f\u7528 private \u4fee\u9970\uff0c\u548c protected \u76f8\u4f3c\uff0c\u4f46 protected \u6210\u5458\u5728\u6d3e\u751f\u7c7b\uff08\u4e5f\u5373\u5b50\u7c7b\uff09\u4e2d\u662f\u53ef\u8bbf\u95ee\u7684\u3002 \u4e00\u4e2a\u7c7b\u53ef\u4ee5\u6709\u591a\u4e2a public \u3001 protected \u6216 private \u4fee\u9970\uff0c\u7c7b\u7684\u9ed8\u8ba4\u8bbf\u95ee\u4fee\u9970\u7b26\u4e3a private \uff0c\u7ed3\u6784\u4f53\u7684\u9ed8\u8ba4\u8bbf\u95ee\u4fee\u9970\u7b26\u4e3a public \u3002 \u8bbe\u7f6e\u79c1\u6709\u6210\u5458\u7684\u673a\u5236\u53eb\u4f5c\u201c\u9690\u85cf\u201d\u3002\u201c\u9690\u85cf\u201d\u7684\u4e00\u4e2a\u76ee\u7684\u5c31\u662f\u5f3a\u5236\u5bf9\u6210\u5458\u53d8\u91cf\u7684\u8bbf\u95ee\u4e00\u5b9a\u8981\u901a\u8fc7\u6210\u5458\u51fd\u6570\u8fdb\u884c\u3002\u8fd9\u6837\u505a\u7684\u597d\u5904\u662f\uff0c\u5982\u679c\u4ee5\u540e\u4fee\u6539\u4e86\u6210\u5458\u53d8\u91cf\u7684\u7c7b\u578b\u7b49\u5c5e\u6027\uff0c\u53ea\u9700\u8981\u66f4\u6539\u6210\u5458\u51fd\u6570\u5373\u53ef\uff1b\u5426\u5219\uff0c\u6240\u6709\u76f4\u63a5\u8bbf\u95ee\u6210\u5458\u53d8\u91cf\u7684\u8bed\u53e5\u90fd\u9700\u8981\u4fee\u6539\u3002 \u793a\u4f8b 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 class SuperClass { private : double private_member_ ; protected : double protected_member_ ; public : double public_member_ ; void SetPrivateMember ( double val ); double GetPrivateMember (); }; void SuperClass::SetPrivateMember ( double val ) { private_member_ = val ; } double SuperClass::GetPrivateMember () { return private_member_ ; } class SubClass : SuperClass // SubClass\u662f\u6d3e\u751f\u7c7b { public : // \u57fa\u7c7b\u7684\u53d7\u4fdd\u62a4\u6210\u5458\u53ef\u4ee5\u5728\u6d3e\u751f\u7c7b\u4e2d\u8bbf\u95ee\uff0c\u8fd9\u662fprotected\u548cprivate\u7684\u4e3b\u8981\u533a\u522b void SetProtectedMember ( double val ); double GetProtected (); }; void SubClass::SetProtectedMember ( double val ) { protected_member_ = val ; } double SubClass::GetProtected () { return protected_member_ ; } int main () { SuperClass super_class ; // \u57fa\u7c7b SubClass sub_class ; // \u6d3e\u751f\u7c7b // \u7f16\u8bd1\u901a\u8fc7\uff0c\u516c\u6709\u6210\u5458\u53ef\u4ee5\u901a\u8fc7\u7c7b\u5bf9\u8c61\u8bbf\u95ee super_class . public_member_ = 10 ; // \u7f16\u8bd1\u5931\u8d25\uff0c\u79c1\u6709\u6210\u5458\u6216\u53d7\u4fdd\u62a4\u6210\u5458\u4e0d\u80fd\u901a\u8fc7\u7c7b\u5bf9\u8c61\u8bbf\u95ee super_class . private_member_ = 10 ; // \u7f16\u8bd1\u901a\u8fc7\uff0c\u79c1\u6709\u6210\u5458\u6216\u53d7\u4fdd\u62a4\u6210\u5458\u53ef\u4ee5\u901a\u8fc7\u516c\u6709\u51fd\u6570\u63a5\u53e3\u8bbf\u95ee super_class . SetPrivateMember ( 10 ); // \u7f16\u8bd1\u901a\u8fc7\uff0c\u53d7\u4fdd\u62a4\u6210\u5458\u548c\u79c1\u6709\u6210\u5458\u7684\u533a\u522b\u5728\u4e8e\uff0c\u53d7\u4fdd\u62a4\u6210\u5458\u53ef\u4ee5\u5728\u6d3e\u751f\u7c7b\u4e2d\u8bbf\u95ee sub_class . SetProtectedMember ( 10 ); return 0 ; } cpp\u7c7b\u7684\u7ee7\u627f\u63a7\u5236 \u6709 public \u3001 protected \u3001 private \u4e09\u79cd\u7ee7\u627f\u65b9\u5f0f\uff0c\u4e3b\u8981\u6539\u53d8\u57fa\u7c7b\u6210\u5458\u5728\u5b50\u7c7b\u4e2d\u7684\u8bbf\u95ee\u5c5e\u6027\u3002 public \u7ee7\u627f\uff1a\u57fa\u7c7b public \u6210\u5458\u3001 protected \u6210\u5458\u3001 private \u6210\u5458\u7684\u8bbf\u95ee\u5c5e\u6027\u5728\u6d3e\u751f\u7c7b\u4e2d\u5206\u522b\u53d8\u6210\uff1a public \u3001 protected \u3001 private \u3002 protected \u7ee7\u627f\uff1a\u57fa\u7c7b public \u6210\u5458\u3001 protected \u6210\u5458\u3001 private \u6210\u5458\u7684\u8bbf\u95ee\u5c5e\u6027\u5728\u6d3e\u751f\u7c7b\u4e2d\u5206\u522b\u53d8\u6210\uff1a protected \u3001 protected \u3001 private \u3002 private \u7ee7\u627f\uff1a\u57fa\u7c7b public \u6210\u5458\u3001 protected \u6210\u5458\u3001 private \u6210\u5458\u7684\u8bbf\u95ee\u5c5e\u6027\u5728\u6d3e\u751f\u7c7b\u4e2d\u5206\u522b\u53d8\u6210\uff1a private \u3001 private \u3001 private \u3002 C++ \u7c7b\u8bbf\u95ee\u4fee\u9970\u7b26 C++ public\u3001protected \u3001 private\u548cfriend\uff08\u6700\u901a\u4fd7\u6613\u61c2\uff09 CPP\u516c\u6709\u7ee7\u627f\u3001\u4fdd\u62a4\u7ee7\u627f\u4ee5\u53ca\u79c1\u6709\u7ee7\u627f","title":"cpp\u7684\u7c7b\u8bbf\u95ee\u4fee\u9970\u7b26"},{"location":"develop/cpp/cpp%E7%9A%84%E7%B1%BB%E8%AE%BF%E9%97%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6/#cpp","text":"","title":"cpp\u7684\u7c7b\u8bbf\u95ee\u4fee\u9970\u7b26"},{"location":"develop/cpp/cpp%E7%9A%84%E7%B1%BB%E8%AE%BF%E9%97%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6/#_1","text":"\u516c\u6709\u6210\u5458\u3002\u4f7f\u7528 public \u4fee\u9970\uff0c\u7c7b\u5185\u90e8\u53ef\u4ee5\u8bbf\u95ee\u7c7b\u4e2dpublic\u548cprotected\u6210\u5458\uff0c\u4f46\u662f\u7c7b\u5916\u53ea\u80fd\u901a\u8fc7\u7c7b\u5bf9\u8c61\u8bbf\u95ee\u7c7b\u7684public\u6210\u5458\u3002 \u53d7\u4fdd\u62a4\u6210\u5458\u3002\u4f7f\u7528 protected \u4fee\u9970\uff0c\u7c7b\u5916\u4e0d\u80fd\u901a\u8fc7\u7c7b\u5bf9\u8c61\u8bbf\u95ee\u7c7b\u7684\u6210\u5458\uff0c\u4f46\u53ef\u4ee5\u5728\u7c7b\u4e2d\u6dfb\u52a0\u516c\u6709\u6210\u5458\u51fd\u6570\u63a5\u53e3\u95f4\u63a5\u8bbf\u95ee\u7c7b\u4e2d\u7684protected\u6210\u5458\u3002 \u79c1\u6709\u6210\u5458\u3002\u4f7f\u7528 private \u4fee\u9970\uff0c\u548c protected \u76f8\u4f3c\uff0c\u4f46 protected \u6210\u5458\u5728\u6d3e\u751f\u7c7b\uff08\u4e5f\u5373\u5b50\u7c7b\uff09\u4e2d\u662f\u53ef\u8bbf\u95ee\u7684\u3002 \u4e00\u4e2a\u7c7b\u53ef\u4ee5\u6709\u591a\u4e2a public \u3001 protected \u6216 private \u4fee\u9970\uff0c\u7c7b\u7684\u9ed8\u8ba4\u8bbf\u95ee\u4fee\u9970\u7b26\u4e3a private \uff0c\u7ed3\u6784\u4f53\u7684\u9ed8\u8ba4\u8bbf\u95ee\u4fee\u9970\u7b26\u4e3a public \u3002 \u8bbe\u7f6e\u79c1\u6709\u6210\u5458\u7684\u673a\u5236\u53eb\u4f5c\u201c\u9690\u85cf\u201d\u3002\u201c\u9690\u85cf\u201d\u7684\u4e00\u4e2a\u76ee\u7684\u5c31\u662f\u5f3a\u5236\u5bf9\u6210\u5458\u53d8\u91cf\u7684\u8bbf\u95ee\u4e00\u5b9a\u8981\u901a\u8fc7\u6210\u5458\u51fd\u6570\u8fdb\u884c\u3002\u8fd9\u6837\u505a\u7684\u597d\u5904\u662f\uff0c\u5982\u679c\u4ee5\u540e\u4fee\u6539\u4e86\u6210\u5458\u53d8\u91cf\u7684\u7c7b\u578b\u7b49\u5c5e\u6027\uff0c\u53ea\u9700\u8981\u66f4\u6539\u6210\u5458\u51fd\u6570\u5373\u53ef\uff1b\u5426\u5219\uff0c\u6240\u6709\u76f4\u63a5\u8bbf\u95ee\u6210\u5458\u53d8\u91cf\u7684\u8bed\u53e5\u90fd\u9700\u8981\u4fee\u6539\u3002","title":"\u7c7b\u6210\u5458\u8bbf\u95ee\u4fee\u9970\u7b26"},{"location":"develop/cpp/cpp%E7%9A%84%E7%B1%BB%E8%AE%BF%E9%97%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6/#_2","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 class SuperClass { private : double private_member_ ; protected : double protected_member_ ; public : double public_member_ ; void SetPrivateMember ( double val ); double GetPrivateMember (); }; void SuperClass::SetPrivateMember ( double val ) { private_member_ = val ; } double SuperClass::GetPrivateMember () { return private_member_ ; } class SubClass : SuperClass // SubClass\u662f\u6d3e\u751f\u7c7b { public : // \u57fa\u7c7b\u7684\u53d7\u4fdd\u62a4\u6210\u5458\u53ef\u4ee5\u5728\u6d3e\u751f\u7c7b\u4e2d\u8bbf\u95ee\uff0c\u8fd9\u662fprotected\u548cprivate\u7684\u4e3b\u8981\u533a\u522b void SetProtectedMember ( double val ); double GetProtected (); }; void SubClass::SetProtectedMember ( double val ) { protected_member_ = val ; } double SubClass::GetProtected () { return protected_member_ ; } int main () { SuperClass super_class ; // \u57fa\u7c7b SubClass sub_class ; // \u6d3e\u751f\u7c7b // \u7f16\u8bd1\u901a\u8fc7\uff0c\u516c\u6709\u6210\u5458\u53ef\u4ee5\u901a\u8fc7\u7c7b\u5bf9\u8c61\u8bbf\u95ee super_class . public_member_ = 10 ; // \u7f16\u8bd1\u5931\u8d25\uff0c\u79c1\u6709\u6210\u5458\u6216\u53d7\u4fdd\u62a4\u6210\u5458\u4e0d\u80fd\u901a\u8fc7\u7c7b\u5bf9\u8c61\u8bbf\u95ee super_class . private_member_ = 10 ; // \u7f16\u8bd1\u901a\u8fc7\uff0c\u79c1\u6709\u6210\u5458\u6216\u53d7\u4fdd\u62a4\u6210\u5458\u53ef\u4ee5\u901a\u8fc7\u516c\u6709\u51fd\u6570\u63a5\u53e3\u8bbf\u95ee super_class . SetPrivateMember ( 10 ); // \u7f16\u8bd1\u901a\u8fc7\uff0c\u53d7\u4fdd\u62a4\u6210\u5458\u548c\u79c1\u6709\u6210\u5458\u7684\u533a\u522b\u5728\u4e8e\uff0c\u53d7\u4fdd\u62a4\u6210\u5458\u53ef\u4ee5\u5728\u6d3e\u751f\u7c7b\u4e2d\u8bbf\u95ee sub_class . SetProtectedMember ( 10 ); return 0 ; }","title":"\u793a\u4f8b"},{"location":"develop/cpp/cpp%E7%9A%84%E7%B1%BB%E8%AE%BF%E9%97%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6/#cpp_1","text":"\u6709 public \u3001 protected \u3001 private \u4e09\u79cd\u7ee7\u627f\u65b9\u5f0f\uff0c\u4e3b\u8981\u6539\u53d8\u57fa\u7c7b\u6210\u5458\u5728\u5b50\u7c7b\u4e2d\u7684\u8bbf\u95ee\u5c5e\u6027\u3002 public \u7ee7\u627f\uff1a\u57fa\u7c7b public \u6210\u5458\u3001 protected \u6210\u5458\u3001 private \u6210\u5458\u7684\u8bbf\u95ee\u5c5e\u6027\u5728\u6d3e\u751f\u7c7b\u4e2d\u5206\u522b\u53d8\u6210\uff1a public \u3001 protected \u3001 private \u3002 protected \u7ee7\u627f\uff1a\u57fa\u7c7b public \u6210\u5458\u3001 protected \u6210\u5458\u3001 private \u6210\u5458\u7684\u8bbf\u95ee\u5c5e\u6027\u5728\u6d3e\u751f\u7c7b\u4e2d\u5206\u522b\u53d8\u6210\uff1a protected \u3001 protected \u3001 private \u3002 private \u7ee7\u627f\uff1a\u57fa\u7c7b public \u6210\u5458\u3001 protected \u6210\u5458\u3001 private \u6210\u5458\u7684\u8bbf\u95ee\u5c5e\u6027\u5728\u6d3e\u751f\u7c7b\u4e2d\u5206\u522b\u53d8\u6210\uff1a private \u3001 private \u3001 private \u3002 C++ \u7c7b\u8bbf\u95ee\u4fee\u9970\u7b26 C++ public\u3001protected \u3001 private\u548cfriend\uff08\u6700\u901a\u4fd7\u6613\u61c2\uff09 CPP\u516c\u6709\u7ee7\u627f\u3001\u4fdd\u62a4\u7ee7\u627f\u4ee5\u53ca\u79c1\u6709\u7ee7\u627f","title":"cpp\u7c7b\u7684\u7ee7\u627f\u63a7\u5236"},{"location":"develop/cpp/cpp%E8%B0%83%E8%AF%95/","text":"cpp\u8c03\u8bd5\u6280\u5de7 \u7f16\u8bd1\u65f6\uff0c\u9700\u8981\u5e26\u4e0a -g \u53c2\u6570\uff1a 1 2 3 g++ -g test.c -o test // -g\u53ef\u914d\u5408-Og\u4f7f\u7528\uff0c-Og\u53ef\u63d0\u5347\u8c03\u8bd5\u7a0b\u5e8f\u7684\u6027\u80fd g++ -g -Og test.c -o test \u8fdb\u5165\u8c03\u8bd5\uff1a 1 gdb test.out \u53c2\u8003\u8d44\u6599 \u638c\u63e1gdb\u8c03\u8bd5\u4ece\u5165\u95e8\u5230\u8fdb\u9636\uff08\u4e00\uff09 \u638c\u63e1gdb\u8c03\u8bd5\u4ece\u5165\u95e8\u5230\u8fdb\u9636\uff08\u4e8c\uff09 gdb \u76f8\u5173\u547d\u4ee4 \u300a100\u4e2agdb\u5c0f\u6280\u5de7\u300b \u5728\u6587\u4ef6\u884c\u53f7\u4e0a\u6253\u65ad\u70b9 | 100\u4e2agdb\u5c0f\u6280\u5de7 GDB\u5e38\u7528\u547d\u4ee4 \u542f\u52a8\u8c03\u8bd5 run \u3002\u4e00\u76f4\u6267\u884c\u7a0b\u5e8f\uff0c\u76f4\u5230\u6267\u884c\u5230\u65ad\u70b9\u5904\u6216\u7ed3\u675f\u3002 start \u3002\u6267\u884c\u5230 main() \u51fd\u6570\u8d77\u59cb\u4f4d\u7f6e\u3002 \u65ad\u70b9 \u7f29\u5199 b - \u8ddf\u884c\u53f7\u3002 b <line_num> \u6216\u8005 b <file_path>:<line_name> \uff0c\u6bd4\u5982 b a/file.c:6 \u3002 - \u8ddf\u51fd\u6570\u540d\u3002 b <func_name> \u6216\u8005 b <file_path>:<func_name> \u3002 - \u6761\u4ef6\u65ad\u70b9\u3002 break <...> if condition \uff0c\u4e2d\u95f4 <...> \u8868\u793a\u4e0a\u8ff0\u547d\u4ee4\u3002\u6bd4\u5982 b <line_num> if <condition> \u3002 - \u67e5\u770b\u65ad\u70b9\u3002 info break \uff0c\u7f29\u5199 i b \u3002 - \u5220\u9664\u65ad\u70b9\u3002 - delete <break_num> \uff0c\u7f29\u5199 d <break_num> \u3002\u5176\u4e2d\uff0c <break_num> \u4e3a i b \u67e5\u8be2\u5230\u7684\u65ad\u70b9\u5e8f\u53f7\u3002 - clear <line_num> \u3002\u5176\u4e2d\uff0c <line_num> \u4e3a\u884c\u53f7\uff0c\u53ef\u4ee5\u4e3a line_num/file:line_num \u7b49\u5f62\u5f0f\u3002 \u5355\u6b65\u547d\u4ee4 next \uff0c\u7f29\u5199 n \u3002\u6267\u884c\u4e0b\u4e00\u53e5\uff0c\u8c03\u7528\u5176\u5b83\u51fd\u6570\u65f6\u4e0d\u8fdb\u5165\u3002 step \uff0c\u7f29\u5199 s \u3002\u6267\u884c\u4e0b\u4e00\u53e5\uff0c\u8c03\u7528\u5176\u5b83\u51fd\u6570\u65f6\u8fdb\u5165\uff0cstep into\u3002 continue \uff0c\u7f29\u5199 c \u3002\u505c\u6b62\u540e\uff0c\u7ee7\u7eed\u6267\u884c\uff0c\u76f4\u5230\u9047\u5230\u4e0b\u4e00\u4e2a\u65ad\u70b9\u6216\u6267\u884c\u7ed3\u675f\u3002 finish \uff0c\u7f29\u5199 f \u3002\u8df3\u51fa\u672c\u5c42\u51fd\u6570\uff0c\u4e5f\u5373\u4e00\u76f4\u6267\u884c\uff0c\u76f4\u81f3\u5f53\u524d\u51fd\u6570\u5b8c\u6210\uff0c\u6253\u5370\u5f53\u524d\u7684\u5806\u6808\u4fe1\u606f\u548c\u8fd4\u56de\u503c\u3002 util \uff0c\u7f29\u5199 u \u3002\u5faa\u73af\u4f53\u5185\u4e00\u76f4\u6267\u884c\uff0c\u76f4\u81f3\u9000\u51fa\u5faa\u73af\u4f53\u3002 stepi \u548c nexti \uff0c\u7f29\u5199 si \u548c ni \u3002\u673a\u5668\u6307\u4ee4\u7684\u5355\u6b65\u547d\u4ee4\u3002 \u67e5\u770b frame \uff0c\u7f29\u5199 f \u3002\u663e\u793a\u5f53\u524d\u6240\u5728\u7684\u884c\u53ca\u76f8\u5173\u4fe1\u606f\u3002 list \uff0c\u7f29\u5199 l \u3002\u663e\u793a\u5f53\u524d\u7a0b\u5e8f\u8fd0\u884c\u4f4d\u7f6e\u9644\u8fd1\u7684\u76f8\u5173\u4ee3\u7801\u3002 print \uff0c\u7f29\u5199 p \u3002 \u52a8\u6001\u6570\u7ec4\uff0c\u6bd4\u5982 1 int * array = ( int * ) malloc ( len * sizeof ( int )) \u67e5\u770b\u8be5\u52a8\u6001\u6570\u7ec4\u7684\u503c\uff1a p *array@len \u66f4\u591a\u53c2\u89c1\uff1a \u6253\u5370STL\u5bb9\u5668\u4e2d\u7684\u5185\u5bb9 gdb pretty print watch \uff0c\u7f29\u5199 w \u3002\u89c2\u5bdf\u7684\u53d8\u91cf\u5728\u53d8\u5316\u65f6\uff0c\u5c31\u505c\u6b62\u7a0b\u5e8f\u3002 \u5728macOS\u4e0a\u4f7f\u7528GDB https://zhuanlan.zhihu.com/p/68398728 \u5176\u5b83\u6280\u5de7 GDB\u8c03\u8bd5\u65f6\u4f20\u5165\u53ef\u6267\u884c\u6587\u4ef6\u7684\u53c2\u6570 \u4f7f\u7528 --args \u53c2\u6570\uff1a 1 gdb --args <executablename> <arg1> <arg2> <arg3> \u53c2\u89c1\uff1a How do I run a program with commandline arguments using GDB within a Bash script? \u6279\u91cf\u6740\u6b7b\u8fdb\u7a0b 1 ps aux | grep <\u8fdb\u7a0b\u7684\u5173\u952e\u5b57> | awk '{print $2}' | xargs kill -9 https://www.coder4.com/archives/1334 https://stackoverflow.com/questions/3510673/find-and-kill-a-process-in-one-line-using-bash-and-regex macOS\u8fdb\u5165GDB\u4e4b\u540e\u8fdb\u7a0b\u6302\u8d77 \u4f8b\u5982\uff1a 1 2 Starting program: /Users/fluzzlesnuff/Documents/C++/a.out [ New Thread 0x2a03 of process 2389 ] \u89e3\u51b3\u65b9\u6cd5\uff1a 1 sudo DevToolsSecurity -enable https://apple.stackexchange.com/questions/420492/gdb-hangs-after-new-thread-on-macos \u6216\u8005\uff0c\u5c06\u4e0b\u8ff0\u547d\u4ee4\u5199\u5165 ~/.gdbinit \uff1a 1 set startup-with-shell off \u5e76\u5728\u6267\u884c\u65f6\u6307\u5b9a\u8be5\u914d\u7f6e\u6587\u4ef6\uff1a 1 gdb -x ~/.gdbinit <program> macOS\u4e0a\u4f7f\u7528GDB\u53c2\u8003\u6587\u6863\uff1a \u5728macOS10.14\u4e0a\u4f7f\u7528GDB\u7684\u6559\u7a0b Setup gdb on macOS in 2020","title":"cpp\u8c03\u8bd5\u6280\u5de7"},{"location":"develop/cpp/cpp%E8%B0%83%E8%AF%95/#cpp","text":"\u7f16\u8bd1\u65f6\uff0c\u9700\u8981\u5e26\u4e0a -g \u53c2\u6570\uff1a 1 2 3 g++ -g test.c -o test // -g\u53ef\u914d\u5408-Og\u4f7f\u7528\uff0c-Og\u53ef\u63d0\u5347\u8c03\u8bd5\u7a0b\u5e8f\u7684\u6027\u80fd g++ -g -Og test.c -o test \u8fdb\u5165\u8c03\u8bd5\uff1a 1 gdb test.out","title":"cpp\u8c03\u8bd5\u6280\u5de7"},{"location":"develop/cpp/cpp%E8%B0%83%E8%AF%95/#_1","text":"\u638c\u63e1gdb\u8c03\u8bd5\u4ece\u5165\u95e8\u5230\u8fdb\u9636\uff08\u4e00\uff09 \u638c\u63e1gdb\u8c03\u8bd5\u4ece\u5165\u95e8\u5230\u8fdb\u9636\uff08\u4e8c\uff09 gdb \u76f8\u5173\u547d\u4ee4 \u300a100\u4e2agdb\u5c0f\u6280\u5de7\u300b \u5728\u6587\u4ef6\u884c\u53f7\u4e0a\u6253\u65ad\u70b9 | 100\u4e2agdb\u5c0f\u6280\u5de7","title":"\u53c2\u8003\u8d44\u6599"},{"location":"develop/cpp/cpp%E8%B0%83%E8%AF%95/#gdb","text":"","title":"GDB\u5e38\u7528\u547d\u4ee4"},{"location":"develop/cpp/cpp%E8%B0%83%E8%AF%95/#_2","text":"run \u3002\u4e00\u76f4\u6267\u884c\u7a0b\u5e8f\uff0c\u76f4\u5230\u6267\u884c\u5230\u65ad\u70b9\u5904\u6216\u7ed3\u675f\u3002 start \u3002\u6267\u884c\u5230 main() \u51fd\u6570\u8d77\u59cb\u4f4d\u7f6e\u3002","title":"\u542f\u52a8\u8c03\u8bd5"},{"location":"develop/cpp/cpp%E8%B0%83%E8%AF%95/#_3","text":"\u7f29\u5199 b - \u8ddf\u884c\u53f7\u3002 b <line_num> \u6216\u8005 b <file_path>:<line_name> \uff0c\u6bd4\u5982 b a/file.c:6 \u3002 - \u8ddf\u51fd\u6570\u540d\u3002 b <func_name> \u6216\u8005 b <file_path>:<func_name> \u3002 - \u6761\u4ef6\u65ad\u70b9\u3002 break <...> if condition \uff0c\u4e2d\u95f4 <...> \u8868\u793a\u4e0a\u8ff0\u547d\u4ee4\u3002\u6bd4\u5982 b <line_num> if <condition> \u3002 - \u67e5\u770b\u65ad\u70b9\u3002 info break \uff0c\u7f29\u5199 i b \u3002 - \u5220\u9664\u65ad\u70b9\u3002 - delete <break_num> \uff0c\u7f29\u5199 d <break_num> \u3002\u5176\u4e2d\uff0c <break_num> \u4e3a i b \u67e5\u8be2\u5230\u7684\u65ad\u70b9\u5e8f\u53f7\u3002 - clear <line_num> \u3002\u5176\u4e2d\uff0c <line_num> \u4e3a\u884c\u53f7\uff0c\u53ef\u4ee5\u4e3a line_num/file:line_num \u7b49\u5f62\u5f0f\u3002","title":"\u65ad\u70b9"},{"location":"develop/cpp/cpp%E8%B0%83%E8%AF%95/#_4","text":"next \uff0c\u7f29\u5199 n \u3002\u6267\u884c\u4e0b\u4e00\u53e5\uff0c\u8c03\u7528\u5176\u5b83\u51fd\u6570\u65f6\u4e0d\u8fdb\u5165\u3002 step \uff0c\u7f29\u5199 s \u3002\u6267\u884c\u4e0b\u4e00\u53e5\uff0c\u8c03\u7528\u5176\u5b83\u51fd\u6570\u65f6\u8fdb\u5165\uff0cstep into\u3002 continue \uff0c\u7f29\u5199 c \u3002\u505c\u6b62\u540e\uff0c\u7ee7\u7eed\u6267\u884c\uff0c\u76f4\u5230\u9047\u5230\u4e0b\u4e00\u4e2a\u65ad\u70b9\u6216\u6267\u884c\u7ed3\u675f\u3002 finish \uff0c\u7f29\u5199 f \u3002\u8df3\u51fa\u672c\u5c42\u51fd\u6570\uff0c\u4e5f\u5373\u4e00\u76f4\u6267\u884c\uff0c\u76f4\u81f3\u5f53\u524d\u51fd\u6570\u5b8c\u6210\uff0c\u6253\u5370\u5f53\u524d\u7684\u5806\u6808\u4fe1\u606f\u548c\u8fd4\u56de\u503c\u3002 util \uff0c\u7f29\u5199 u \u3002\u5faa\u73af\u4f53\u5185\u4e00\u76f4\u6267\u884c\uff0c\u76f4\u81f3\u9000\u51fa\u5faa\u73af\u4f53\u3002 stepi \u548c nexti \uff0c\u7f29\u5199 si \u548c ni \u3002\u673a\u5668\u6307\u4ee4\u7684\u5355\u6b65\u547d\u4ee4\u3002","title":"\u5355\u6b65\u547d\u4ee4"},{"location":"develop/cpp/cpp%E8%B0%83%E8%AF%95/#_5","text":"frame \uff0c\u7f29\u5199 f \u3002\u663e\u793a\u5f53\u524d\u6240\u5728\u7684\u884c\u53ca\u76f8\u5173\u4fe1\u606f\u3002 list \uff0c\u7f29\u5199 l \u3002\u663e\u793a\u5f53\u524d\u7a0b\u5e8f\u8fd0\u884c\u4f4d\u7f6e\u9644\u8fd1\u7684\u76f8\u5173\u4ee3\u7801\u3002 print \uff0c\u7f29\u5199 p \u3002 \u52a8\u6001\u6570\u7ec4\uff0c\u6bd4\u5982 1 int * array = ( int * ) malloc ( len * sizeof ( int )) \u67e5\u770b\u8be5\u52a8\u6001\u6570\u7ec4\u7684\u503c\uff1a p *array@len \u66f4\u591a\u53c2\u89c1\uff1a \u6253\u5370STL\u5bb9\u5668\u4e2d\u7684\u5185\u5bb9 gdb pretty print watch \uff0c\u7f29\u5199 w \u3002\u89c2\u5bdf\u7684\u53d8\u91cf\u5728\u53d8\u5316\u65f6\uff0c\u5c31\u505c\u6b62\u7a0b\u5e8f\u3002","title":"\u67e5\u770b"},{"location":"develop/cpp/cpp%E8%B0%83%E8%AF%95/#macosgdb","text":"https://zhuanlan.zhihu.com/p/68398728","title":"\u5728macOS\u4e0a\u4f7f\u7528GDB"},{"location":"develop/cpp/cpp%E8%B0%83%E8%AF%95/#_6","text":"","title":"\u5176\u5b83\u6280\u5de7"},{"location":"develop/cpp/cpp%E8%B0%83%E8%AF%95/#gdb_1","text":"\u4f7f\u7528 --args \u53c2\u6570\uff1a 1 gdb --args <executablename> <arg1> <arg2> <arg3> \u53c2\u89c1\uff1a How do I run a program with commandline arguments using GDB within a Bash script?","title":"GDB\u8c03\u8bd5\u65f6\u4f20\u5165\u53ef\u6267\u884c\u6587\u4ef6\u7684\u53c2\u6570"},{"location":"develop/cpp/cpp%E8%B0%83%E8%AF%95/#_7","text":"1 ps aux | grep <\u8fdb\u7a0b\u7684\u5173\u952e\u5b57> | awk '{print $2}' | xargs kill -9 https://www.coder4.com/archives/1334 https://stackoverflow.com/questions/3510673/find-and-kill-a-process-in-one-line-using-bash-and-regex","title":"\u6279\u91cf\u6740\u6b7b\u8fdb\u7a0b"},{"location":"develop/cpp/cpp%E8%B0%83%E8%AF%95/#macosgdb_1","text":"\u4f8b\u5982\uff1a 1 2 Starting program: /Users/fluzzlesnuff/Documents/C++/a.out [ New Thread 0x2a03 of process 2389 ] \u89e3\u51b3\u65b9\u6cd5\uff1a 1 sudo DevToolsSecurity -enable https://apple.stackexchange.com/questions/420492/gdb-hangs-after-new-thread-on-macos \u6216\u8005\uff0c\u5c06\u4e0b\u8ff0\u547d\u4ee4\u5199\u5165 ~/.gdbinit \uff1a 1 set startup-with-shell off \u5e76\u5728\u6267\u884c\u65f6\u6307\u5b9a\u8be5\u914d\u7f6e\u6587\u4ef6\uff1a 1 gdb -x ~/.gdbinit <program> macOS\u4e0a\u4f7f\u7528GDB\u53c2\u8003\u6587\u6863\uff1a \u5728macOS10.14\u4e0a\u4f7f\u7528GDB\u7684\u6559\u7a0b Setup gdb on macOS in 2020","title":"macOS\u8fdb\u5165GDB\u4e4b\u540e\u8fdb\u7a0b\u6302\u8d77"},{"location":"develop/cpp/c%E5%8F%8Acpp%E7%9A%84%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/","text":"c\u53cacpp\u7684\u6587\u4ef6\u8bfb\u5199 c\u98ce\u683c\u6587\u4ef6\u8bfb\u5199 1 2 3 4 5 #include <stdio.h> FILE * fp = fopen ( < filename > , \"rb\" ); fread ( < buffer > , 8 , sizeof ( char ), fp ); fclose ( fp ); \u5934\u6587\u4ef6 c\u98ce\u683c\u8bfb\u5199\u6587\u4ef6\u6807\u51c6\u5e93\u5305\u542b\u4e8e\u5934\u6587\u4ef6 <stdio.h> \u6216 <cstdio> \uff08cpp\uff09\u3002 \u6253\u5f00\u6587\u4ef6 \u4f7f\u7528 fopen() \u65b0\u5efa\u6216\u6253\u5f00\u6587\u4ef6\uff0c fopen() \u4f1a\u8fd4\u56de FILE \u5bf9\u8c61\uff1a 1 FILE * fopen ( const char * filename , const char * mode ); \u5176\u4e2d\uff0c\u53c2\u6570 mode \u7684\u53ef\u9009\u503c\u5982\u4e0b\uff1a mode \u63cf\u8ff0 r \u6253\u5f00\u5df2\u6709\u7684\u6587\u672c\u6587\u4ef6\uff0c\u5141\u8bb8\u8bfb\u5199 w \u6253\u5f00\u6587\u672c\u6587\u4ef6\uff0c\u5141\u8bb8\u5199\u5165\uff0c\u5982\u679c\u6587\u4ef6\u4e0d\u5b58\u5728\u5219\u65b0\u5efa\uff0c\u5982\u679c\u6587\u4ef6\u5b58\u5728\u5219\u8986\u76d6 a \u6253\u5f00\u6587\u672c\u6587\u672c\uff0c\u8ffd\u52a0\u5199\u5165\uff0c\u5982\u679c\u6587\u4ef6\u4e0d\u5b58\u5728\u5219\u65b0\u5efa r+ \u6253\u5f00\u6587\u672c\u6587\u4ef6\uff0c\u5141\u8bb8\u8bfb\u5199 w+ \u6253\u5f00\u6587\u672c\u6587\u672c\uff0c\u5141\u8bb8\u8bfb\u5199\uff0c\u5982\u679c\u6587\u4ef6\u4e0d\u5b58\u5728\u5219\u65b0\u5efa\uff0c\u5982\u679c\u6587\u4ef6\u5b58\u5728\u5219\u8986\u76d6 a+ \u6253\u5f00\u6587\u672c\u6587\u672c\uff0c\u8ffd\u52a0\u5199\u5165\uff0c\u5982\u679c\u6587\u4ef6\u4e0d\u5b58\u5728\u5219\u65b0\u5efa\uff0c\u4ece\u5934\u8bfb\u53d6\uff0c\u8ffd\u52a0\u5199\u5165 \u5bf9\u5e94\u7684\u4e8c\u8fdb\u5236\u6a21\u5f0f mode \u4e3a\uff1a rb/wb/ab/rb+/wb+/ab+/r+b/w+b/a+b \u3002 \u8bfb\u53d6\u6587\u4ef6 \u4e8c\u8fdb\u5236\u8bfb\u53d6 1 size_t fread ( void * buffer , size_t size_of_elements , size_t number_of_elements , FILE * fp ); buffer \uff1a\u5b58\u653e\u6587\u4ef6\u8bfb\u53d6\u6570\u636e\u7684\u8d77\u59cb\u5730\u5740\u3002 size_of_elements \uff1a\u6bcf\u4e2a\u6570\u636e\u5757\u7684\u5b57\u8282\u6570\u3002 number_of_elements \uff1a\u6570\u636e\u5757\u7684\u4e2a\u6570\u3002 fp \uff1a\u6587\u4ef6\u6307\u9488\u3002 \u4ece fp \u6307\u5411\u7684\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6570\u636e\u5757\uff0c\u8bfb\u53d6\u7684\u603b\u5b57\u8282\u6570\u4e3a size_of_elements*number_of_elements \uff0c\u8bfb\u53d6\u51fa\u6765\u7684\u6570\u636e\u5b58\u653e\u5230 buffer \u4e3a\u8d77\u59cb\u5730\u5740\u7684\u5185\u5b58\u4e2d\uff0c\u5982\u679c\u6587\u4ef6\u7ed3\u675f\u6216\u53d1\u751f\u9519\u8bef\uff0c\u8fd4\u56de\u503c\u4e3a0\u3002 \u5b57\u7b26\u4e32\u8bfb\u53d6 1 char * fgets ( char * buffer , int n , FILE * fp ); buffer \uff1a\u5b57\u7b26\u6570\u7ec4\u6307\u9488\uff0c\u8be5\u6570\u7ec4\u5b58\u50a8\u8bfb\u53d6\u7684\u5b57\u7b26\u4e32\u3002 n \uff1a\u8981\u8bfb\u53d6\u7684\u6700\u5927\u5b57\u7b26\u6570\uff0c\u5305\u62ec\u6700\u540e\u7684\u7a7a\u5b57\u7b26\uff0c\u901a\u5e38\u662f buffer \u6570\u7ec4\u957f\u5ea6\u3002 fp \uff1a\u6587\u4ef6\u6307\u9488\u3002 \u5982\u679c\u6210\u529f\uff0c\u8be5\u51fd\u6570\u8fd4\u56de buffer \u6307\u9488\uff1b\u5982\u679c\u9519\u8bef\uff0c\u8fd4\u56de\u7a7a\u6307\u9488\u3002 1 int fscanf ( FILE * fp , const char * format , ...); fp \uff1a\u6587\u4ef6\u6307\u9488\u3002 format \uff1ac\u5b57\u7b26\u4e32\uff0c\u6bd4\u5982 %c/%s/%d/%u/%o/%x \uff08\u5b57\u7b26/\u5b57\u7b26\u4e32/\u5341\u8fdb\u5236\u6570/\u65e0\u7b26\u53f7\u5341\u8fdb\u5236\u6570/\u516b\u8fdb\u5236\u6570/\u5341\u516d\u8fdb\u5236\u6570\uff09\u3002 \u8be5\u51fd\u6570\u7c7b\u4f3c\u4e8e scanf() \uff0c\u9700\u8981\u63d0\u4f9b\u8bfb\u53d6\u6570\u636e\u7684\u7c7b\u578b\u548c\u683c\u5f0f\uff1a 1 2 3 4 5 6 7 8 9 10 11 char str1 [ 10 ], str2 [ 10 ], str3 [ 10 ]; int year ; FILE * fp ; fp = fopen ( \"file.txt\" , \"w+\" ); fputs ( \"We are in 2014\" , fp ); rewind ( fp ); // \u5c06fp\u6307\u9488\u79fb\u52a8\u5230\u6587\u4ef6\u5f00\u5934 fscanf ( fp , \"%s %s %s %d\" , str1 , str2 , str3 , & year ); fclose ( fp ); \u5b57\u7b26\u8bfb\u53d6 1 int fgetc ( FILE * fp ); fgetc() \u51fd\u6570\u4ece fp \u6307\u5411\u7684\u6587\u4ef6\u4e2d\u8bfb\u53d6\u4e00\u4e2a\u5b57\u7b26\uff0c\u8fd4\u56de\u503c\u4e3a\u8bfb\u53d6\u7684\u5b57\u7b26\uff0c\u5982\u679c\u53d1\u751f\u9519\u8bef\u5219\u8fd4\u56de EOF \u3002 \u5199\u5165\u6587\u4ef6 1 size_t fwrite ( const void * buffer , size_t size_of_elements , size_t number_of_elements , FILE * fp ); buffer \uff1a\u5f85\u5199\u5165\u6570\u636e\u7684\u8d77\u59cb\u5730\u5740\u3002 size_of_elements \uff1a\u6bcf\u4e2a\u6570\u636e\u5757\u7684\u5b57\u8282\u6570\u3002 number_of_elements \uff1a\u6570\u636e\u5757\u7684\u4e2a\u6570\u3002 fp \uff1a\u6587\u4ef6\u6307\u9488\u3002 \u5982\u679c\u6267\u884c\u6210\u529f\uff0c\u8fd4\u56de\u5199\u5165\u7684\u6570\u636e\u5757\u4e2a\u6570\u3002 \u7c7b\u4f3c\u4e8e\u8bfb\u53d6\u6587\u4ef6\uff0c\u5199\u5165\u6587\u4ef6\u540c\u6837\u6709\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u8bfb\u53d6\u548c\u5b57\u7b26\u8bfb\u53d6\u7248\u672c\uff1a 1 2 3 4 5 6 // \u5199\u5165\u5b57\u7b26\u4e32\uff0c\u5c06\u5b57\u7b26\u4e32buffer\u5199\u5165fp\u6307\u5411\u7684\u6587\u4ef6\u4e2d int fputs ( const char * buffer , FILE * fp ); // \u5199\u5165\u5b57\u7b26\u4e32\uff0c\u7c7b\u4f3c\u4e8efscanf\uff0c\u9700\u8981\u6307\u5b9a\u5199\u5165\u683c\u5f0f int fprintf ( FILE * fp , const char * format , ...); // \u5199\u5165\u5b57\u7b26\uff0c\u5c06\u5b57\u7b26c\u5199\u5165fp\u6307\u5411\u7684\u6587\u4ef6\u4e2d int fputc ( int c , FILE * fp ); \u5173\u95ed\u6587\u4ef6 \u79fb\u52a8\u6587\u4ef6\u4f4d\u7f6e\u6307\u9488 rewind() \u7528\u6765\u5c06\u6587\u4ef6\u6307\u9488\u79fb\u52a8\u5230\u6587\u4ef6\u5f00\u5934\uff0c\u539f\u578b\u4e3a\uff1a 1 void rewind ( FILE * fp ); fseek() \u7528\u6765\u5c06\u6587\u4ef6\u6307\u9488\u79fb\u52a8\u5230\u4efb\u610f\u4f4d\u7f6e\uff0c\u539f\u578b\u4e3a\uff1a 1 int fseek ( FILE * fp , long offset , int origin ); fp \uff1a\u5f85\u79fb\u52a8\u7684\u6587\u4ef6\u6307\u9488\u3002 offset \uff1a\u504f\u79fb\u91cf\uff0c\u8981\u79fb\u52a8\u7684\u5b57\u8282\u6570\u3002 origin \uff1a\u8d77\u59cb\u4f4d\u7f6e\uff0c\u6587\u4ef6\u5f00\u5934\u3001\u5f53\u524d\u4f4d\u7f6e\u548c\u6587\u4ef6\u672b\u5c3e\uff1a \u5e38\u91cf\u540d \u542b\u4e49 \u5e38\u91cf\u503c SEEK_SET \u6587\u4ef6\u5f00\u5934 0 SEEK_CUR \u5f53\u524d\u4f4d\u7f6e 1 SEEK_END \u6587\u4ef6\u672b\u5c3e 2 cpp\u6587\u4ef6\u6d41\u548c\u8bfb\u5199\u6587\u4ef6 \u5934\u6587\u4ef6 cpp\u98ce\u683c\u8bfb\u5199\u6587\u4ef6\u6807\u51c6\u5e93\u5305\u542b\u4e8e\u5934\u6587\u4ef6 <fstream> \u3002cpp\u6807\u51c6\u5e93\u4e2d\u6709\u4e09\u4e2a\u7c7b\u53ef\u4ee5\u7528\u4e8e\u6587\u4ef6\u64cd\u4f5c\uff0c\u7edf\u79f0\u4e3a\u6587\u4ef6\u6d41\u7c7b\uff0c\u8fd9\u4e09\u4e2a\u7c7b\u5206\u522b\u662f\uff1a ifstream \uff1a\u7528\u4e8e\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6570\u636e\u3002 ofstream \uff1a\u7528\u4e8e\u5411\u6587\u4ef6\u4e2d\u5199\u5165\u6570\u636e\u3002 fstream \uff1a\u65e2\u53ef\u7528\u4e8e\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6570\u636e\uff0c\u53c8\u53ef\u7528\u4e8e\u5411\u6587\u4ef6\u4e2d\u5199\u5165\u6570\u636e\u3002 cpp\u8bfb\u5199\u6587\u4ef6\u793a\u4f8b 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 #include <iostream> #include <fstream> using namespace std ; int main () { string line ; // ##\u6587\u4ef6\u8bfb\u5199\u793a\u4f8b1## // \u6253\u5f00\u6587\u4ef6\uff0c\u5e76\u5c06test.txt\u6587\u4ef6\u4e0e\u8f93\u51fa\u6587\u4ef6\u6d41\u5bf9\u8c61fout\u5173\u8054 ofstream fout ( \"D:/test.txt\" , ios :: out | ios :: trunc ); // << \u8f93\u51fa fout << \"hello fstream\" ; // \u5173\u95ed\u6587\u4ef6\uff0c\u5207\u65ad\u548c\u6587\u4ef6\u6d41\u5bf9\u8c61\u7684\u5173\u8054 fout . close (); // \u6253\u5f00\u6587\u4ef6\uff0c\u5e76\u5c06test.txt\u6587\u4ef6\u4e0e\u8f93\u5165\u6587\u4ef6\u6d41\u5bf9\u8c61fin\u5173\u8054 ifstream fin ( \"D:/test.txt\" , ios :: in ); // >> \u8f93\u5165 while ( fin >> line ) { cout << line << endl ; } fin . close (); // ##\u6587\u4ef6\u8bfb\u5199\u793a\u4f8b2## const char * text = \"hello world\" ; // \u521b\u5efa\u4e00\u4e2afstream\u7c7b\u5bf9\u8c61 fstream fs ; // \u5c06test.txt\u6587\u4ef6\u548cfs\u6587\u4ef6\u6d41\u5173\u8054 fs . open ( \"E:/test.txt\" , ios :: out ); // \u5411test.txt\u6587\u4ef6\u4e2d\u5199\u5165\u5b57\u7b26\u4e32 fs . write ( text , 12 ); // \u5173\u95ed\u6587\u4ef6\uff0c\u5207\u65ad\u548c\u6587\u4ef6\u6d41\u5bf9\u8c61\u7684\u5173\u8054 fs . close (); return 0 ; } fstream\u5e38\u7528\u6210\u5458\u65b9\u6cd5 \u6253\u5f00\u6a21\u5f0f \u79fb\u52a8\u6587\u4ef6\u8bfb\u5199\u6307\u9488 ifstream \u7c7b\u548c fstream \u7c7b\u6709 seekg() \u6210\u5458\u51fd\u6570\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u6587\u4ef6\u8bfb\u6307\u9488\u7684\u4f4d\u7f6e\u3002 ofstream \u7c7b\u548c fstream \u7c7b\u6709 seekp \u6210\u5458\u51fd\u6570\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u6587\u4ef6\u5199\u6307\u9488\u7684\u4f4d\u7f6e\u3002 \u51fd\u6570\u539f\u578b\u5982\u4e0b\uff1a 1 2 ostream & seekp ( int offset , int mode ); istream & seekg ( int offset , int mode ); \u5176\u4e2d\uff0c mode \u6307\u5b9a\u79fb\u52a8\u6307\u9488\u7684\u8d77\u59cb\u4f4d\u7f6e\uff0c\u53ef\u9009\u9879\u4e3a\u6587\u4ef6\u5f00\u5934 ios::beg \u3001\u6587\u4ef6\u5f53\u524d\u4f4d\u7f6e ios::cur \u548c\u6587\u4ef6\u672b\u5c3e ios::end \uff0c\u5f53 mode \u8bbe\u7f6e\u4e3a\u6587\u4ef6\u672b\u5c3e\u65f6\uff0c\u53c2\u6570 offset \u53ea\u80fd\u662f0\u6216\u8005\u8d1f\u6570\u3002 \u76f8\u5bf9\u5e94\u5730\uff0c\u53ef\u4ee5\u901a\u8fc7 tellg() \u548c tellp() \u6210\u5458\u51fd\u6570\u83b7\u53d6\u6587\u4ef6\u8bfb\u6307\u9488\u548c\u5199\u6307\u9488\u7684\u4f4d\u7f6e\u3002 C/C++ \u64cd\u4f5c\u6587\u4ef6 C++\u6587\u4ef6\u64cd\u4f5c C++ \u6587\u4ef6\u548c\u6d41 File Handling through C++ Classes Input/output with files","title":"c\u53cacpp\u7684\u6587\u4ef6\u8bfb\u5199"},{"location":"develop/cpp/c%E5%8F%8Acpp%E7%9A%84%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/#ccpp","text":"","title":"c\u53cacpp\u7684\u6587\u4ef6\u8bfb\u5199"},{"location":"develop/cpp/c%E5%8F%8Acpp%E7%9A%84%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/#c","text":"1 2 3 4 5 #include <stdio.h> FILE * fp = fopen ( < filename > , \"rb\" ); fread ( < buffer > , 8 , sizeof ( char ), fp ); fclose ( fp );","title":"c\u98ce\u683c\u6587\u4ef6\u8bfb\u5199"},{"location":"develop/cpp/c%E5%8F%8Acpp%E7%9A%84%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/#_1","text":"c\u98ce\u683c\u8bfb\u5199\u6587\u4ef6\u6807\u51c6\u5e93\u5305\u542b\u4e8e\u5934\u6587\u4ef6 <stdio.h> \u6216 <cstdio> \uff08cpp\uff09\u3002","title":"\u5934\u6587\u4ef6"},{"location":"develop/cpp/c%E5%8F%8Acpp%E7%9A%84%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/#_2","text":"\u4f7f\u7528 fopen() \u65b0\u5efa\u6216\u6253\u5f00\u6587\u4ef6\uff0c fopen() \u4f1a\u8fd4\u56de FILE \u5bf9\u8c61\uff1a 1 FILE * fopen ( const char * filename , const char * mode ); \u5176\u4e2d\uff0c\u53c2\u6570 mode \u7684\u53ef\u9009\u503c\u5982\u4e0b\uff1a mode \u63cf\u8ff0 r \u6253\u5f00\u5df2\u6709\u7684\u6587\u672c\u6587\u4ef6\uff0c\u5141\u8bb8\u8bfb\u5199 w \u6253\u5f00\u6587\u672c\u6587\u4ef6\uff0c\u5141\u8bb8\u5199\u5165\uff0c\u5982\u679c\u6587\u4ef6\u4e0d\u5b58\u5728\u5219\u65b0\u5efa\uff0c\u5982\u679c\u6587\u4ef6\u5b58\u5728\u5219\u8986\u76d6 a \u6253\u5f00\u6587\u672c\u6587\u672c\uff0c\u8ffd\u52a0\u5199\u5165\uff0c\u5982\u679c\u6587\u4ef6\u4e0d\u5b58\u5728\u5219\u65b0\u5efa r+ \u6253\u5f00\u6587\u672c\u6587\u4ef6\uff0c\u5141\u8bb8\u8bfb\u5199 w+ \u6253\u5f00\u6587\u672c\u6587\u672c\uff0c\u5141\u8bb8\u8bfb\u5199\uff0c\u5982\u679c\u6587\u4ef6\u4e0d\u5b58\u5728\u5219\u65b0\u5efa\uff0c\u5982\u679c\u6587\u4ef6\u5b58\u5728\u5219\u8986\u76d6 a+ \u6253\u5f00\u6587\u672c\u6587\u672c\uff0c\u8ffd\u52a0\u5199\u5165\uff0c\u5982\u679c\u6587\u4ef6\u4e0d\u5b58\u5728\u5219\u65b0\u5efa\uff0c\u4ece\u5934\u8bfb\u53d6\uff0c\u8ffd\u52a0\u5199\u5165 \u5bf9\u5e94\u7684\u4e8c\u8fdb\u5236\u6a21\u5f0f mode \u4e3a\uff1a rb/wb/ab/rb+/wb+/ab+/r+b/w+b/a+b \u3002","title":"\u6253\u5f00\u6587\u4ef6"},{"location":"develop/cpp/c%E5%8F%8Acpp%E7%9A%84%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/#_3","text":"","title":"\u8bfb\u53d6\u6587\u4ef6"},{"location":"develop/cpp/c%E5%8F%8Acpp%E7%9A%84%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/#_4","text":"1 size_t fread ( void * buffer , size_t size_of_elements , size_t number_of_elements , FILE * fp ); buffer \uff1a\u5b58\u653e\u6587\u4ef6\u8bfb\u53d6\u6570\u636e\u7684\u8d77\u59cb\u5730\u5740\u3002 size_of_elements \uff1a\u6bcf\u4e2a\u6570\u636e\u5757\u7684\u5b57\u8282\u6570\u3002 number_of_elements \uff1a\u6570\u636e\u5757\u7684\u4e2a\u6570\u3002 fp \uff1a\u6587\u4ef6\u6307\u9488\u3002 \u4ece fp \u6307\u5411\u7684\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6570\u636e\u5757\uff0c\u8bfb\u53d6\u7684\u603b\u5b57\u8282\u6570\u4e3a size_of_elements*number_of_elements \uff0c\u8bfb\u53d6\u51fa\u6765\u7684\u6570\u636e\u5b58\u653e\u5230 buffer \u4e3a\u8d77\u59cb\u5730\u5740\u7684\u5185\u5b58\u4e2d\uff0c\u5982\u679c\u6587\u4ef6\u7ed3\u675f\u6216\u53d1\u751f\u9519\u8bef\uff0c\u8fd4\u56de\u503c\u4e3a0\u3002","title":"\u4e8c\u8fdb\u5236\u8bfb\u53d6"},{"location":"develop/cpp/c%E5%8F%8Acpp%E7%9A%84%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/#_5","text":"1 char * fgets ( char * buffer , int n , FILE * fp ); buffer \uff1a\u5b57\u7b26\u6570\u7ec4\u6307\u9488\uff0c\u8be5\u6570\u7ec4\u5b58\u50a8\u8bfb\u53d6\u7684\u5b57\u7b26\u4e32\u3002 n \uff1a\u8981\u8bfb\u53d6\u7684\u6700\u5927\u5b57\u7b26\u6570\uff0c\u5305\u62ec\u6700\u540e\u7684\u7a7a\u5b57\u7b26\uff0c\u901a\u5e38\u662f buffer \u6570\u7ec4\u957f\u5ea6\u3002 fp \uff1a\u6587\u4ef6\u6307\u9488\u3002 \u5982\u679c\u6210\u529f\uff0c\u8be5\u51fd\u6570\u8fd4\u56de buffer \u6307\u9488\uff1b\u5982\u679c\u9519\u8bef\uff0c\u8fd4\u56de\u7a7a\u6307\u9488\u3002 1 int fscanf ( FILE * fp , const char * format , ...); fp \uff1a\u6587\u4ef6\u6307\u9488\u3002 format \uff1ac\u5b57\u7b26\u4e32\uff0c\u6bd4\u5982 %c/%s/%d/%u/%o/%x \uff08\u5b57\u7b26/\u5b57\u7b26\u4e32/\u5341\u8fdb\u5236\u6570/\u65e0\u7b26\u53f7\u5341\u8fdb\u5236\u6570/\u516b\u8fdb\u5236\u6570/\u5341\u516d\u8fdb\u5236\u6570\uff09\u3002 \u8be5\u51fd\u6570\u7c7b\u4f3c\u4e8e scanf() \uff0c\u9700\u8981\u63d0\u4f9b\u8bfb\u53d6\u6570\u636e\u7684\u7c7b\u578b\u548c\u683c\u5f0f\uff1a 1 2 3 4 5 6 7 8 9 10 11 char str1 [ 10 ], str2 [ 10 ], str3 [ 10 ]; int year ; FILE * fp ; fp = fopen ( \"file.txt\" , \"w+\" ); fputs ( \"We are in 2014\" , fp ); rewind ( fp ); // \u5c06fp\u6307\u9488\u79fb\u52a8\u5230\u6587\u4ef6\u5f00\u5934 fscanf ( fp , \"%s %s %s %d\" , str1 , str2 , str3 , & year ); fclose ( fp );","title":"\u5b57\u7b26\u4e32\u8bfb\u53d6"},{"location":"develop/cpp/c%E5%8F%8Acpp%E7%9A%84%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/#_6","text":"1 int fgetc ( FILE * fp ); fgetc() \u51fd\u6570\u4ece fp \u6307\u5411\u7684\u6587\u4ef6\u4e2d\u8bfb\u53d6\u4e00\u4e2a\u5b57\u7b26\uff0c\u8fd4\u56de\u503c\u4e3a\u8bfb\u53d6\u7684\u5b57\u7b26\uff0c\u5982\u679c\u53d1\u751f\u9519\u8bef\u5219\u8fd4\u56de EOF \u3002","title":"\u5b57\u7b26\u8bfb\u53d6"},{"location":"develop/cpp/c%E5%8F%8Acpp%E7%9A%84%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/#_7","text":"1 size_t fwrite ( const void * buffer , size_t size_of_elements , size_t number_of_elements , FILE * fp ); buffer \uff1a\u5f85\u5199\u5165\u6570\u636e\u7684\u8d77\u59cb\u5730\u5740\u3002 size_of_elements \uff1a\u6bcf\u4e2a\u6570\u636e\u5757\u7684\u5b57\u8282\u6570\u3002 number_of_elements \uff1a\u6570\u636e\u5757\u7684\u4e2a\u6570\u3002 fp \uff1a\u6587\u4ef6\u6307\u9488\u3002 \u5982\u679c\u6267\u884c\u6210\u529f\uff0c\u8fd4\u56de\u5199\u5165\u7684\u6570\u636e\u5757\u4e2a\u6570\u3002 \u7c7b\u4f3c\u4e8e\u8bfb\u53d6\u6587\u4ef6\uff0c\u5199\u5165\u6587\u4ef6\u540c\u6837\u6709\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u8bfb\u53d6\u548c\u5b57\u7b26\u8bfb\u53d6\u7248\u672c\uff1a 1 2 3 4 5 6 // \u5199\u5165\u5b57\u7b26\u4e32\uff0c\u5c06\u5b57\u7b26\u4e32buffer\u5199\u5165fp\u6307\u5411\u7684\u6587\u4ef6\u4e2d int fputs ( const char * buffer , FILE * fp ); // \u5199\u5165\u5b57\u7b26\u4e32\uff0c\u7c7b\u4f3c\u4e8efscanf\uff0c\u9700\u8981\u6307\u5b9a\u5199\u5165\u683c\u5f0f int fprintf ( FILE * fp , const char * format , ...); // \u5199\u5165\u5b57\u7b26\uff0c\u5c06\u5b57\u7b26c\u5199\u5165fp\u6307\u5411\u7684\u6587\u4ef6\u4e2d int fputc ( int c , FILE * fp );","title":"\u5199\u5165\u6587\u4ef6"},{"location":"develop/cpp/c%E5%8F%8Acpp%E7%9A%84%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/#_8","text":"","title":"\u5173\u95ed\u6587\u4ef6"},{"location":"develop/cpp/c%E5%8F%8Acpp%E7%9A%84%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/#_9","text":"rewind() \u7528\u6765\u5c06\u6587\u4ef6\u6307\u9488\u79fb\u52a8\u5230\u6587\u4ef6\u5f00\u5934\uff0c\u539f\u578b\u4e3a\uff1a 1 void rewind ( FILE * fp ); fseek() \u7528\u6765\u5c06\u6587\u4ef6\u6307\u9488\u79fb\u52a8\u5230\u4efb\u610f\u4f4d\u7f6e\uff0c\u539f\u578b\u4e3a\uff1a 1 int fseek ( FILE * fp , long offset , int origin ); fp \uff1a\u5f85\u79fb\u52a8\u7684\u6587\u4ef6\u6307\u9488\u3002 offset \uff1a\u504f\u79fb\u91cf\uff0c\u8981\u79fb\u52a8\u7684\u5b57\u8282\u6570\u3002 origin \uff1a\u8d77\u59cb\u4f4d\u7f6e\uff0c\u6587\u4ef6\u5f00\u5934\u3001\u5f53\u524d\u4f4d\u7f6e\u548c\u6587\u4ef6\u672b\u5c3e\uff1a \u5e38\u91cf\u540d \u542b\u4e49 \u5e38\u91cf\u503c SEEK_SET \u6587\u4ef6\u5f00\u5934 0 SEEK_CUR \u5f53\u524d\u4f4d\u7f6e 1 SEEK_END \u6587\u4ef6\u672b\u5c3e 2","title":"\u79fb\u52a8\u6587\u4ef6\u4f4d\u7f6e\u6307\u9488"},{"location":"develop/cpp/c%E5%8F%8Acpp%E7%9A%84%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/#cpp","text":"","title":"cpp\u6587\u4ef6\u6d41\u548c\u8bfb\u5199\u6587\u4ef6"},{"location":"develop/cpp/c%E5%8F%8Acpp%E7%9A%84%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/#_10","text":"cpp\u98ce\u683c\u8bfb\u5199\u6587\u4ef6\u6807\u51c6\u5e93\u5305\u542b\u4e8e\u5934\u6587\u4ef6 <fstream> \u3002cpp\u6807\u51c6\u5e93\u4e2d\u6709\u4e09\u4e2a\u7c7b\u53ef\u4ee5\u7528\u4e8e\u6587\u4ef6\u64cd\u4f5c\uff0c\u7edf\u79f0\u4e3a\u6587\u4ef6\u6d41\u7c7b\uff0c\u8fd9\u4e09\u4e2a\u7c7b\u5206\u522b\u662f\uff1a ifstream \uff1a\u7528\u4e8e\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6570\u636e\u3002 ofstream \uff1a\u7528\u4e8e\u5411\u6587\u4ef6\u4e2d\u5199\u5165\u6570\u636e\u3002 fstream \uff1a\u65e2\u53ef\u7528\u4e8e\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6570\u636e\uff0c\u53c8\u53ef\u7528\u4e8e\u5411\u6587\u4ef6\u4e2d\u5199\u5165\u6570\u636e\u3002","title":"\u5934\u6587\u4ef6"},{"location":"develop/cpp/c%E5%8F%8Acpp%E7%9A%84%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/#cpp_1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 #include <iostream> #include <fstream> using namespace std ; int main () { string line ; // ##\u6587\u4ef6\u8bfb\u5199\u793a\u4f8b1## // \u6253\u5f00\u6587\u4ef6\uff0c\u5e76\u5c06test.txt\u6587\u4ef6\u4e0e\u8f93\u51fa\u6587\u4ef6\u6d41\u5bf9\u8c61fout\u5173\u8054 ofstream fout ( \"D:/test.txt\" , ios :: out | ios :: trunc ); // << \u8f93\u51fa fout << \"hello fstream\" ; // \u5173\u95ed\u6587\u4ef6\uff0c\u5207\u65ad\u548c\u6587\u4ef6\u6d41\u5bf9\u8c61\u7684\u5173\u8054 fout . close (); // \u6253\u5f00\u6587\u4ef6\uff0c\u5e76\u5c06test.txt\u6587\u4ef6\u4e0e\u8f93\u5165\u6587\u4ef6\u6d41\u5bf9\u8c61fin\u5173\u8054 ifstream fin ( \"D:/test.txt\" , ios :: in ); // >> \u8f93\u5165 while ( fin >> line ) { cout << line << endl ; } fin . close (); // ##\u6587\u4ef6\u8bfb\u5199\u793a\u4f8b2## const char * text = \"hello world\" ; // \u521b\u5efa\u4e00\u4e2afstream\u7c7b\u5bf9\u8c61 fstream fs ; // \u5c06test.txt\u6587\u4ef6\u548cfs\u6587\u4ef6\u6d41\u5173\u8054 fs . open ( \"E:/test.txt\" , ios :: out ); // \u5411test.txt\u6587\u4ef6\u4e2d\u5199\u5165\u5b57\u7b26\u4e32 fs . write ( text , 12 ); // \u5173\u95ed\u6587\u4ef6\uff0c\u5207\u65ad\u548c\u6587\u4ef6\u6d41\u5bf9\u8c61\u7684\u5173\u8054 fs . close (); return 0 ; }","title":"cpp\u8bfb\u5199\u6587\u4ef6\u793a\u4f8b"},{"location":"develop/cpp/c%E5%8F%8Acpp%E7%9A%84%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/#fstream","text":"","title":"fstream\u5e38\u7528\u6210\u5458\u65b9\u6cd5"},{"location":"develop/cpp/c%E5%8F%8Acpp%E7%9A%84%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/#_11","text":"","title":"\u6253\u5f00\u6a21\u5f0f"},{"location":"develop/cpp/c%E5%8F%8Acpp%E7%9A%84%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/#_12","text":"ifstream \u7c7b\u548c fstream \u7c7b\u6709 seekg() \u6210\u5458\u51fd\u6570\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u6587\u4ef6\u8bfb\u6307\u9488\u7684\u4f4d\u7f6e\u3002 ofstream \u7c7b\u548c fstream \u7c7b\u6709 seekp \u6210\u5458\u51fd\u6570\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u6587\u4ef6\u5199\u6307\u9488\u7684\u4f4d\u7f6e\u3002 \u51fd\u6570\u539f\u578b\u5982\u4e0b\uff1a 1 2 ostream & seekp ( int offset , int mode ); istream & seekg ( int offset , int mode ); \u5176\u4e2d\uff0c mode \u6307\u5b9a\u79fb\u52a8\u6307\u9488\u7684\u8d77\u59cb\u4f4d\u7f6e\uff0c\u53ef\u9009\u9879\u4e3a\u6587\u4ef6\u5f00\u5934 ios::beg \u3001\u6587\u4ef6\u5f53\u524d\u4f4d\u7f6e ios::cur \u548c\u6587\u4ef6\u672b\u5c3e ios::end \uff0c\u5f53 mode \u8bbe\u7f6e\u4e3a\u6587\u4ef6\u672b\u5c3e\u65f6\uff0c\u53c2\u6570 offset \u53ea\u80fd\u662f0\u6216\u8005\u8d1f\u6570\u3002 \u76f8\u5bf9\u5e94\u5730\uff0c\u53ef\u4ee5\u901a\u8fc7 tellg() \u548c tellp() \u6210\u5458\u51fd\u6570\u83b7\u53d6\u6587\u4ef6\u8bfb\u6307\u9488\u548c\u5199\u6307\u9488\u7684\u4f4d\u7f6e\u3002 C/C++ \u64cd\u4f5c\u6587\u4ef6 C++\u6587\u4ef6\u64cd\u4f5c C++ \u6587\u4ef6\u548c\u6d41 File Handling through C++ Classes Input/output with files","title":"\u79fb\u52a8\u6587\u4ef6\u8bfb\u5199\u6307\u9488"},{"location":"develop/cpp/c%E6%88%96cpp%E8%BD%AF%E4%BB%B6%E7%BC%96%E8%AF%91/","text":"c\u6216cpp\u8f6f\u4ef6\u7f16\u8bd1 \u6574\u4f53\u6d41\u7a0b \u7f16\u8f91\u5668 \u7f16\u5199\u6e90\u4ee3\u7801\uff0c\u5982 *.c/*.cpp \u6587\u4ef6\u3002 \u7f16\u8bd1\u5668 \u7f16\u8bd1\u4ee3\u7801\uff0c\u751f\u6210\u76ee\u6807\u6587\u4ef6\uff0c\u5982 *.o \u6587\u4ef6\u3002 \u94fe\u63a5\u5668 \u94fe\u63a5\u76ee\u6807\u4ee3\u7801\uff0c\u751f\u6210\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u5982 *.exe \u6587\u4ef6\u3002 \u5982\u679c\u9879\u76ee\u8f83\u5927\uff0c\u6b65\u9aa42\u548c3\u5c31\u975e\u5e38\u9ebb\u70e6\uff0c\u56e0\u6b64\u5c31\u4ea7\u751f\u7c7b\u4f3c\u6279\u5904\u7406\u7684\u7a0b\u5e8f\uff0c\u6279\u5904\u7406\u7f16\u8bd1\u548c\u94fe\u63a5\u6e90\u6587\u4ef6\uff0c\u8fd9\u5c31\u662fmake/makefile/cmake/CMakeLists.txt/configure\u7b49\u5de5\u5177\u6216\u6587\u4ef6\u3002 make \u662f\u4e00\u4e2a\u6279\u5904\u7406\u5de5\u5177\uff0c\u6839\u636e makefile \u6587\u4ef6\u8fdb\u884c\u7f16\u8bd1\u548c\u94fe\u63a5\u3002 makefile \u6587\u4ef6\u5185\u5c31\u5305\u542b\u4e86 gcc/g++ \u7b49\u7f16\u8bd1\u547d\u4ee4\u3002 makefile \u6587\u4ef6\u672c\u8eab\u6bd4\u8f83\u590d\u6742\uff0c\u5e76\u4e14\u65e0\u6cd5\u8de8\u5e73\u53f0\u3002\u56e0\u6b64\u4ea7\u751f\u4e86 cmake \u5229\u7528 CMakeLists.txt \u8de8\u5e73\u53f0\u4ea7\u751f makefile \u3002 CMakeLists.txt \u65e0\u6cd5\u81ea\u52a8\u751f\u6210\uff0c\u662f\u6700\u7ec8\u9700\u8981\u624b\u52a8\u7f16\u5199\u7684\u811a\u672c\u3002 \u5f53\u7136\uff0c\u5982\u679c\u5bf9 makefile \u8bed\u6cd5\u719f\u6089\uff0c\u5f53\u7136\u53ef\u4ee5\u624b\u52a8\u7f16\u5199 makefile \u6587\u4ef6\uff1b\u5982\u679c\u9879\u76ee\u8f83\u5c0f\uff0c\u53ef\u4ee5\u4e0d\u7f16\u5199 makefile/CMakeLists.txt \uff0c\u624b\u52a8\u4f7f\u7528 gcc/g++ \u8fdb\u884c\u7f16\u8bd1\u548c\u94fe\u63a5\u3002 makefile c/cpp\u7f16\u8bd1\u548c\u94fe\u63a5 \u4e00\u4e2a\u793a\u4f8b\u4ee3\u7801 hello.c \u5982\u4e0b\uff1a 1 2 3 4 5 6 7 // hello.c #include <stdio.h> int main () { printf ( \"Hello!\" ); return 0 ; } \u751f\u6210hello\u53ef\u6267\u884c\u6587\u4ef6\u6240\u9700\u8981\u7684\u547d\u4ee4\u4e3a\uff1a gcc -v -o hello hello.c \u8be5\u8fc7\u7a0b\u53ef\u5206\u89e3\u4e3a4\u4e2a\u6b65\u9aa4\uff1a\u9884\u5904\u7406\u3001\u7f16\u8bd1\u3001\u6c47\u7f16\u3001\u94fe\u63a5\u3002\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\uff0c\u4e00\u822c\u6765\u8bf4\uff0c\u65e0\u8bba\u662fC\u8fd8\u662fC++\uff0c\u9996\u5148\u8981\u628a\u6e90\u6587\u4ef6\u7f16\u8bd1\u6210\u4e2d\u95f4\u4ee3\u7801\u6587\u4ef6\uff0c\u5728Windows\u4e0b\u4e5f\u5c31\u662f *.obj \u6587\u4ef6\uff0cUNIX\u4e0b\u662f *.o \u6587\u4ef6\uff0c\u5373Object File\uff0c\u8fd9\u4e2a\u52a8\u4f5c\u53eb\u505a\u7f16\u8bd1\uff08compile\uff09\uff0c\u4e00\u822c\u6765\u8bf4\u6bcf\u4e2a\u6e90\u6587\u4ef6\u90fd\u5bf9\u5e94\u4e00\u4e2aObject File\u3002\u7136\u540e\u518d\u628a\u5927\u91cf\u7684Object File\u7ec4\u5408\u6210\u6267\u884c\u6587\u4ef6\uff0c\u4e5f\u5c31\u662f\u6253\u5305\uff0c\u8fd9\u4e2a\u52a8\u4f5c\u53eb\u4f5c\u94fe\u63a5\uff08link\uff09\uff0c\u53ef\u4ee5\u94fe\u63a5\u6210\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u6216\u8005\u52a8\u6001\u5e93 *.so/*.dll \uff0c\u6216\u8005\u9759\u6001\u5e93 *.a/*.lib \u3002 \u5728\u7f16\u8bd1\u65f6\uff0c\u7f16\u8bd1\u5668\u53ea\u68c0\u67e5\u7a0b\u5e8f\u8bed\u6cd5\u548c\u51fd\u6570\u3001\u53d8\u91cf\u662f\u5426\u88ab \u58f0\u660e \uff0c\u5982\u679c\u51fd\u6570\u672a\u58f0\u660e\uff0c\u7f16\u8bd1\u5668\u4f1a\u7ed9\u51fa\u8b66\u544a\uff0c\u4f46\u53ef\u4ee5\u751f\u6210Object File\u3002\u5728\u94fe\u63a5\u65f6\uff0c\u94fe\u63a5\u5668\u4f1a\u5728\u6240\u6709\u7684Object File\u4e2d\u5bfb\u627e\u51fd\u6570 \u5b9e\u73b0 \uff0c\u5982\u679c\u627e\u4e0d\u5230\uff0c\u5c31\u4f1a\u62a5\u94fe\u63a5\u9519\u8bef\uff0c\u5728VC\u4e0b\uff0c\u8fd9\u79cd\u9519\u8bef\u4e00\u822c\u662f Link 2001\u9519\u8bef \uff0c\u4e5f\u5c31\u662f\u8bf4\u94fe\u63a5\u5668\u672a\u627e\u5230\u51fd\u6570\u7684\u5b9e\u73b0\uff0c\u9700\u8981\u6307\u5b9a\u51fd\u6570\u7684Object File\u3002 makefile\u89c4\u5219 makefile\u5927\u81f4\u662f\u5148\u5904\u7406\u4e00\u4e9b\u73af\u5883\u53d8\u91cf\u6216\u53c2\u6570\uff0c\u7136\u540e\u4ece\u67d0\u4e00\u4e2a\u4f4d\u7f6e\u5f00\u59cb\u6267\u884c\u547d\u4ee4\u96c6\u3002 1 2 3 4 target ... : prerequisites ... command ... ... target\uff1a\u53ef\u4ee5\u662f\u4e00\u4e2aObject File\uff08\u76ee\u6807\u6587\u4ef6\uff09\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u6267\u884c\u6587\u4ef6\uff0c\u8fd8\u53ef\u4ee5\u662f\u4e00\u4e2a\u6807\u7b7e\uff08label\uff09\u3002 prerequisites\uff1a\u751f\u6210\u8be5target\u6240\u4f9d\u8d56\u7684\u6587\u4ef6\u6216target\u3002 command\uff1a\u8be5target\u8981\u6267\u884c\u7684\u547d\u4ee4\uff08\u4efb\u610f\u7684shell\u547d\u4ee4\uff09\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0ctarget\u8fd9\u4e00\u4e2a\u6216\u591a\u4e2a\u7684\u76ee\u6807\u6587\u4ef6\u4f9d\u8d56\u4e8eprerequisites\u4e2d\u7684\u6587\u4ef6\uff0c\u5176\u751f\u6210\u89c4\u5219\u5b9a\u4e49\u5728command\u4e2d\u3002 \u5927\u591a\u6570\u7684make\u90fd\u652f\u6301\u201cmakefile\u201d\u548c\u201cMakefile\u201d\u8fd9\u4e24\u79cd\u9ed8\u8ba4\u6587\u4ef6\u540d\u3002\u5982\u679c\u8981\u6307\u5b9a\u7279\u5b9a\u7684Makefile\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528make\u7684 -f \u548c --file \u53c2\u6570\uff0c\u5982\uff1a make -f Make.Linux \u6216 make --file Make.AIX \u3002 \u793a\u4f8b \u4e0a\u8ff0\u793a\u4f8b\u4e2d\uff0c\u5b9a\u4e49\u4e86 2\u4e2a\u53c2\u6570 \uff0c 3\u4e2atarget \u3002makefile\u53ef\u4ee5\u6709\u591a\u4e2atarget\uff0ctarget\u4e4b\u95f4\u53ef\u4ee5\u72ec\u7acb\uff0c\u4e5f\u53ef\u4ee5\u76f8\u4e92\u4f9d\u8d56\u6216\u5173\u8054\uff0c\u4f46\u53ea\u80fd\u4ece\u67d0\u4e00\u4e2a\u5f00\u59cb\u6267\u884c\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4ece\u7b2c\u4e00\u4e2atarget\u6267\u884c\u3002\u4e0a\u4f8b\u4e2d\uff0ctarget0\u75312\u4e2a\u5b50target\u7ec4\u6210\u3002\u7c7b\u4f3c\u4e8eC\u8bed\u8a00\uff0c \u53d8\u91cf \u7c7b\u4f3c\u4e8e\u5b8f\u53c2\u6570\u7684\u5b9a\u4e49\uff0c \u627etarget\u5e76\u6267\u884c \u7c7b\u4f3c\u4e8e\u627emain\u51fd\u6570\u5e76\u6267\u884c\u547d\u4ee4\u3002\u5728Makefile\u4e2d\u7684\u547d\u4ee4\uff0c\u5fc5\u987b\u8981\u4ee5 Tab \u952e\u5f00\u59cb\u3002 \u5feb\u901f\u7684\u7406\u89e3MakeFile+\u8bfb\u61c2\u4e00\u4e2aMakeFile how-to-write-makefile CMake \u4e00\u4e2a\u5229\u7528CMake\u6784\u5efa\u9879\u76ee\u7684\u5178\u578b\u6d41\u7a0b\uff1a \u7f16\u5199CMake\u7684\u914d\u7f6e\u6587\u4ef6 CMakeLists.txt \u3002 \u6267\u884c\u547d\u4ee4 cmake <PATH> \u6216\u8005 ccmake <PATH> \uff0c\u5176\u4e2d <PATH> \u4e3a CMakeLists.txt \u6240\u5728\u7684\u76ee\u5f55\u3002\u76f8\u6bd4 cmake \uff0c ccmake \u63d0\u4f9b\u4e86\u4e00\u4e2a\u4ea4\u4e92\u5f0f\u754c\u9762\u3002 \u4f7f\u7528 make \u547d\u4ee4\u8fdb\u884c\u6784\u5efa\u3002 \u5728\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u7ecf\u5e38\u9700\u8981\u4f7f\u7528\u5916\u90e8\u9879\u76ee\uff0c *.cmake \u6587\u4ef6\u662f\u5916\u90e8\u5305\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u5185\u5bb9\u4e0e CMakeLists.txt \u7c7b\u4f3c\uff0c\u4ee5\u63d0\u4f9b\u5173\u4e8e\u5305\u6700\u57fa\u672c\u7684\u4fe1\u606f\uff0c\u4fbf\u4e8e\u5229\u7528CMake\u6784\u5efa\u9879\u76ee\u3002 What is the use of .cmake files in install function of CMakeLists.txt? How to create a ProjectConfig.cmake file youtube/Deep CMake for Library Authors - Craig Scott - CppCon 2019 set\u6267\u884c\u8be6\u89e3 \u8bed\u6cd5\u901f\u67e5 \u6307\u5b9acmake\u6700\u5c0f\u7248\u672c 1 cmake_minimum_required ( VERSION 3 .4.1 ) \u5728\u6709\u4e9b\u60c5\u51b5\u4e0b\uff0c\u5982\u679c CMakeLists.txt \u6587\u4ef6\u4e2d\u4f7f\u7528\u4e86\u4e00\u4e9b\u9ad8\u7248\u672c cmake \u7279\u6709\u7684\u4e00\u4e9b\u547d\u4ee4\u7684\u65f6\u5019\uff0c\u5c31\u9700\u8981\u52a0\u4e0a\u8fd9\u6837\u4e00\u884c\uff0c\u63d0\u9192\u7528\u6237\u5347\u7ea7\u5230\u8be5\u7248\u672c\u4e4b\u540e\u518d\u6267\u884c cmake \u3002 \u8bbe\u7f6e\u9879\u76ee\u540d\u79f0 1 project ( demo ) \u4e0a\u4f8b\u4e2d\uff0c\u5f15\u5165\u4e24\u4e2a\u53d8\u91cf demo_BINARY_DIR \u548c demo_SOURCE_DIR \uff0c\u540c\u65f6\uff0ccmake\u81ea\u52a8\u5b9a\u4e49\u4e86\u4e24\u4e2a\u7b49\u4ef7\u7684\u53d8\u91cf PROJECT_BINARY_DIR \u548c PROJECT_SOURCE_DIR \u3002 \u8bbe\u7f6e\u7f16\u8bd1\u7c7b\u578b 1 2 3 add_executable ( demo demo.cpp ) # \u751f\u6210\u53ef\u6267\u884c\u6587\u4ef6 add_library ( common STATIC util.cpp ) # \u751f\u6210\u9759\u6001\u5e93 add_library ( common SHARED util.cpp ) # \u751f\u6210\u52a8\u6001\u5e93\u6216\u5171\u4eab\u5e93 \u4e0a\u4f8b\u4e2d\uff0c demo \u4e3a\u81ea\u5b9a\u4e49\u9879\u76ee\u540d\u79f0\u3002 add_library \u9ed8\u8ba4\u751f\u6210\u9759\u6001\u5e93\uff0c\u901a\u8fc7\u4e0a\u4f8b\u4e2d\u547d\u4ee4\u751f\u6210\u7684\u6587\u4ef6\u540d\u5b57\u5982\u4e0b\uff1a \u5728Linux\u4e0b\u5206\u522b\u662f\uff1a demo/libcommon.a/libcommon.so \u5728Windows\u4e0b\u5206\u522b\u662f\uff1a demo.exe/common.lib/common.dll \u6307\u5b9a\u7f16\u8bd1\u5305\u542b\u7684\u6e90\u6587\u4ef6 \u660e\u786e\u6307\u51fa\u5305\u542b\u54ea\u4e9b\u6e90\u6587\u4ef6 1 add_library ( demo demo.cpp test.cpp util.cpp ) \u641c\u7d22\u6240\u6709cpp\u6587\u4ef6 1 2 aux_source_directory ( . SRC_LIST ) # \u641c\u7d22\u5f53\u524d\u76ee\u5f55\u4e0b\u7684\u6240\u6709.cpp\u6587\u4ef6 add_library ( demo ${ SRC_LIST } ) \u4e0a\u4f8b\u4e2d\uff0c aux_source_directory(<dir> <VAR>) \u8868\u793a\u641c\u7d22\u76ee\u5f55 <dir> \u4e0b\u6240\u6709\u7684\u6e90\u4ee3\u7801\u6587\u4ef6\uff0c\u5e76\u5c06\u6587\u4ef6\u5217\u8868\u5b58\u50a8\u5230\u53d8\u91cf <VAR> \u4e2d\u3002 \u81ea\u5b9a\u4e49\u641c\u7d22\u89c4\u5219 1 2 3 4 5 6 7 8 9 10 file ( GLOB SRC_LIST \"*.cpp\" \"protocol/*.cpp\" ) add_library ( demo ${ SRC_LIST } ) # \u6216\u8005 file ( GLOB SRC_LIST \"*.cpp\" ) file ( GLOB SRC_PROTOCOL_LIST \"protocol/*.cpp\" ) add_library ( demo ${ SRC_LIST } ${ SRC_PROTOCOL_LIST } ) # \u6216\u8005 aux_source_directory ( . SRC_LIST ) aux_source_directory ( protocol SRC_PROTOCOL_LIST ) add_library ( demo ${ SRC_LIST } ${ SRC_PROTOCOL_LIST } ) \u67e5\u627e\u6307\u5b9a\u7684\u5305 1 find_package ( glog 0 .3.5 REQUIRED ) \u5728\u5b9e\u9645\u5f00\u53d1\u4e2d\uff0c\u7ecf\u5e38\u9700\u8981\u7528\u5230\u7b2c\u4e09\u65b9\u5f00\u6e90\u5e93\uff0c\u8fd9\u4e9b\u5f00\u6e90\u5e93\u6709\u53ef\u80fd\u901a\u8fc7 apt-get install \u65b9\u5f0f\u5b89\u88c5\u5230\u7cfb\u7edf\u76ee\u5f55\u4e0b\uff0c\u4e5f\u6709\u53ef\u80fd\u81ea\u5df1\u4e0b\u8f7d\u6e90\u7801\u5e76\u7f16\u8bd1\u5b89\u88c5\u5230\u6307\u5b9a\u76ee\u5f55\u4e0b\u3002\u5728\u4f7f\u7528\u65f6\uff0c\u9700\u8981\u6839\u636e\u5b9e\u9645\u9700\u6c42\u5bfb\u627e\u5230\u6307\u5b9a\u7248\u672c\u5e93\u7684 \u5934\u6587\u4ef6\u5305\u542b\u8def\u5f84\u3001\u94fe\u63a5\u5e93\u8def\u5f84 \u7b49\u3002CMake\u63d0\u4f9b\u4e86 find_package() \u547d\u4ee4\u67e5\u627e\u8fd9\u4e9b\u4f9d\u8d56\u5305\u3002 find_package() \u6709\u4e24\u79cd\u5de5\u4f5c\u6a21\u5f0f\uff0c\u5206\u522b\u662f\uff1a Module\u6a21\u5f0f\u3002\u9ed8\u8ba4\u641c\u7d22\u6a21\u5f0f\u3002 Config\u6a21\u5f0f\u3002\u5f53Module\u6a21\u5f0f\u5931\u8d25\uff0c\u6216\u8005 find_package() \u4e2d\u6307\u5b9a\u4e86 CONFIG/NO_MODULE \u7b49\u5173\u952e\u5b57\u65f6\u542f\u7528\u3002 \u5f53\u6267\u884c find_package(XXX) \u65f6\uff0cCMake\u641c\u7d22\u6d41\u7a0b\u56fe\u4e3a\uff1a \u547d\u4ee4\u7b7e\u540d 1 2 3 4 find_package ( <package> [ version ] [ EXACT ] [ QUIET ] [ MODULE ] [ REQUIRED ] [[ COMPONENTS ] [ components... ]] [ OPTIONAL_COMPONENTS components... ] [ NO_POLICY_SCOPE ]) package \uff1a\u5fc5\u586b\u53c2\u6570\u3002\u9700\u8981\u67e5\u627e\u7684\u5305\u540d\uff0c\u6ce8\u610f\u5927\u5c0f\u5199\u3002 version \u548c EXACT \uff1a\u53ef\u9009\u53c2\u6570\u3002 version \u6307\u5b9a\u7248\u672c\uff0c\u5982\u679c\u8bbe\u7f6e\u5c31\u5fc5\u987b\u627e\u5230\u8be5\u5305\u4e0e version \u6307\u5b9a\u7248\u672c\u53f7\u7684\u517c\u5bb9\u7248\u672c\uff1b\u5982\u679c\u540c\u65f6\u6307\u5b9a\u4e86 EXACT \uff0c\u5219\u8868\u793a\u5fc5\u987b\u5b8c\u5168\u5339\u914d\u800c\u4e0d\u662f\u517c\u5bb9\u7248\u672c\u5c31\u53ef\u4ee5\u3002 QUIET \uff1a\u53ef\u9009\u53c2\u6570\u3002\u67e5\u627e\u5931\u8d25\u5219\u8f93\u51fa\u62a5\u9519\u4fe1\u606f\uff0c\u4f46\u5982\u679c\u6307\u5b9a REQUIRED \u5219\u603b\u662f\u8f93\u51fa\u3002 MODULE \uff1a\u53ef\u9009\u53c2\u6570\u3002\u5fc5\u987bMODULE\u6a21\u5f0f\u67e5\u627e\u3002 REQUIRED \uff1a\u53ef\u9009\u53c2\u6570\u3002\u8868\u793a\u4e00\u5b9a\u8981\u627e\u5230\u5305\uff0c\u627e\u4e0d\u5230\u7acb\u5373\u505c\u6b62\u3002 COMPONENTS components \uff1a\u53ef\u9009\u53c2\u6570\u3002\u67e5\u627e\u7684\u5305\u4e2d\u5fc5\u987b\u5305\u542b\u7ec4\u4ef6\uff08components\uff09\uff0c\u5426\u5219\u7acb\u5373\u505c\u6b62\u3002 \u4e24\u79cd\u641c\u7d22\u6a21\u5f0f\u7684\u641c\u7d22\u539f\u7406 Module\u6a21\u5f0f\u67e5\u627e Find<PackageName>.cmake \u914d\u7f6e\u6587\u4ef6\u3002\u67e5\u627e\u8def\u5f84\u67092\u4e2a\uff1a CMAKE_MODULE_PATH \u3002\u8be5\u53d8\u91cf\u9ed8\u8ba4\u4e3a\u7a7a\uff0c\u53ef\u901a\u8fc7 set \u547d\u4ee4\u8d4b\u503c\u3002 CMAKE_ROOT \u4e0b\u7684Modules\u76ee\u5f55\uff0c CMAKE_ROOT \u4e3aCMake\u5b89\u88c5\u76ee\u5f55\u3002\u6bd4\u5982 /usr/share/cmake-3.10/Modules \u3002 Config\u6a21\u5f0f\u67e5\u627e PackageName>Config.cmake \u6216 <lower-case-package-name>-config.cmake \u914d\u7f6e\u6587\u4ef6\u3002\u67e5\u627e\u8def\u5f84\u67093\u4e2a\uff1a <PackageName>_DIR \u3002\u8be5\u53d8\u91cf\u9ed8\u8ba4\u4e3a\u7a7a\uff0c\u53ef\u901a\u8fc7 set \u547d\u4ee4\u8d4b\u503c\uff0c\u8be5\u8def\u5f84\u4e3a <PackageName>Config.cmake \u6216 <lower-case-package-name>-config.cmake \u6587\u4ef6 \u6240\u5728\u76ee\u5f55 \u3002 CMAKE_PREFIX_PATH/CMAKE_FRAMEWORK_PATH/CMAKE_APPBUNDLE_PATH \u7684CMake\u53d8\u91cf\u6216 \u73af\u5883\u53d8\u91cf \u3002\u9ed8\u8ba4\u4e3a\u7a7a\u3002 PATH \u73af\u5883\u53d8\u91cf\u3002CMake\u4f1a\u904d\u5386 PATH \u73af\u5883\u53d8\u91cf\u4e2d\u7684\u6bcf\u4e2a\u8def\u5f84\uff0c\u5982\u679c\u8def\u5f84\u4ee5bin\u6216\u8005sbin\u7ed3\u5c3e\uff0c\u5219\u81ea\u52a8\u56de\u9000\u5230\u4e0a\u4e00\u7ea7\uff0c\u4ee5\u4fbf\u5f97\u5230\u6839\u76ee\u5f55\u3002\u5728\u6839\u76ee\u5f55\u4e2d\uff0cCMake\u67e5\u627e\u662f\u5426\u5b58\u5728 <PackageName>Config.cmake \u6216 <lower-case-package-name>-config.cmake \u914d\u7f6e\u6587\u4ef6\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u5219\u4f1a\u7ee7\u7eed\u68c0\u67e5\u6216\u8005\u5339\u914d\u4e00\u4e9b\u8def\u5f84\uff0c\u53c2\u89c1 \u201c\u8f7b\u677e\u641e\u5b9aCMake\u201d\u7cfb\u5217\u4e4bfind_package\u7528\u6cd5\u8be6\u89e3 \u3002 \u67e5\u627e\u5931\u8d25\u7684\u89e3\u51b3\u65b9\u6cd5 \u5982\u679c\u660e\u786e\u77e5\u9053\u8981\u67e5\u627e\u7684\u5e93 <PackageName>Config.cmake \u6216 <lower-case-package-name>-config.cmake \u6587\u4ef6\u6240\u5728\u8def\u5f84\uff0c\u76f4\u63a5 set \u8bbe\u7f6e\u53d8\u91cf <PackageName>_DIR \u3002\u6bd4\u5982\uff1a 1 2 3 4 # OpenCV set(OpenCV_DIR \"~/opencv3_4_4/opencv/build\") # Caffe set(Caffe_DIR ~/caffe/build) \u5982\u679c\u6709\u591a\u4e2a\u5305\u7684\u914d\u7f6e\u6587\u4ef6\u9700\u8981\u67e5\u627e\uff0c\u53ef\u4ee5\u5c06\u914d\u7f6e\u6587\u4ef6\u7edf\u4e00\u5b58\u653e\u5230\u5982 cmake \u7684\u76ee\u5f55\u4e0b\uff0c\u7136\u540e\u5229\u7528 set \u8bbe\u7f6e\u53d8\u91cf CMAKE_PREFIX_PATH \u6307\u5411\u8fd9\u4e2a cmake \u76ee\u5f55\u8def\u5f84\u3002\u6ce8\u610f\uff1a\u6bcf\u4e2a\u5305\u7684\u914d\u7f6e\u6587\u4ef6\u9700\u8981\u5355\u72ec\u653e\u7f6e\u5230\u547d\u540d\u4e3a\u5305\u540d\u7684\u76ee\u5f55\u4e0b\uff08\u6587\u4ef6\u5939\u540d\u4e0d\u533a\u5206\u5927\u5c0f\u5199\uff09\uff0c\u5426\u5219\u4f1a\u627e\u4e0d\u5230\u3002 \u8865\u5145\u52a8\u6001\u5e93 *.so \u548c\u9759\u6001\u5e93 *.a \u7684\u533a\u522b\uff0c\u52a8\u6001\u5e93\u5373\u4f7f\u7f16\u8bd1\u5b8c\u6210\uff0c\u4e5f\u662f\u548c\u5176\u5b83\u52a8\u6001\u5e93\u662f\u5206\u79bb\u7684\uff0c\u56e0\u6b64\u6bcf\u6b21\u7528\u90fd\u8981\u628a\u6240\u6709\u6d89\u53ca\u7684\u52a8\u6001\u5e93\u5168\u90e8\u6dfb\u52a0\u8fdb\u6765\uff1b\u9759\u6001\u5e93\u5728\u7f16\u8bd1\u65f6\u5c31\u548c\u7a0b\u5e8f\u7ed3\u5408\u5728\u4e00\u8d77\u4e86\u3002 \u201c\u8f7b\u677e\u641e\u5b9aCMake\u201d\u7cfb\u5217\u4e4bfind_package\u7528\u6cd5\u8be6\u89e3 CMake\u4e4bfind_package \u67e5\u627e\u6307\u5b9a\u7684\u5e93\u6587\u4ef6 1 find_library ( log-lib log ) find_library(<VAR> <name> <path>) \u67e5\u627e\u5230\u6307\u5b9a\u7684\u9884\u7f16\u8bd1\u5e93\uff0c\u5e76\u5c06\u8be5\u8def\u5f84\u5b58\u50a8\u5728\u53d8\u91cf\u4e2d\u3002\u7c7b\u4f3c\u7684\u547d\u4ee4\u8fd8\u6709 find_file()\u3001find_path()\u3001find_program()\u3001find_package() \u3002 \u8f7d\u5165CMake\u9884\u5b9a\u4e49\u6a21\u5757 1 2 include ( FetchContent ) include ( ExternalProject ) include \u7528\u6765\u8f7d\u5165 CMakeLists.txt \u6587\u4ef6\uff0c\u4e5f\u7528\u4e8e\u8f7d\u5165\u9884\u5b9a\u4e49\u7684CMake\u6a21\u5757\u3002 1 2 include ( file1 [ OPTIONAL ]) include ( module [ OPTIONAL ]) \u4e0a\u8ff0 OPTIONAL \u53c2\u6570\u7684\u4f5c\u7528\u662f\u6587\u4ef6\u4e0d\u5b58\u5728\u4e5f\u4e0d\u4f1a\u4ea7\u751f\u9519\u8bef\u3002\u53ef\u4ee5\u6307\u5b9a\u8f7d\u5165\u4e00\u4e2a\u6587\u4ef6\u6216\u6a21\u5757\uff0c\u5982\u679c\u8f7d\u5165\u6a21\u5757\uff0c\u90a3\u4e48\u5c06\u5728 CMAKE_MODULE_PATH \u4e2d\u641c\u7d22\u8fd9\u4e2a\u6a21\u5757\u5e76\u8f7d\u5165\u3002\u8f7d\u5165\u7684\u5185\u5bb9\u5c06\u5728\u5904\u7406\u5230 include \u8bed\u53e5\u65f6\u76f4\u63a5\u6267\u884c\u3002 \u8bbe\u7f6e\u5305\u542b\u7684\u76ee\u5f55 1 2 3 4 5 include_directories ( ${ CMAKE_CURRENT_SOURCE_DIR } ${ CMAKE_CURRENT_BINARY_DIR } ${ CMAKE_CURRENT_SOURCE_DIR } /include ) \u8bbe\u7f6e\u9700\u8981\u94fe\u63a5\u7684\u5e93 \u4e0b\u4f8b\u4e2d\uff0c demo \u5747\u4e3a\u81ea\u5b9a\u4e49\u9879\u76ee\u540d\u3002 \u6307\u5b9a\u94fe\u63a5\u52a8\u6001\u5e93\u6216\u9759\u6001\u5e93 1 2 target_link_libraries ( demo libface.a ) # \u94fe\u63a5libface.a target_link_libraries ( demo libface.so ) # \u94fe\u63a5libface.so \u6307\u5b9a\u5168\u8def\u5f84 1 2 target_link_libraries ( demo ${ CMAKE_CURRENT_SOURCE_DIR } /libs/libface.a ) target_link_libraries ( demo ${ CMAKE_CURRENT_SOURCE_DIR } /libs/libface.so ) \u6307\u5b9a\u94fe\u63a5\u591a\u4e2a\u5e93 1 2 3 4 5 target_link_libraries ( demo ${ CMAKE_CURRENT_SOURCE_DIR } /libs/libface.a boost_system.a boost_thread pthread ) \u4e5f\u5c31\u662f\uff0ccmake\u94fe\u63a5\u5e93\u7684\u65b9\u6cd5\u4e3a\uff1a 1 target_link_libraries ( <\u76ee\u6807\u5e93> <\u76ee\u6807\u5e93\u9700\u8981\u94fe\u63a5\u7684\u5e93\u8def\u5f84> ) \u5728Windows\u4e0b\uff0cCMake\u4f1a\u6839\u636e\u94fe\u63a5\u5e93\u76ee\u5f55\uff0c\u641c\u7d22 *.lib \u6587\u4ef6\u3002\u5728Linux\u4e0b\u4f1a\u641c\u7d22 *.so \u6216 *.a \u6587\u4ef6\uff0c\u5982\u679c\u4e24\u8005\u90fd\u5b58\u5728\uff0c\u5219\u4f18\u5148\u8fde\u63a5\u52a8\u6001\u5e93 *.so \u6587\u4ef6\u3002 cmake\u4e2d\u7684\u53d8\u91cf \u4e00\u822c\u53d8\u91cf 1 2 set ( TEST \"Local Var\" ON ) set ( TEST \"Parent scope Var\" ON PARENT_SCOPE ) \u7c7b\u4f3c\u4e8eC++\u5c40\u90e8\u53d8\u91cf\uff0c\u4ec5\u5728\u6240\u5728\u4f5c\u7528\u57df\uff08\u5f53\u524dCMakeLists.txt\uff09\u6709\u6548\uff0c\u9664\u975e\u540e\u9762\u4f7f\u7528 PARENT_SCOPE \u3002 1 set ( <variable> <value>... [ PARENT_SCOPE ]) #\u8bbe\u7f6e\u666e\u901a\u53d8\u91cf \u7f13\u5b58\u53d8\u91cf 1 2 3 4 5 # \u82e5\u662f\u7b2c\u4e00\u6b21\u8fd0\u884c\uff0c\u5c06\u7ed9TEST\u8d4b\u503c\u4e3aON # \u82e5\u4e0d\u662f\uff0c\u5219\u4e0d\u4f1a\u4fee\u6539\u3002\u6ce8\u610f\uff0c\u8fd9\u91cc\u5373\u4f7f\u624b\u52a8\u6539\u6210ON->OFF\uff0c\u4e5f\u4e0d\u4f1a\u4fee\u6539Cache\u91cc\u9762\u7684\u503c\uff0c\u9664\u975e\u624b\u52a8\u5220\u9664CMakeCache.txt set ( TEST \"Cache Var\" ON CACHE BOOL ) # \u901a\u8fc7\u6dfb\u52a0FORCE\uff0c\u53ef\u4ee5\u5f3a\u5236\u5237\u65b0Cache\u7684\u503c\uff0c\u907f\u514d\u4e0a\u8ff0\u201d\u5947\u602a\u201c\u7684\u73b0\u8c61 set ( TEST \"Local Var\" ON CACHE BOOL FORCE ) \u7c7b\u4f3c\u4e8eC++\u5168\u5c40\u53d8\u91cf\uff0c\u5728cmake\u6574\u4e2a\u8fd0\u884c\u671f\u95f4\u6709\u6548\u3002 1 set ( <variable> <value>... CACHE <type> <docstring> [ FORCE ]) #\u8bbe\u7f6e\u7f13\u5b58\u53d8\u91cf \u73af\u5883\u53d8\u91cf \u4f7f\u7528 $ENV{NAME} \u53ef\u4ee5\u8c03\u7528\u7cfb\u7edf\u7684\u73af\u5883\u53d8\u91cf\u3002 1 2 set ( ENV { name } value ) set ( ENV { <variable> } [ <value> ]) #\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf Cmake\u547d\u4ee4\u4e4bset\u4ecb\u7ecd \u8bbe\u7f6e\u53d8\u91cf \u4e0b\u4f8b\u4e2d\uff0c SRC_LIST \u5747\u4e3a\u81ea\u5b9a\u4e49\u53d8\u91cf\u540d\uff0c demo \u5747\u4e3a\u81ea\u5b9a\u4e49\u9879\u76ee\u540d\u3002 set \u76f4\u63a5\u8bbe\u7f6e\u53d8\u91cf\u7684\u503c 1 2 set ( SRC_LIST main.cpp test.cpp ) add_executable ( demo ${ SRC_LIST } ) set \u8ffd\u52a0\u53d8\u91cf\u7684\u503c 1 2 3 set ( SRC_LIST main.cpp ) set ( SRC_LIST ${ SRC_LIST } test.cpp ) add_executable ( demo ${ SRC_LIST } ) \u7528\u6237\u4f20\u53c2\u63a7\u5236\u53d8\u91cf\u7684\u503c option() \u6307\u4ee4\u3002\u5982\uff1a 1 option ( USE_LIB \"Whether use lib to link matrix_test\" ON ) \u4f7f\u7528\u65f6\uff0c\u901a\u8fc7\u547d\u4ee4\u884c\u4f20\u5165\u503c\uff1a 1 2 # \u53ef\u4ee5\u4f7f\u7528set()\u8fdb\u884c\u8d4b\u503c\uff1b\u4e5f\u53ef\u4ee5\u901a\u8fc7\u547d\u4ee4\u884c\u4f20\u53c2\u65b9\u5f0f\u4f7f\u7528\uff0c-D\u663e\u5f0f\u58f0\u660e >>> cmake .. -D USE_LIB = OFF \u5e38\u89c1\u5185\u7f6e\u53d8\u91cf \u53d8\u91cf \u542b\u4e49 CMAKE_INSTALL_PREFIX \u6307\u5b9a\u5b89\u88c5\u76ee\u5f55\uff0c\u4e00\u822c\u4f5c\u4e3a cmake \u547d\u4ee4\u884c\u53c2\u6570 CMAKE_SOURCE_DIR CMakeLists.txt \u6240\u5728\u76ee\u5f55 CMAKE_CURRENT_SOURCE_DIR \u5f53\u524d\u6b63\u5728\u5904\u7406 CMakeLists.txt \u6240\u5728\u76ee\u5f55 PROJECT_SOURCE_DIR \u4ee3\u7801\u6839\u76ee\u5f55 PROJECT_BINARY_DIR \u6267\u884c cmake \u547d\u4ee4\u6240\u5728\u76ee\u5f55\uff0c\u4e00\u822c\u662f\u521b\u5efabuild\u76ee\u5f55\u5e76\u4e14\u8fdb\u5165\u8be5\u76ee\u5f55\uff0c\u6267\u884c cmake \u547d\u4ee4 CMAKE_INCLUDE_PATH \u5934\u6587\u4ef6\u6240\u5728\u76ee\u5f55 CMAKE_LIBRARY_PATH lib\u5e93\u6240\u5728\u76ee\u5f55 CMAKE_BUIlD_TYPE \u7f16\u8bd1\u7c7b\u578b\uff0c\u4f8b\u5982Debug\u3001Release\u3002\u4f8b\u5982 -DCMAKE_BUIlD_TYPE=Debug CMAKE_C_COMPILER / CMAKE_CXX_COMPILER \u6307\u5b9aC/C++\u7f16\u8bd1\u5668\u8def\u5f84\uff0c\u4f8b\u5982\uff1a set(CMAKE_C_COMPILER \"/usr/local/gcc\") \u6216 -DCMAKE_C_COMPILER=/usr/local/gcc CMAKE_C_FLAGS / CMAKE_CXX_FLAGS \u4f20\u9012FLAGS\u7ed9C/C++\u7f16\u8bd1\u5668\uff0c\u4e24\u4e2a\u53d8\u91cf\u5206\u522b\u6307\u5b9aC/C++\u7f16\u8bd1\u7684\u9009\u9879\uff0c\u4f8b\u5982\uff1a set(CMAKE_CXX_FLAGS \"-g\") CMAKE_CXX_FLAGS_DEBUG \u9664\u4e86CMAKE_CXX_FLAGS\u5916\uff0c\u5728Debug\u914d\u7f6e\u4e0b\uff0c\u989d\u5916\u7684\u53c2\u6570 CMAKE_CXX_FLAGS_RELEASE \u9664\u4e86CMAKE_CXX_FLAGS\u5916\uff0c\u5728Release\u914d\u7f6e\u4e0b\uff0c\u989d\u5916\u7684\u53c2\u6570\u9ed8\u8ba4\u53c2\u6570\uff0c\u53c2\u6570\u9ed8\u8ba4\u503c\u4e3a -O3 -NDEBUG CMAKE_VERBOSE_MAKEFILE set(CMAKE_VERBOSE_MAKEFILE ON) \uff1a\u5f00\u542f\u8be6\u60c5\u6253\u5370 \u4e0a\u8ff0\u53d8\u91cf\u5747\u4e3a CMakeLists.txt \u6587\u4ef6\u4e2d\u53ef\u901a\u8fc7 set \u914d\u7f6e\u7684\u5185\u7f6e\u53d8\u91cf\uff0c\u5982\u679c\u901a\u8fc7 cmake \u6267\u884c\u65f6\u4e34\u65f6\u52a0\u4e0a\u7684\u53d8\u91cf\u8bbe\u7f6e\uff0c\u5219\u9700\u8981\u52a0\u4e0a -D \u524d\u7f00\u3002\u6bd4\u5982\uff0c\u6307\u5b9a\u76ee\u6807\u6587\u4ef6\u7684\u5b89\u88c5\u8def\u5f84\u65f6\uff0c\u53ef\u4ee5\u5728 CMakeLists.txt \u5185\u8bbe\u7f6e CMAKE_INSTALL_PREFIX \u53d8\u91cf\uff1a 1 2 3 # CMakeLists.txt # \u8be5\u8bed\u53e5\u9700\u8981\u653e\u5728project()\u8bed\u53e5\u540e\u9762 set ( CMAKE_INSTALL_PREFIX <your install path> ) \u540c\u6837\u53ef\u4ee5\u5728\u6267\u884c cmake \u65f6\u4e34\u65f6\u8bbe\u7f6e\uff1a 1 cmake -DCMAKE_INSTALL_PREFIX = /your install path .. \u5728\u6307\u5b9a\u76ee\u6807\u6587\u4ef6\u5b89\u88c5\u4f4d\u7f6e\u7684\u573a\u666f\u4e0b\uff0c\u6267\u884c cmake \u65f6\u4e34\u65f6\u8bbe\u7f6e\u5219\u662f\u63a8\u8350\u65b9\u5f0f\u3002 \u6b64\u5916\uff0c\u8865\u5145\u5e38\u89c1\u7684C++\u7f16\u8bd1\u9009\u9879\uff1a 1 2 3 4 5 6 set ( CMAKE_CXX_COMPILER \"clang++\" ) # \u663e\u793a\u6307\u5b9a\u4f7f\u7528\u7684C++\u7f16\u8bd1\u5668 set ( CMAKE_CXX_FLAGS \"-std=c++11\" ) # c++11 set ( CMAKE_CXX_FLAGS \"-g\" ) # \u8c03\u8bd5\u4fe1\u606f set ( CMAKE_CXX_FLAGS \"-Wall\" ) # \u5f00\u542f\u6240\u6709\u8b66\u544a set ( CMAKE_CXX_FLAGS_DEBUG \"-O0\" ) # \u8c03\u8bd5\u5305\u4e0d\u4f18\u5316 set ( CMAKE_CXX_FLAGS_RELEASE \"-O2 -DNDEBUG \" ) # release\u5305\u4f18\u5316 \u6253\u5370 \u53ef\u4ee5\u901a\u8fc7 message() \u6307\u4ee4\u6253\u5370\u51fa\u53d8\u91cf\u7684\u503c\uff0c\u7c7b\u4f3c print() \u51fd\u6570\u3002 1 message ( \"Configuration: ${ USE_LIB } \" ) Cmake \u8bed\u6cd5\u4e0e\u5b9e\u6218\u5165\u95e8 CMake\u57fa\u672c\u5e38\u8bc6 CMake-official_help cmake\uff1a\u6307\u5b9a\u76ee\u6807\u6587\u4ef6\u7684\u5b89\u88c5\u4f4d\u7f6e WeNet CmakeList.txt\u5b9e\u6218\u89e3\u8bfb","title":"c\u6216cpp\u8f6f\u4ef6\u7f16\u8bd1"},{"location":"develop/cpp/c%E6%88%96cpp%E8%BD%AF%E4%BB%B6%E7%BC%96%E8%AF%91/#ccpp","text":"","title":"c\u6216cpp\u8f6f\u4ef6\u7f16\u8bd1"},{"location":"develop/cpp/c%E6%88%96cpp%E8%BD%AF%E4%BB%B6%E7%BC%96%E8%AF%91/#_1","text":"\u7f16\u8f91\u5668 \u7f16\u5199\u6e90\u4ee3\u7801\uff0c\u5982 *.c/*.cpp \u6587\u4ef6\u3002 \u7f16\u8bd1\u5668 \u7f16\u8bd1\u4ee3\u7801\uff0c\u751f\u6210\u76ee\u6807\u6587\u4ef6\uff0c\u5982 *.o \u6587\u4ef6\u3002 \u94fe\u63a5\u5668 \u94fe\u63a5\u76ee\u6807\u4ee3\u7801\uff0c\u751f\u6210\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u5982 *.exe \u6587\u4ef6\u3002 \u5982\u679c\u9879\u76ee\u8f83\u5927\uff0c\u6b65\u9aa42\u548c3\u5c31\u975e\u5e38\u9ebb\u70e6\uff0c\u56e0\u6b64\u5c31\u4ea7\u751f\u7c7b\u4f3c\u6279\u5904\u7406\u7684\u7a0b\u5e8f\uff0c\u6279\u5904\u7406\u7f16\u8bd1\u548c\u94fe\u63a5\u6e90\u6587\u4ef6\uff0c\u8fd9\u5c31\u662fmake/makefile/cmake/CMakeLists.txt/configure\u7b49\u5de5\u5177\u6216\u6587\u4ef6\u3002 make \u662f\u4e00\u4e2a\u6279\u5904\u7406\u5de5\u5177\uff0c\u6839\u636e makefile \u6587\u4ef6\u8fdb\u884c\u7f16\u8bd1\u548c\u94fe\u63a5\u3002 makefile \u6587\u4ef6\u5185\u5c31\u5305\u542b\u4e86 gcc/g++ \u7b49\u7f16\u8bd1\u547d\u4ee4\u3002 makefile \u6587\u4ef6\u672c\u8eab\u6bd4\u8f83\u590d\u6742\uff0c\u5e76\u4e14\u65e0\u6cd5\u8de8\u5e73\u53f0\u3002\u56e0\u6b64\u4ea7\u751f\u4e86 cmake \u5229\u7528 CMakeLists.txt \u8de8\u5e73\u53f0\u4ea7\u751f makefile \u3002 CMakeLists.txt \u65e0\u6cd5\u81ea\u52a8\u751f\u6210\uff0c\u662f\u6700\u7ec8\u9700\u8981\u624b\u52a8\u7f16\u5199\u7684\u811a\u672c\u3002 \u5f53\u7136\uff0c\u5982\u679c\u5bf9 makefile \u8bed\u6cd5\u719f\u6089\uff0c\u5f53\u7136\u53ef\u4ee5\u624b\u52a8\u7f16\u5199 makefile \u6587\u4ef6\uff1b\u5982\u679c\u9879\u76ee\u8f83\u5c0f\uff0c\u53ef\u4ee5\u4e0d\u7f16\u5199 makefile/CMakeLists.txt \uff0c\u624b\u52a8\u4f7f\u7528 gcc/g++ \u8fdb\u884c\u7f16\u8bd1\u548c\u94fe\u63a5\u3002","title":"\u6574\u4f53\u6d41\u7a0b"},{"location":"develop/cpp/c%E6%88%96cpp%E8%BD%AF%E4%BB%B6%E7%BC%96%E8%AF%91/#makefile","text":"","title":"makefile"},{"location":"develop/cpp/c%E6%88%96cpp%E8%BD%AF%E4%BB%B6%E7%BC%96%E8%AF%91/#ccpp_1","text":"\u4e00\u4e2a\u793a\u4f8b\u4ee3\u7801 hello.c \u5982\u4e0b\uff1a 1 2 3 4 5 6 7 // hello.c #include <stdio.h> int main () { printf ( \"Hello!\" ); return 0 ; } \u751f\u6210hello\u53ef\u6267\u884c\u6587\u4ef6\u6240\u9700\u8981\u7684\u547d\u4ee4\u4e3a\uff1a gcc -v -o hello hello.c \u8be5\u8fc7\u7a0b\u53ef\u5206\u89e3\u4e3a4\u4e2a\u6b65\u9aa4\uff1a\u9884\u5904\u7406\u3001\u7f16\u8bd1\u3001\u6c47\u7f16\u3001\u94fe\u63a5\u3002\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\uff0c\u4e00\u822c\u6765\u8bf4\uff0c\u65e0\u8bba\u662fC\u8fd8\u662fC++\uff0c\u9996\u5148\u8981\u628a\u6e90\u6587\u4ef6\u7f16\u8bd1\u6210\u4e2d\u95f4\u4ee3\u7801\u6587\u4ef6\uff0c\u5728Windows\u4e0b\u4e5f\u5c31\u662f *.obj \u6587\u4ef6\uff0cUNIX\u4e0b\u662f *.o \u6587\u4ef6\uff0c\u5373Object File\uff0c\u8fd9\u4e2a\u52a8\u4f5c\u53eb\u505a\u7f16\u8bd1\uff08compile\uff09\uff0c\u4e00\u822c\u6765\u8bf4\u6bcf\u4e2a\u6e90\u6587\u4ef6\u90fd\u5bf9\u5e94\u4e00\u4e2aObject File\u3002\u7136\u540e\u518d\u628a\u5927\u91cf\u7684Object File\u7ec4\u5408\u6210\u6267\u884c\u6587\u4ef6\uff0c\u4e5f\u5c31\u662f\u6253\u5305\uff0c\u8fd9\u4e2a\u52a8\u4f5c\u53eb\u4f5c\u94fe\u63a5\uff08link\uff09\uff0c\u53ef\u4ee5\u94fe\u63a5\u6210\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u6216\u8005\u52a8\u6001\u5e93 *.so/*.dll \uff0c\u6216\u8005\u9759\u6001\u5e93 *.a/*.lib \u3002 \u5728\u7f16\u8bd1\u65f6\uff0c\u7f16\u8bd1\u5668\u53ea\u68c0\u67e5\u7a0b\u5e8f\u8bed\u6cd5\u548c\u51fd\u6570\u3001\u53d8\u91cf\u662f\u5426\u88ab \u58f0\u660e \uff0c\u5982\u679c\u51fd\u6570\u672a\u58f0\u660e\uff0c\u7f16\u8bd1\u5668\u4f1a\u7ed9\u51fa\u8b66\u544a\uff0c\u4f46\u53ef\u4ee5\u751f\u6210Object File\u3002\u5728\u94fe\u63a5\u65f6\uff0c\u94fe\u63a5\u5668\u4f1a\u5728\u6240\u6709\u7684Object File\u4e2d\u5bfb\u627e\u51fd\u6570 \u5b9e\u73b0 \uff0c\u5982\u679c\u627e\u4e0d\u5230\uff0c\u5c31\u4f1a\u62a5\u94fe\u63a5\u9519\u8bef\uff0c\u5728VC\u4e0b\uff0c\u8fd9\u79cd\u9519\u8bef\u4e00\u822c\u662f Link 2001\u9519\u8bef \uff0c\u4e5f\u5c31\u662f\u8bf4\u94fe\u63a5\u5668\u672a\u627e\u5230\u51fd\u6570\u7684\u5b9e\u73b0\uff0c\u9700\u8981\u6307\u5b9a\u51fd\u6570\u7684Object File\u3002","title":"c/cpp\u7f16\u8bd1\u548c\u94fe\u63a5"},{"location":"develop/cpp/c%E6%88%96cpp%E8%BD%AF%E4%BB%B6%E7%BC%96%E8%AF%91/#makefile_1","text":"makefile\u5927\u81f4\u662f\u5148\u5904\u7406\u4e00\u4e9b\u73af\u5883\u53d8\u91cf\u6216\u53c2\u6570\uff0c\u7136\u540e\u4ece\u67d0\u4e00\u4e2a\u4f4d\u7f6e\u5f00\u59cb\u6267\u884c\u547d\u4ee4\u96c6\u3002 1 2 3 4 target ... : prerequisites ... command ... ... target\uff1a\u53ef\u4ee5\u662f\u4e00\u4e2aObject File\uff08\u76ee\u6807\u6587\u4ef6\uff09\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u6267\u884c\u6587\u4ef6\uff0c\u8fd8\u53ef\u4ee5\u662f\u4e00\u4e2a\u6807\u7b7e\uff08label\uff09\u3002 prerequisites\uff1a\u751f\u6210\u8be5target\u6240\u4f9d\u8d56\u7684\u6587\u4ef6\u6216target\u3002 command\uff1a\u8be5target\u8981\u6267\u884c\u7684\u547d\u4ee4\uff08\u4efb\u610f\u7684shell\u547d\u4ee4\uff09\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0ctarget\u8fd9\u4e00\u4e2a\u6216\u591a\u4e2a\u7684\u76ee\u6807\u6587\u4ef6\u4f9d\u8d56\u4e8eprerequisites\u4e2d\u7684\u6587\u4ef6\uff0c\u5176\u751f\u6210\u89c4\u5219\u5b9a\u4e49\u5728command\u4e2d\u3002 \u5927\u591a\u6570\u7684make\u90fd\u652f\u6301\u201cmakefile\u201d\u548c\u201cMakefile\u201d\u8fd9\u4e24\u79cd\u9ed8\u8ba4\u6587\u4ef6\u540d\u3002\u5982\u679c\u8981\u6307\u5b9a\u7279\u5b9a\u7684Makefile\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528make\u7684 -f \u548c --file \u53c2\u6570\uff0c\u5982\uff1a make -f Make.Linux \u6216 make --file Make.AIX \u3002","title":"makefile\u89c4\u5219"},{"location":"develop/cpp/c%E6%88%96cpp%E8%BD%AF%E4%BB%B6%E7%BC%96%E8%AF%91/#_2","text":"\u4e0a\u8ff0\u793a\u4f8b\u4e2d\uff0c\u5b9a\u4e49\u4e86 2\u4e2a\u53c2\u6570 \uff0c 3\u4e2atarget \u3002makefile\u53ef\u4ee5\u6709\u591a\u4e2atarget\uff0ctarget\u4e4b\u95f4\u53ef\u4ee5\u72ec\u7acb\uff0c\u4e5f\u53ef\u4ee5\u76f8\u4e92\u4f9d\u8d56\u6216\u5173\u8054\uff0c\u4f46\u53ea\u80fd\u4ece\u67d0\u4e00\u4e2a\u5f00\u59cb\u6267\u884c\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4ece\u7b2c\u4e00\u4e2atarget\u6267\u884c\u3002\u4e0a\u4f8b\u4e2d\uff0ctarget0\u75312\u4e2a\u5b50target\u7ec4\u6210\u3002\u7c7b\u4f3c\u4e8eC\u8bed\u8a00\uff0c \u53d8\u91cf \u7c7b\u4f3c\u4e8e\u5b8f\u53c2\u6570\u7684\u5b9a\u4e49\uff0c \u627etarget\u5e76\u6267\u884c \u7c7b\u4f3c\u4e8e\u627emain\u51fd\u6570\u5e76\u6267\u884c\u547d\u4ee4\u3002\u5728Makefile\u4e2d\u7684\u547d\u4ee4\uff0c\u5fc5\u987b\u8981\u4ee5 Tab \u952e\u5f00\u59cb\u3002 \u5feb\u901f\u7684\u7406\u89e3MakeFile+\u8bfb\u61c2\u4e00\u4e2aMakeFile how-to-write-makefile","title":"\u793a\u4f8b"},{"location":"develop/cpp/c%E6%88%96cpp%E8%BD%AF%E4%BB%B6%E7%BC%96%E8%AF%91/#cmake","text":"\u4e00\u4e2a\u5229\u7528CMake\u6784\u5efa\u9879\u76ee\u7684\u5178\u578b\u6d41\u7a0b\uff1a \u7f16\u5199CMake\u7684\u914d\u7f6e\u6587\u4ef6 CMakeLists.txt \u3002 \u6267\u884c\u547d\u4ee4 cmake <PATH> \u6216\u8005 ccmake <PATH> \uff0c\u5176\u4e2d <PATH> \u4e3a CMakeLists.txt \u6240\u5728\u7684\u76ee\u5f55\u3002\u76f8\u6bd4 cmake \uff0c ccmake \u63d0\u4f9b\u4e86\u4e00\u4e2a\u4ea4\u4e92\u5f0f\u754c\u9762\u3002 \u4f7f\u7528 make \u547d\u4ee4\u8fdb\u884c\u6784\u5efa\u3002 \u5728\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u7ecf\u5e38\u9700\u8981\u4f7f\u7528\u5916\u90e8\u9879\u76ee\uff0c *.cmake \u6587\u4ef6\u662f\u5916\u90e8\u5305\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u5185\u5bb9\u4e0e CMakeLists.txt \u7c7b\u4f3c\uff0c\u4ee5\u63d0\u4f9b\u5173\u4e8e\u5305\u6700\u57fa\u672c\u7684\u4fe1\u606f\uff0c\u4fbf\u4e8e\u5229\u7528CMake\u6784\u5efa\u9879\u76ee\u3002 What is the use of .cmake files in install function of CMakeLists.txt? How to create a ProjectConfig.cmake file youtube/Deep CMake for Library Authors - Craig Scott - CppCon 2019 set\u6267\u884c\u8be6\u89e3","title":"CMake"},{"location":"develop/cpp/c%E6%88%96cpp%E8%BD%AF%E4%BB%B6%E7%BC%96%E8%AF%91/#_3","text":"","title":"\u8bed\u6cd5\u901f\u67e5"},{"location":"develop/cpp/c%E6%88%96cpp%E8%BD%AF%E4%BB%B6%E7%BC%96%E8%AF%91/#cmake_1","text":"1 cmake_minimum_required ( VERSION 3 .4.1 ) \u5728\u6709\u4e9b\u60c5\u51b5\u4e0b\uff0c\u5982\u679c CMakeLists.txt \u6587\u4ef6\u4e2d\u4f7f\u7528\u4e86\u4e00\u4e9b\u9ad8\u7248\u672c cmake \u7279\u6709\u7684\u4e00\u4e9b\u547d\u4ee4\u7684\u65f6\u5019\uff0c\u5c31\u9700\u8981\u52a0\u4e0a\u8fd9\u6837\u4e00\u884c\uff0c\u63d0\u9192\u7528\u6237\u5347\u7ea7\u5230\u8be5\u7248\u672c\u4e4b\u540e\u518d\u6267\u884c cmake \u3002","title":"\u6307\u5b9acmake\u6700\u5c0f\u7248\u672c"},{"location":"develop/cpp/c%E6%88%96cpp%E8%BD%AF%E4%BB%B6%E7%BC%96%E8%AF%91/#_4","text":"1 project ( demo ) \u4e0a\u4f8b\u4e2d\uff0c\u5f15\u5165\u4e24\u4e2a\u53d8\u91cf demo_BINARY_DIR \u548c demo_SOURCE_DIR \uff0c\u540c\u65f6\uff0ccmake\u81ea\u52a8\u5b9a\u4e49\u4e86\u4e24\u4e2a\u7b49\u4ef7\u7684\u53d8\u91cf PROJECT_BINARY_DIR \u548c PROJECT_SOURCE_DIR \u3002","title":"\u8bbe\u7f6e\u9879\u76ee\u540d\u79f0"},{"location":"develop/cpp/c%E6%88%96cpp%E8%BD%AF%E4%BB%B6%E7%BC%96%E8%AF%91/#_5","text":"1 2 3 add_executable ( demo demo.cpp ) # \u751f\u6210\u53ef\u6267\u884c\u6587\u4ef6 add_library ( common STATIC util.cpp ) # \u751f\u6210\u9759\u6001\u5e93 add_library ( common SHARED util.cpp ) # \u751f\u6210\u52a8\u6001\u5e93\u6216\u5171\u4eab\u5e93 \u4e0a\u4f8b\u4e2d\uff0c demo \u4e3a\u81ea\u5b9a\u4e49\u9879\u76ee\u540d\u79f0\u3002 add_library \u9ed8\u8ba4\u751f\u6210\u9759\u6001\u5e93\uff0c\u901a\u8fc7\u4e0a\u4f8b\u4e2d\u547d\u4ee4\u751f\u6210\u7684\u6587\u4ef6\u540d\u5b57\u5982\u4e0b\uff1a \u5728Linux\u4e0b\u5206\u522b\u662f\uff1a demo/libcommon.a/libcommon.so \u5728Windows\u4e0b\u5206\u522b\u662f\uff1a demo.exe/common.lib/common.dll","title":"\u8bbe\u7f6e\u7f16\u8bd1\u7c7b\u578b"},{"location":"develop/cpp/c%E6%88%96cpp%E8%BD%AF%E4%BB%B6%E7%BC%96%E8%AF%91/#_6","text":"\u660e\u786e\u6307\u51fa\u5305\u542b\u54ea\u4e9b\u6e90\u6587\u4ef6 1 add_library ( demo demo.cpp test.cpp util.cpp ) \u641c\u7d22\u6240\u6709cpp\u6587\u4ef6 1 2 aux_source_directory ( . SRC_LIST ) # \u641c\u7d22\u5f53\u524d\u76ee\u5f55\u4e0b\u7684\u6240\u6709.cpp\u6587\u4ef6 add_library ( demo ${ SRC_LIST } ) \u4e0a\u4f8b\u4e2d\uff0c aux_source_directory(<dir> <VAR>) \u8868\u793a\u641c\u7d22\u76ee\u5f55 <dir> \u4e0b\u6240\u6709\u7684\u6e90\u4ee3\u7801\u6587\u4ef6\uff0c\u5e76\u5c06\u6587\u4ef6\u5217\u8868\u5b58\u50a8\u5230\u53d8\u91cf <VAR> \u4e2d\u3002 \u81ea\u5b9a\u4e49\u641c\u7d22\u89c4\u5219 1 2 3 4 5 6 7 8 9 10 file ( GLOB SRC_LIST \"*.cpp\" \"protocol/*.cpp\" ) add_library ( demo ${ SRC_LIST } ) # \u6216\u8005 file ( GLOB SRC_LIST \"*.cpp\" ) file ( GLOB SRC_PROTOCOL_LIST \"protocol/*.cpp\" ) add_library ( demo ${ SRC_LIST } ${ SRC_PROTOCOL_LIST } ) # \u6216\u8005 aux_source_directory ( . SRC_LIST ) aux_source_directory ( protocol SRC_PROTOCOL_LIST ) add_library ( demo ${ SRC_LIST } ${ SRC_PROTOCOL_LIST } )","title":"\u6307\u5b9a\u7f16\u8bd1\u5305\u542b\u7684\u6e90\u6587\u4ef6"},{"location":"develop/cpp/c%E6%88%96cpp%E8%BD%AF%E4%BB%B6%E7%BC%96%E8%AF%91/#_7","text":"1 find_package ( glog 0 .3.5 REQUIRED ) \u5728\u5b9e\u9645\u5f00\u53d1\u4e2d\uff0c\u7ecf\u5e38\u9700\u8981\u7528\u5230\u7b2c\u4e09\u65b9\u5f00\u6e90\u5e93\uff0c\u8fd9\u4e9b\u5f00\u6e90\u5e93\u6709\u53ef\u80fd\u901a\u8fc7 apt-get install \u65b9\u5f0f\u5b89\u88c5\u5230\u7cfb\u7edf\u76ee\u5f55\u4e0b\uff0c\u4e5f\u6709\u53ef\u80fd\u81ea\u5df1\u4e0b\u8f7d\u6e90\u7801\u5e76\u7f16\u8bd1\u5b89\u88c5\u5230\u6307\u5b9a\u76ee\u5f55\u4e0b\u3002\u5728\u4f7f\u7528\u65f6\uff0c\u9700\u8981\u6839\u636e\u5b9e\u9645\u9700\u6c42\u5bfb\u627e\u5230\u6307\u5b9a\u7248\u672c\u5e93\u7684 \u5934\u6587\u4ef6\u5305\u542b\u8def\u5f84\u3001\u94fe\u63a5\u5e93\u8def\u5f84 \u7b49\u3002CMake\u63d0\u4f9b\u4e86 find_package() \u547d\u4ee4\u67e5\u627e\u8fd9\u4e9b\u4f9d\u8d56\u5305\u3002 find_package() \u6709\u4e24\u79cd\u5de5\u4f5c\u6a21\u5f0f\uff0c\u5206\u522b\u662f\uff1a Module\u6a21\u5f0f\u3002\u9ed8\u8ba4\u641c\u7d22\u6a21\u5f0f\u3002 Config\u6a21\u5f0f\u3002\u5f53Module\u6a21\u5f0f\u5931\u8d25\uff0c\u6216\u8005 find_package() \u4e2d\u6307\u5b9a\u4e86 CONFIG/NO_MODULE \u7b49\u5173\u952e\u5b57\u65f6\u542f\u7528\u3002 \u5f53\u6267\u884c find_package(XXX) \u65f6\uff0cCMake\u641c\u7d22\u6d41\u7a0b\u56fe\u4e3a\uff1a \u547d\u4ee4\u7b7e\u540d 1 2 3 4 find_package ( <package> [ version ] [ EXACT ] [ QUIET ] [ MODULE ] [ REQUIRED ] [[ COMPONENTS ] [ components... ]] [ OPTIONAL_COMPONENTS components... ] [ NO_POLICY_SCOPE ]) package \uff1a\u5fc5\u586b\u53c2\u6570\u3002\u9700\u8981\u67e5\u627e\u7684\u5305\u540d\uff0c\u6ce8\u610f\u5927\u5c0f\u5199\u3002 version \u548c EXACT \uff1a\u53ef\u9009\u53c2\u6570\u3002 version \u6307\u5b9a\u7248\u672c\uff0c\u5982\u679c\u8bbe\u7f6e\u5c31\u5fc5\u987b\u627e\u5230\u8be5\u5305\u4e0e version \u6307\u5b9a\u7248\u672c\u53f7\u7684\u517c\u5bb9\u7248\u672c\uff1b\u5982\u679c\u540c\u65f6\u6307\u5b9a\u4e86 EXACT \uff0c\u5219\u8868\u793a\u5fc5\u987b\u5b8c\u5168\u5339\u914d\u800c\u4e0d\u662f\u517c\u5bb9\u7248\u672c\u5c31\u53ef\u4ee5\u3002 QUIET \uff1a\u53ef\u9009\u53c2\u6570\u3002\u67e5\u627e\u5931\u8d25\u5219\u8f93\u51fa\u62a5\u9519\u4fe1\u606f\uff0c\u4f46\u5982\u679c\u6307\u5b9a REQUIRED \u5219\u603b\u662f\u8f93\u51fa\u3002 MODULE \uff1a\u53ef\u9009\u53c2\u6570\u3002\u5fc5\u987bMODULE\u6a21\u5f0f\u67e5\u627e\u3002 REQUIRED \uff1a\u53ef\u9009\u53c2\u6570\u3002\u8868\u793a\u4e00\u5b9a\u8981\u627e\u5230\u5305\uff0c\u627e\u4e0d\u5230\u7acb\u5373\u505c\u6b62\u3002 COMPONENTS components \uff1a\u53ef\u9009\u53c2\u6570\u3002\u67e5\u627e\u7684\u5305\u4e2d\u5fc5\u987b\u5305\u542b\u7ec4\u4ef6\uff08components\uff09\uff0c\u5426\u5219\u7acb\u5373\u505c\u6b62\u3002 \u4e24\u79cd\u641c\u7d22\u6a21\u5f0f\u7684\u641c\u7d22\u539f\u7406 Module\u6a21\u5f0f\u67e5\u627e Find<PackageName>.cmake \u914d\u7f6e\u6587\u4ef6\u3002\u67e5\u627e\u8def\u5f84\u67092\u4e2a\uff1a CMAKE_MODULE_PATH \u3002\u8be5\u53d8\u91cf\u9ed8\u8ba4\u4e3a\u7a7a\uff0c\u53ef\u901a\u8fc7 set \u547d\u4ee4\u8d4b\u503c\u3002 CMAKE_ROOT \u4e0b\u7684Modules\u76ee\u5f55\uff0c CMAKE_ROOT \u4e3aCMake\u5b89\u88c5\u76ee\u5f55\u3002\u6bd4\u5982 /usr/share/cmake-3.10/Modules \u3002 Config\u6a21\u5f0f\u67e5\u627e PackageName>Config.cmake \u6216 <lower-case-package-name>-config.cmake \u914d\u7f6e\u6587\u4ef6\u3002\u67e5\u627e\u8def\u5f84\u67093\u4e2a\uff1a <PackageName>_DIR \u3002\u8be5\u53d8\u91cf\u9ed8\u8ba4\u4e3a\u7a7a\uff0c\u53ef\u901a\u8fc7 set \u547d\u4ee4\u8d4b\u503c\uff0c\u8be5\u8def\u5f84\u4e3a <PackageName>Config.cmake \u6216 <lower-case-package-name>-config.cmake \u6587\u4ef6 \u6240\u5728\u76ee\u5f55 \u3002 CMAKE_PREFIX_PATH/CMAKE_FRAMEWORK_PATH/CMAKE_APPBUNDLE_PATH \u7684CMake\u53d8\u91cf\u6216 \u73af\u5883\u53d8\u91cf \u3002\u9ed8\u8ba4\u4e3a\u7a7a\u3002 PATH \u73af\u5883\u53d8\u91cf\u3002CMake\u4f1a\u904d\u5386 PATH \u73af\u5883\u53d8\u91cf\u4e2d\u7684\u6bcf\u4e2a\u8def\u5f84\uff0c\u5982\u679c\u8def\u5f84\u4ee5bin\u6216\u8005sbin\u7ed3\u5c3e\uff0c\u5219\u81ea\u52a8\u56de\u9000\u5230\u4e0a\u4e00\u7ea7\uff0c\u4ee5\u4fbf\u5f97\u5230\u6839\u76ee\u5f55\u3002\u5728\u6839\u76ee\u5f55\u4e2d\uff0cCMake\u67e5\u627e\u662f\u5426\u5b58\u5728 <PackageName>Config.cmake \u6216 <lower-case-package-name>-config.cmake \u914d\u7f6e\u6587\u4ef6\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u5219\u4f1a\u7ee7\u7eed\u68c0\u67e5\u6216\u8005\u5339\u914d\u4e00\u4e9b\u8def\u5f84\uff0c\u53c2\u89c1 \u201c\u8f7b\u677e\u641e\u5b9aCMake\u201d\u7cfb\u5217\u4e4bfind_package\u7528\u6cd5\u8be6\u89e3 \u3002 \u67e5\u627e\u5931\u8d25\u7684\u89e3\u51b3\u65b9\u6cd5 \u5982\u679c\u660e\u786e\u77e5\u9053\u8981\u67e5\u627e\u7684\u5e93 <PackageName>Config.cmake \u6216 <lower-case-package-name>-config.cmake \u6587\u4ef6\u6240\u5728\u8def\u5f84\uff0c\u76f4\u63a5 set \u8bbe\u7f6e\u53d8\u91cf <PackageName>_DIR \u3002\u6bd4\u5982\uff1a 1 2 3 4 # OpenCV set(OpenCV_DIR \"~/opencv3_4_4/opencv/build\") # Caffe set(Caffe_DIR ~/caffe/build) \u5982\u679c\u6709\u591a\u4e2a\u5305\u7684\u914d\u7f6e\u6587\u4ef6\u9700\u8981\u67e5\u627e\uff0c\u53ef\u4ee5\u5c06\u914d\u7f6e\u6587\u4ef6\u7edf\u4e00\u5b58\u653e\u5230\u5982 cmake \u7684\u76ee\u5f55\u4e0b\uff0c\u7136\u540e\u5229\u7528 set \u8bbe\u7f6e\u53d8\u91cf CMAKE_PREFIX_PATH \u6307\u5411\u8fd9\u4e2a cmake \u76ee\u5f55\u8def\u5f84\u3002\u6ce8\u610f\uff1a\u6bcf\u4e2a\u5305\u7684\u914d\u7f6e\u6587\u4ef6\u9700\u8981\u5355\u72ec\u653e\u7f6e\u5230\u547d\u540d\u4e3a\u5305\u540d\u7684\u76ee\u5f55\u4e0b\uff08\u6587\u4ef6\u5939\u540d\u4e0d\u533a\u5206\u5927\u5c0f\u5199\uff09\uff0c\u5426\u5219\u4f1a\u627e\u4e0d\u5230\u3002 \u8865\u5145\u52a8\u6001\u5e93 *.so \u548c\u9759\u6001\u5e93 *.a \u7684\u533a\u522b\uff0c\u52a8\u6001\u5e93\u5373\u4f7f\u7f16\u8bd1\u5b8c\u6210\uff0c\u4e5f\u662f\u548c\u5176\u5b83\u52a8\u6001\u5e93\u662f\u5206\u79bb\u7684\uff0c\u56e0\u6b64\u6bcf\u6b21\u7528\u90fd\u8981\u628a\u6240\u6709\u6d89\u53ca\u7684\u52a8\u6001\u5e93\u5168\u90e8\u6dfb\u52a0\u8fdb\u6765\uff1b\u9759\u6001\u5e93\u5728\u7f16\u8bd1\u65f6\u5c31\u548c\u7a0b\u5e8f\u7ed3\u5408\u5728\u4e00\u8d77\u4e86\u3002 \u201c\u8f7b\u677e\u641e\u5b9aCMake\u201d\u7cfb\u5217\u4e4bfind_package\u7528\u6cd5\u8be6\u89e3 CMake\u4e4bfind_package","title":"\u67e5\u627e\u6307\u5b9a\u7684\u5305"},{"location":"develop/cpp/c%E6%88%96cpp%E8%BD%AF%E4%BB%B6%E7%BC%96%E8%AF%91/#_8","text":"1 find_library ( log-lib log ) find_library(<VAR> <name> <path>) \u67e5\u627e\u5230\u6307\u5b9a\u7684\u9884\u7f16\u8bd1\u5e93\uff0c\u5e76\u5c06\u8be5\u8def\u5f84\u5b58\u50a8\u5728\u53d8\u91cf\u4e2d\u3002\u7c7b\u4f3c\u7684\u547d\u4ee4\u8fd8\u6709 find_file()\u3001find_path()\u3001find_program()\u3001find_package() \u3002","title":"\u67e5\u627e\u6307\u5b9a\u7684\u5e93\u6587\u4ef6"},{"location":"develop/cpp/c%E6%88%96cpp%E8%BD%AF%E4%BB%B6%E7%BC%96%E8%AF%91/#cmake_2","text":"1 2 include ( FetchContent ) include ( ExternalProject ) include \u7528\u6765\u8f7d\u5165 CMakeLists.txt \u6587\u4ef6\uff0c\u4e5f\u7528\u4e8e\u8f7d\u5165\u9884\u5b9a\u4e49\u7684CMake\u6a21\u5757\u3002 1 2 include ( file1 [ OPTIONAL ]) include ( module [ OPTIONAL ]) \u4e0a\u8ff0 OPTIONAL \u53c2\u6570\u7684\u4f5c\u7528\u662f\u6587\u4ef6\u4e0d\u5b58\u5728\u4e5f\u4e0d\u4f1a\u4ea7\u751f\u9519\u8bef\u3002\u53ef\u4ee5\u6307\u5b9a\u8f7d\u5165\u4e00\u4e2a\u6587\u4ef6\u6216\u6a21\u5757\uff0c\u5982\u679c\u8f7d\u5165\u6a21\u5757\uff0c\u90a3\u4e48\u5c06\u5728 CMAKE_MODULE_PATH \u4e2d\u641c\u7d22\u8fd9\u4e2a\u6a21\u5757\u5e76\u8f7d\u5165\u3002\u8f7d\u5165\u7684\u5185\u5bb9\u5c06\u5728\u5904\u7406\u5230 include \u8bed\u53e5\u65f6\u76f4\u63a5\u6267\u884c\u3002","title":"\u8f7d\u5165CMake\u9884\u5b9a\u4e49\u6a21\u5757"},{"location":"develop/cpp/c%E6%88%96cpp%E8%BD%AF%E4%BB%B6%E7%BC%96%E8%AF%91/#_9","text":"1 2 3 4 5 include_directories ( ${ CMAKE_CURRENT_SOURCE_DIR } ${ CMAKE_CURRENT_BINARY_DIR } ${ CMAKE_CURRENT_SOURCE_DIR } /include )","title":"\u8bbe\u7f6e\u5305\u542b\u7684\u76ee\u5f55"},{"location":"develop/cpp/c%E6%88%96cpp%E8%BD%AF%E4%BB%B6%E7%BC%96%E8%AF%91/#_10","text":"\u4e0b\u4f8b\u4e2d\uff0c demo \u5747\u4e3a\u81ea\u5b9a\u4e49\u9879\u76ee\u540d\u3002 \u6307\u5b9a\u94fe\u63a5\u52a8\u6001\u5e93\u6216\u9759\u6001\u5e93 1 2 target_link_libraries ( demo libface.a ) # \u94fe\u63a5libface.a target_link_libraries ( demo libface.so ) # \u94fe\u63a5libface.so \u6307\u5b9a\u5168\u8def\u5f84 1 2 target_link_libraries ( demo ${ CMAKE_CURRENT_SOURCE_DIR } /libs/libface.a ) target_link_libraries ( demo ${ CMAKE_CURRENT_SOURCE_DIR } /libs/libface.so ) \u6307\u5b9a\u94fe\u63a5\u591a\u4e2a\u5e93 1 2 3 4 5 target_link_libraries ( demo ${ CMAKE_CURRENT_SOURCE_DIR } /libs/libface.a boost_system.a boost_thread pthread ) \u4e5f\u5c31\u662f\uff0ccmake\u94fe\u63a5\u5e93\u7684\u65b9\u6cd5\u4e3a\uff1a 1 target_link_libraries ( <\u76ee\u6807\u5e93> <\u76ee\u6807\u5e93\u9700\u8981\u94fe\u63a5\u7684\u5e93\u8def\u5f84> ) \u5728Windows\u4e0b\uff0cCMake\u4f1a\u6839\u636e\u94fe\u63a5\u5e93\u76ee\u5f55\uff0c\u641c\u7d22 *.lib \u6587\u4ef6\u3002\u5728Linux\u4e0b\u4f1a\u641c\u7d22 *.so \u6216 *.a \u6587\u4ef6\uff0c\u5982\u679c\u4e24\u8005\u90fd\u5b58\u5728\uff0c\u5219\u4f18\u5148\u8fde\u63a5\u52a8\u6001\u5e93 *.so \u6587\u4ef6\u3002","title":"\u8bbe\u7f6e\u9700\u8981\u94fe\u63a5\u7684\u5e93"},{"location":"develop/cpp/c%E6%88%96cpp%E8%BD%AF%E4%BB%B6%E7%BC%96%E8%AF%91/#cmake_3","text":"\u4e00\u822c\u53d8\u91cf 1 2 set ( TEST \"Local Var\" ON ) set ( TEST \"Parent scope Var\" ON PARENT_SCOPE ) \u7c7b\u4f3c\u4e8eC++\u5c40\u90e8\u53d8\u91cf\uff0c\u4ec5\u5728\u6240\u5728\u4f5c\u7528\u57df\uff08\u5f53\u524dCMakeLists.txt\uff09\u6709\u6548\uff0c\u9664\u975e\u540e\u9762\u4f7f\u7528 PARENT_SCOPE \u3002 1 set ( <variable> <value>... [ PARENT_SCOPE ]) #\u8bbe\u7f6e\u666e\u901a\u53d8\u91cf \u7f13\u5b58\u53d8\u91cf 1 2 3 4 5 # \u82e5\u662f\u7b2c\u4e00\u6b21\u8fd0\u884c\uff0c\u5c06\u7ed9TEST\u8d4b\u503c\u4e3aON # \u82e5\u4e0d\u662f\uff0c\u5219\u4e0d\u4f1a\u4fee\u6539\u3002\u6ce8\u610f\uff0c\u8fd9\u91cc\u5373\u4f7f\u624b\u52a8\u6539\u6210ON->OFF\uff0c\u4e5f\u4e0d\u4f1a\u4fee\u6539Cache\u91cc\u9762\u7684\u503c\uff0c\u9664\u975e\u624b\u52a8\u5220\u9664CMakeCache.txt set ( TEST \"Cache Var\" ON CACHE BOOL ) # \u901a\u8fc7\u6dfb\u52a0FORCE\uff0c\u53ef\u4ee5\u5f3a\u5236\u5237\u65b0Cache\u7684\u503c\uff0c\u907f\u514d\u4e0a\u8ff0\u201d\u5947\u602a\u201c\u7684\u73b0\u8c61 set ( TEST \"Local Var\" ON CACHE BOOL FORCE ) \u7c7b\u4f3c\u4e8eC++\u5168\u5c40\u53d8\u91cf\uff0c\u5728cmake\u6574\u4e2a\u8fd0\u884c\u671f\u95f4\u6709\u6548\u3002 1 set ( <variable> <value>... CACHE <type> <docstring> [ FORCE ]) #\u8bbe\u7f6e\u7f13\u5b58\u53d8\u91cf \u73af\u5883\u53d8\u91cf \u4f7f\u7528 $ENV{NAME} \u53ef\u4ee5\u8c03\u7528\u7cfb\u7edf\u7684\u73af\u5883\u53d8\u91cf\u3002 1 2 set ( ENV { name } value ) set ( ENV { <variable> } [ <value> ]) #\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf Cmake\u547d\u4ee4\u4e4bset\u4ecb\u7ecd","title":"cmake\u4e2d\u7684\u53d8\u91cf"},{"location":"develop/cpp/c%E6%88%96cpp%E8%BD%AF%E4%BB%B6%E7%BC%96%E8%AF%91/#_11","text":"\u4e0b\u4f8b\u4e2d\uff0c SRC_LIST \u5747\u4e3a\u81ea\u5b9a\u4e49\u53d8\u91cf\u540d\uff0c demo \u5747\u4e3a\u81ea\u5b9a\u4e49\u9879\u76ee\u540d\u3002 set \u76f4\u63a5\u8bbe\u7f6e\u53d8\u91cf\u7684\u503c 1 2 set ( SRC_LIST main.cpp test.cpp ) add_executable ( demo ${ SRC_LIST } ) set \u8ffd\u52a0\u53d8\u91cf\u7684\u503c 1 2 3 set ( SRC_LIST main.cpp ) set ( SRC_LIST ${ SRC_LIST } test.cpp ) add_executable ( demo ${ SRC_LIST } )","title":"\u8bbe\u7f6e\u53d8\u91cf"},{"location":"develop/cpp/c%E6%88%96cpp%E8%BD%AF%E4%BB%B6%E7%BC%96%E8%AF%91/#_12","text":"option() \u6307\u4ee4\u3002\u5982\uff1a 1 option ( USE_LIB \"Whether use lib to link matrix_test\" ON ) \u4f7f\u7528\u65f6\uff0c\u901a\u8fc7\u547d\u4ee4\u884c\u4f20\u5165\u503c\uff1a 1 2 # \u53ef\u4ee5\u4f7f\u7528set()\u8fdb\u884c\u8d4b\u503c\uff1b\u4e5f\u53ef\u4ee5\u901a\u8fc7\u547d\u4ee4\u884c\u4f20\u53c2\u65b9\u5f0f\u4f7f\u7528\uff0c-D\u663e\u5f0f\u58f0\u660e >>> cmake .. -D USE_LIB = OFF","title":"\u7528\u6237\u4f20\u53c2\u63a7\u5236\u53d8\u91cf\u7684\u503c"},{"location":"develop/cpp/c%E6%88%96cpp%E8%BD%AF%E4%BB%B6%E7%BC%96%E8%AF%91/#_13","text":"\u53d8\u91cf \u542b\u4e49 CMAKE_INSTALL_PREFIX \u6307\u5b9a\u5b89\u88c5\u76ee\u5f55\uff0c\u4e00\u822c\u4f5c\u4e3a cmake \u547d\u4ee4\u884c\u53c2\u6570 CMAKE_SOURCE_DIR CMakeLists.txt \u6240\u5728\u76ee\u5f55 CMAKE_CURRENT_SOURCE_DIR \u5f53\u524d\u6b63\u5728\u5904\u7406 CMakeLists.txt \u6240\u5728\u76ee\u5f55 PROJECT_SOURCE_DIR \u4ee3\u7801\u6839\u76ee\u5f55 PROJECT_BINARY_DIR \u6267\u884c cmake \u547d\u4ee4\u6240\u5728\u76ee\u5f55\uff0c\u4e00\u822c\u662f\u521b\u5efabuild\u76ee\u5f55\u5e76\u4e14\u8fdb\u5165\u8be5\u76ee\u5f55\uff0c\u6267\u884c cmake \u547d\u4ee4 CMAKE_INCLUDE_PATH \u5934\u6587\u4ef6\u6240\u5728\u76ee\u5f55 CMAKE_LIBRARY_PATH lib\u5e93\u6240\u5728\u76ee\u5f55 CMAKE_BUIlD_TYPE \u7f16\u8bd1\u7c7b\u578b\uff0c\u4f8b\u5982Debug\u3001Release\u3002\u4f8b\u5982 -DCMAKE_BUIlD_TYPE=Debug CMAKE_C_COMPILER / CMAKE_CXX_COMPILER \u6307\u5b9aC/C++\u7f16\u8bd1\u5668\u8def\u5f84\uff0c\u4f8b\u5982\uff1a set(CMAKE_C_COMPILER \"/usr/local/gcc\") \u6216 -DCMAKE_C_COMPILER=/usr/local/gcc CMAKE_C_FLAGS / CMAKE_CXX_FLAGS \u4f20\u9012FLAGS\u7ed9C/C++\u7f16\u8bd1\u5668\uff0c\u4e24\u4e2a\u53d8\u91cf\u5206\u522b\u6307\u5b9aC/C++\u7f16\u8bd1\u7684\u9009\u9879\uff0c\u4f8b\u5982\uff1a set(CMAKE_CXX_FLAGS \"-g\") CMAKE_CXX_FLAGS_DEBUG \u9664\u4e86CMAKE_CXX_FLAGS\u5916\uff0c\u5728Debug\u914d\u7f6e\u4e0b\uff0c\u989d\u5916\u7684\u53c2\u6570 CMAKE_CXX_FLAGS_RELEASE \u9664\u4e86CMAKE_CXX_FLAGS\u5916\uff0c\u5728Release\u914d\u7f6e\u4e0b\uff0c\u989d\u5916\u7684\u53c2\u6570\u9ed8\u8ba4\u53c2\u6570\uff0c\u53c2\u6570\u9ed8\u8ba4\u503c\u4e3a -O3 -NDEBUG CMAKE_VERBOSE_MAKEFILE set(CMAKE_VERBOSE_MAKEFILE ON) \uff1a\u5f00\u542f\u8be6\u60c5\u6253\u5370 \u4e0a\u8ff0\u53d8\u91cf\u5747\u4e3a CMakeLists.txt \u6587\u4ef6\u4e2d\u53ef\u901a\u8fc7 set \u914d\u7f6e\u7684\u5185\u7f6e\u53d8\u91cf\uff0c\u5982\u679c\u901a\u8fc7 cmake \u6267\u884c\u65f6\u4e34\u65f6\u52a0\u4e0a\u7684\u53d8\u91cf\u8bbe\u7f6e\uff0c\u5219\u9700\u8981\u52a0\u4e0a -D \u524d\u7f00\u3002\u6bd4\u5982\uff0c\u6307\u5b9a\u76ee\u6807\u6587\u4ef6\u7684\u5b89\u88c5\u8def\u5f84\u65f6\uff0c\u53ef\u4ee5\u5728 CMakeLists.txt \u5185\u8bbe\u7f6e CMAKE_INSTALL_PREFIX \u53d8\u91cf\uff1a 1 2 3 # CMakeLists.txt # \u8be5\u8bed\u53e5\u9700\u8981\u653e\u5728project()\u8bed\u53e5\u540e\u9762 set ( CMAKE_INSTALL_PREFIX <your install path> ) \u540c\u6837\u53ef\u4ee5\u5728\u6267\u884c cmake \u65f6\u4e34\u65f6\u8bbe\u7f6e\uff1a 1 cmake -DCMAKE_INSTALL_PREFIX = /your install path .. \u5728\u6307\u5b9a\u76ee\u6807\u6587\u4ef6\u5b89\u88c5\u4f4d\u7f6e\u7684\u573a\u666f\u4e0b\uff0c\u6267\u884c cmake \u65f6\u4e34\u65f6\u8bbe\u7f6e\u5219\u662f\u63a8\u8350\u65b9\u5f0f\u3002 \u6b64\u5916\uff0c\u8865\u5145\u5e38\u89c1\u7684C++\u7f16\u8bd1\u9009\u9879\uff1a 1 2 3 4 5 6 set ( CMAKE_CXX_COMPILER \"clang++\" ) # \u663e\u793a\u6307\u5b9a\u4f7f\u7528\u7684C++\u7f16\u8bd1\u5668 set ( CMAKE_CXX_FLAGS \"-std=c++11\" ) # c++11 set ( CMAKE_CXX_FLAGS \"-g\" ) # \u8c03\u8bd5\u4fe1\u606f set ( CMAKE_CXX_FLAGS \"-Wall\" ) # \u5f00\u542f\u6240\u6709\u8b66\u544a set ( CMAKE_CXX_FLAGS_DEBUG \"-O0\" ) # \u8c03\u8bd5\u5305\u4e0d\u4f18\u5316 set ( CMAKE_CXX_FLAGS_RELEASE \"-O2 -DNDEBUG \" ) # release\u5305\u4f18\u5316","title":"\u5e38\u89c1\u5185\u7f6e\u53d8\u91cf"},{"location":"develop/cpp/c%E6%88%96cpp%E8%BD%AF%E4%BB%B6%E7%BC%96%E8%AF%91/#_14","text":"\u53ef\u4ee5\u901a\u8fc7 message() \u6307\u4ee4\u6253\u5370\u51fa\u53d8\u91cf\u7684\u503c\uff0c\u7c7b\u4f3c print() \u51fd\u6570\u3002 1 message ( \"Configuration: ${ USE_LIB } \" ) Cmake \u8bed\u6cd5\u4e0e\u5b9e\u6218\u5165\u95e8 CMake\u57fa\u672c\u5e38\u8bc6 CMake-official_help cmake\uff1a\u6307\u5b9a\u76ee\u6807\u6587\u4ef6\u7684\u5b89\u88c5\u4f4d\u7f6e WeNet CmakeList.txt\u5b9e\u6218\u89e3\u8bfb","title":"\u6253\u5370"},{"location":"develop/cpp/gcc%E7%9A%84%E5%B8%B8%E7%94%A8%E7%BC%96%E8%AF%91%E9%80%89%E9%A1%B9/","text":"GCC\u7684\u5e38\u7528\u7f16\u8bd1\u9009\u9879 \u7f16\u8bd1\u9009\u9879 -O \u662f\u4f18\u5316\u6807\u5fd7\uff08Optimization flags\uff09\u7684\u5408\u96c6\uff0c\u6bd4\u5982\u6307\u5b9a\u7f16\u8bd1\u9009\u9879 -Og \u5c31\u7b49\u540c\u4e8e\u6253\u5f00\u4e86 -fauto-inc-dec,-fbranch-count-reg\uff0c...,-fbranch-count-reg,... \u6807\u5fd7\u3002GCC\u7f16\u8bd1\u9009\u9879\u793a\u4f8b\u5982\u4e0b\uff1a 1 2 3 4 CFLAGS := -Wall -Wundef -Wshadow -Wconversion -Werror=return-type \\ -Werror=implicit-function-declaration -Werror=unused-variable \\ -fno-strict-aliasing -fno-common -fshort-wchar -fno-PIE \\ -Wno-trigraphs -Os \u8c03\u8bd5\u9009\u9879 \u6307\u5b9a -g \u6807\u5fd7\uff0c\u5982\u679c\u4e3a\u4e86\u63d0\u5347\u8c03\u8bd5\u7a0b\u5e8f\u6027\u80fd\uff0c\u53ef\u4ee5\u914d\u5408\u4f7f\u7528\u9488\u5bf9\u8c03\u8bd5\u7684\u4f18\u5316\u9009\u9879 -Og \u3002 \u4f18\u5316\u9009\u9879 \u5e38\u7528\u7684\u662f -O2 \u548c -Os \u3002 -O0 / -O \uff1a\u9ed8\u8ba4\u9009\u9879\uff0c\u4e0d\u6267\u884c\u4f18\u5316\u3002 -O1 \uff1a\u6267\u884c\u7ea7\u522b1\u7684\u4f18\u5316\uff0c\u5c1d\u8bd5\u51cf\u5c11\u4ee3\u7801\u5927\u5c0f\u548c\u63d0\u9ad8\u6027\u80fd\uff0c\u6bd4\u5982 -fdce\uff08\u79fb\u9664\u4e0d\u53ef\u80fd\u6267\u884c\u5230\u7684\u4ee3\u7801\uff09\uff0c-fif-conversion\uff08\u5c1d\u8bd5\u7b80\u5316if\u8bed\u53e5\uff09\uff0c-fmerge-constants\uff08\u5c1d\u8bd5\u5408\u5e76\u76f8\u540c\u7684\u5e38\u91cf\uff09\u3002\u4f46\u662f\u4e0d\u5305\u62ec\u9700\u8981\u82b1\u8d39\u5927\u91cf\u7f16\u8bd1\u65f6\u95f4\u7684\u4f18\u5316\u9009\u9879\uff1b -Og \uff1a\u8c03\u8bd5\u9009\u9879\uff0c\u542f\u7528 -O1 \u7684\u4f18\u5316\u6267\u6307\u4ee4\uff0c\u540c\u65f6\u83b7\u53d6\u66f4\u591a\u8c03\u8bd5\u4fe1\u606f\u3002 -O2 \uff1a\u6267\u884c -O1 \u6240\u6709\u4f18\u5316\u9009\u9879\uff0c\u540c\u65f6\u989d\u5916\u6267\u884c\u51e0\u4e4e\u5168\u90e8\u4e0d\u9700\u8981\u5728\u7a7a\u95f4\u548c\u6027\u80fd\u4e4b\u95f4\u5e73\u8861\u7684\u4f18\u5316\u9009\u9879\u3002\u6bd4\u5982 -fgcse\uff08\u4f18\u5316\u5168\u5c40\u516c\u5171\u8868\u8fbe\u5f0f\u3001\u5e38\u91cf\u7684\u4f20\u9012\uff09\uff0c-fcode-hoisting\uff08\u5c06\u6240\u6709\u5206\u652f\u90fd\u9700\u8981\u6267\u884c\u7684\u8868\u8fbe\u5f0f\u5c3d\u65e9\u6267\u884c\uff09\uff0c-finline-functions\uff08\u8003\u8651\u5c06\u6240\u6709\u51fd\u6570\u53d8\u6210\u5185\u8054\u51fd\u6570\uff09\uff1b -Os \uff1a\u4e13\u95e8\u7528\u4e8e \u4f18\u5316\u4ee3\u7801\u5927\u5c0f \u7684\u4f18\u5316\u7ea7\u522b\uff0c\u6267\u884c -O2 \u6240\u6709\u4f18\u5316\u9009\u9879\uff0c\u540c\u65f6\u6392\u9664\u90a3\u4e9b\u53ef\u80fd\u5bfc\u81f4\u7a0b\u5e8f\u5927\u5c0f\u589e\u52a0\u7684\u4f18\u5316\u9009\u9879\uff1b -O3 \uff1a\u6700\u9ad8\u4f18\u5316\u7b49\u7ea7\uff0c\u8be5\u4f18\u5316\u7ea7\u522b\u8f83\u9ad8\uff0c\u6267\u884c\u7684\u4f18\u5316\u4e0d\u4f1a\u5f88\u76f4\u89c2\uff0c\u53ef\u80fd\u4e5f\u4f1a\u51fa\u73b0\u4e00\u4e9b\u95ee\u9898\u3002 \u8b66\u544a\u9009\u9879 \u4e00\u822c\u542f\u7528\u7279\u5b9a\u7c7b\u578b\u8b66\u544a\u7684\u683c\u5f0f\u4e3a -Wxxx \uff0c\u6392\u9664\u7279\u5b9a\u7c7b\u578b\u7684\u8b66\u544a\u7684\u683c\u5f0f\u4e3a -Wno-xxx \u3002\u6bd4\u5982\u4f7f\u7528 -Wall -Wno-unused-variable \u53ef\u4ee5\u4ece -Wall \u4e2d\u6392\u9664 -Wunused-variable \u3002 -Wall \uff1a\u5e38\u7528\u7f16\u8bd1\u9009\u9879\uff0c\u5bf9\u4ee3\u7801\u8fdb\u884c\u57fa\u672c\u68c0\u67e5\uff1b -Wextra \uff1a -Wall \u57fa\u7840\u4e0a\u7684\u8865\u5145\u8b66\u544a\uff1b -Werror \uff1a\u6240\u6709\u8b66\u544a\u89c6\u4f5c\u9519\u8bef\u3002 GCC\u7684\u5e38\u7528\u7f16\u8bd1\u9009\u9879 Optimize Options (Using the GNU Compiler Collection (GCC)) Warning Options (Using the GNU Compiler Collection (GCC))","title":"GCC\u7684\u5e38\u7528\u7f16\u8bd1\u9009\u9879"},{"location":"develop/cpp/gcc%E7%9A%84%E5%B8%B8%E7%94%A8%E7%BC%96%E8%AF%91%E9%80%89%E9%A1%B9/#gcc","text":"\u7f16\u8bd1\u9009\u9879 -O \u662f\u4f18\u5316\u6807\u5fd7\uff08Optimization flags\uff09\u7684\u5408\u96c6\uff0c\u6bd4\u5982\u6307\u5b9a\u7f16\u8bd1\u9009\u9879 -Og \u5c31\u7b49\u540c\u4e8e\u6253\u5f00\u4e86 -fauto-inc-dec,-fbranch-count-reg\uff0c...,-fbranch-count-reg,... \u6807\u5fd7\u3002GCC\u7f16\u8bd1\u9009\u9879\u793a\u4f8b\u5982\u4e0b\uff1a 1 2 3 4 CFLAGS := -Wall -Wundef -Wshadow -Wconversion -Werror=return-type \\ -Werror=implicit-function-declaration -Werror=unused-variable \\ -fno-strict-aliasing -fno-common -fshort-wchar -fno-PIE \\ -Wno-trigraphs -Os","title":"GCC\u7684\u5e38\u7528\u7f16\u8bd1\u9009\u9879"},{"location":"develop/cpp/gcc%E7%9A%84%E5%B8%B8%E7%94%A8%E7%BC%96%E8%AF%91%E9%80%89%E9%A1%B9/#_1","text":"\u6307\u5b9a -g \u6807\u5fd7\uff0c\u5982\u679c\u4e3a\u4e86\u63d0\u5347\u8c03\u8bd5\u7a0b\u5e8f\u6027\u80fd\uff0c\u53ef\u4ee5\u914d\u5408\u4f7f\u7528\u9488\u5bf9\u8c03\u8bd5\u7684\u4f18\u5316\u9009\u9879 -Og \u3002","title":"\u8c03\u8bd5\u9009\u9879"},{"location":"develop/cpp/gcc%E7%9A%84%E5%B8%B8%E7%94%A8%E7%BC%96%E8%AF%91%E9%80%89%E9%A1%B9/#_2","text":"\u5e38\u7528\u7684\u662f -O2 \u548c -Os \u3002 -O0 / -O \uff1a\u9ed8\u8ba4\u9009\u9879\uff0c\u4e0d\u6267\u884c\u4f18\u5316\u3002 -O1 \uff1a\u6267\u884c\u7ea7\u522b1\u7684\u4f18\u5316\uff0c\u5c1d\u8bd5\u51cf\u5c11\u4ee3\u7801\u5927\u5c0f\u548c\u63d0\u9ad8\u6027\u80fd\uff0c\u6bd4\u5982 -fdce\uff08\u79fb\u9664\u4e0d\u53ef\u80fd\u6267\u884c\u5230\u7684\u4ee3\u7801\uff09\uff0c-fif-conversion\uff08\u5c1d\u8bd5\u7b80\u5316if\u8bed\u53e5\uff09\uff0c-fmerge-constants\uff08\u5c1d\u8bd5\u5408\u5e76\u76f8\u540c\u7684\u5e38\u91cf\uff09\u3002\u4f46\u662f\u4e0d\u5305\u62ec\u9700\u8981\u82b1\u8d39\u5927\u91cf\u7f16\u8bd1\u65f6\u95f4\u7684\u4f18\u5316\u9009\u9879\uff1b -Og \uff1a\u8c03\u8bd5\u9009\u9879\uff0c\u542f\u7528 -O1 \u7684\u4f18\u5316\u6267\u6307\u4ee4\uff0c\u540c\u65f6\u83b7\u53d6\u66f4\u591a\u8c03\u8bd5\u4fe1\u606f\u3002 -O2 \uff1a\u6267\u884c -O1 \u6240\u6709\u4f18\u5316\u9009\u9879\uff0c\u540c\u65f6\u989d\u5916\u6267\u884c\u51e0\u4e4e\u5168\u90e8\u4e0d\u9700\u8981\u5728\u7a7a\u95f4\u548c\u6027\u80fd\u4e4b\u95f4\u5e73\u8861\u7684\u4f18\u5316\u9009\u9879\u3002\u6bd4\u5982 -fgcse\uff08\u4f18\u5316\u5168\u5c40\u516c\u5171\u8868\u8fbe\u5f0f\u3001\u5e38\u91cf\u7684\u4f20\u9012\uff09\uff0c-fcode-hoisting\uff08\u5c06\u6240\u6709\u5206\u652f\u90fd\u9700\u8981\u6267\u884c\u7684\u8868\u8fbe\u5f0f\u5c3d\u65e9\u6267\u884c\uff09\uff0c-finline-functions\uff08\u8003\u8651\u5c06\u6240\u6709\u51fd\u6570\u53d8\u6210\u5185\u8054\u51fd\u6570\uff09\uff1b -Os \uff1a\u4e13\u95e8\u7528\u4e8e \u4f18\u5316\u4ee3\u7801\u5927\u5c0f \u7684\u4f18\u5316\u7ea7\u522b\uff0c\u6267\u884c -O2 \u6240\u6709\u4f18\u5316\u9009\u9879\uff0c\u540c\u65f6\u6392\u9664\u90a3\u4e9b\u53ef\u80fd\u5bfc\u81f4\u7a0b\u5e8f\u5927\u5c0f\u589e\u52a0\u7684\u4f18\u5316\u9009\u9879\uff1b -O3 \uff1a\u6700\u9ad8\u4f18\u5316\u7b49\u7ea7\uff0c\u8be5\u4f18\u5316\u7ea7\u522b\u8f83\u9ad8\uff0c\u6267\u884c\u7684\u4f18\u5316\u4e0d\u4f1a\u5f88\u76f4\u89c2\uff0c\u53ef\u80fd\u4e5f\u4f1a\u51fa\u73b0\u4e00\u4e9b\u95ee\u9898\u3002","title":"\u4f18\u5316\u9009\u9879"},{"location":"develop/cpp/gcc%E7%9A%84%E5%B8%B8%E7%94%A8%E7%BC%96%E8%AF%91%E9%80%89%E9%A1%B9/#_3","text":"\u4e00\u822c\u542f\u7528\u7279\u5b9a\u7c7b\u578b\u8b66\u544a\u7684\u683c\u5f0f\u4e3a -Wxxx \uff0c\u6392\u9664\u7279\u5b9a\u7c7b\u578b\u7684\u8b66\u544a\u7684\u683c\u5f0f\u4e3a -Wno-xxx \u3002\u6bd4\u5982\u4f7f\u7528 -Wall -Wno-unused-variable \u53ef\u4ee5\u4ece -Wall \u4e2d\u6392\u9664 -Wunused-variable \u3002 -Wall \uff1a\u5e38\u7528\u7f16\u8bd1\u9009\u9879\uff0c\u5bf9\u4ee3\u7801\u8fdb\u884c\u57fa\u672c\u68c0\u67e5\uff1b -Wextra \uff1a -Wall \u57fa\u7840\u4e0a\u7684\u8865\u5145\u8b66\u544a\uff1b -Werror \uff1a\u6240\u6709\u8b66\u544a\u89c6\u4f5c\u9519\u8bef\u3002 GCC\u7684\u5e38\u7528\u7f16\u8bd1\u9009\u9879 Optimize Options (Using the GNU Compiler Collection (GCC)) Warning Options (Using the GNU Compiler Collection (GCC))","title":"\u8b66\u544a\u9009\u9879"},{"location":"develop/cpp/stl%E7%9A%84map/","text":"STL\u7684map \u952e\u503c\u5bf9\u5bb9\u5668map\u548cunordered_map map\u57fa\u4e8e\u7ea2\u9ed1\u6811\u5b9e\u73b0\uff0c\u7ea2\u9ed1\u6811\u662f\u4e00\u79cd\u81ea\u5e73\u8861\u7684\u4e8c\u53c9\u6811\uff0c\u4fdd\u8bc1\u6709\u5e8f\u4e14\u6700\u574f\u60c5\u51b5\u4e0b\u7684\u8fd0\u884c\u65f6\u95f4\u3002 unordered_map\u57fa\u4e8ehash_table\u5b9e\u73b0\u3002 \u5728\u9700\u8981\u6709\u5e8f\u6027\u6216\u8005\u5bf9\u5355\u6b21\u67e5\u8be2\u6709\u65f6\u95f4\u8981\u6c42\u7684\u5e94\u7528\u573a\u666f\u4e0b\uff0c\u5e94\u4f7f\u7528map\uff0c\u5176\u4f59\u60c5\u51b5\u5e94\u4f7f\u7528unordered_map\u3002 https://zhuanlan.zhihu.com/p/48066839 map\u548cunordered_map\u4f7f\u7528\u65b9\u6cd5\u57fa\u672c\u76f8\u540c\u3002 http://www.cplusplus.com/reference/unordered_map/unordered_map/ https://blog.csdn.net/qq_21997625/article/details/84672775 https://blog.csdn.net/shuzfan/article/details/53115922#%E4%BA%8C-%E6%8F%92%E5%85%A5%E6%93%8D%E4%BD%9C map\u7684\u4f7f\u7528\u793a\u4f8b 1 2 3 4 5 6 7 8 9 10 11 12 13 #include <iostream> #include <unordered_map> #include <string> int main ( int argc , char ** argv ) { std :: unordered_map < int , std :: string > map ; map . insert ( std :: make_pair ( 1 , \"Scala\" )); map . insert ( std :: make_pair ( 2 , \"Haskell\" )); std :: unordered_map < int , std :: string >:: iterator it ; if (( it = map . find ( 6 )) != map . end ()) { std :: cout << it -> second << std :: endl ; } return 0 ; }","title":"STL\u7684map"},{"location":"develop/cpp/stl%E7%9A%84map/#stlmap","text":"","title":"STL\u7684map"},{"location":"develop/cpp/stl%E7%9A%84map/#mapunordered_map","text":"map\u57fa\u4e8e\u7ea2\u9ed1\u6811\u5b9e\u73b0\uff0c\u7ea2\u9ed1\u6811\u662f\u4e00\u79cd\u81ea\u5e73\u8861\u7684\u4e8c\u53c9\u6811\uff0c\u4fdd\u8bc1\u6709\u5e8f\u4e14\u6700\u574f\u60c5\u51b5\u4e0b\u7684\u8fd0\u884c\u65f6\u95f4\u3002 unordered_map\u57fa\u4e8ehash_table\u5b9e\u73b0\u3002 \u5728\u9700\u8981\u6709\u5e8f\u6027\u6216\u8005\u5bf9\u5355\u6b21\u67e5\u8be2\u6709\u65f6\u95f4\u8981\u6c42\u7684\u5e94\u7528\u573a\u666f\u4e0b\uff0c\u5e94\u4f7f\u7528map\uff0c\u5176\u4f59\u60c5\u51b5\u5e94\u4f7f\u7528unordered_map\u3002 https://zhuanlan.zhihu.com/p/48066839 map\u548cunordered_map\u4f7f\u7528\u65b9\u6cd5\u57fa\u672c\u76f8\u540c\u3002 http://www.cplusplus.com/reference/unordered_map/unordered_map/ https://blog.csdn.net/qq_21997625/article/details/84672775 https://blog.csdn.net/shuzfan/article/details/53115922#%E4%BA%8C-%E6%8F%92%E5%85%A5%E6%93%8D%E4%BD%9C","title":"\u952e\u503c\u5bf9\u5bb9\u5668map\u548cunordered_map"},{"location":"develop/cpp/stl%E7%9A%84map/#map","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 #include <iostream> #include <unordered_map> #include <string> int main ( int argc , char ** argv ) { std :: unordered_map < int , std :: string > map ; map . insert ( std :: make_pair ( 1 , \"Scala\" )); map . insert ( std :: make_pair ( 2 , \"Haskell\" )); std :: unordered_map < int , std :: string >:: iterator it ; if (( it = map . find ( 6 )) != map . end ()) { std :: cout << it -> second << std :: endl ; } return 0 ; }","title":"map\u7684\u4f7f\u7528\u793a\u4f8b"},{"location":"develop/cpp/stl%E7%9A%84string/","text":"string\u64cd\u4f5c string\u57fa\u7840\u64cd\u4f5c string\u7684\u5934\u6587\u4ef6\uff1a #include <string> string\u62fc\u63a5\uff1a string1+=string2 \uff0c\u6ce8\u610f\uff0c\u7531\u4e8e += \u7684\u8fd0\u7b97\u7b26\u91cd\u8f7d\u662f\u5f15\u7528\uff0c\u4e0d\u540c\u4e8e string1=string1+string2 \uff0c += \u6548\u7387\u66f4\u9ad8 int/float\u7b49\u8f6c\u6362\u4e3astring\uff1a to_string(val) string\u6bd4\u8f83\u5927\u5c0f\uff1a string1 < string2 c++\u6392\u5e8f\uff1a 1 2 3 4 5 6 7 8 #include <algorithm> sort ( begin , last , compare ); bool compare ( int x1 , int x2 ){ return x1 > x2 ; } sort ( vec . begin (), vec . end (), compare ); string\u8fed\u4ee3\u5668 begin/end/rbegin/rend\u7684\u7528\u6cd5 iterator begin\uff1abegin()\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668,\u6307\u5411\u5b57\u7b26\u4e32\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20 iterator end\uff1aend()\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u6307\u5411\u5b57\u7b26\u4e32\u7684\u672b\u5c3e(\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e) iterator rbegin\uff1arbegin()\u8fd4\u56de\u4e00\u4e2a\u9006\u5411\u8fed\u4ee3\u5668\uff0c\u6307\u5411\u5b57\u7b26\u4e32\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26 iterator rend\uff1arend()\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u9006\u5411\u8fed\u4ee3\u5668\uff0c\u6307\u5411\u5b57\u7b26\u4e32\u7684\u5f00\u5934\uff08\u7b2c\u4e00\u4e2a\u5b57\u7b26\u7684\u524d\u4e00\u4e2a\u4f4d\u7f6e\uff09 find_if\u548cfind_if_not\u7684\u7528\u6cd5 find_if() \u51fd\u6570\u4f1a\u6839\u636e\u6307\u5b9a\u7684\u67e5\u627e\u89c4\u5219\uff0c\u5728\u6307\u5b9a\u533a\u57df\u5185\u67e5\u627e\u7b2c\u4e00\u4e2a\u7b26\u5408\u8be5\u51fd\u6570\u8981\u6c42\uff08\u4f7f\u51fd\u6570\u8fd4\u56de true\uff09\u7684\u5143\u7d20\u3002 \u5305\u542b\u4e8e\u5934\u6587\u4ef6\uff1a #include <algorithm> find_if() \u51fd\u6570\u7684\u8bed\u6cd5\u683c\u5f0f\u5982\u4e0b\uff1a 1 InputIterator find_if ( InputIterator first , InputIterator last , UnaryPredicate pred ); \u5176\u4e2d\uff0cfirst \u548c last \u90fd\u4e3a\u8f93\u5165\u8fed\u4ee3\u5668\uff0c\u5176\u7ec4\u5408 [first, last) \u7528\u4e8e\u6307\u5b9a\u8981\u67e5\u627e\u7684\u533a\u57df\uff1bpred \u7528\u4e8e\u81ea\u5b9a\u4e49\u67e5\u627e\u89c4\u5219\u3002 \u8be5\u51fd\u6570\u4f1a\u8fd4\u56de\u4e00\u4e2a\u8f93\u5165\u8fed\u4ee3\u5668\uff0c\u5f53\u67e5\u627e\u6210\u529f\u65f6\uff0c\u8be5\u8fed\u4ee3\u5668\u6307\u5411\u7684\u662f\u7b2c\u4e00\u4e2a\u7b26\u5408\u67e5\u627e\u89c4\u5219\u7684\u5143\u7d20\uff1b\u53cd\u4e4b\uff0c\u5982\u679c find_if() \u51fd\u6570\u67e5\u627e\u5931\u8d25\uff0c\u5219\u8be5\u8fed\u4ee3\u5668\u7684\u6307\u5411\u548c last \u8fed\u4ee3\u5668\u76f8\u540c\u3002 \u6ce8\u610f\uff1a find \u7528\u4e8e\u67e5\u627e\u7279\u5b9a\u7684\u5143\u7d20\uff0c\u800c find_if \u6839\u636e\u6307\u5b9a\u7684\u67e5\u627e\u89c4\u5219\uff0c\u5728\u6307\u5b9a\u533a\u57df\u5185\u67e5\u627e\u7b2c\u4e00\u4e2a\u7b26\u5408\u8be5\u51fd\u6570\u8981\u6c42\uff08\u4f7f\u51fd\u6570\u8fd4\u56de true\uff09\u7684\u5143\u7d20\uff0c\u56e0\u6b64\u540e\u8005 find_if \u53ef\u901a\u8fc7\u4f20\u5165lambda\u81ea\u5b9a\u4e49\u67e5\u627e\u76ee\u6807\uff0c\u66f4\u4e3a\u7075\u6d3b\u3002 https://www.cnblogs.com/pandamohist/p/13854705.html \u901a\u8fc7reverse_iterator\u7684base()\u5f97\u5230iterator end()\u4e0erbegin()\u3001begin()\u4e0erend()\u4e0d\u5728\u540c\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u8fd9\u662f\u4e3a\u4e86\u4fdd\u8bc1\u533a\u95f4\u4fdd\u6301\u5de6\u5f00\u53f3\u95ed\u7684\u539f\u5219\uff0c\u5220\u9664\u3001\u63d2\u5165\u7b49\u51fd\u6570\u9700\u8981\u4f20\u5165\u6b63\u5411\u8fed\u4ee3\u5668\uff0c\u6240\u4ee5\u9700\u8981\u7528reverse_iterator\u9006\u5411\u8fed\u4ee3\u5668\u7684\u6210\u5458\u51fd\u6570base()\u5c06\u5176\u8f6c\u6362\u4e3aiterator\u3002 string\u7684\u5b57\u7b26\u4e32\u62fc\u63a5 \u5b57\u7b26\u4e32\u62fc\u63a5\u65f6\uff0c += \u548c append \u57fa\u672c\u6ca1\u4ec0\u4e48\u4e0d\u540c\u3002 https://www.jianshu.com/p/c86d38db63ce \u793a\u4f8b\uff1a\u53bb\u9664\u7a7a\u683c string\u53bb\u9664\u524d\u540e\u7a7a\u683c\u3001\u4e2d\u95f4\u591a\u4f59\u7a7a\u683c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 #include <string> #include <iostream> #include <algorithm> using namespace std ; void trimLeft ( string & s ){ s . erase ( s . begin (), find_if ( s . begin (), s . end (),[]( char ch ){ return ! isspace ( ch ); })); } void trimRight ( string & s ){ s . erase ( find_if ( s . rbegin (), s . rend (),[]( char ch ){ return ! isspace ( ch ); }). base (), s . end ()); } void trim ( string & s ){ trimLeft ( s ); trimRight ( s ); } string removeSurpluseStr ( string s ){ string ret = \"\" ; bool isPrevSpace = false ; for ( char ch : s ){ if ( ch == ' ' ){ if ( isPrevSpace ){ continue ; } else { ret += ch ; isPrevSpace = true ; } } else { ret += ch ; } } return ret ; } string\u8bfb\u5199\u6d41 stringstream \u7528\u4e8e\u5c06string\u8bfb\u5165\u6d41stream\uff0c\u5fc5\u987b\u5f15\u7528\u5934\u6587\u4ef6\uff1a 1 #include <sstream> getline getline\u7528\u4e8e\u8bfb\u53d6\u5b57\u7b26\u6d41\uff0c\u5e76\u5c06\u5176\u5b58\u50a8\u5230string\uff0c\u53ef\u4ee5\u4f20\u5165\u5206\u9694\u7b26 https://www.cplusplus.com/reference/string/string/getline/ \u793a\u4f8b\uff1a\u5206\u5272\u5b57\u7b26\u4e32 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 #include <iostream> #include <sstream> #include <vector> using std :: string ; using std :: vector ; using std :: cout ; using std :: endl ; string StringTrim ( string str , string trimed_char ){ if ( str . empty ()){ return str ; } str . erase ( 0 , str . find_first_not_of ( trimed_char )); str . erase ( str . find_last_not_of ( trimed_char ) + 1 ); return str ; } vector < string > StringSplit ( string str ){ vector < string > vecString ; if ( str . empty ()){ return vecString ; } str = StringTrim ( str , \"[\" ); str = StringTrim ( str , \"]\" ); std :: stringstream ss ; ss . str ( str ); string item ; while ( getline ( ss , item , ',' )){ if ( ! item . empty ()){ vecString . push_back ( item ); } } return vecString ; } vector < int > StringToInt ( vector < string > strs ){ vector < int > vecInt ; for ( auto item : strs ){ vecInt . push_back ( stoi ( item )); } return vecInt ; } int main (){ string data = \"[1,2,3,3]\" ; vector < string > strs = StringSplit ( data ); for ( auto item : strs ){ cout << item << \" \\n \" ; } return 1 ; }","title":"string\u64cd\u4f5c"},{"location":"develop/cpp/stl%E7%9A%84string/#string","text":"","title":"string\u64cd\u4f5c"},{"location":"develop/cpp/stl%E7%9A%84string/#string_1","text":"string\u7684\u5934\u6587\u4ef6\uff1a #include <string> string\u62fc\u63a5\uff1a string1+=string2 \uff0c\u6ce8\u610f\uff0c\u7531\u4e8e += \u7684\u8fd0\u7b97\u7b26\u91cd\u8f7d\u662f\u5f15\u7528\uff0c\u4e0d\u540c\u4e8e string1=string1+string2 \uff0c += \u6548\u7387\u66f4\u9ad8 int/float\u7b49\u8f6c\u6362\u4e3astring\uff1a to_string(val) string\u6bd4\u8f83\u5927\u5c0f\uff1a string1 < string2 c++\u6392\u5e8f\uff1a 1 2 3 4 5 6 7 8 #include <algorithm> sort ( begin , last , compare ); bool compare ( int x1 , int x2 ){ return x1 > x2 ; } sort ( vec . begin (), vec . end (), compare );","title":"string\u57fa\u7840\u64cd\u4f5c"},{"location":"develop/cpp/stl%E7%9A%84string/#string_2","text":"","title":"string\u8fed\u4ee3\u5668"},{"location":"develop/cpp/stl%E7%9A%84string/#beginendrbeginrend","text":"iterator begin\uff1abegin()\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668,\u6307\u5411\u5b57\u7b26\u4e32\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20 iterator end\uff1aend()\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u6307\u5411\u5b57\u7b26\u4e32\u7684\u672b\u5c3e(\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e) iterator rbegin\uff1arbegin()\u8fd4\u56de\u4e00\u4e2a\u9006\u5411\u8fed\u4ee3\u5668\uff0c\u6307\u5411\u5b57\u7b26\u4e32\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26 iterator rend\uff1arend()\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u9006\u5411\u8fed\u4ee3\u5668\uff0c\u6307\u5411\u5b57\u7b26\u4e32\u7684\u5f00\u5934\uff08\u7b2c\u4e00\u4e2a\u5b57\u7b26\u7684\u524d\u4e00\u4e2a\u4f4d\u7f6e\uff09","title":"begin/end/rbegin/rend\u7684\u7528\u6cd5"},{"location":"develop/cpp/stl%E7%9A%84string/#find_iffind_if_not","text":"find_if() \u51fd\u6570\u4f1a\u6839\u636e\u6307\u5b9a\u7684\u67e5\u627e\u89c4\u5219\uff0c\u5728\u6307\u5b9a\u533a\u57df\u5185\u67e5\u627e\u7b2c\u4e00\u4e2a\u7b26\u5408\u8be5\u51fd\u6570\u8981\u6c42\uff08\u4f7f\u51fd\u6570\u8fd4\u56de true\uff09\u7684\u5143\u7d20\u3002 \u5305\u542b\u4e8e\u5934\u6587\u4ef6\uff1a #include <algorithm> find_if() \u51fd\u6570\u7684\u8bed\u6cd5\u683c\u5f0f\u5982\u4e0b\uff1a 1 InputIterator find_if ( InputIterator first , InputIterator last , UnaryPredicate pred ); \u5176\u4e2d\uff0cfirst \u548c last \u90fd\u4e3a\u8f93\u5165\u8fed\u4ee3\u5668\uff0c\u5176\u7ec4\u5408 [first, last) \u7528\u4e8e\u6307\u5b9a\u8981\u67e5\u627e\u7684\u533a\u57df\uff1bpred \u7528\u4e8e\u81ea\u5b9a\u4e49\u67e5\u627e\u89c4\u5219\u3002 \u8be5\u51fd\u6570\u4f1a\u8fd4\u56de\u4e00\u4e2a\u8f93\u5165\u8fed\u4ee3\u5668\uff0c\u5f53\u67e5\u627e\u6210\u529f\u65f6\uff0c\u8be5\u8fed\u4ee3\u5668\u6307\u5411\u7684\u662f\u7b2c\u4e00\u4e2a\u7b26\u5408\u67e5\u627e\u89c4\u5219\u7684\u5143\u7d20\uff1b\u53cd\u4e4b\uff0c\u5982\u679c find_if() \u51fd\u6570\u67e5\u627e\u5931\u8d25\uff0c\u5219\u8be5\u8fed\u4ee3\u5668\u7684\u6307\u5411\u548c last \u8fed\u4ee3\u5668\u76f8\u540c\u3002 \u6ce8\u610f\uff1a find \u7528\u4e8e\u67e5\u627e\u7279\u5b9a\u7684\u5143\u7d20\uff0c\u800c find_if \u6839\u636e\u6307\u5b9a\u7684\u67e5\u627e\u89c4\u5219\uff0c\u5728\u6307\u5b9a\u533a\u57df\u5185\u67e5\u627e\u7b2c\u4e00\u4e2a\u7b26\u5408\u8be5\u51fd\u6570\u8981\u6c42\uff08\u4f7f\u51fd\u6570\u8fd4\u56de true\uff09\u7684\u5143\u7d20\uff0c\u56e0\u6b64\u540e\u8005 find_if \u53ef\u901a\u8fc7\u4f20\u5165lambda\u81ea\u5b9a\u4e49\u67e5\u627e\u76ee\u6807\uff0c\u66f4\u4e3a\u7075\u6d3b\u3002 https://www.cnblogs.com/pandamohist/p/13854705.html","title":"find_if\u548cfind_if_not\u7684\u7528\u6cd5"},{"location":"develop/cpp/stl%E7%9A%84string/#reverse_iteratorbaseiterator","text":"end()\u4e0erbegin()\u3001begin()\u4e0erend()\u4e0d\u5728\u540c\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u8fd9\u662f\u4e3a\u4e86\u4fdd\u8bc1\u533a\u95f4\u4fdd\u6301\u5de6\u5f00\u53f3\u95ed\u7684\u539f\u5219\uff0c\u5220\u9664\u3001\u63d2\u5165\u7b49\u51fd\u6570\u9700\u8981\u4f20\u5165\u6b63\u5411\u8fed\u4ee3\u5668\uff0c\u6240\u4ee5\u9700\u8981\u7528reverse_iterator\u9006\u5411\u8fed\u4ee3\u5668\u7684\u6210\u5458\u51fd\u6570base()\u5c06\u5176\u8f6c\u6362\u4e3aiterator\u3002","title":"\u901a\u8fc7reverse_iterator\u7684base()\u5f97\u5230iterator"},{"location":"develop/cpp/stl%E7%9A%84string/#string_3","text":"\u5b57\u7b26\u4e32\u62fc\u63a5\u65f6\uff0c += \u548c append \u57fa\u672c\u6ca1\u4ec0\u4e48\u4e0d\u540c\u3002 https://www.jianshu.com/p/c86d38db63ce","title":"string\u7684\u5b57\u7b26\u4e32\u62fc\u63a5"},{"location":"develop/cpp/stl%E7%9A%84string/#_1","text":"string\u53bb\u9664\u524d\u540e\u7a7a\u683c\u3001\u4e2d\u95f4\u591a\u4f59\u7a7a\u683c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 #include <string> #include <iostream> #include <algorithm> using namespace std ; void trimLeft ( string & s ){ s . erase ( s . begin (), find_if ( s . begin (), s . end (),[]( char ch ){ return ! isspace ( ch ); })); } void trimRight ( string & s ){ s . erase ( find_if ( s . rbegin (), s . rend (),[]( char ch ){ return ! isspace ( ch ); }). base (), s . end ()); } void trim ( string & s ){ trimLeft ( s ); trimRight ( s ); } string removeSurpluseStr ( string s ){ string ret = \"\" ; bool isPrevSpace = false ; for ( char ch : s ){ if ( ch == ' ' ){ if ( isPrevSpace ){ continue ; } else { ret += ch ; isPrevSpace = true ; } } else { ret += ch ; } } return ret ; }","title":"\u793a\u4f8b\uff1a\u53bb\u9664\u7a7a\u683c"},{"location":"develop/cpp/stl%E7%9A%84string/#string_4","text":"","title":"string\u8bfb\u5199\u6d41"},{"location":"develop/cpp/stl%E7%9A%84string/#stringstream","text":"\u7528\u4e8e\u5c06string\u8bfb\u5165\u6d41stream\uff0c\u5fc5\u987b\u5f15\u7528\u5934\u6587\u4ef6\uff1a 1 #include <sstream>","title":"stringstream"},{"location":"develop/cpp/stl%E7%9A%84string/#getline","text":"getline\u7528\u4e8e\u8bfb\u53d6\u5b57\u7b26\u6d41\uff0c\u5e76\u5c06\u5176\u5b58\u50a8\u5230string\uff0c\u53ef\u4ee5\u4f20\u5165\u5206\u9694\u7b26 https://www.cplusplus.com/reference/string/string/getline/","title":"getline"},{"location":"develop/cpp/stl%E7%9A%84string/#_2","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 #include <iostream> #include <sstream> #include <vector> using std :: string ; using std :: vector ; using std :: cout ; using std :: endl ; string StringTrim ( string str , string trimed_char ){ if ( str . empty ()){ return str ; } str . erase ( 0 , str . find_first_not_of ( trimed_char )); str . erase ( str . find_last_not_of ( trimed_char ) + 1 ); return str ; } vector < string > StringSplit ( string str ){ vector < string > vecString ; if ( str . empty ()){ return vecString ; } str = StringTrim ( str , \"[\" ); str = StringTrim ( str , \"]\" ); std :: stringstream ss ; ss . str ( str ); string item ; while ( getline ( ss , item , ',' )){ if ( ! item . empty ()){ vecString . push_back ( item ); } } return vecString ; } vector < int > StringToInt ( vector < string > strs ){ vector < int > vecInt ; for ( auto item : strs ){ vecInt . push_back ( stoi ( item )); } return vecInt ; } int main (){ string data = \"[1,2,3,3]\" ; vector < string > strs = StringSplit ( data ); for ( auto item : strs ){ cout << item << \" \\n \" ; } return 1 ; }","title":"\u793a\u4f8b\uff1a\u5206\u5272\u5b57\u7b26\u4e32"},{"location":"develop/cpp/stl%E7%9A%84vector/","text":"STL\u7684vector \u5e38\u89c1\u6210\u5458\u51fd\u6570 \u65b9\u6cd5 \u542b\u4e49 push_back \u5728\u5bb9\u5668\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4e4b\u540e\u6dfb\u52a0\u4e00\u4e2a\u65b0\u5143\u7d20 emplace_back \u4e0epush_back\u540c\u4e49\uff0c\u5bb9\u5668\u5c3e\u90e8\u8ffd\u52a0\u65b0\u5143\u7d20 resize \u8c03\u6574\u5bb9\u5668\u5927\u5c0f\uff0c\u5982\u679c\u8be5\u51fd\u6570\u6709\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0c\u5219\u65b0\u5143\u7d20\u521d\u59cb\u5316\u4e3a\u8be5\u53c2\u6570\u7684\u526f\u672c \u793a\u4f8b\uff1a\u521b\u5efa\u4e8c\u7ef4\u6570\u7ec4 STL\u7684vector\u7248\u672c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 vector < vector < int > > get2DVector ( int m , int n ){ vector < vector < int > > res ( m ); for ( int i = 0 ; i < m ; ++ i ){ res [ i ]. resize ( n ); } return res ; } void print2DVector ( vector < vector < int > > & vec ){ int m = vec . size (); if ( m <= 0 ) return ; int n = vec [ 0 ]. size (); if ( n <= 0 ) return ; for ( int i = 0 ; i < m ; ++ i ){ for ( int j = 0 ; j < n ; ++ j ){ cout << vec [ i ][ j ] << \" \\t \" ; } cout << endl ; } } \u52a8\u6001\u5185\u5b58\u7248\u672c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 int ** get2DArrary ( int m , int n ){ int ** p = new int * [ m ]; for ( int i = 0 ; i < m ; ++ i ){ p [ i ] = new int [ n ]; } return p ; } void print2DArray ( int ** p , int m , int n ){ if ( p == nullptr || m <= 0 || n <= 0 ) return ; for ( int i = 0 ; i < m ; ++ i ){ for ( int j = 0 ; j < n ; ++ j ){ cout << p [ i ][ j ] << \" \\t \" ; } cout << endl ; } }","title":"STL\u7684vector"},{"location":"develop/cpp/stl%E7%9A%84vector/#stlvector","text":"","title":"STL\u7684vector"},{"location":"develop/cpp/stl%E7%9A%84vector/#_1","text":"\u65b9\u6cd5 \u542b\u4e49 push_back \u5728\u5bb9\u5668\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4e4b\u540e\u6dfb\u52a0\u4e00\u4e2a\u65b0\u5143\u7d20 emplace_back \u4e0epush_back\u540c\u4e49\uff0c\u5bb9\u5668\u5c3e\u90e8\u8ffd\u52a0\u65b0\u5143\u7d20 resize \u8c03\u6574\u5bb9\u5668\u5927\u5c0f\uff0c\u5982\u679c\u8be5\u51fd\u6570\u6709\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0c\u5219\u65b0\u5143\u7d20\u521d\u59cb\u5316\u4e3a\u8be5\u53c2\u6570\u7684\u526f\u672c","title":"\u5e38\u89c1\u6210\u5458\u51fd\u6570"},{"location":"develop/cpp/stl%E7%9A%84vector/#_2","text":"STL\u7684vector\u7248\u672c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 vector < vector < int > > get2DVector ( int m , int n ){ vector < vector < int > > res ( m ); for ( int i = 0 ; i < m ; ++ i ){ res [ i ]. resize ( n ); } return res ; } void print2DVector ( vector < vector < int > > & vec ){ int m = vec . size (); if ( m <= 0 ) return ; int n = vec [ 0 ]. size (); if ( n <= 0 ) return ; for ( int i = 0 ; i < m ; ++ i ){ for ( int j = 0 ; j < n ; ++ j ){ cout << vec [ i ][ j ] << \" \\t \" ; } cout << endl ; } } \u52a8\u6001\u5185\u5b58\u7248\u672c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 int ** get2DArrary ( int m , int n ){ int ** p = new int * [ m ]; for ( int i = 0 ; i < m ; ++ i ){ p [ i ] = new int [ n ]; } return p ; } void print2DArray ( int ** p , int m , int n ){ if ( p == nullptr || m <= 0 || n <= 0 ) return ; for ( int i = 0 ; i < m ; ++ i ){ for ( int j = 0 ; j < n ; ++ j ){ cout << p [ i ][ j ] << \" \\t \" ; } cout << endl ; } }","title":"\u793a\u4f8b\uff1a\u521b\u5efa\u4e8c\u7ef4\u6570\u7ec4"},{"location":"develop/cpp/vnote_images/20220308154650564_4665.png.annotations/","text":"![[20220308154650564_4665.png]] \"any\" PARAMS = 1 \u53c2\u6570\u5b9a\u4e49 VARS = target0 : targeti, target2-1 target targeti: target echo $$(VARS) (\u9010\u6761\u6267\u884c) [CMD ...] target2:1 echo $$ (PARAMS) DE @kaiyuan","title":"20220308154650564 4665.png.annotations"},{"location":"develop/docker/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","text":"docker\u5e38\u7528\u547d\u4ee4 \u57fa\u672c\u6982\u5ff5 \u955c\u50cf\uff08Image\uff09\uff1aDocker \u955c\u50cf\u662f\u4e00\u4e2a\u7279\u6b8a\u7684\u6587\u4ef6\u7cfb\u7edf\uff0c\u9664\u4e86\u63d0\u4f9b\u5bb9\u5668\u8fd0\u884c\u65f6\u6240\u9700\u7684\u7a0b\u5e8f\u3001\u5e93\u3001\u8d44\u6e90\u3001\u914d\u7f6e\u7b49\u6587\u4ef6\u5916\uff0c\u8fd8\u5305\u542b\u4e86\u4e00\u4e9b\u4e3a\u8fd0\u884c\u65f6\u51c6\u5907\u7684\u4e00\u4e9b\u914d\u7f6e\u53c2\u6570\uff08\u5982\u533f\u540d\u5377\u3001\u73af\u5883\u53d8\u91cf\u3001\u7528\u6237\u7b49\uff09\u3002\u955c\u50cf\u4e0d\u5305\u542b\u4efb\u4f55\u52a8\u6001\u6570\u636e\uff0c\u5176\u5185\u5bb9\u5728\u6784\u5efa\u4e4b\u540e\u4e5f\u4e0d\u4f1a\u88ab\u6539\u53d8\u3002 \u5bb9\u5668\uff08Container\uff09\uff1a\u955c\u50cf\uff08Image\uff09\u548c\u5bb9\u5668\uff08Container\uff09\u7684\u5173\u7cfb\uff0c\u5c31\u50cf\u662f\u9762\u5411\u5bf9\u8c61\u7a0b\u5e8f\u8bbe\u8ba1\u4e2d\u7684 \u7c7b \u548c \u5b9e\u4f8b \u4e00\u6837\uff0c\u955c\u50cf\u662f\u9759\u6001\u7684\u5b9a\u4e49\uff0c\u5bb9\u5668\u662f\u955c\u50cf\u8fd0\u884c\u65f6\u7684\u5b9e\u4f53\u3002\u5bb9\u5668\u53ef\u4ee5\u88ab\u521b\u5efa\u3001\u542f\u52a8\u3001\u505c\u6b62\u3001\u5220\u9664\u3001\u6682\u505c\u7b49\u3002 \u4ed3\u5e93\uff08Repository\uff09\uff1a\u4ed3\u5e93\uff08Repository\uff09\u7c7b\u4f3cGit\u7684\u8fdc\u7a0b\u4ed3\u5e93\uff0c\u96c6\u4e2d\u5b58\u653e\u955c\u50cf\u6587\u4ef6\u3002 \u670d\u52a1 \u4f5c\u7528 \u547d\u4ee4 \u67e5\u770bdocker\u7248\u672c\u4fe1\u606f docker version \u67e5\u770bdocker\u7b80\u8981\u4fe1\u606f docker -v \u542f\u52a8docker systemctl start docker \u5173\u95eddocker systemctl stop docker \u8bbe\u7f6e\u5f00\u673a\u542f\u52a8 systemctl enable docker \u91cd\u542fdocker\u670d\u52a1 service docker start \u5173\u95eddocker\u670d\u52a1 service docker stop \u955c\u50cf \u955c\u50cf\u4ed3\u5e93 \u53ef\u4ee5\u4ece Docker Hub \u7b49\u955c\u50cf\u4ed3\u5e93\u83b7\u53d6\u5927\u91cf\u9ad8\u8d28\u91cf\u7684\u955c\u50cf\u3002 \u4f5c\u7528 \u547d\u4ee4 \u68c0\u7d22\u955c\u50cf docker search <\u5173\u952e\u5b57> \u62c9\u53d6\u955c\u50cf docker pull [\u9009\u9879] [Docker Registry \u5730\u5740[:\u7aef\u53e3\u53f7]/]<\u4ed3\u5e93\u540d>[:\u6807\u7b7e] \u955c\u50cf\u7ba1\u7406 \u4f5c\u7528 \u547d\u4ee4 \u5217\u51fa\u955c\u50cf docker image ls \u6216 docker images \u5220\u9664\u955c\u50cf docker rmi <\u955c\u50cfID> \u5bfc\u51fa\u955c\u50cf docker save \u5bfc\u5165\u955c\u50cf docker load \u955c\u50cf\u8fd0\u884c\uff1a\u521b\u5efa\u5e76\u8fd0\u884c\u4e00\u4e2a\u5bb9\u5668 docker run <\u955c\u50cfID> \u4f7f\u7528Dockerfile\u521b\u5efa\u955c\u50cf docker build Dockerfile\u6784\u5efa\u955c\u50cf Dockerfile\u662f\u4e00\u4e2a\u6587\u672c\u683c\u5f0f\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u53ef\u4ee5\u4f7f\u7528 Dockerfile \u6765\u5feb\u901f\u521b\u5efa\u81ea\u5b9a\u4e49\u7684\u955c\u50cf\u3002Dockerfile \u7531\u4e00\u884c\u884c\u884c\u547d\u4ee4\u8bed\u53e5\u7ec4\u6210\uff0c\u5e76\u4e14\u652f\u6301\u4ee5#\u5f00\u5934\u7684\u6ce8\u91ca\u884c\u3002 Dockerfile\u5e38\u89c1\u547d\u4ee4 FROM\uff1a\u6307\u5b9a\u57fa\u7840\u955c\u50cf RUN\uff1a\u6267\u884c\u547d\u4ee4 COPY\uff1a\u590d\u5236\u6587\u4ef6 ADD\uff1a\u66f4\u9ad8\u7ea7\u7684\u590d\u5236\u6587\u4ef6 CMD\uff1a\u5bb9\u5668\u542f\u52a8\u547d\u4ee4 ENV\uff1a\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf EXPOSE\uff1a\u66b4\u9732\u7aef\u53e3 \u793a\u4f8b\uff1a 1 2 3 4 5 FROM java:8 MAINTAINER \"jinshw\"<jinshw@qq.com> ADD mapcharts-0.0.1-SNAPSHOT.jar mapcharts.jar EXPOSE 8080 CMD java -jar mapcharts.jar \u5bb9\u5668 \u5bb9\u5668\u751f\u547d\u5468\u671f \u542f\u52a8 \u542f\u52a8\u5bb9\u5668\u6709\u4e24\u79cd\u65b9\u5f0f\uff0c\u4e00\u662f\u57fa\u4e8e\u955c\u50cf\u65b0\u5efa\u5bb9\u5668\u5e76\u542f\u52a8\uff0c\u4e8c\u662f\u5c06\u5904\u4e8e\u7ec8\u6b62\u72b6\u6001\uff08stopped\uff09\u7684\u5bb9\u5668\u91cd\u65b0\u542f\u52a8\u3002 1 2 3 4 # \u65b0\u5efa\u5e76\u542f\u52a8 docker run <\u955c\u50cf\u540d/\u955c\u50cfID> # \u542f\u52a8\u5df2\u7ec8\u6b62\u5bb9\u5668 docker start <\u5bb9\u5668ID> \u67e5\u770b\u5bb9\u5668 1 2 3 4 # \u5217\u51fa\u672c\u673a\u8fd0\u884c\u7684\u5bb9\u5668 docker ps # \u5217\u51fa\u672c\u673a\u6240\u6709\u7684\u5bb9\u5668\uff08\u5305\u62ec\u505c\u6b62\u548c\u8fd0\u884c\uff09 docker ps -a \u505c\u6b62\u5bb9\u5668 1 2 3 4 # \u505c\u6b62\u8fd0\u884c\u7684\u5bb9\u5668 docker stop <\u5bb9\u5668ID> # \u6740\u6b7b\u5bb9\u5668\u8fdb\u7a0b docker kill <\u5bb9\u5668ID> \u91cd\u542f\u5bb9\u5668 1 docker restart <\u5bb9\u5668ID> \u5220\u9664\u5bb9\u5668 1 docker rm <\u5bb9\u5668ID> \u6ce8\u610f\u5230\uff0c docker rm \u5220\u9664\u5bb9\u5668\uff0c docker rmi \u5220\u9664\u955c\u50cf\u3002 \u8fdb\u5165\u5bb9\u5668 \u8fdb\u5165\u5bb9\u5668\u6709\u4e24\u79cd\u65b9\u5f0f\uff1a 1 2 3 4 # \u5982\u679c\u4ece\u8fd9\u4e2a stdin \u4e2d exit\uff0c\u4f1a\u5bfc\u81f4\u5bb9\u5668\u7684\u505c\u6b62 docker attach [ \u5bb9\u5668ID ] # \u4ea4\u4e92\u5f0f\u8fdb\u5165\u5bb9\u5668 docker exec [ \u5bb9\u5668ID ] \u901a\u5e38\u91c7\u7528\u4ea4\u4e92\u5f0f\u65b9\u5f0f\u8fdb\u5165\u5bb9\u5668\uff0c docker exec \u5e38\u89c1\u53c2\u6570\uff1a -d / --detach \u5728\u5bb9\u5668\u4e2d\u540e\u53f0\u6267\u884c\u547d\u4ee4\u3002 -i / --interactive=true|false \uff1a\u6253\u5f00\u6807\u51c6\u8f93\u5165\u63a5\u53d7\u7528\u6237\u8f93\u5165\u547d\u4ee4\u3002 \u5bfc\u5165\u548c\u5bfc\u51fa \u5bb9\u5668\u5bfc\u51fa 1 2 # \u5bfc\u51fa\u4e00\u4e2a\u5df2\u7ecf\u521b\u5efa\u7684\u5bb9\u5668\u5230\u4e00\u4e2a\u6587\u4ef6 docker export <\u5bb9\u5668ID> \u5bb9\u5668\u5bfc\u5165 1 2 # \u5bfc\u51fa\u7684\u5bb9\u5668\u5feb\u7167\u6587\u4ef6\u53ef\u4ee5\u518d\u5bfc\u5165\u4e3a\u955c\u50cf docker import <\u8def\u5f84> \u6ce8\u610f\u5230\uff0c docker load \u5c06\u6587\u4ef6\u5bfc\u5165\u4e3a\u955c\u50cf\uff0c\u800c docker import \u5c06\u5bb9\u5668\u91cd\u65b0\u5bfc\u5165\u4e3a\u955c\u50cf\u3002 \u5176\u5b83 \u67e5\u770b\u65e5\u5fd7 1 2 # \u5bfc\u51fa\u7684\u5bb9\u5668\u5feb\u7167\u6587\u4ef6\u53ef\u4ee5\u518d\u5bfc\u5165\u4e3a\u955c\u50cf docker logs <\u5bb9\u5668ID> \u8be5\u547d\u4ee4\u7684\u5e38\u7528\u53c2\u6570\uff1a -f \uff1a\u8ddf\u8e2a\u65e5\u5fd7\u8f93\u51fa\u3002 --since \uff1a\u663e\u793a\u67d0\u4e2a\u5f00\u59cb\u65f6\u95f4\u7684\u6240\u6709\u65e5\u5fd7\u3002 -t \uff1a\u663e\u793a\u65f6\u95f4\u6233\u3002 --tail \uff1a\u4ec5\u5217\u51fa\u6700\u65b0N\u6761\u5bb9\u5668\u65e5\u5fd7\u3002 \u590d\u5236\u6587\u4ef6 1 2 3 4 # \u4ece\u4e3b\u673a\u590d\u5236\u5230\u5bb9\u5668 sudo docker cp <\u5bbf\u4e3b\u673a\u8def\u5f84> <\u5bb9\u5668ID>:<\u5bb9\u5668\u8def\u5f84> # \u4ece\u5bb9\u5668\u590d\u5236\u5230\u4e3b\u673a sudo docker cp <\u5bb9\u5668ID>:<\u5bb9\u5668\u8def\u5f84> <\u5bbf\u4e3b\u673a\u8def\u5f84> \u4e00\u5f20\u8111\u56fe\u6574\u7406Docker\u5e38\u7528\u547d\u4ee4 - SegmentFault \u601d\u5426","title":"docker\u5e38\u7528\u547d\u4ee4"},{"location":"develop/docker/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#docker","text":"","title":"docker\u5e38\u7528\u547d\u4ee4"},{"location":"develop/docker/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#_1","text":"\u955c\u50cf\uff08Image\uff09\uff1aDocker \u955c\u50cf\u662f\u4e00\u4e2a\u7279\u6b8a\u7684\u6587\u4ef6\u7cfb\u7edf\uff0c\u9664\u4e86\u63d0\u4f9b\u5bb9\u5668\u8fd0\u884c\u65f6\u6240\u9700\u7684\u7a0b\u5e8f\u3001\u5e93\u3001\u8d44\u6e90\u3001\u914d\u7f6e\u7b49\u6587\u4ef6\u5916\uff0c\u8fd8\u5305\u542b\u4e86\u4e00\u4e9b\u4e3a\u8fd0\u884c\u65f6\u51c6\u5907\u7684\u4e00\u4e9b\u914d\u7f6e\u53c2\u6570\uff08\u5982\u533f\u540d\u5377\u3001\u73af\u5883\u53d8\u91cf\u3001\u7528\u6237\u7b49\uff09\u3002\u955c\u50cf\u4e0d\u5305\u542b\u4efb\u4f55\u52a8\u6001\u6570\u636e\uff0c\u5176\u5185\u5bb9\u5728\u6784\u5efa\u4e4b\u540e\u4e5f\u4e0d\u4f1a\u88ab\u6539\u53d8\u3002 \u5bb9\u5668\uff08Container\uff09\uff1a\u955c\u50cf\uff08Image\uff09\u548c\u5bb9\u5668\uff08Container\uff09\u7684\u5173\u7cfb\uff0c\u5c31\u50cf\u662f\u9762\u5411\u5bf9\u8c61\u7a0b\u5e8f\u8bbe\u8ba1\u4e2d\u7684 \u7c7b \u548c \u5b9e\u4f8b \u4e00\u6837\uff0c\u955c\u50cf\u662f\u9759\u6001\u7684\u5b9a\u4e49\uff0c\u5bb9\u5668\u662f\u955c\u50cf\u8fd0\u884c\u65f6\u7684\u5b9e\u4f53\u3002\u5bb9\u5668\u53ef\u4ee5\u88ab\u521b\u5efa\u3001\u542f\u52a8\u3001\u505c\u6b62\u3001\u5220\u9664\u3001\u6682\u505c\u7b49\u3002 \u4ed3\u5e93\uff08Repository\uff09\uff1a\u4ed3\u5e93\uff08Repository\uff09\u7c7b\u4f3cGit\u7684\u8fdc\u7a0b\u4ed3\u5e93\uff0c\u96c6\u4e2d\u5b58\u653e\u955c\u50cf\u6587\u4ef6\u3002","title":"\u57fa\u672c\u6982\u5ff5"},{"location":"develop/docker/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#_2","text":"\u4f5c\u7528 \u547d\u4ee4 \u67e5\u770bdocker\u7248\u672c\u4fe1\u606f docker version \u67e5\u770bdocker\u7b80\u8981\u4fe1\u606f docker -v \u542f\u52a8docker systemctl start docker \u5173\u95eddocker systemctl stop docker \u8bbe\u7f6e\u5f00\u673a\u542f\u52a8 systemctl enable docker \u91cd\u542fdocker\u670d\u52a1 service docker start \u5173\u95eddocker\u670d\u52a1 service docker stop","title":"\u670d\u52a1"},{"location":"develop/docker/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#_3","text":"","title":"\u955c\u50cf"},{"location":"develop/docker/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#_4","text":"\u53ef\u4ee5\u4ece Docker Hub \u7b49\u955c\u50cf\u4ed3\u5e93\u83b7\u53d6\u5927\u91cf\u9ad8\u8d28\u91cf\u7684\u955c\u50cf\u3002 \u4f5c\u7528 \u547d\u4ee4 \u68c0\u7d22\u955c\u50cf docker search <\u5173\u952e\u5b57> \u62c9\u53d6\u955c\u50cf docker pull [\u9009\u9879] [Docker Registry \u5730\u5740[:\u7aef\u53e3\u53f7]/]<\u4ed3\u5e93\u540d>[:\u6807\u7b7e]","title":"\u955c\u50cf\u4ed3\u5e93"},{"location":"develop/docker/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#_5","text":"\u4f5c\u7528 \u547d\u4ee4 \u5217\u51fa\u955c\u50cf docker image ls \u6216 docker images \u5220\u9664\u955c\u50cf docker rmi <\u955c\u50cfID> \u5bfc\u51fa\u955c\u50cf docker save \u5bfc\u5165\u955c\u50cf docker load \u955c\u50cf\u8fd0\u884c\uff1a\u521b\u5efa\u5e76\u8fd0\u884c\u4e00\u4e2a\u5bb9\u5668 docker run <\u955c\u50cfID> \u4f7f\u7528Dockerfile\u521b\u5efa\u955c\u50cf docker build","title":"\u955c\u50cf\u7ba1\u7406"},{"location":"develop/docker/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#dockerfile","text":"Dockerfile\u662f\u4e00\u4e2a\u6587\u672c\u683c\u5f0f\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u53ef\u4ee5\u4f7f\u7528 Dockerfile \u6765\u5feb\u901f\u521b\u5efa\u81ea\u5b9a\u4e49\u7684\u955c\u50cf\u3002Dockerfile \u7531\u4e00\u884c\u884c\u884c\u547d\u4ee4\u8bed\u53e5\u7ec4\u6210\uff0c\u5e76\u4e14\u652f\u6301\u4ee5#\u5f00\u5934\u7684\u6ce8\u91ca\u884c\u3002","title":"Dockerfile\u6784\u5efa\u955c\u50cf"},{"location":"develop/docker/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#dockerfile_1","text":"FROM\uff1a\u6307\u5b9a\u57fa\u7840\u955c\u50cf RUN\uff1a\u6267\u884c\u547d\u4ee4 COPY\uff1a\u590d\u5236\u6587\u4ef6 ADD\uff1a\u66f4\u9ad8\u7ea7\u7684\u590d\u5236\u6587\u4ef6 CMD\uff1a\u5bb9\u5668\u542f\u52a8\u547d\u4ee4 ENV\uff1a\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf EXPOSE\uff1a\u66b4\u9732\u7aef\u53e3 \u793a\u4f8b\uff1a 1 2 3 4 5 FROM java:8 MAINTAINER \"jinshw\"<jinshw@qq.com> ADD mapcharts-0.0.1-SNAPSHOT.jar mapcharts.jar EXPOSE 8080 CMD java -jar mapcharts.jar","title":"Dockerfile\u5e38\u89c1\u547d\u4ee4"},{"location":"develop/docker/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#_6","text":"","title":"\u5bb9\u5668"},{"location":"develop/docker/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#_7","text":"","title":"\u5bb9\u5668\u751f\u547d\u5468\u671f"},{"location":"develop/docker/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#_8","text":"\u542f\u52a8\u5bb9\u5668\u6709\u4e24\u79cd\u65b9\u5f0f\uff0c\u4e00\u662f\u57fa\u4e8e\u955c\u50cf\u65b0\u5efa\u5bb9\u5668\u5e76\u542f\u52a8\uff0c\u4e8c\u662f\u5c06\u5904\u4e8e\u7ec8\u6b62\u72b6\u6001\uff08stopped\uff09\u7684\u5bb9\u5668\u91cd\u65b0\u542f\u52a8\u3002 1 2 3 4 # \u65b0\u5efa\u5e76\u542f\u52a8 docker run <\u955c\u50cf\u540d/\u955c\u50cfID> # \u542f\u52a8\u5df2\u7ec8\u6b62\u5bb9\u5668 docker start <\u5bb9\u5668ID>","title":"\u542f\u52a8"},{"location":"develop/docker/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#_9","text":"1 2 3 4 # \u5217\u51fa\u672c\u673a\u8fd0\u884c\u7684\u5bb9\u5668 docker ps # \u5217\u51fa\u672c\u673a\u6240\u6709\u7684\u5bb9\u5668\uff08\u5305\u62ec\u505c\u6b62\u548c\u8fd0\u884c\uff09 docker ps -a","title":"\u67e5\u770b\u5bb9\u5668"},{"location":"develop/docker/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#_10","text":"1 2 3 4 # \u505c\u6b62\u8fd0\u884c\u7684\u5bb9\u5668 docker stop <\u5bb9\u5668ID> # \u6740\u6b7b\u5bb9\u5668\u8fdb\u7a0b docker kill <\u5bb9\u5668ID>","title":"\u505c\u6b62\u5bb9\u5668"},{"location":"develop/docker/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#_11","text":"1 docker restart <\u5bb9\u5668ID>","title":"\u91cd\u542f\u5bb9\u5668"},{"location":"develop/docker/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#_12","text":"1 docker rm <\u5bb9\u5668ID> \u6ce8\u610f\u5230\uff0c docker rm \u5220\u9664\u5bb9\u5668\uff0c docker rmi \u5220\u9664\u955c\u50cf\u3002","title":"\u5220\u9664\u5bb9\u5668"},{"location":"develop/docker/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#_13","text":"\u8fdb\u5165\u5bb9\u5668\u6709\u4e24\u79cd\u65b9\u5f0f\uff1a 1 2 3 4 # \u5982\u679c\u4ece\u8fd9\u4e2a stdin \u4e2d exit\uff0c\u4f1a\u5bfc\u81f4\u5bb9\u5668\u7684\u505c\u6b62 docker attach [ \u5bb9\u5668ID ] # \u4ea4\u4e92\u5f0f\u8fdb\u5165\u5bb9\u5668 docker exec [ \u5bb9\u5668ID ] \u901a\u5e38\u91c7\u7528\u4ea4\u4e92\u5f0f\u65b9\u5f0f\u8fdb\u5165\u5bb9\u5668\uff0c docker exec \u5e38\u89c1\u53c2\u6570\uff1a -d / --detach \u5728\u5bb9\u5668\u4e2d\u540e\u53f0\u6267\u884c\u547d\u4ee4\u3002 -i / --interactive=true|false \uff1a\u6253\u5f00\u6807\u51c6\u8f93\u5165\u63a5\u53d7\u7528\u6237\u8f93\u5165\u547d\u4ee4\u3002","title":"\u8fdb\u5165\u5bb9\u5668"},{"location":"develop/docker/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#_14","text":"","title":"\u5bfc\u5165\u548c\u5bfc\u51fa"},{"location":"develop/docker/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#_15","text":"1 2 # \u5bfc\u51fa\u4e00\u4e2a\u5df2\u7ecf\u521b\u5efa\u7684\u5bb9\u5668\u5230\u4e00\u4e2a\u6587\u4ef6 docker export <\u5bb9\u5668ID>","title":"\u5bb9\u5668\u5bfc\u51fa"},{"location":"develop/docker/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#_16","text":"1 2 # \u5bfc\u51fa\u7684\u5bb9\u5668\u5feb\u7167\u6587\u4ef6\u53ef\u4ee5\u518d\u5bfc\u5165\u4e3a\u955c\u50cf docker import <\u8def\u5f84> \u6ce8\u610f\u5230\uff0c docker load \u5c06\u6587\u4ef6\u5bfc\u5165\u4e3a\u955c\u50cf\uff0c\u800c docker import \u5c06\u5bb9\u5668\u91cd\u65b0\u5bfc\u5165\u4e3a\u955c\u50cf\u3002","title":"\u5bb9\u5668\u5bfc\u5165"},{"location":"develop/docker/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#_17","text":"","title":"\u5176\u5b83"},{"location":"develop/docker/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#_18","text":"1 2 # \u5bfc\u51fa\u7684\u5bb9\u5668\u5feb\u7167\u6587\u4ef6\u53ef\u4ee5\u518d\u5bfc\u5165\u4e3a\u955c\u50cf docker logs <\u5bb9\u5668ID> \u8be5\u547d\u4ee4\u7684\u5e38\u7528\u53c2\u6570\uff1a -f \uff1a\u8ddf\u8e2a\u65e5\u5fd7\u8f93\u51fa\u3002 --since \uff1a\u663e\u793a\u67d0\u4e2a\u5f00\u59cb\u65f6\u95f4\u7684\u6240\u6709\u65e5\u5fd7\u3002 -t \uff1a\u663e\u793a\u65f6\u95f4\u6233\u3002 --tail \uff1a\u4ec5\u5217\u51fa\u6700\u65b0N\u6761\u5bb9\u5668\u65e5\u5fd7\u3002","title":"\u67e5\u770b\u65e5\u5fd7"},{"location":"develop/docker/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#_19","text":"1 2 3 4 # \u4ece\u4e3b\u673a\u590d\u5236\u5230\u5bb9\u5668 sudo docker cp <\u5bbf\u4e3b\u673a\u8def\u5f84> <\u5bb9\u5668ID>:<\u5bb9\u5668\u8def\u5f84> # \u4ece\u5bb9\u5668\u590d\u5236\u5230\u4e3b\u673a sudo docker cp <\u5bb9\u5668ID>:<\u5bb9\u5668\u8def\u5f84> <\u5bbf\u4e3b\u673a\u8def\u5f84> \u4e00\u5f20\u8111\u56fe\u6574\u7406Docker\u5e38\u7528\u547d\u4ee4 - SegmentFault \u601d\u5426","title":"\u590d\u5236\u6587\u4ef6"},{"location":"develop/git/git%E4%B8%AD%E7%9A%84HEAD/","text":"git\u4e2d\u7684HEAD HEAD\u7b80\u4ecb HEAD\u5728 git \u7248\u672c\u63a7\u5236\u4e2d\u8868\u793a\u5934\u8282\u70b9\uff0c\u4e5f\u5c31\u662f \u5f53\u524d\u5206\u652f\u7684\u6700\u540e\u4e00\u6b21\u63d0\u4ea4 \u3002\u540c\u65f6\u5b83\u662f <repo>/.git/HEAD \u6587\u4ef6\uff0c\u5185\u5bb9\u4e00\u822c\u662f\uff1a ref: refs/heads/main \uff0c\u672c\u8d28\u662f\u6307\u4e0a\u4e00\u6b21\u63d0\u4ea4\u7684hash\u503c\uff0c\u6bd4\u5982 se11d9be5cc7007995b607fb12285a43cd03154b \u3002 HEAD~\u548cHEAD^ \u5728 HEAD \u540e\u52a0 ^ \u548c ~ \u662f\u6307\u4ee5 HEAD \u4e3a\u57fa\u51c6\uff0c\u8868\u793a\u4e4b\u524d\u7684\u7248\u672c\u3002\u56e0\u4e3a HEAD \u662f\u5f53\u524d\u5206\u652f\u7684\u6700\u65b0\u7248\u672c\uff0c\u56e0\u6b64 HEAD~ \u548c HEAD^ \u662f\u6307\u6b21\u65b0\u7248\u672c\uff0c\u4e5f\u5c31\u662f\u5012\u6570\u7b2c\u4e8c\u4e2a\u7248\u672c\uff0c HEAD~~ \u548c HEAD^^ \u662f\u6307\u6b21\u6b21\u65b0\u7248\u672c\uff0c\u4e5f\u5c31\u662f\u5012\u6570\u7b2c\u4e09\u4e2a\u7248\u672c\u3002 HEAD~ \u3001 HEAD^ \u662f HEAD~1 \u3001 HEAD^1 \u7684\u7b80\u7565\u5f62\u5f0f\u3002 HEAD~\u548cHEAD^\u540e\u52a0\u5927\u4e8e1\u7684\u6570\u5b57 \u6700\u65b0\u63d0\u4ea4\u4e4b\u524d\u7684\u6700\u8fd1\u63d0\u4ea4\u79f0\u4e4b\u4e3a \u7236\u63d0\u4ea4 \uff0c\u4e00\u4e2a\u5206\u652f\u53ef\u80fd\u6709\u4e24\u4e2a\u7236\u63d0\u4ea4\uff0c\u4e24\u4e2a\u5206\u652f\u5408\u5e76\u5728\u4e00\u8d77\u65f6\uff0c\u8fd9\u4e24\u4e2a\u5206\u652f\u7684\u539f HEAD \u90fd\u4f1a\u6210\u4e3a\u5408\u5e76\u540e\u7684\u6700\u65b0\u63d0\u4ea4\u7684 \u7236\u63d0\u4ea4 \u3002 \u5f53 HEAD~<num> \u8868\u793a\u5728\u7b2c\u4e00\u4e2a\u7236\u63d0\u4ea4\u4e0a\u540e\u9000 <num> \u6b65\uff0c HEAD^<num> \u8868\u793a\u540e\u9000\u5230\u7b2c <num> \u4e2a\u7236\u63d0\u4ea4\u4e0a\u3002\u6bd4\u5982 HEAD~2 \u8868\u793a\u540e\u9000\u4e24\u6b65\uff0c\u4e14\u6bcf\u4e00\u6b65\u540e\u9000\u5747\u5728\u7b2c\u4e00\u4e2a\u7236\u63d0\u4ea4\u4e0a\uff0c\u800c HEAD^2 \u8868\u793a\u540e\u9000\u4e00\u6b65\uff0c\u8fd9\u4e00\u6b65\u540e\u9000\u5230\u7b2c\u4e8c\u4e2a\u7236\u63d0\u4ea4\u4e0a\uff0c\u53c2\u89c1\u4e0b\u4f8b\u3002 \u793a\u4f8b HEAD~1 \uff1a\u7b49\u540c\u4e8e HEAD~ \u6216 HEAD^1 \u6216 HEAD^ \uff0c\u540e\u9000\u81f3 HEAD \u4e4b\u524d\u7684\u63d0\u4ea4\u3002 HEAD^2 \uff1a\u540e\u9000\u81f3\u5f53\u524d\u5206\u652f\u7684\u7b2c\u4e8c\u4e2a\u7236\u63d0\u4ea4\u3002 HEAD~1^2 \uff1a\u540e\u9000\u81f3 HEAD \u4e4b\u524d\u7684\u63d0\u4ea4\uff0c\u518d\u540e\u9000\u5230\u5f53\u524d\u5206\u652f\u7684\u7b2c\u4e8c\u4e2a\u7236\u63d0\u4ea4\u4e0a\uff0c\u5982\u679c HEAD \u6ca1\u6709\u5408\u5e76\u5206\u652f\uff0c\u5219\u975e\u6cd5\u3002 HEAD@{2} \uff1a\u6307\u5411 git reflog \u8bb0\u5f55\u7684\u6574\u4f53\u64cd\u4f5c\u7684\u7b2c\u4e09\u6761\u64cd\u4f5c\uff08 git reflog \u8bb0\u5f55\u7684\u6574\u4f53\u64cd\u4f5c\u4ece0\u5f00\u59cb\uff09\u3002 HEAD~~ \uff1a\u65e9\u4e8e HEAD \u76842\u4e2a\u63d0\u4ea4\u3002 HEAD^^ \uff1a\u65e9\u4e8e HEAD \u76842\u4e2a\u63d0\u4ea4\u3002 git\u5728\u56de\u9000\u7248\u672c\u65f6HEAD~\u548cHEAD^\u7684\u4f5c\u7528\u548c\u533a\u522b HEAD~ vs HEAD^ vs HEAD@{} also known as tilde vs caret vs at sign","title":"git\u4e2d\u7684HEAD"},{"location":"develop/git/git%E4%B8%AD%E7%9A%84HEAD/#githead","text":"","title":"git\u4e2d\u7684HEAD"},{"location":"develop/git/git%E4%B8%AD%E7%9A%84HEAD/#head","text":"HEAD\u5728 git \u7248\u672c\u63a7\u5236\u4e2d\u8868\u793a\u5934\u8282\u70b9\uff0c\u4e5f\u5c31\u662f \u5f53\u524d\u5206\u652f\u7684\u6700\u540e\u4e00\u6b21\u63d0\u4ea4 \u3002\u540c\u65f6\u5b83\u662f <repo>/.git/HEAD \u6587\u4ef6\uff0c\u5185\u5bb9\u4e00\u822c\u662f\uff1a ref: refs/heads/main \uff0c\u672c\u8d28\u662f\u6307\u4e0a\u4e00\u6b21\u63d0\u4ea4\u7684hash\u503c\uff0c\u6bd4\u5982 se11d9be5cc7007995b607fb12285a43cd03154b \u3002","title":"HEAD\u7b80\u4ecb"},{"location":"develop/git/git%E4%B8%AD%E7%9A%84HEAD/#headhead","text":"\u5728 HEAD \u540e\u52a0 ^ \u548c ~ \u662f\u6307\u4ee5 HEAD \u4e3a\u57fa\u51c6\uff0c\u8868\u793a\u4e4b\u524d\u7684\u7248\u672c\u3002\u56e0\u4e3a HEAD \u662f\u5f53\u524d\u5206\u652f\u7684\u6700\u65b0\u7248\u672c\uff0c\u56e0\u6b64 HEAD~ \u548c HEAD^ \u662f\u6307\u6b21\u65b0\u7248\u672c\uff0c\u4e5f\u5c31\u662f\u5012\u6570\u7b2c\u4e8c\u4e2a\u7248\u672c\uff0c HEAD~~ \u548c HEAD^^ \u662f\u6307\u6b21\u6b21\u65b0\u7248\u672c\uff0c\u4e5f\u5c31\u662f\u5012\u6570\u7b2c\u4e09\u4e2a\u7248\u672c\u3002 HEAD~ \u3001 HEAD^ \u662f HEAD~1 \u3001 HEAD^1 \u7684\u7b80\u7565\u5f62\u5f0f\u3002","title":"HEAD~\u548cHEAD^"},{"location":"develop/git/git%E4%B8%AD%E7%9A%84HEAD/#headhead1","text":"\u6700\u65b0\u63d0\u4ea4\u4e4b\u524d\u7684\u6700\u8fd1\u63d0\u4ea4\u79f0\u4e4b\u4e3a \u7236\u63d0\u4ea4 \uff0c\u4e00\u4e2a\u5206\u652f\u53ef\u80fd\u6709\u4e24\u4e2a\u7236\u63d0\u4ea4\uff0c\u4e24\u4e2a\u5206\u652f\u5408\u5e76\u5728\u4e00\u8d77\u65f6\uff0c\u8fd9\u4e24\u4e2a\u5206\u652f\u7684\u539f HEAD \u90fd\u4f1a\u6210\u4e3a\u5408\u5e76\u540e\u7684\u6700\u65b0\u63d0\u4ea4\u7684 \u7236\u63d0\u4ea4 \u3002 \u5f53 HEAD~<num> \u8868\u793a\u5728\u7b2c\u4e00\u4e2a\u7236\u63d0\u4ea4\u4e0a\u540e\u9000 <num> \u6b65\uff0c HEAD^<num> \u8868\u793a\u540e\u9000\u5230\u7b2c <num> \u4e2a\u7236\u63d0\u4ea4\u4e0a\u3002\u6bd4\u5982 HEAD~2 \u8868\u793a\u540e\u9000\u4e24\u6b65\uff0c\u4e14\u6bcf\u4e00\u6b65\u540e\u9000\u5747\u5728\u7b2c\u4e00\u4e2a\u7236\u63d0\u4ea4\u4e0a\uff0c\u800c HEAD^2 \u8868\u793a\u540e\u9000\u4e00\u6b65\uff0c\u8fd9\u4e00\u6b65\u540e\u9000\u5230\u7b2c\u4e8c\u4e2a\u7236\u63d0\u4ea4\u4e0a\uff0c\u53c2\u89c1\u4e0b\u4f8b\u3002","title":"HEAD~\u548cHEAD^\u540e\u52a0\u5927\u4e8e1\u7684\u6570\u5b57"},{"location":"develop/git/git%E4%B8%AD%E7%9A%84HEAD/#_1","text":"HEAD~1 \uff1a\u7b49\u540c\u4e8e HEAD~ \u6216 HEAD^1 \u6216 HEAD^ \uff0c\u540e\u9000\u81f3 HEAD \u4e4b\u524d\u7684\u63d0\u4ea4\u3002 HEAD^2 \uff1a\u540e\u9000\u81f3\u5f53\u524d\u5206\u652f\u7684\u7b2c\u4e8c\u4e2a\u7236\u63d0\u4ea4\u3002 HEAD~1^2 \uff1a\u540e\u9000\u81f3 HEAD \u4e4b\u524d\u7684\u63d0\u4ea4\uff0c\u518d\u540e\u9000\u5230\u5f53\u524d\u5206\u652f\u7684\u7b2c\u4e8c\u4e2a\u7236\u63d0\u4ea4\u4e0a\uff0c\u5982\u679c HEAD \u6ca1\u6709\u5408\u5e76\u5206\u652f\uff0c\u5219\u975e\u6cd5\u3002 HEAD@{2} \uff1a\u6307\u5411 git reflog \u8bb0\u5f55\u7684\u6574\u4f53\u64cd\u4f5c\u7684\u7b2c\u4e09\u6761\u64cd\u4f5c\uff08 git reflog \u8bb0\u5f55\u7684\u6574\u4f53\u64cd\u4f5c\u4ece0\u5f00\u59cb\uff09\u3002 HEAD~~ \uff1a\u65e9\u4e8e HEAD \u76842\u4e2a\u63d0\u4ea4\u3002 HEAD^^ \uff1a\u65e9\u4e8e HEAD \u76842\u4e2a\u63d0\u4ea4\u3002 git\u5728\u56de\u9000\u7248\u672c\u65f6HEAD~\u548cHEAD^\u7684\u4f5c\u7528\u548c\u533a\u522b HEAD~ vs HEAD^ vs HEAD@{} also known as tilde vs caret vs at sign","title":"\u793a\u4f8b"},{"location":"develop/git/git%E4%BF%AE%E6%94%B9%E6%8F%90%E4%BA%A4%E4%BF%A1%E6%81%AF/","text":"git\u4fee\u6539\u63d0\u4ea4\u4fe1\u606f \u5982\u679c\u63d0\u4ea4\u4fe1\u606f commit message \u5199\u9519\u4e86\u4e14\u8fd9\u6b21\u63d0\u4ea4 commit \u8fd8\u6ca1\u6709\u63a8 push , \u53ef\u4ee5\u901a\u8fc7\u4e0b\u9762\u7684\u65b9\u6cd5\u6765\u4fee\u6539\u63d0\u4ea4\u4fe1\u606f commit message \uff1a 1 2 3 4 # \u6253\u5f00\u9ed8\u8ba4\u7f16\u8f91\u5668\uff0c\u4fee\u6539\u63d0\u4ea4\u4fe1\u606f git commit --amend --only # \u6216\u8005\u4e00\u6b21\u6027\u5b8c\u6210\uff0c\u76f4\u63a5\u4fee\u6539\u63d0\u4ea4\u4fe1\u606f git commit --amend --only -m <commit message> \u5982\u679c\u5df2\u7ecf\u63a8\u9001 push \uff0c\u53ef\u4ee5\u4fee\u6539\u8fd9\u6b21\u63d0\u4ea4 commit \u7136\u540e\u5f3a\u63a8 force push \uff0c\u4f46\u8fd9\u79cd\u65b9\u6cd5\u4e0d\u63a8\u8350\u3002 git commit --amend \u4fee\u6539git\u63d0\u4ea4\u8bb0\u5f55\u7528\u6cd5\u8be6\u89e3 45 \u4e2a Git \u7ecf\u5178\u64cd\u4f5c\u573a\u666f\uff0c\u4e13\u6cbb\u4e0d\u4f1a\u5408\u4ee3\u7801","title":"git\u4fee\u6539\u63d0\u4ea4\u4fe1\u606f"},{"location":"develop/git/git%E4%BF%AE%E6%94%B9%E6%8F%90%E4%BA%A4%E4%BF%A1%E6%81%AF/#git","text":"\u5982\u679c\u63d0\u4ea4\u4fe1\u606f commit message \u5199\u9519\u4e86\u4e14\u8fd9\u6b21\u63d0\u4ea4 commit \u8fd8\u6ca1\u6709\u63a8 push , \u53ef\u4ee5\u901a\u8fc7\u4e0b\u9762\u7684\u65b9\u6cd5\u6765\u4fee\u6539\u63d0\u4ea4\u4fe1\u606f commit message \uff1a 1 2 3 4 # \u6253\u5f00\u9ed8\u8ba4\u7f16\u8f91\u5668\uff0c\u4fee\u6539\u63d0\u4ea4\u4fe1\u606f git commit --amend --only # \u6216\u8005\u4e00\u6b21\u6027\u5b8c\u6210\uff0c\u76f4\u63a5\u4fee\u6539\u63d0\u4ea4\u4fe1\u606f git commit --amend --only -m <commit message> \u5982\u679c\u5df2\u7ecf\u63a8\u9001 push \uff0c\u53ef\u4ee5\u4fee\u6539\u8fd9\u6b21\u63d0\u4ea4 commit \u7136\u540e\u5f3a\u63a8 force push \uff0c\u4f46\u8fd9\u79cd\u65b9\u6cd5\u4e0d\u63a8\u8350\u3002 git commit --amend \u4fee\u6539git\u63d0\u4ea4\u8bb0\u5f55\u7528\u6cd5\u8be6\u89e3 45 \u4e2a Git \u7ecf\u5178\u64cd\u4f5c\u573a\u666f\uff0c\u4e13\u6cbb\u4e0d\u4f1a\u5408\u4ee3\u7801","title":"git\u4fee\u6539\u63d0\u4ea4\u4fe1\u606f"},{"location":"develop/git/git%E5%88%86%E6%94%AF%E5%90%88%E5%B9%B6/","text":"git\u5206\u652f\u5408\u5e76 tag::#TODO Merging vs. Rebasing","title":"git\u5206\u652f\u5408\u5e76"},{"location":"develop/git/git%E5%88%86%E6%94%AF%E5%90%88%E5%B9%B6/#git","text":"tag::#TODO Merging vs. Rebasing","title":"git\u5206\u652f\u5408\u5e76"},{"location":"develop/git/git%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/","text":"git\u5b66\u4e60\u8d44\u6e90 \u53c2\u8003\u624b\u518c Git cheat sheet \u5b66\u4e60\u8d44\u6e90 git\u4e92\u52a8\u7ec3\u4e60 Advanced Git Tutorials \u3010\u8bd1\u6587\u3011Git Hooks\uff08\u94a9\u5b50\uff09\u7cbe\u8bb2 | Hoooo\u540c\u5b66\u7684\u535a\u5ba2 Git \u7684\u5947\u6280\u6deb\u5de7 45 \u4e2a Git \u7ecf\u5178\u64cd\u4f5c\u573a\u666f\uff0c\u4e13\u6cbb\u4e0d\u4f1a\u5408\u4ee3\u7801","title":"git\u5b66\u4e60\u8d44\u6e90"},{"location":"develop/git/git%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/#git","text":"","title":"git\u5b66\u4e60\u8d44\u6e90"},{"location":"develop/git/git%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/#_1","text":"Git cheat sheet","title":"\u53c2\u8003\u624b\u518c"},{"location":"develop/git/git%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/#_2","text":"git\u4e92\u52a8\u7ec3\u4e60 Advanced Git Tutorials \u3010\u8bd1\u6587\u3011Git Hooks\uff08\u94a9\u5b50\uff09\u7cbe\u8bb2 | Hoooo\u540c\u5b66\u7684\u535a\u5ba2 Git \u7684\u5947\u6280\u6deb\u5de7 45 \u4e2a Git \u7ecf\u5178\u64cd\u4f5c\u573a\u666f\uff0c\u4e13\u6cbb\u4e0d\u4f1a\u5408\u4ee3\u7801","title":"\u5b66\u4e60\u8d44\u6e90"},{"location":"develop/git/git%E5%B8%B8%E7%94%A8%E5%9B%9E%E9%80%80%E6%93%8D%E4%BD%9C/","text":"git\u5e38\u7528\u56de\u9000\u64cd\u4f5c \u6982\u8ff0 \u5982\u4e0a\u56fe\u6240\u793a\uff0c\u4e00\u4e2aGit\u4ed3\u5e93\u7531\u4e09\u90e8\u5206\u7ec4\u6210\uff0c\u5206\u522b\u4e3a\u5de5\u4f5c\u533a\uff08Working Directory\uff09\u3001\u6682\u5b58\u533a\uff08Staged Snapshot\uff09\u548c\u672c\u5730\u4ed3\u5e93\u63d0\u4ea4\uff08Commit History\uff09\u3002 git reset \u3001 git revert \u548c git checkout \u5747\u53ef\u4ee5\u5b9e\u73b0\u7248\u672c\u56de\u9000\uff0c\u4f46\u4e09\u8005\u4e4b\u95f4\u7565\u6709\u5dee\u5f02\uff0c\u4e14\u662f\u5426\u4f20\u5165\u6587\u4ef6\u8def\u5f84\u4e5f\u4f1a\u6539\u53d8\u547d\u4ee4\u529f\u80fd\u548c\u5e94\u7528\u8303\u56f4\u3002 1 2 3 4 # commit-level\uff0c\u529f\u80fd\uff1a\u5207\u6362\u5206\u652f git checkout hotfix # file-level\uff0c\u529f\u80fd\uff1a\u5c06\u6307\u5b9a\u6587\u4ef6\u56de\u9000\u5230\u6307\u5b9a\u7248\u672c\uff0c\u5e76\u653e\u5230\u5de5\u4f5c\u533a git checkout hotfix foo.py \u56e0\u6b64\uff0c\u6839\u636e git reset \u3001 git revert \u548c git checkout \u540e\u9762\u662f\u5426\u4f20\u5165\u6587\u4ef6\u8def\u5f84\uff0c\u5c06\u5bf9\u5e94\u547d\u4ee4\u7684\u9002\u7528\u8303\u56f4\u5212\u5206\u4e3aCommit-level\u548cFile-level\u3002 \u547d\u4ee4 \u8303\u56f4 \u9002\u7528\u573a\u666f git reset Commit-level \u5728\u79c1\u6709\u5206\u652f\u4e0a\u5220\u9664\u63d0\u4ea4\uff08commit\uff09\uff0c\u6216\u8005\u4e22\u5f03\u672a\u63d0\u4ea4\u7684\u4fee\u6539 git reset File-level \u5c06\u4ed3\u5e93\u4e2d\u7684\u6307\u5b9a\u6587\u4ef6\u79fb\u56de\u6682\u5b58\u533a git checkout Commit-level \u5207\u6362\u5206\u652f\uff0c\u6216\u8005\u67e5\u770b\u65e7\u7248\u672c git checkout File-level \u5220\u9664\u5de5\u4f5c\u533a\u7684\u4fee\u6539 git revert Commit-level \u5728\u516c\u5171\u5206\u652f\u4e0a\u64a4\u9500\u4fee\u6539 git revert File-level (N/A) git checkout \u548c git reset \u901a\u5e38\u7528\u4e8e \u64a4\u9500\u672c\u5730\u6216\u79c1\u6709\u5206\u652f\u4e0a\u7684\u4fee\u6539 \uff0c\u56e0\u4e3a checkout \u548c reset \u4f1a\u4fee\u6539\u4ed3\u5e93\u5386\u53f2\u8bb0\u5f55\uff0c\u5728\u63a8\u9001\u5230\u8fdc\u7a0b\u5171\u4eab\u4ed3\u5e93\u65f6\u53ef\u80fd\u4f1a\u53d1\u751f\u51b2\u7a81\u3002\u800c git revert \u80fd\u591f\u5b89\u5168\u5730 \u64a4\u9500\u8fdc\u7a0b\u5171\u4eab\u4ed3\u5e93\u7684\u4fee\u6539 \uff0c\u56e0\u4e3a revert \u5728\u64a4\u9500\u4fee\u6539\u65f6\u4f1a\u521b\u5efa\u65b0\u63d0\u4ea4\uff0c\u4e0d\u4f1a\u4fee\u6539\u4e4b\u524d\u7684\u4ed3\u5e93\u5386\u53f2\u8bb0\u5f55\u3002 Commit Level\u64cd\u4f5c reset \u5728commit-level\u4e0a\uff0c git revert \u53ef\u4ee5\u4ece\u5f53\u524d\u5206\u652f\u4e0a\u79fb\u9664\u63d0\u4ea4\uff08commit\uff09\u3002 1 2 git checkout hotfix git reset HEAD~2 \u4ee5\u4e0a\u547d\u4ee4\u5c06 hotfix \u5206\u652f\u5411\u540e\u79fb\u52a8\u4e24\u6b21\u63d0\u4ea4\uff1a \u5982\u4e0a\u56fe\u6240\u793a\uff0c\u6267\u884c\u5b8c git reset \u4e4b\u540e\uff0c\u5728 hotfix \u5206\u652f\u4e0a\u7684\u6700\u540e\u4e24\u4e2a\u63d0\u4ea4\u5c06\u6210\u4e3a\u5b64\u7acb\u63d0\u4ea4\uff08orphaned commits\uff09\uff0c\u5728Git\u4e0b\u4e00\u6b21\u6267\u884c\u5783\u573e\u56de\u6536\u65f6\u5c06\u4f1a\u88ab\u5220\u9664\uff0c\u56e0\u6b64 git reset \u7684\u5178\u578b\u5e94\u7528\u573a\u666f\u662f\u64a4\u9500\u5c1a\u672a\u548c\u5176\u4ed6\u4eba\u5171\u4eab\u7684\u4fee\u6539\u3002 \u9664\u4e86\u4f1a\u79fb\u52a8\u4ed3\u5e93\u4e2d\u5f53\u524d\u5206\u652f\u7684 HEAD \u6307\u9488\uff0c\u901a\u8fc7 git reset \u7684\u4ee5\u4e0b\u9009\u9879\u8fd8\u53ef\u4ee5\u6307\u5b9a\u5bf9\u6682\u5b58\u533a\u548c\u5de5\u4f5c\u533a\u7684\u66f4\u65b0\uff1a --soft \uff1a\u6682\u5b58\u533a\u548c\u5de5\u4f5c\u533a\u4e0d\u53d8\u3002 --mixed \uff1a\u9ed8\u8ba4\uff0c\u66f4\u65b0\u6682\u5b58\u533a\u4ee5\u5339\u914d\u6307\u5b9a\u7684\u63d0\u4ea4\uff08commit\uff09\uff0c\u5de5\u4f5c\u533a\u4e0d\u53d8\u3002 --hard \uff1a\u66f4\u65b0\u6682\u5b58\u533a\u548c\u5de5\u4f5c\u533a\u4ee5\u5339\u914d\u6307\u5b9a\u7684\u63d0\u4ea4\uff08commit\uff09\u3002 checkout git checkout \u7528\u4e8e\u5c06\u4ed3\u5e93\u72b6\u6001\u66f4\u65b0\u5230\u5386\u53f2\u8bb0\u5f55\u4e2d\u7684\u7279\u5b9a\u7248\u672c\uff0c\u5f53 git checkout \u540e\u63a5\u5206\u652f\u540d\u65f6\uff0c\u5c06\u4f1a\u5207\u6362\u5206\u652f\u3002 1 git checkout hotfix \u4ee5\u4e0a\u547d\u4ee4\u4f1a\u5c06 HEAD \u6307\u9488\u79fb\u52a8\u5230 hotfix \u5206\u652f\u4e0a\uff0c\u5e76\u66f4\u65b0\u5de5\u4f5c\u533a\u4ee5\u5339\u914d hotfix \u5206\u652f\u7684\u5f53\u524d\u72b6\u6001\u3002\u7531\u4e8e\u8be5\u64cd\u4f5c\u6709\u53ef\u80fd\u4f1a\u8986\u76d6\u672c\u5730\u4fee\u6539\uff0c\u56e0\u6b64Git\u4f1a\u5f3a\u5236\u8981\u6c42 git commit \u6216 git stash \u4ee5\u9632\u4e22\u5931\u3002 \u7c7b\u4f3c\u5730\uff0c git checkout \u540e\u63a5ref\u53ef\u4ee5\u5c06\u5de5\u4f5c\u533a\u66f4\u65b0\u5230\u7279\u5b9a\u7248\u672c\uff1a 1 2 # \u5de5\u4f5c\u533a\u66f4\u65b0\u5230\u4e24\u6b21\u63d0\u4ea4\u4e4b\u524d\u7684\u72b6\u6001 git checkout HEAD~2 \u5b9e\u9645\u4e0a git checkout \u540e\u9762\u65e0\u8bba\u662f\u5206\u652f\u540d\u8fd8\u662fref\uff0cGit\u90fd\u662f\u5c06 HEAD \u79fb\u52a8\u5230\u7279\u5b9a\u63d0\u4ea4\u4e0a\uff0c\u7136\u540e\u5c06\u5de5\u4f5c\u533a\u66f4\u65b0\u5230\u7279\u5b9a\u63d0\u4ea4\u7684\u72b6\u6001\u3002 git checkout \u548c git reset \u7684\u4e3b\u8981\u533a\u522b\u5728\u4e8e\uff0c checout \u53ea\u4f1a\u4fee\u6539 HEAD \u6307\u9488\u5e76\u66f4\u65b0\u5de5\u4f5c\u533a\uff0c\u4e0d\u4f1a\u4fee\u6539\u63d0\u4ea4\uff08commit\uff09\u5386\u53f2\uff0c\u6240\u6709\u7684commit\u90fd\u4e0d\u4f1a\u88ab\u5220\u9664\uff1b reset \u4e0d\u4f46\u4f1a\u4fee\u6539 HEAD \u6307\u9488\uff0c\u8fd8\u4f1a\u4fee\u6539\u63d0\u4ea4\uff08commit\uff09\u5386\u53f2\uff0c\u901a\u8fc7\u4e0d\u540c\u53c2\u6570\u63a7\u5236\u5de5\u4f5c\u533a\u3001\u6682\u5b58\u533a\u548c\u4ed3\u5e93\u7684\u66f4\u65b0\u3002 \u5982\u4e0a\u56fe\u6240\u793a\uff0c git checkout \u53ef\u4ee5\u5f88\u65b9\u4fbf\u5730\u67e5\u770b\u65e7\u7248\u672c\u3002\u4f46\u6b64\u65f6\u6ca1\u6709\u5206\u652f\u6307\u9488\uff08branch reference\uff09\u6307\u5411 HEAD \uff0c\u5982\u679c\u5411 HEAD \u540e\u6dfb\u52a0\u65b0\u7684\u63d0\u4ea4\uff08commit\uff09\u5e76\u5207\u6362\u5230\u5176\u5b83\u5206\u652f\uff0c\u5c06\u4f1a\u5bfc\u81f4\u518d\u4e5f\u65e0\u6cd5\u627e\u56de\u5b83\u4eec\u3002\u56e0\u6b64\u5728\u5411\u60ac\u7a7a\u7684 HEAD \u4e4b\u540e\u6dfb\u52a0\u65b0\u7684\u63d0\u4ea4\u4e4b\u524d\uff0c\u5e94\u5148\u521b\u5efa\u4e00\u4e2a\u65b0\u5206\u652f\u3002 revert git revert \u901a\u8fc7\u6dfb\u52a0\u65b0\u7684\u63d0\u4ea4\uff08commit\uff09\u6765\u64a4\u9500\u63d0\u4ea4\u3002\u8fd9\u662f\u64a4\u9500\u4fee\u6539\u6700\u5b89\u5168\u7684\u65b9\u5f0f\uff0c\u56e0\u4e3a revert \u4e0d\u4f1a\u91cd\u5199\u63d0\u4ea4\u5386\u53f2\u8bb0\u5f55\u3002 1 2 git checkout hotfix git revert HEAD~2 \u4ee5\u4e0a\u547d\u4ee4\u5c06\u67e5\u627e\u5012\u6570\u7b2c\u4e8c\u4e2a\u63d0\u4ea4\u7684\u4fee\u6539\uff0c\u5e76\u521b\u5efa\u65b0\u7684\u63d0\u4ea4\u4ee5\u64a4\u9500\u8fd9\u4e9b\u4fee\u6539\uff1a \u4e0d\u540c\u4e8e git reset \uff0c git revert \u4e0d\u4f1a\u4fee\u6539\u4e4b\u524d\u7684\u63d0\u4ea4\u5386\u53f2\uff0c\u56e0\u6b64 git revert \u9002\u7528\u4e8e\u64a4\u9500\u516c\u5171\u5206\u652f\u4e0a\u7684\u4fee\u6539\uff0c\u800c git reset \u9002\u7528\u4e8e\u64a4\u9500\u79c1\u6709\u5206\u652f\u4e0a\u7684\u4fee\u6539\u3002\u7c7b\u4f3c\u4e8e git checkout \uff0c git revert \u53ef\u80fd\u4f1a\u8986\u76d6\u5de5\u4f5c\u533a\u7684\u6587\u4ef6\uff0c\u56e0\u6b64\u5728\u6267\u884c revert \u4e4b\u524d\uff0cGit\u4f1a\u5f3a\u5236\u8981\u6c42 git commit \u6216 git stash \u4ee5\u9632\u4e22\u5931\u3002 File Level\u64cd\u4f5c git reset \u548c git checkout \u53ef\u63a5\u53d7\u53ef\u9009\u7684\u6587\u4ef6\u8def\u5f84\u4f5c\u4e3a\u53c2\u6570\uff0c\u8fd9\u5c06\u4f1a\u6539\u53d8\u8fd9\u4e9b\u547d\u4ee4\u7684\u529f\u80fd\u548c\u4f5c\u7528\u8303\u56f4\u3002 reset \u5f53\u6307\u5b9a\u6587\u4ef6\u8def\u5f84\u65f6\uff0c git reset \u4f1a\u66f4\u65b0\u6682\u5b58\u533a\u4ee5\u5339\u914d\u6307\u5b9a\u7684\u63d0\u4ea4\u3002 1 git reset HEAD~2 foo.py \u4e0a\u8ff0\u547d\u4ee4\u5c06\u4f1a\u83b7\u53d6\u5012\u6570\u7b2c\u4e8c\u4e2a\u63d0\u4ea4\u4e2d\u7684 foo.py \uff0c\u5e76\u653e\u56de\u5230\u6682\u5b58\u533a\uff1a git reset \u901a\u5e38\u4f1a\u64a4\u56de\u5230 HEAD \u6307\u5411\u7684\u63d0\u4ea4\uff0c\u5bf9\u4e8efile-level\u7248\u672c\u7684 git reset \uff0c\u4e0d\u5b58\u5728 --soft \u3001 --mixed \u548c --hard \u9009\u9879\uff0c\u5e94\u7528 git reset \u5c06\u59cb\u7ec8\u66f4\u65b0\u6682\u5b58\u533a\uff0c\u59cb\u7ec8\u4e0d\u66f4\u65b0\u5de5\u4f5c\u533a\uff0c\u76f8\u5f53\u4e8e\u53ea\u6709 --mixed \u9009\u9879\u3002 checkout \u5f53\u6307\u5b9a\u6587\u4ef6\u8def\u5f84\u65f6\uff0c git checkout \u4f1a\u76f4\u63a5\u66f4\u65b0\u5de5\u4f5c\u533a\u4ee5\u5339\u914d\u6307\u5b9a\u7684\u63d0\u4ea4\u3002 1 git checkout HEAD~2 foo.py \u4e0a\u8ff0\u547d\u4ee4\u5c06\u4f1a\u83b7\u53d6\u5012\u6570\u7b2c\u4e8c\u4e2a\u63d0\u4ea4\u4e2d\u7684 foo.py \uff0c\u5e76\u653e\u56de\u5230\u5de5\u4f5c\u533a\uff1a \u4e0d\u540c\u4e8ecommit-level\u7248\u672c\u7684 git checkout \uff0c\u8be5\u547d\u4ee4\u4f5c\u7528\u4e8e\u6587\u4ef6\u65f6\u4e0d\u4f1a\u79fb\u52a8 HEAD \u6307\u9488\uff0c\u56e0\u6b64\u4e5f\u4e0d\u4f1a\u5207\u6362\u5206\u652f\u3002 git checkout \u4f5c\u7528\u4e8e\u6587\u4ef6\u65f6\uff0c\u540c\u6837\u53ef\u4ee5\u7528\u6765\u67e5\u770b\u65e7\u7248\u672c\uff0c\u53ea\u662f\u4f5c\u7528\u8303\u56f4\u9650\u5236\u4e3a\u6307\u5b9a\u6587\u4ef6\u3002\u5982\u679c\u4e00\u4e2a\u6587\u4ef6 checkout \u4e4b\u540e\u53c8\u8fdb\u884c\u4e86\u63d0\u4ea4\uff0c\u8be5\u64cd\u4f5c\u7684\u6548\u679c\u7c7b\u4f3c\u4e8e revert \uff0c\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e git checkout \u4f1a\u64a4\u9500\u5bf9\u8be5\u6587\u4ef6\u7684\u6240\u6709\u540e\u7eed\u4fee\u6539\uff0c\u800c git revert \u4ec5\u4f1a\u64a4\u9500\u8be5\u6587\u4ef6\u6307\u5b9a\u63d0\u4ea4\u7684\u4fee\u6539\u3002 git checkout \u4e5f\u901a\u5e38\u5e94\u7528\u4e8e HEAD \u6307\u9488\uff0c\u6bd4\u5982 git checkout HEAD foo.py \u5c06\u4f1a\u629b\u5f03 foo.py \u6240\u6709\u672a\u6682\u5b58\u7684\u4fee\u6539\uff0c\u8fd9\u6709\u70b9\u7c7b\u4f3c\u4e8e git reset HEAD --hard \uff0c\u4f46\u524d\u8005\u7684\u4f5c\u7528\u57df\u4ec5\u9650\u4e8e\u6307\u5b9a\u6587\u4ef6\u3002 git checkout/git reset/git revert/git restore\u5e38\u7528\u56de\u9000\u64cd\u4f5c Resetting, Checking Out & Reverting git\u7684\u64a4\u9500\u64cd\u4f5c\uff1areset\u3001checkout\u548crevert","title":"git\u5e38\u7528\u56de\u9000\u64cd\u4f5c"},{"location":"develop/git/git%E5%B8%B8%E7%94%A8%E5%9B%9E%E9%80%80%E6%93%8D%E4%BD%9C/#git","text":"","title":"git\u5e38\u7528\u56de\u9000\u64cd\u4f5c"},{"location":"develop/git/git%E5%B8%B8%E7%94%A8%E5%9B%9E%E9%80%80%E6%93%8D%E4%BD%9C/#_1","text":"\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u4e00\u4e2aGit\u4ed3\u5e93\u7531\u4e09\u90e8\u5206\u7ec4\u6210\uff0c\u5206\u522b\u4e3a\u5de5\u4f5c\u533a\uff08Working Directory\uff09\u3001\u6682\u5b58\u533a\uff08Staged Snapshot\uff09\u548c\u672c\u5730\u4ed3\u5e93\u63d0\u4ea4\uff08Commit History\uff09\u3002 git reset \u3001 git revert \u548c git checkout \u5747\u53ef\u4ee5\u5b9e\u73b0\u7248\u672c\u56de\u9000\uff0c\u4f46\u4e09\u8005\u4e4b\u95f4\u7565\u6709\u5dee\u5f02\uff0c\u4e14\u662f\u5426\u4f20\u5165\u6587\u4ef6\u8def\u5f84\u4e5f\u4f1a\u6539\u53d8\u547d\u4ee4\u529f\u80fd\u548c\u5e94\u7528\u8303\u56f4\u3002 1 2 3 4 # commit-level\uff0c\u529f\u80fd\uff1a\u5207\u6362\u5206\u652f git checkout hotfix # file-level\uff0c\u529f\u80fd\uff1a\u5c06\u6307\u5b9a\u6587\u4ef6\u56de\u9000\u5230\u6307\u5b9a\u7248\u672c\uff0c\u5e76\u653e\u5230\u5de5\u4f5c\u533a git checkout hotfix foo.py \u56e0\u6b64\uff0c\u6839\u636e git reset \u3001 git revert \u548c git checkout \u540e\u9762\u662f\u5426\u4f20\u5165\u6587\u4ef6\u8def\u5f84\uff0c\u5c06\u5bf9\u5e94\u547d\u4ee4\u7684\u9002\u7528\u8303\u56f4\u5212\u5206\u4e3aCommit-level\u548cFile-level\u3002 \u547d\u4ee4 \u8303\u56f4 \u9002\u7528\u573a\u666f git reset Commit-level \u5728\u79c1\u6709\u5206\u652f\u4e0a\u5220\u9664\u63d0\u4ea4\uff08commit\uff09\uff0c\u6216\u8005\u4e22\u5f03\u672a\u63d0\u4ea4\u7684\u4fee\u6539 git reset File-level \u5c06\u4ed3\u5e93\u4e2d\u7684\u6307\u5b9a\u6587\u4ef6\u79fb\u56de\u6682\u5b58\u533a git checkout Commit-level \u5207\u6362\u5206\u652f\uff0c\u6216\u8005\u67e5\u770b\u65e7\u7248\u672c git checkout File-level \u5220\u9664\u5de5\u4f5c\u533a\u7684\u4fee\u6539 git revert Commit-level \u5728\u516c\u5171\u5206\u652f\u4e0a\u64a4\u9500\u4fee\u6539 git revert File-level (N/A) git checkout \u548c git reset \u901a\u5e38\u7528\u4e8e \u64a4\u9500\u672c\u5730\u6216\u79c1\u6709\u5206\u652f\u4e0a\u7684\u4fee\u6539 \uff0c\u56e0\u4e3a checkout \u548c reset \u4f1a\u4fee\u6539\u4ed3\u5e93\u5386\u53f2\u8bb0\u5f55\uff0c\u5728\u63a8\u9001\u5230\u8fdc\u7a0b\u5171\u4eab\u4ed3\u5e93\u65f6\u53ef\u80fd\u4f1a\u53d1\u751f\u51b2\u7a81\u3002\u800c git revert \u80fd\u591f\u5b89\u5168\u5730 \u64a4\u9500\u8fdc\u7a0b\u5171\u4eab\u4ed3\u5e93\u7684\u4fee\u6539 \uff0c\u56e0\u4e3a revert \u5728\u64a4\u9500\u4fee\u6539\u65f6\u4f1a\u521b\u5efa\u65b0\u63d0\u4ea4\uff0c\u4e0d\u4f1a\u4fee\u6539\u4e4b\u524d\u7684\u4ed3\u5e93\u5386\u53f2\u8bb0\u5f55\u3002","title":"\u6982\u8ff0"},{"location":"develop/git/git%E5%B8%B8%E7%94%A8%E5%9B%9E%E9%80%80%E6%93%8D%E4%BD%9C/#commit-level","text":"","title":"Commit Level\u64cd\u4f5c"},{"location":"develop/git/git%E5%B8%B8%E7%94%A8%E5%9B%9E%E9%80%80%E6%93%8D%E4%BD%9C/#reset","text":"\u5728commit-level\u4e0a\uff0c git revert \u53ef\u4ee5\u4ece\u5f53\u524d\u5206\u652f\u4e0a\u79fb\u9664\u63d0\u4ea4\uff08commit\uff09\u3002 1 2 git checkout hotfix git reset HEAD~2 \u4ee5\u4e0a\u547d\u4ee4\u5c06 hotfix \u5206\u652f\u5411\u540e\u79fb\u52a8\u4e24\u6b21\u63d0\u4ea4\uff1a \u5982\u4e0a\u56fe\u6240\u793a\uff0c\u6267\u884c\u5b8c git reset \u4e4b\u540e\uff0c\u5728 hotfix \u5206\u652f\u4e0a\u7684\u6700\u540e\u4e24\u4e2a\u63d0\u4ea4\u5c06\u6210\u4e3a\u5b64\u7acb\u63d0\u4ea4\uff08orphaned commits\uff09\uff0c\u5728Git\u4e0b\u4e00\u6b21\u6267\u884c\u5783\u573e\u56de\u6536\u65f6\u5c06\u4f1a\u88ab\u5220\u9664\uff0c\u56e0\u6b64 git reset \u7684\u5178\u578b\u5e94\u7528\u573a\u666f\u662f\u64a4\u9500\u5c1a\u672a\u548c\u5176\u4ed6\u4eba\u5171\u4eab\u7684\u4fee\u6539\u3002 \u9664\u4e86\u4f1a\u79fb\u52a8\u4ed3\u5e93\u4e2d\u5f53\u524d\u5206\u652f\u7684 HEAD \u6307\u9488\uff0c\u901a\u8fc7 git reset \u7684\u4ee5\u4e0b\u9009\u9879\u8fd8\u53ef\u4ee5\u6307\u5b9a\u5bf9\u6682\u5b58\u533a\u548c\u5de5\u4f5c\u533a\u7684\u66f4\u65b0\uff1a --soft \uff1a\u6682\u5b58\u533a\u548c\u5de5\u4f5c\u533a\u4e0d\u53d8\u3002 --mixed \uff1a\u9ed8\u8ba4\uff0c\u66f4\u65b0\u6682\u5b58\u533a\u4ee5\u5339\u914d\u6307\u5b9a\u7684\u63d0\u4ea4\uff08commit\uff09\uff0c\u5de5\u4f5c\u533a\u4e0d\u53d8\u3002 --hard \uff1a\u66f4\u65b0\u6682\u5b58\u533a\u548c\u5de5\u4f5c\u533a\u4ee5\u5339\u914d\u6307\u5b9a\u7684\u63d0\u4ea4\uff08commit\uff09\u3002","title":"reset"},{"location":"develop/git/git%E5%B8%B8%E7%94%A8%E5%9B%9E%E9%80%80%E6%93%8D%E4%BD%9C/#checkout","text":"git checkout \u7528\u4e8e\u5c06\u4ed3\u5e93\u72b6\u6001\u66f4\u65b0\u5230\u5386\u53f2\u8bb0\u5f55\u4e2d\u7684\u7279\u5b9a\u7248\u672c\uff0c\u5f53 git checkout \u540e\u63a5\u5206\u652f\u540d\u65f6\uff0c\u5c06\u4f1a\u5207\u6362\u5206\u652f\u3002 1 git checkout hotfix \u4ee5\u4e0a\u547d\u4ee4\u4f1a\u5c06 HEAD \u6307\u9488\u79fb\u52a8\u5230 hotfix \u5206\u652f\u4e0a\uff0c\u5e76\u66f4\u65b0\u5de5\u4f5c\u533a\u4ee5\u5339\u914d hotfix \u5206\u652f\u7684\u5f53\u524d\u72b6\u6001\u3002\u7531\u4e8e\u8be5\u64cd\u4f5c\u6709\u53ef\u80fd\u4f1a\u8986\u76d6\u672c\u5730\u4fee\u6539\uff0c\u56e0\u6b64Git\u4f1a\u5f3a\u5236\u8981\u6c42 git commit \u6216 git stash \u4ee5\u9632\u4e22\u5931\u3002 \u7c7b\u4f3c\u5730\uff0c git checkout \u540e\u63a5ref\u53ef\u4ee5\u5c06\u5de5\u4f5c\u533a\u66f4\u65b0\u5230\u7279\u5b9a\u7248\u672c\uff1a 1 2 # \u5de5\u4f5c\u533a\u66f4\u65b0\u5230\u4e24\u6b21\u63d0\u4ea4\u4e4b\u524d\u7684\u72b6\u6001 git checkout HEAD~2 \u5b9e\u9645\u4e0a git checkout \u540e\u9762\u65e0\u8bba\u662f\u5206\u652f\u540d\u8fd8\u662fref\uff0cGit\u90fd\u662f\u5c06 HEAD \u79fb\u52a8\u5230\u7279\u5b9a\u63d0\u4ea4\u4e0a\uff0c\u7136\u540e\u5c06\u5de5\u4f5c\u533a\u66f4\u65b0\u5230\u7279\u5b9a\u63d0\u4ea4\u7684\u72b6\u6001\u3002 git checkout \u548c git reset \u7684\u4e3b\u8981\u533a\u522b\u5728\u4e8e\uff0c checout \u53ea\u4f1a\u4fee\u6539 HEAD \u6307\u9488\u5e76\u66f4\u65b0\u5de5\u4f5c\u533a\uff0c\u4e0d\u4f1a\u4fee\u6539\u63d0\u4ea4\uff08commit\uff09\u5386\u53f2\uff0c\u6240\u6709\u7684commit\u90fd\u4e0d\u4f1a\u88ab\u5220\u9664\uff1b reset \u4e0d\u4f46\u4f1a\u4fee\u6539 HEAD \u6307\u9488\uff0c\u8fd8\u4f1a\u4fee\u6539\u63d0\u4ea4\uff08commit\uff09\u5386\u53f2\uff0c\u901a\u8fc7\u4e0d\u540c\u53c2\u6570\u63a7\u5236\u5de5\u4f5c\u533a\u3001\u6682\u5b58\u533a\u548c\u4ed3\u5e93\u7684\u66f4\u65b0\u3002 \u5982\u4e0a\u56fe\u6240\u793a\uff0c git checkout \u53ef\u4ee5\u5f88\u65b9\u4fbf\u5730\u67e5\u770b\u65e7\u7248\u672c\u3002\u4f46\u6b64\u65f6\u6ca1\u6709\u5206\u652f\u6307\u9488\uff08branch reference\uff09\u6307\u5411 HEAD \uff0c\u5982\u679c\u5411 HEAD \u540e\u6dfb\u52a0\u65b0\u7684\u63d0\u4ea4\uff08commit\uff09\u5e76\u5207\u6362\u5230\u5176\u5b83\u5206\u652f\uff0c\u5c06\u4f1a\u5bfc\u81f4\u518d\u4e5f\u65e0\u6cd5\u627e\u56de\u5b83\u4eec\u3002\u56e0\u6b64\u5728\u5411\u60ac\u7a7a\u7684 HEAD \u4e4b\u540e\u6dfb\u52a0\u65b0\u7684\u63d0\u4ea4\u4e4b\u524d\uff0c\u5e94\u5148\u521b\u5efa\u4e00\u4e2a\u65b0\u5206\u652f\u3002","title":"checkout"},{"location":"develop/git/git%E5%B8%B8%E7%94%A8%E5%9B%9E%E9%80%80%E6%93%8D%E4%BD%9C/#revert","text":"git revert \u901a\u8fc7\u6dfb\u52a0\u65b0\u7684\u63d0\u4ea4\uff08commit\uff09\u6765\u64a4\u9500\u63d0\u4ea4\u3002\u8fd9\u662f\u64a4\u9500\u4fee\u6539\u6700\u5b89\u5168\u7684\u65b9\u5f0f\uff0c\u56e0\u4e3a revert \u4e0d\u4f1a\u91cd\u5199\u63d0\u4ea4\u5386\u53f2\u8bb0\u5f55\u3002 1 2 git checkout hotfix git revert HEAD~2 \u4ee5\u4e0a\u547d\u4ee4\u5c06\u67e5\u627e\u5012\u6570\u7b2c\u4e8c\u4e2a\u63d0\u4ea4\u7684\u4fee\u6539\uff0c\u5e76\u521b\u5efa\u65b0\u7684\u63d0\u4ea4\u4ee5\u64a4\u9500\u8fd9\u4e9b\u4fee\u6539\uff1a \u4e0d\u540c\u4e8e git reset \uff0c git revert \u4e0d\u4f1a\u4fee\u6539\u4e4b\u524d\u7684\u63d0\u4ea4\u5386\u53f2\uff0c\u56e0\u6b64 git revert \u9002\u7528\u4e8e\u64a4\u9500\u516c\u5171\u5206\u652f\u4e0a\u7684\u4fee\u6539\uff0c\u800c git reset \u9002\u7528\u4e8e\u64a4\u9500\u79c1\u6709\u5206\u652f\u4e0a\u7684\u4fee\u6539\u3002\u7c7b\u4f3c\u4e8e git checkout \uff0c git revert \u53ef\u80fd\u4f1a\u8986\u76d6\u5de5\u4f5c\u533a\u7684\u6587\u4ef6\uff0c\u56e0\u6b64\u5728\u6267\u884c revert \u4e4b\u524d\uff0cGit\u4f1a\u5f3a\u5236\u8981\u6c42 git commit \u6216 git stash \u4ee5\u9632\u4e22\u5931\u3002","title":"revert"},{"location":"develop/git/git%E5%B8%B8%E7%94%A8%E5%9B%9E%E9%80%80%E6%93%8D%E4%BD%9C/#file-level","text":"git reset \u548c git checkout \u53ef\u63a5\u53d7\u53ef\u9009\u7684\u6587\u4ef6\u8def\u5f84\u4f5c\u4e3a\u53c2\u6570\uff0c\u8fd9\u5c06\u4f1a\u6539\u53d8\u8fd9\u4e9b\u547d\u4ee4\u7684\u529f\u80fd\u548c\u4f5c\u7528\u8303\u56f4\u3002","title":"File Level\u64cd\u4f5c"},{"location":"develop/git/git%E5%B8%B8%E7%94%A8%E5%9B%9E%E9%80%80%E6%93%8D%E4%BD%9C/#reset_1","text":"\u5f53\u6307\u5b9a\u6587\u4ef6\u8def\u5f84\u65f6\uff0c git reset \u4f1a\u66f4\u65b0\u6682\u5b58\u533a\u4ee5\u5339\u914d\u6307\u5b9a\u7684\u63d0\u4ea4\u3002 1 git reset HEAD~2 foo.py \u4e0a\u8ff0\u547d\u4ee4\u5c06\u4f1a\u83b7\u53d6\u5012\u6570\u7b2c\u4e8c\u4e2a\u63d0\u4ea4\u4e2d\u7684 foo.py \uff0c\u5e76\u653e\u56de\u5230\u6682\u5b58\u533a\uff1a git reset \u901a\u5e38\u4f1a\u64a4\u56de\u5230 HEAD \u6307\u5411\u7684\u63d0\u4ea4\uff0c\u5bf9\u4e8efile-level\u7248\u672c\u7684 git reset \uff0c\u4e0d\u5b58\u5728 --soft \u3001 --mixed \u548c --hard \u9009\u9879\uff0c\u5e94\u7528 git reset \u5c06\u59cb\u7ec8\u66f4\u65b0\u6682\u5b58\u533a\uff0c\u59cb\u7ec8\u4e0d\u66f4\u65b0\u5de5\u4f5c\u533a\uff0c\u76f8\u5f53\u4e8e\u53ea\u6709 --mixed \u9009\u9879\u3002","title":"reset"},{"location":"develop/git/git%E5%B8%B8%E7%94%A8%E5%9B%9E%E9%80%80%E6%93%8D%E4%BD%9C/#checkout_1","text":"\u5f53\u6307\u5b9a\u6587\u4ef6\u8def\u5f84\u65f6\uff0c git checkout \u4f1a\u76f4\u63a5\u66f4\u65b0\u5de5\u4f5c\u533a\u4ee5\u5339\u914d\u6307\u5b9a\u7684\u63d0\u4ea4\u3002 1 git checkout HEAD~2 foo.py \u4e0a\u8ff0\u547d\u4ee4\u5c06\u4f1a\u83b7\u53d6\u5012\u6570\u7b2c\u4e8c\u4e2a\u63d0\u4ea4\u4e2d\u7684 foo.py \uff0c\u5e76\u653e\u56de\u5230\u5de5\u4f5c\u533a\uff1a \u4e0d\u540c\u4e8ecommit-level\u7248\u672c\u7684 git checkout \uff0c\u8be5\u547d\u4ee4\u4f5c\u7528\u4e8e\u6587\u4ef6\u65f6\u4e0d\u4f1a\u79fb\u52a8 HEAD \u6307\u9488\uff0c\u56e0\u6b64\u4e5f\u4e0d\u4f1a\u5207\u6362\u5206\u652f\u3002 git checkout \u4f5c\u7528\u4e8e\u6587\u4ef6\u65f6\uff0c\u540c\u6837\u53ef\u4ee5\u7528\u6765\u67e5\u770b\u65e7\u7248\u672c\uff0c\u53ea\u662f\u4f5c\u7528\u8303\u56f4\u9650\u5236\u4e3a\u6307\u5b9a\u6587\u4ef6\u3002\u5982\u679c\u4e00\u4e2a\u6587\u4ef6 checkout \u4e4b\u540e\u53c8\u8fdb\u884c\u4e86\u63d0\u4ea4\uff0c\u8be5\u64cd\u4f5c\u7684\u6548\u679c\u7c7b\u4f3c\u4e8e revert \uff0c\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e git checkout \u4f1a\u64a4\u9500\u5bf9\u8be5\u6587\u4ef6\u7684\u6240\u6709\u540e\u7eed\u4fee\u6539\uff0c\u800c git revert \u4ec5\u4f1a\u64a4\u9500\u8be5\u6587\u4ef6\u6307\u5b9a\u63d0\u4ea4\u7684\u4fee\u6539\u3002 git checkout \u4e5f\u901a\u5e38\u5e94\u7528\u4e8e HEAD \u6307\u9488\uff0c\u6bd4\u5982 git checkout HEAD foo.py \u5c06\u4f1a\u629b\u5f03 foo.py \u6240\u6709\u672a\u6682\u5b58\u7684\u4fee\u6539\uff0c\u8fd9\u6709\u70b9\u7c7b\u4f3c\u4e8e git reset HEAD --hard \uff0c\u4f46\u524d\u8005\u7684\u4f5c\u7528\u57df\u4ec5\u9650\u4e8e\u6307\u5b9a\u6587\u4ef6\u3002 git checkout/git reset/git revert/git restore\u5e38\u7528\u56de\u9000\u64cd\u4f5c Resetting, Checking Out & Reverting git\u7684\u64a4\u9500\u64cd\u4f5c\uff1areset\u3001checkout\u548crevert","title":"checkout"},{"location":"develop/git/git%E6%97%A5%E5%BF%97/","text":"git\u65e5\u5fd7 tag :: #TODO Advanced Git log Git-show | Atlassian","title":"git\u65e5\u5fd7"},{"location":"develop/git/git%E6%97%A5%E5%BF%97/#git","text":"tag :: #TODO Advanced Git log Git-show | Atlassian","title":"git\u65e5\u5fd7"},{"location":"develop/git/git%E7%9A%84fast_forward/","text":"Git\u7684Fast Forward fast-forward\u542b\u4e49 Git\u53ef\u4ee5\u91c7\u7528fast-forward\u548cno fast-forward\u4e24\u79cd\u65b9\u5f0f\u8fdb\u884c\u5408\u5e76\uff08merge\uff09\uff0cfast-forward\u5408\u5e76\u65f6\u76f4\u63a5\u5c06\u76ee\u6807\u5206\u652f\u7684\u6307\u9488\u6307\u5411\u6e90\u5206\u652f\u7684\u4f4d\u7f6e\uff0c\u4e0d\u4f1a\u4fdd\u7559\u6e90\u5206\u652f\u7684\u63d0\u4ea4\u8bb0\u5f55\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cGit\u4ee5fast-forward\u7684\u65b9\u5f0f\u8fdb\u884c\u5408\u5e76\uff08merge\uff09\uff0c\u53ef\u4ee5\u901a\u8fc7\uff1a 1 2 # no fast-forward\u63d0\u4ea4 git merge <source-branch> --no-ff \u4fee\u6539\u9ed8\u8ba4\u884c\u4e3a\uff0c\u8fdb\u884cno fast-forward\u65b9\u5f0f\u63d0\u4ea4\u3002 \u793a\u4f8b \u5982\u4e0b\uff0c\u5e0c\u671b\u5c06 feature/add-page \u5206\u652f\u5408\u5e76\u5230 master \u5206\u652f\uff0c\u6b64\u65f6 master \u5206\u652f\u843d\u540e feature/add-page \u4e24\u4e2a\u63d0\u4ea4\uff1a \u5982\u679c\u91c7\u7528\u9ed8\u8ba4\u7684fast-forward\u8fdb\u884c\u5408\u5e76\uff08merge\uff09\uff0c\u5219\u4f1a\u5c06 feature/add-page \u5206\u652f\u7684\u63d0\u4ea4\u8bb0\u5f55\u5408\u5e76\u5230 master \u4e0a\uff0c\u76f4\u63a5\u5c06 master \u6307\u9488\u6307\u5411 feature/add-page \u5373\u53ef\uff1a \u5982\u679c\u91c7\u7528no fast-forward\u8fdb\u884c\u5408\u5e76\uff08merge\uff09\uff0c\u5219\u4f1a\u4fdd\u7559\u539f\u59cb\u5206\u652f\u7684\u63d0\u4ea4\u8bb0\u5f55\uff0c\u5e76\u65b0\u589e\u4e00\u4e2a\u63d0\u4ea4 merge branch 'feature/add-page' into master \uff1a fast-forward\u4f18\u7f3a\u70b9 \u4f18\u70b9 \u63d0\u4ea4\u8bb0\u5f55\u6e05\u6670\uff0c\u5408\u5e76\u4e0d\u4f1a\u51fa\u73b0\u591a\u4e2a\u5c0f\u5c94\u8def\u3002 \u7f3a\u70b9 \u4e0d\u4fdd\u7559\u6bcf\u4e00\u4e2a\u5206\u652f\u7684\u63d0\u4ea4\u8bb0\u5f55\u3002 \u9023\u8449\u5b50\u90fd\u79d2\u61c2\u7684 Fast Forward","title":"Git\u7684Fast Forward"},{"location":"develop/git/git%E7%9A%84fast_forward/#gitfast-forward","text":"","title":"Git\u7684Fast Forward"},{"location":"develop/git/git%E7%9A%84fast_forward/#fast-forward","text":"Git\u53ef\u4ee5\u91c7\u7528fast-forward\u548cno fast-forward\u4e24\u79cd\u65b9\u5f0f\u8fdb\u884c\u5408\u5e76\uff08merge\uff09\uff0cfast-forward\u5408\u5e76\u65f6\u76f4\u63a5\u5c06\u76ee\u6807\u5206\u652f\u7684\u6307\u9488\u6307\u5411\u6e90\u5206\u652f\u7684\u4f4d\u7f6e\uff0c\u4e0d\u4f1a\u4fdd\u7559\u6e90\u5206\u652f\u7684\u63d0\u4ea4\u8bb0\u5f55\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cGit\u4ee5fast-forward\u7684\u65b9\u5f0f\u8fdb\u884c\u5408\u5e76\uff08merge\uff09\uff0c\u53ef\u4ee5\u901a\u8fc7\uff1a 1 2 # no fast-forward\u63d0\u4ea4 git merge <source-branch> --no-ff \u4fee\u6539\u9ed8\u8ba4\u884c\u4e3a\uff0c\u8fdb\u884cno fast-forward\u65b9\u5f0f\u63d0\u4ea4\u3002","title":"fast-forward\u542b\u4e49"},{"location":"develop/git/git%E7%9A%84fast_forward/#_1","text":"\u5982\u4e0b\uff0c\u5e0c\u671b\u5c06 feature/add-page \u5206\u652f\u5408\u5e76\u5230 master \u5206\u652f\uff0c\u6b64\u65f6 master \u5206\u652f\u843d\u540e feature/add-page \u4e24\u4e2a\u63d0\u4ea4\uff1a \u5982\u679c\u91c7\u7528\u9ed8\u8ba4\u7684fast-forward\u8fdb\u884c\u5408\u5e76\uff08merge\uff09\uff0c\u5219\u4f1a\u5c06 feature/add-page \u5206\u652f\u7684\u63d0\u4ea4\u8bb0\u5f55\u5408\u5e76\u5230 master \u4e0a\uff0c\u76f4\u63a5\u5c06 master \u6307\u9488\u6307\u5411 feature/add-page \u5373\u53ef\uff1a \u5982\u679c\u91c7\u7528no fast-forward\u8fdb\u884c\u5408\u5e76\uff08merge\uff09\uff0c\u5219\u4f1a\u4fdd\u7559\u539f\u59cb\u5206\u652f\u7684\u63d0\u4ea4\u8bb0\u5f55\uff0c\u5e76\u65b0\u589e\u4e00\u4e2a\u63d0\u4ea4 merge branch 'feature/add-page' into master \uff1a","title":"\u793a\u4f8b"},{"location":"develop/git/git%E7%9A%84fast_forward/#fast-forward_1","text":"","title":"fast-forward\u4f18\u7f3a\u70b9"},{"location":"develop/git/git%E7%9A%84fast_forward/#_2","text":"\u63d0\u4ea4\u8bb0\u5f55\u6e05\u6670\uff0c\u5408\u5e76\u4e0d\u4f1a\u51fa\u73b0\u591a\u4e2a\u5c0f\u5c94\u8def\u3002","title":"\u4f18\u70b9"},{"location":"develop/git/git%E7%9A%84fast_forward/#_3","text":"\u4e0d\u4fdd\u7559\u6bcf\u4e00\u4e2a\u5206\u652f\u7684\u63d0\u4ea4\u8bb0\u5f55\u3002 \u9023\u8449\u5b50\u90fd\u79d2\u61c2\u7684 Fast Forward","title":"\u7f3a\u70b9"},{"location":"develop/git/git%E7%9A%84%E6%8C%87%E9%92%88ref%E5%92%8Creflog/","text":"git\u7684\u6307\u9488ref\u548creflog Git\u6307\u9488ref\u6982\u5ff5 ref \u662f\u4e00\u79cd\u6307\u5411\u4e00\u6b21\u63d0\u4ea4\u7684\u975e\u76f4\u63a5\u65b9\u5f0f\uff0c\u53ef\u4ee5\u770b\u505a\u662f\u63d0\u4ea4\u54c8\u5e0c\uff08commit hash\uff09\u7684\u522b\u540d\uff0c\u7528\u4e8e\u8868\u793aGit\u7684\u5206\u652f\u548c\u6807\u7b7e\u3002 ref \u4f5c\u4e3a\u666e\u901a\u6587\u4ef6\u5b58\u50a8\u4e8e .git/refs \u76ee\u5f55\u4e0b\uff1a 1 2 $ ls .git/refs heads remotes tags \u5176\u4e2d\uff0c heads \u76ee\u5f55\u5b9a\u4e49\u4e86\u4ed3\u5e93\u4e2d\u6240\u6709\u7684\u672c\u5730\u5206\u652f\uff0c heads \u76ee\u5f55\u4e0b\u7684\u6bcf\u4e2a\u6587\u4ef6\u7684\u6587\u4ef6\u540d\u5bf9\u5e94\u5206\u652f\u540d\uff0c\u6587\u4ef6\u5185\u5bb9\u4e3a\u8be5\u5206\u652f\u6700\u540e\u4e00\u6b21\u63d0\u4ea4\u5bf9\u5e94\u7684\u54c8\u5e0c\u503c\u3002\u5728 main \u5206\u652f\u4e0a\u8fdb\u884c\u4e00\u6b21\u63d0\u4ea4\uff0cGit\u5b9e\u9645\u5c31\u662f\u4fee\u6539 refs/heads/main \u7684\u5185\u5bb9\uff0c\u65b0\u5efa\u4e00\u4e2a\u5206\u652f\uff0c\u5b9e\u9645\u5c31\u662f\u5c06\u63d0\u4ea4\u54c8\u5e0c\u5199\u5165\u4e00\u4e2a\u65b0\u6587\u4ef6\u4e2d\u3002 tags \u76ee\u5f55\u4e0e heads \u4f5c\u7528\u7c7b\u4f3c\uff0c\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u4fdd\u5b58 git tags \u800c\u975e\u5206\u652f\u4fe1\u606f\u3002 remote \u76ee\u5f55\u5b58\u653e\u7740\u6240\u6709\u8fdc\u7a0b\u4ed3\u5e93\uff0c\u6bcf\u4e2a\u8fdc\u7a0b\u4ed3\u5e93\u5bf9\u5e94\u4e00\u4e2a\u5b50\u76ee\u5f55\uff0c\u8be5\u5b50\u76ee\u5f55\u4e0b\u53c8\u5b58\u653e\u7740\u83b7\u53d6\uff08fetch\uff09\u5230\u5b58\u50a8\u5e93\u4e2d\u7684\u6240\u6709\u8fdc\u7a0b\u5206\u652f\uff1a 1 2 3 4 5 6 7 $ ls .git/refs/remotes origin $ ls .git/refs/remotes/origin HEAD fix_db7f3d3 master Tacotron2-iter-260K-824c091 fix_server refactor dependabot ljspeech-tacotron-iter-185K dev main \u56e0\u6b64\uff0c\u5728\u4e00\u4e9b\u9700\u8981\u6307\u5b9a\u5177\u4f53\u63d0\u4ea4\u54c8\u5e0c\u7684\u573a\u666f\u4e2d\uff0c\u9664\u4e86\u6307\u5b9a\u54c8\u5e0c\u503c\u4e4b\u5916\uff0c\u8fd8\u53ef\u4ee5\u76f4\u63a5\u6307\u5b9a ref \uff0c\u6bd4\u5982 git show .git/refs/heads/HEAD \u3002 \u5bf9\u4e8e\u5927\u578b\u4ed3\u5e93\uff0cGit\u4f1a\u5468\u671f\u6027\u6267\u884c\u5783\u573e\u56de\u6536\uff0c\u4ee5\u51cf\u5c11\u4e0d\u5fc5\u8981\u7684\u5bf9\u8c61\u5e76\u538b\u7f29 ref \uff0c\u4ee5\u63d0\u9ad8\u6027\u80fd\u3002\u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 git gc \u624b\u52a8\u6267\u884c\u5783\u573e\u56de\u6536\uff0c\u8be5\u547d\u4ee4\u4f1a\u5c06\u4e0a\u8ff0\u5206\u652f\u548ctag\u5bf9\u5e94\u7684 ref \u6587\u4ef6\u538b\u7f29\u5230 .git \u76ee\u5f55\u4e0b\u7684 packed-refs \u6587\u4ef6\u4e2d\u3002 \u7279\u6b8aref\u7684\u6307\u5411 HEAD \uff1a\u6700\u8fd1\u68c0\u51fa\uff08check out\uff09\u7684\u63d0\u4ea4\uff08commit\uff09\u6216\u5206\u652f\u3002 FETCH_HEAD \uff1a\u6700\u8fd1\u4ece\u8fdc\u7a0b\u4ed3\u5e93\u4e2d\u83b7\u53d6\uff08fetch\uff09\u7684\u5206\u652f\u3002 ORIG_HEAD \uff1a\u5728\u8f83\u5927\u53d8\u66f4\u524d HEAD \u7684\u5907\u4efd\u3002 MERGE_HEAD \uff1a\u4f7f\u7528 git merge \u5408\u5e76\u5230\u5f53\u524d\u5206\u652f\u7684\u63d0\u4ea4\uff08commit\uff09\u3002 CHERRY_PICK_HEAD \uff1a\u4f7f\u7528 git cherry-pick \u6458\u53d6\u90e8\u5206\u5185\u5bb9\u5230\u5f53\u524d\u5206\u652f\u7684\u63d0\u4ea4\uff08commit\uff09\u3002 \u8fdc\u7a0b\u4ed3\u5e93\u7684\u9ed8\u8ba4\u540dorigin origin \u662f\u8fdc\u7a0b\u4ed3\u5e93\u94fe\u63a5\u7684\u522b\u540d\uff0c origin \u5bf9\u5e94\u7684\u94fe\u63a5\u592a\u957f\uff0c\u4f7f\u7528\u8d77\u6765\u8f83\u4e3a\u9ebb\u70e6\u3002\u56e0\u6b64 origin \u7684\u672c\u8d28\u662f\u6307\u5411\u8fdc\u7a0b\u4ed3\u5e93\u7684\u4e00\u4e2a\u6307\u9488\u540d\uff0c\u800cmaster/main\u5219\u5c5e\u4e8e\u4ed3\u5e93\u4e2d\u7684\u4e00\u4e2a\u90e8\u5206\u3002 \u53ef\u4ee5\u901a\u8fc7 git remote -v \u6216\u8005\u4ed3\u5e93\u914d\u7f6e\u6587\u4ef6 .git/config \u67e5\u770b\u8fdc\u7a0b\u4ed3\u5e93\u7684\u5177\u4f53\u94fe\u63a5\uff0c\u53ef\u4ee5\u901a\u8fc7 git remote add <remote-repo-name> <url> \u6dfb\u52a0\u65b0\u7684\u8fdc\u7a0b\u4ed3\u5e93\u522b\u540d <remote-repo-name> \u548c\u5bf9\u5e94\u7684\u94fe\u63a5 <url> \u3002 git push \u9ed8\u8ba4\u521b\u5efa origin \u548c main \uff0c\u56e0\u6b64\u63a8\u9001\u65f6\u53ef\u4ee5\u7701\u7565\uff0c\u5b8c\u6574\u5f62\u5f0f\u5e94\u662f git push origin main \u3002\u5982\u679c\u5e0c\u671bGit\u8bb0\u5f55\u63a8\u9001\u5230\u8fdc\u7a0b\u5206\u652f\u7684\u9ed8\u8ba4\u503c\uff0c\u53ef\u4ee5\u52a0\u4e0a -u \u53c2\u6570\uff0c\u4e5f\u5c31\u662f git push -u <remote> <local> \uff0c\u8fd9\u6837\u5f53\u4e0b\u6b21\u8fd8\u60f3\u8981\u7ee7\u7eed\u63a8\u9001\u5230\u8be5\u8fdc\u7a0b\u5206\u652f\u65f6\uff0c\u63a8\u9001\u547d\u4ee4\u5c31\u53ef\u4ee5\u7b80\u5199\u4e3a git push \u3002 \u8fdc\u7a0b\u5206\u652f\u548c\u672c\u5730\u5206\u652f\u7684\u6620\u5c04refspecs refspecs \u5c06\u672c\u5730\u4ed3\u5e93\u7684\u5206\u652f\u6620\u5c04\u5230\u8fdc\u7a0b\u4ed3\u5e93\u7684\u5206\u652f\uff0c\u4ee5\u4fbf\u4f7f\u7528\u672c\u5730Git\u547d\u4ee4\u7ba1\u7406\u8fdc\u7a0b\u5206\u652f\uff0c\u5e76\u914d\u7f6e\u4e00\u4e9b\u7279\u6b8a\u7684 git push \u548c git fetch \u884c\u4e3a\u3002 refspecs \u5b9a\u4e49\u5982\u4e0b\uff1a 1 2 3 4 # definition [ + ] <src>:<dst> # example +refs/heads/*:refs/remotes/origin/* \u5176\u4e2d\uff0c + \u8868\u793a\u5f3a\u5236\u8fdc\u7a0b\u4ed3\u5e93\u6267\u884c\u975e\u5feb\u8fdb\u66f4\u65b0\uff08non-fast-forward update\uff09\u3002 <src> \u8868\u793a\u672c\u5730\u4ed3\u5e93\u7684\u6e90\u5206\u652f\u3002 <dst> \u8868\u793a\u8fdc\u7a0b\u4ed3\u5e93\u7684\u76ee\u6807\u5206\u652f\u3002 refspecs \u53ef\u4ee5\u4e0e git push \u4e00\u8d77\u4f7f\u7528\uff0c\u4e3a\u8fdc\u7a0b\u5206\u652f\u6307\u5b9a\u4e0d\u540c\u7684\u540d\u79f0\u3002\u6bd4\u5982\u4ee5\u4e0b\u547d\u4ee4\u5c06 main \u672c\u5730\u5206\u652f\u63a8\u9001\u5230 origin \u8fdc\u7a0b\u4ed3\u5e93\uff0c\u4f46\u4f7f\u7528 qa-main \u4f5c\u4e3a\u8fdc\u7a0b\u4ed3\u5e93 origin \u4e2d\u5bf9\u5e94\u5206\u652f\u7684\u540d\u79f0\uff1a 1 git push origin main:refs/heads/qa-main \u540c\u6837\u53ef\u4ee5\u5229\u7528 refspecs \u5220\u9664\u8fdc\u7a0b\u5206\u652f\uff0c\u7c7b\u4f3c\u5730\uff0c\u6b64\u65f6\u5c06\u672c\u5730\u5206\u652f\u7684\u540d\u79f0\u7f6e\u4e3a\u7a7a\u5373\u53ef\uff1a 1 2 3 git push origin :qa-main # \u8be5\u5220\u9664\u5206\u652f\u7684\u64cd\u4f5c\u7b49\u540c\u4e8e git push origin --delete qa:main \u901a\u8fc7\u4fee\u6539Git\u7684\u914d\u7f6e\u6587\u4ef6 .git/config \uff0c\u53ef\u4ee5\u4f7f\u7528 refspecs \u4fee\u6539 git fetch \u7684\u9ed8\u8ba4\u884c\u4e3a\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c git fetch \u83b7\u53d6\u8fdc\u7a0b\u4ed3\u5e93\u7684\u6240\u6709\u5206\u652f\uff0c\u56e0\u6b64 .git/config \u6587\u4ef6\u76f8\u5173\u5185\u5bb9\u5982\u4e0b\uff1a 1 2 3 [remote \"origin\"] url = https://github.com/wenet-e2e/wenet.git fetch = +refs/heads/*:refs/remotes/origin/* \u4e0a\u8ff0\u914d\u7f6e\u8981\u6c42Git\u4e0b\u8f7d\u8fdc\u7a0b\u4ed3\u5e93 origin \u7684\u6240\u6709\u5206\u652f\uff0c\u5982\u679c\u53ea\u9700\u8981 main \u5206\u652f\uff0c\u53ef\u4ee5\u66f4\u65b0\u76f8\u5173\u5185\u5bb9\u5982\u4e0b\uff1a 1 2 3 [remote \"origin\"] url = https://github.com/wenet-e2e/wenet.git fetch = +refs/heads/main:refs/remotes/origin/main \u7c7b\u4f3c\u5730\uff0c\u53ef\u4ee5\u4fee\u6539 git push \u7684\u9ed8\u8ba4\u884c\u4e3a\u3002\u6bd4\u5982\uff0c\u5982\u679c\u60f3\u4e00\u76f4\u5c06\u672c\u5730\u5206\u652f main \u63a8\u9001\u5230\u8fdc\u7a0b\u4ed3\u5e93 origin \u7684 qa-main \uff0c\u53ef\u4ee5\u66f4\u65b0\u76f8\u5173\u5185\u5bb9\u5982\u4e0b\uff1a 1 2 3 4 [remote \"origin\"] url = https://github.com/wenet-e2e/wenet.git fetch = +refs/heads/main:refs/remotes/origin/main push = refs/heads/main:refs/heads/qa-main \u76f8\u5bf9ref HEAD~1 \uff1a\u7b49\u540c\u4e8e HEAD~ \u6216 HEAD^1 \u6216 HEAD^ \uff0c\u540e\u9000\u81f3 HEAD \u4e4b\u524d\u7684\u63d0\u4ea4\u3002 HEAD^2 \uff1a\u540e\u9000\u81f3\u5f53\u524d\u5206\u652f\u7684\u7b2c\u4e8c\u4e2a\u7236\u63d0\u4ea4\u3002 HEAD~1^2 \uff1a\u540e\u9000\u81f3 HEAD \u4e4b\u524d\u7684\u63d0\u4ea4\uff0c\u518d\u540e\u9000\u5230\u5f53\u524d\u5206\u652f\u7684\u7b2c\u4e8c\u4e2a\u7236\u63d0\u4ea4\u4e0a\uff0c\u5982\u679c HEAD \u6ca1\u6709\u5408\u5e76\u5206\u652f\uff0c\u5219\u975e\u6cd5\u3002 HEAD@{2} \uff1a\u6307\u5411 git reflog \u8bb0\u5f55\u7684\u6574\u4f53\u64cd\u4f5c\u7684\u7b2c\u4e09\u6761\u64cd\u4f5c\uff08 git reflog \u8bb0\u5f55\u7684\u6574\u4f53\u64cd\u4f5c\u4ece0\u5f00\u59cb\uff09\u3002 reflog reflog \u8bb0\u5f55\u4e86\u5728\u5f53\u524d\u4ed3\u5e93\u4e0a\u8fdb\u884c\u7684\u6240\u6709Git\u64cd\u4f5c\uff0c\u53ef\u4ee5\u901a\u8fc7 git reflog \u67e5\u770b\u8be5Git\u65e5\u5fd7\uff0c\u6bd4\u5982\uff1a 1 2 3 4 5 6 7 8 $ git reflog 02d7064 ( HEAD -> main, origin/main, origin/HEAD ) HEAD@ { 0 } : pull: Fast-forward 25897e0 HEAD@ { 1 } : checkout: moving from 8a1cb96795b38ba9aeb23c4005242acd0d9829e8 to main 8a1cb96 ( origin/kaitang-ssl-train ) HEAD@ { 2 } : pull https://github.com/cnlinxi/wenet.git kaitang-ssl-train: Fast-forward 422c89e HEAD@ { 3 } : checkout: moving from main to remotes/origin/kaitang-ssl-train 88a652a HEAD@ { 4 } : commit: delete set_audio_backend a9bae0c HEAD@ { 5 } : commit: update f0fe211 HEAD@ { 6 } : commit: update ( examples/librispeech ) :\u4e3akaggle\u4fee\u6539\u6570\u636e\u8def\u5f84 \u5176\u4e2d\uff0c HEAD{<num>} \u7528\u4e8e\u6807\u8bc6\u5728 reflog \u4e2d\u7684\u63d0\u4ea4\uff08commit\uff09\uff0c\u53ef\u4ee5\u914d\u5408\u5176\u4ed6\u547d\u4ee4\u5bf9\u6307\u5b9a\u63d0\u4ea4\uff08commit\uff09\u8fdb\u884c\u64cd\u4f5c\uff0c\u6bd4\u5982\u5220\u9664\u6700\u540e\u4e00\u6b21\u63d0\u4ea4\u65f6\uff0c\u53ef\u4ee5\u6267\u884c git reset --soft HEAD@{1} \u3002 Refs and the Reflog Git \u91cc\u9762\u7684 origin \u5230\u5e95\u4ee3\u8868\u5565\u610f\u601d? git push \u7684 -u \u53c2\u6570\u542b\u4e49 \u8fd9\u624d\u662f\u771f\u6b63\u7684GIT\u2014\u2014GIT\u5b9e\u7528\u6280\u5de7 \u8fd9\u624d\u662f\u771f\u6b63\u7684GIT\u2014\u2014\u5206\u652f\u5408\u5e76","title":"git\u7684\u6307\u9488ref\u548creflog"},{"location":"develop/git/git%E7%9A%84%E6%8C%87%E9%92%88ref%E5%92%8Creflog/#gitrefreflog","text":"","title":"git\u7684\u6307\u9488ref\u548creflog"},{"location":"develop/git/git%E7%9A%84%E6%8C%87%E9%92%88ref%E5%92%8Creflog/#gitref","text":"ref \u662f\u4e00\u79cd\u6307\u5411\u4e00\u6b21\u63d0\u4ea4\u7684\u975e\u76f4\u63a5\u65b9\u5f0f\uff0c\u53ef\u4ee5\u770b\u505a\u662f\u63d0\u4ea4\u54c8\u5e0c\uff08commit hash\uff09\u7684\u522b\u540d\uff0c\u7528\u4e8e\u8868\u793aGit\u7684\u5206\u652f\u548c\u6807\u7b7e\u3002 ref \u4f5c\u4e3a\u666e\u901a\u6587\u4ef6\u5b58\u50a8\u4e8e .git/refs \u76ee\u5f55\u4e0b\uff1a 1 2 $ ls .git/refs heads remotes tags \u5176\u4e2d\uff0c heads \u76ee\u5f55\u5b9a\u4e49\u4e86\u4ed3\u5e93\u4e2d\u6240\u6709\u7684\u672c\u5730\u5206\u652f\uff0c heads \u76ee\u5f55\u4e0b\u7684\u6bcf\u4e2a\u6587\u4ef6\u7684\u6587\u4ef6\u540d\u5bf9\u5e94\u5206\u652f\u540d\uff0c\u6587\u4ef6\u5185\u5bb9\u4e3a\u8be5\u5206\u652f\u6700\u540e\u4e00\u6b21\u63d0\u4ea4\u5bf9\u5e94\u7684\u54c8\u5e0c\u503c\u3002\u5728 main \u5206\u652f\u4e0a\u8fdb\u884c\u4e00\u6b21\u63d0\u4ea4\uff0cGit\u5b9e\u9645\u5c31\u662f\u4fee\u6539 refs/heads/main \u7684\u5185\u5bb9\uff0c\u65b0\u5efa\u4e00\u4e2a\u5206\u652f\uff0c\u5b9e\u9645\u5c31\u662f\u5c06\u63d0\u4ea4\u54c8\u5e0c\u5199\u5165\u4e00\u4e2a\u65b0\u6587\u4ef6\u4e2d\u3002 tags \u76ee\u5f55\u4e0e heads \u4f5c\u7528\u7c7b\u4f3c\uff0c\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u4fdd\u5b58 git tags \u800c\u975e\u5206\u652f\u4fe1\u606f\u3002 remote \u76ee\u5f55\u5b58\u653e\u7740\u6240\u6709\u8fdc\u7a0b\u4ed3\u5e93\uff0c\u6bcf\u4e2a\u8fdc\u7a0b\u4ed3\u5e93\u5bf9\u5e94\u4e00\u4e2a\u5b50\u76ee\u5f55\uff0c\u8be5\u5b50\u76ee\u5f55\u4e0b\u53c8\u5b58\u653e\u7740\u83b7\u53d6\uff08fetch\uff09\u5230\u5b58\u50a8\u5e93\u4e2d\u7684\u6240\u6709\u8fdc\u7a0b\u5206\u652f\uff1a 1 2 3 4 5 6 7 $ ls .git/refs/remotes origin $ ls .git/refs/remotes/origin HEAD fix_db7f3d3 master Tacotron2-iter-260K-824c091 fix_server refactor dependabot ljspeech-tacotron-iter-185K dev main \u56e0\u6b64\uff0c\u5728\u4e00\u4e9b\u9700\u8981\u6307\u5b9a\u5177\u4f53\u63d0\u4ea4\u54c8\u5e0c\u7684\u573a\u666f\u4e2d\uff0c\u9664\u4e86\u6307\u5b9a\u54c8\u5e0c\u503c\u4e4b\u5916\uff0c\u8fd8\u53ef\u4ee5\u76f4\u63a5\u6307\u5b9a ref \uff0c\u6bd4\u5982 git show .git/refs/heads/HEAD \u3002 \u5bf9\u4e8e\u5927\u578b\u4ed3\u5e93\uff0cGit\u4f1a\u5468\u671f\u6027\u6267\u884c\u5783\u573e\u56de\u6536\uff0c\u4ee5\u51cf\u5c11\u4e0d\u5fc5\u8981\u7684\u5bf9\u8c61\u5e76\u538b\u7f29 ref \uff0c\u4ee5\u63d0\u9ad8\u6027\u80fd\u3002\u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 git gc \u624b\u52a8\u6267\u884c\u5783\u573e\u56de\u6536\uff0c\u8be5\u547d\u4ee4\u4f1a\u5c06\u4e0a\u8ff0\u5206\u652f\u548ctag\u5bf9\u5e94\u7684 ref \u6587\u4ef6\u538b\u7f29\u5230 .git \u76ee\u5f55\u4e0b\u7684 packed-refs \u6587\u4ef6\u4e2d\u3002","title":"Git\u6307\u9488ref\u6982\u5ff5"},{"location":"develop/git/git%E7%9A%84%E6%8C%87%E9%92%88ref%E5%92%8Creflog/#ref","text":"HEAD \uff1a\u6700\u8fd1\u68c0\u51fa\uff08check out\uff09\u7684\u63d0\u4ea4\uff08commit\uff09\u6216\u5206\u652f\u3002 FETCH_HEAD \uff1a\u6700\u8fd1\u4ece\u8fdc\u7a0b\u4ed3\u5e93\u4e2d\u83b7\u53d6\uff08fetch\uff09\u7684\u5206\u652f\u3002 ORIG_HEAD \uff1a\u5728\u8f83\u5927\u53d8\u66f4\u524d HEAD \u7684\u5907\u4efd\u3002 MERGE_HEAD \uff1a\u4f7f\u7528 git merge \u5408\u5e76\u5230\u5f53\u524d\u5206\u652f\u7684\u63d0\u4ea4\uff08commit\uff09\u3002 CHERRY_PICK_HEAD \uff1a\u4f7f\u7528 git cherry-pick \u6458\u53d6\u90e8\u5206\u5185\u5bb9\u5230\u5f53\u524d\u5206\u652f\u7684\u63d0\u4ea4\uff08commit\uff09\u3002","title":"\u7279\u6b8aref\u7684\u6307\u5411"},{"location":"develop/git/git%E7%9A%84%E6%8C%87%E9%92%88ref%E5%92%8Creflog/#origin","text":"origin \u662f\u8fdc\u7a0b\u4ed3\u5e93\u94fe\u63a5\u7684\u522b\u540d\uff0c origin \u5bf9\u5e94\u7684\u94fe\u63a5\u592a\u957f\uff0c\u4f7f\u7528\u8d77\u6765\u8f83\u4e3a\u9ebb\u70e6\u3002\u56e0\u6b64 origin \u7684\u672c\u8d28\u662f\u6307\u5411\u8fdc\u7a0b\u4ed3\u5e93\u7684\u4e00\u4e2a\u6307\u9488\u540d\uff0c\u800cmaster/main\u5219\u5c5e\u4e8e\u4ed3\u5e93\u4e2d\u7684\u4e00\u4e2a\u90e8\u5206\u3002 \u53ef\u4ee5\u901a\u8fc7 git remote -v \u6216\u8005\u4ed3\u5e93\u914d\u7f6e\u6587\u4ef6 .git/config \u67e5\u770b\u8fdc\u7a0b\u4ed3\u5e93\u7684\u5177\u4f53\u94fe\u63a5\uff0c\u53ef\u4ee5\u901a\u8fc7 git remote add <remote-repo-name> <url> \u6dfb\u52a0\u65b0\u7684\u8fdc\u7a0b\u4ed3\u5e93\u522b\u540d <remote-repo-name> \u548c\u5bf9\u5e94\u7684\u94fe\u63a5 <url> \u3002 git push \u9ed8\u8ba4\u521b\u5efa origin \u548c main \uff0c\u56e0\u6b64\u63a8\u9001\u65f6\u53ef\u4ee5\u7701\u7565\uff0c\u5b8c\u6574\u5f62\u5f0f\u5e94\u662f git push origin main \u3002\u5982\u679c\u5e0c\u671bGit\u8bb0\u5f55\u63a8\u9001\u5230\u8fdc\u7a0b\u5206\u652f\u7684\u9ed8\u8ba4\u503c\uff0c\u53ef\u4ee5\u52a0\u4e0a -u \u53c2\u6570\uff0c\u4e5f\u5c31\u662f git push -u <remote> <local> \uff0c\u8fd9\u6837\u5f53\u4e0b\u6b21\u8fd8\u60f3\u8981\u7ee7\u7eed\u63a8\u9001\u5230\u8be5\u8fdc\u7a0b\u5206\u652f\u65f6\uff0c\u63a8\u9001\u547d\u4ee4\u5c31\u53ef\u4ee5\u7b80\u5199\u4e3a git push \u3002","title":"\u8fdc\u7a0b\u4ed3\u5e93\u7684\u9ed8\u8ba4\u540dorigin"},{"location":"develop/git/git%E7%9A%84%E6%8C%87%E9%92%88ref%E5%92%8Creflog/#refspecs","text":"refspecs \u5c06\u672c\u5730\u4ed3\u5e93\u7684\u5206\u652f\u6620\u5c04\u5230\u8fdc\u7a0b\u4ed3\u5e93\u7684\u5206\u652f\uff0c\u4ee5\u4fbf\u4f7f\u7528\u672c\u5730Git\u547d\u4ee4\u7ba1\u7406\u8fdc\u7a0b\u5206\u652f\uff0c\u5e76\u914d\u7f6e\u4e00\u4e9b\u7279\u6b8a\u7684 git push \u548c git fetch \u884c\u4e3a\u3002 refspecs \u5b9a\u4e49\u5982\u4e0b\uff1a 1 2 3 4 # definition [ + ] <src>:<dst> # example +refs/heads/*:refs/remotes/origin/* \u5176\u4e2d\uff0c + \u8868\u793a\u5f3a\u5236\u8fdc\u7a0b\u4ed3\u5e93\u6267\u884c\u975e\u5feb\u8fdb\u66f4\u65b0\uff08non-fast-forward update\uff09\u3002 <src> \u8868\u793a\u672c\u5730\u4ed3\u5e93\u7684\u6e90\u5206\u652f\u3002 <dst> \u8868\u793a\u8fdc\u7a0b\u4ed3\u5e93\u7684\u76ee\u6807\u5206\u652f\u3002 refspecs \u53ef\u4ee5\u4e0e git push \u4e00\u8d77\u4f7f\u7528\uff0c\u4e3a\u8fdc\u7a0b\u5206\u652f\u6307\u5b9a\u4e0d\u540c\u7684\u540d\u79f0\u3002\u6bd4\u5982\u4ee5\u4e0b\u547d\u4ee4\u5c06 main \u672c\u5730\u5206\u652f\u63a8\u9001\u5230 origin \u8fdc\u7a0b\u4ed3\u5e93\uff0c\u4f46\u4f7f\u7528 qa-main \u4f5c\u4e3a\u8fdc\u7a0b\u4ed3\u5e93 origin \u4e2d\u5bf9\u5e94\u5206\u652f\u7684\u540d\u79f0\uff1a 1 git push origin main:refs/heads/qa-main \u540c\u6837\u53ef\u4ee5\u5229\u7528 refspecs \u5220\u9664\u8fdc\u7a0b\u5206\u652f\uff0c\u7c7b\u4f3c\u5730\uff0c\u6b64\u65f6\u5c06\u672c\u5730\u5206\u652f\u7684\u540d\u79f0\u7f6e\u4e3a\u7a7a\u5373\u53ef\uff1a 1 2 3 git push origin :qa-main # \u8be5\u5220\u9664\u5206\u652f\u7684\u64cd\u4f5c\u7b49\u540c\u4e8e git push origin --delete qa:main \u901a\u8fc7\u4fee\u6539Git\u7684\u914d\u7f6e\u6587\u4ef6 .git/config \uff0c\u53ef\u4ee5\u4f7f\u7528 refspecs \u4fee\u6539 git fetch \u7684\u9ed8\u8ba4\u884c\u4e3a\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c git fetch \u83b7\u53d6\u8fdc\u7a0b\u4ed3\u5e93\u7684\u6240\u6709\u5206\u652f\uff0c\u56e0\u6b64 .git/config \u6587\u4ef6\u76f8\u5173\u5185\u5bb9\u5982\u4e0b\uff1a 1 2 3 [remote \"origin\"] url = https://github.com/wenet-e2e/wenet.git fetch = +refs/heads/*:refs/remotes/origin/* \u4e0a\u8ff0\u914d\u7f6e\u8981\u6c42Git\u4e0b\u8f7d\u8fdc\u7a0b\u4ed3\u5e93 origin \u7684\u6240\u6709\u5206\u652f\uff0c\u5982\u679c\u53ea\u9700\u8981 main \u5206\u652f\uff0c\u53ef\u4ee5\u66f4\u65b0\u76f8\u5173\u5185\u5bb9\u5982\u4e0b\uff1a 1 2 3 [remote \"origin\"] url = https://github.com/wenet-e2e/wenet.git fetch = +refs/heads/main:refs/remotes/origin/main \u7c7b\u4f3c\u5730\uff0c\u53ef\u4ee5\u4fee\u6539 git push \u7684\u9ed8\u8ba4\u884c\u4e3a\u3002\u6bd4\u5982\uff0c\u5982\u679c\u60f3\u4e00\u76f4\u5c06\u672c\u5730\u5206\u652f main \u63a8\u9001\u5230\u8fdc\u7a0b\u4ed3\u5e93 origin \u7684 qa-main \uff0c\u53ef\u4ee5\u66f4\u65b0\u76f8\u5173\u5185\u5bb9\u5982\u4e0b\uff1a 1 2 3 4 [remote \"origin\"] url = https://github.com/wenet-e2e/wenet.git fetch = +refs/heads/main:refs/remotes/origin/main push = refs/heads/main:refs/heads/qa-main","title":"\u8fdc\u7a0b\u5206\u652f\u548c\u672c\u5730\u5206\u652f\u7684\u6620\u5c04refspecs"},{"location":"develop/git/git%E7%9A%84%E6%8C%87%E9%92%88ref%E5%92%8Creflog/#ref_1","text":"HEAD~1 \uff1a\u7b49\u540c\u4e8e HEAD~ \u6216 HEAD^1 \u6216 HEAD^ \uff0c\u540e\u9000\u81f3 HEAD \u4e4b\u524d\u7684\u63d0\u4ea4\u3002 HEAD^2 \uff1a\u540e\u9000\u81f3\u5f53\u524d\u5206\u652f\u7684\u7b2c\u4e8c\u4e2a\u7236\u63d0\u4ea4\u3002 HEAD~1^2 \uff1a\u540e\u9000\u81f3 HEAD \u4e4b\u524d\u7684\u63d0\u4ea4\uff0c\u518d\u540e\u9000\u5230\u5f53\u524d\u5206\u652f\u7684\u7b2c\u4e8c\u4e2a\u7236\u63d0\u4ea4\u4e0a\uff0c\u5982\u679c HEAD \u6ca1\u6709\u5408\u5e76\u5206\u652f\uff0c\u5219\u975e\u6cd5\u3002 HEAD@{2} \uff1a\u6307\u5411 git reflog \u8bb0\u5f55\u7684\u6574\u4f53\u64cd\u4f5c\u7684\u7b2c\u4e09\u6761\u64cd\u4f5c\uff08 git reflog \u8bb0\u5f55\u7684\u6574\u4f53\u64cd\u4f5c\u4ece0\u5f00\u59cb\uff09\u3002","title":"\u76f8\u5bf9ref"},{"location":"develop/git/git%E7%9A%84%E6%8C%87%E9%92%88ref%E5%92%8Creflog/#reflog","text":"reflog \u8bb0\u5f55\u4e86\u5728\u5f53\u524d\u4ed3\u5e93\u4e0a\u8fdb\u884c\u7684\u6240\u6709Git\u64cd\u4f5c\uff0c\u53ef\u4ee5\u901a\u8fc7 git reflog \u67e5\u770b\u8be5Git\u65e5\u5fd7\uff0c\u6bd4\u5982\uff1a 1 2 3 4 5 6 7 8 $ git reflog 02d7064 ( HEAD -> main, origin/main, origin/HEAD ) HEAD@ { 0 } : pull: Fast-forward 25897e0 HEAD@ { 1 } : checkout: moving from 8a1cb96795b38ba9aeb23c4005242acd0d9829e8 to main 8a1cb96 ( origin/kaitang-ssl-train ) HEAD@ { 2 } : pull https://github.com/cnlinxi/wenet.git kaitang-ssl-train: Fast-forward 422c89e HEAD@ { 3 } : checkout: moving from main to remotes/origin/kaitang-ssl-train 88a652a HEAD@ { 4 } : commit: delete set_audio_backend a9bae0c HEAD@ { 5 } : commit: update f0fe211 HEAD@ { 6 } : commit: update ( examples/librispeech ) :\u4e3akaggle\u4fee\u6539\u6570\u636e\u8def\u5f84 \u5176\u4e2d\uff0c HEAD{<num>} \u7528\u4e8e\u6807\u8bc6\u5728 reflog \u4e2d\u7684\u63d0\u4ea4\uff08commit\uff09\uff0c\u53ef\u4ee5\u914d\u5408\u5176\u4ed6\u547d\u4ee4\u5bf9\u6307\u5b9a\u63d0\u4ea4\uff08commit\uff09\u8fdb\u884c\u64cd\u4f5c\uff0c\u6bd4\u5982\u5220\u9664\u6700\u540e\u4e00\u6b21\u63d0\u4ea4\u65f6\uff0c\u53ef\u4ee5\u6267\u884c git reset --soft HEAD@{1} \u3002 Refs and the Reflog Git \u91cc\u9762\u7684 origin \u5230\u5e95\u4ee3\u8868\u5565\u610f\u601d? git push \u7684 -u \u53c2\u6570\u542b\u4e49 \u8fd9\u624d\u662f\u771f\u6b63\u7684GIT\u2014\u2014GIT\u5b9e\u7528\u6280\u5de7 \u8fd9\u624d\u662f\u771f\u6b63\u7684GIT\u2014\u2014\u5206\u652f\u5408\u5e76","title":"reflog"},{"location":"develop/git/git%E8%BD%AC%E7%A7%BB%E9%83%A8%E5%88%86%E4%BB%A3%E7%A0%81cherry-pick/","text":"git\u8f6c\u79fb\u90e8\u5206\u4ee3\u7801cherry-pick \u5229\u7528Git\u5c06\u4ee3\u7801\u4ece\u4e00\u4e2a\u5206\u652f\u8f6c\u79fb\u5230\u53e6\u4e00\u4e2a\u5206\u652f\u4e0a\uff1a \u8f6c\u79fb\u53e6\u4e00\u4e2a\u5206\u652f\u7684 \u6240\u6709\u4ee3\u7801\u53d8\u52a8 \uff1a\u4f7f\u7528\u5408\u5e76 git merge \u8f6c\u79fb\u53e6\u4e00\u4e2a\u5206\u652f\u7684 \u90e8\u5206\u4ee3\u7801\u53d8\u52a8 \uff08\u6bd4\u5982\u67d0\u51e0\u4e2a\u63d0\u4ea4\uff09\uff1a\u53ef\u4ee5\u91c7\u7528 git cherry-pick \u57fa\u672c\u7528\u6cd5 1 git cherry-pick <commitHash> \u4e0a\u8ff0\u547d\u4ee4\u5c06\u6307\u5b9a\u7684\u63d0\u4ea4 commitHash \uff0c\u5e94\u7528\u4e8e\u5f53\u524d\u5206\u652f\uff0c\u8fd9\u4f1a\u5728\u5f53\u524d\u5206\u652f\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684\u63d0\u4ea4\u3002\u6bd4\u5982\u4ee3\u7801\u4ed3\u5e93\u4e2d\u6709 feature \u548c master \u4e24\u4e2a\u5206\u652f\uff1a 1 2 3 a - b - c - d Master \\ e - f - g Feature \u73b0\u5728\u5e0c\u671b\u5c06\u63d0\u4ea4 f \u8f6c\u79fb\u5230 master \u5206\u652f\u4e0a\uff0c\u5219\u53ef\u4ee5\uff1a 1 2 3 4 5 # \u5207\u6362\u5230 master \u5206\u652f $ git checkout master # Cherry pick \u64cd\u4f5c $ git cherry-pick f \u5b8c\u6210\u540e\uff0c\u4ee3\u7801\u5e93\u5c31\u53d8\u4e3a\u4e86\uff1a 1 2 3 a - b - c - d - f Master \\ e - f - g Feature \u53ef\u89c1\uff0c master \u5206\u652f\u7684\u672b\u5c3e\u589e\u52a0\u4e86\u4e00\u4e2a\u63d0\u4ea4 f \u3002 git cherry-pick \u6559\u7a0b","title":"git\u8f6c\u79fb\u90e8\u5206\u4ee3\u7801cherry-pick"},{"location":"develop/git/git%E8%BD%AC%E7%A7%BB%E9%83%A8%E5%88%86%E4%BB%A3%E7%A0%81cherry-pick/#gitcherry-pick","text":"\u5229\u7528Git\u5c06\u4ee3\u7801\u4ece\u4e00\u4e2a\u5206\u652f\u8f6c\u79fb\u5230\u53e6\u4e00\u4e2a\u5206\u652f\u4e0a\uff1a \u8f6c\u79fb\u53e6\u4e00\u4e2a\u5206\u652f\u7684 \u6240\u6709\u4ee3\u7801\u53d8\u52a8 \uff1a\u4f7f\u7528\u5408\u5e76 git merge \u8f6c\u79fb\u53e6\u4e00\u4e2a\u5206\u652f\u7684 \u90e8\u5206\u4ee3\u7801\u53d8\u52a8 \uff08\u6bd4\u5982\u67d0\u51e0\u4e2a\u63d0\u4ea4\uff09\uff1a\u53ef\u4ee5\u91c7\u7528 git cherry-pick","title":"git\u8f6c\u79fb\u90e8\u5206\u4ee3\u7801cherry-pick"},{"location":"develop/git/git%E8%BD%AC%E7%A7%BB%E9%83%A8%E5%88%86%E4%BB%A3%E7%A0%81cherry-pick/#_1","text":"1 git cherry-pick <commitHash> \u4e0a\u8ff0\u547d\u4ee4\u5c06\u6307\u5b9a\u7684\u63d0\u4ea4 commitHash \uff0c\u5e94\u7528\u4e8e\u5f53\u524d\u5206\u652f\uff0c\u8fd9\u4f1a\u5728\u5f53\u524d\u5206\u652f\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684\u63d0\u4ea4\u3002\u6bd4\u5982\u4ee3\u7801\u4ed3\u5e93\u4e2d\u6709 feature \u548c master \u4e24\u4e2a\u5206\u652f\uff1a 1 2 3 a - b - c - d Master \\ e - f - g Feature \u73b0\u5728\u5e0c\u671b\u5c06\u63d0\u4ea4 f \u8f6c\u79fb\u5230 master \u5206\u652f\u4e0a\uff0c\u5219\u53ef\u4ee5\uff1a 1 2 3 4 5 # \u5207\u6362\u5230 master \u5206\u652f $ git checkout master # Cherry pick \u64cd\u4f5c $ git cherry-pick f \u5b8c\u6210\u540e\uff0c\u4ee3\u7801\u5e93\u5c31\u53d8\u4e3a\u4e86\uff1a 1 2 3 a - b - c - d - f Master \\ e - f - g Feature \u53ef\u89c1\uff0c master \u5206\u652f\u7684\u672b\u5c3e\u589e\u52a0\u4e86\u4e00\u4e2a\u63d0\u4ea4 f \u3002 git cherry-pick \u6559\u7a0b","title":"\u57fa\u672c\u7528\u6cd5"},{"location":"develop/python/__future__%E7%94%A8%E6%B3%95/","text":"__future__\u7528\u6cd5 \u5728python2\u7684\u73af\u5883\u4e0b\uff0c\u8d85\u524d\u4f7f\u7528python3\u7684\u65b0\u7279\u6027\u3002 from future import print_function\u7528\u6cd5 - \u77e5\u4e4e python\u4e2d from future import * \u7684\u4f5c\u7528_z\u5c0f\u767d\u7684\u535a\u5ba2-CSDN\u535a\u5ba2_from future","title":"__future__\u7528\u6cd5"},{"location":"develop/python/__future__%E7%94%A8%E6%B3%95/#__future__","text":"\u5728python2\u7684\u73af\u5883\u4e0b\uff0c\u8d85\u524d\u4f7f\u7528python3\u7684\u65b0\u7279\u6027\u3002 from future import print_function\u7528\u6cd5 - \u77e5\u4e4e python\u4e2d from future import * \u7684\u4f5c\u7528_z\u5c0f\u767d\u7684\u535a\u5ba2-CSDN\u535a\u5ba2_from future","title":"__future__\u7528\u6cd5"},{"location":"develop/python/conda%E5%92%8Cpip/","text":"conda\u548cpip \u5de5\u5177\u7bc7\uff1aconda and pip","title":"conda\u548cpip"},{"location":"develop/python/conda%E5%92%8Cpip/#condapip","text":"\u5de5\u5177\u7bc7\uff1aconda and pip","title":"conda\u548cpip"},{"location":"develop/python/numpy%E5%AD%98%E5%8F%96%E6%95%B0%E6%8D%AE/","text":"numpy\u5b58\u53d6\u6570\u636e ndarray.tofile \u4e0e np.fromfile \u6210\u5bf9\u4f7f\u7528 np.save \u4e0e np.load \u6210\u5bf9\u4f7f\u7528","title":"numpy\u5b58\u53d6\u6570\u636e"},{"location":"develop/python/numpy%E5%AD%98%E5%8F%96%E6%95%B0%E6%8D%AE/#numpy","text":"ndarray.tofile \u4e0e np.fromfile \u6210\u5bf9\u4f7f\u7528 np.save \u4e0e np.load \u6210\u5bf9\u4f7f\u7528","title":"numpy\u5b58\u53d6\u6570\u636e"},{"location":"develop/python/python%E7%9A%84%E5%8F%96%E5%8F%8D%E8%BF%90%E7%AE%97%E7%AC%A6/","text":"python\u7684\u53d6\u53cd\u8fd0\u7b97\u7b26 ~ \uff1a\u6309\u4f4d\u53d6\u53cd\u8fd0\u7b97\u7b26\uff0c\u5bf9\u6570\u636e\u7684\u4e8c\u8fdb\u5236\u4f4d\u53d6\u53cd\uff0c\u5c06\u6570\u636e\u5bf9\u5e94\u7684\u4e8c\u8fdb\u5236\u4f4d0\u53d8\u4e3a1\uff0c1\u53d8\u4e3a0. \u56e0\u6b64\uff0c ~x \u76f8\u5f53\u4e8e -x-1 \u3002 \u793a\u4f8b\uff1a 1 2 x = np . array ([ 1 , 0 , 1 ]) print ( ~ x ) # \u7ed3\u679c\u4e3a[-2,-1,-2] https://blog.csdn.net/weixin_43915860/article/details/107656101","title":"python\u7684\u53d6\u53cd\u8fd0\u7b97\u7b26"},{"location":"develop/python/python%E7%9A%84%E5%8F%96%E5%8F%8D%E8%BF%90%E7%AE%97%E7%AC%A6/#python","text":"~ \uff1a\u6309\u4f4d\u53d6\u53cd\u8fd0\u7b97\u7b26\uff0c\u5bf9\u6570\u636e\u7684\u4e8c\u8fdb\u5236\u4f4d\u53d6\u53cd\uff0c\u5c06\u6570\u636e\u5bf9\u5e94\u7684\u4e8c\u8fdb\u5236\u4f4d0\u53d8\u4e3a1\uff0c1\u53d8\u4e3a0. \u56e0\u6b64\uff0c ~x \u76f8\u5f53\u4e8e -x-1 \u3002 \u793a\u4f8b\uff1a 1 2 x = np . array ([ 1 , 0 , 1 ]) print ( ~ x ) # \u7ed3\u679c\u4e3a[-2,-1,-2] https://blog.csdn.net/weixin_43915860/article/details/107656101","title":"python\u7684\u53d6\u53cd\u8fd0\u7b97\u7b26"},{"location":"develop/python/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/","text":"\u6b63\u5219\u8868\u8fbe\u5f0f \u5339\u914d\u9700\u8981\u7684\u6570\u636e 1 2 3 4 5 6 7 8 import re line = 'abc target ddd target2 d' match_obj = re . match ( r 'abc (.*?) ddd (.*?) d' , line , re . M | re . I ) if match_obj : print ( match_obj . group ()) print ( match_obj . group ( 1 )) print ( match_obj . group ( 2 )) \u5c06\u5339\u914d\u5230\u7684\u5185\u5bb9\u4f20\u5165\u51fd\u6570 1 ? P < name > \u793a\u4f8b\uff1a 1 2 3 4 5 6 7 8 import re def double ( matched ): value = int ( matched . group ( 'value' )) return str ( value * 2 ) s = 'A23G4HFD567' print ( re . sub ( '(?P<value>\\d+)' , double , s )) \u5728 re.sub('(?P<value>\\d+)', <function_name>, <string>) \u4e2d\uff0c (?P<value>\\d+) \u7684\u610f\u601d\u662f\u547d\u540d\u4e00\u4e2a\u540d\u5b57\u4e3a value \u7684\u7ec4\uff0c\u5339\u914d\u89c4\u5219\u7b26\u5408\u540e\u9762\u7684 \\d+ \uff0c\u7136\u540e\u5c06\u5339\u914d\u5230\u7684\u5185\u5bb9\u4f20\u5165\u540e\u9762\u7684 <function_name> \u51fd\u6570\u3002 \u5207\u5206\u5b57\u7b26\u65f6\u4fdd\u7559\u5206\u5272\u5b57\u7b26 \u4f7f\u7528re.split\u65f6\uff0c\u5bf9\u7528\u4e8e\u5206\u5272\u7684\u6b63\u5219\u8868\u8fbe\u5f0f \u6dfb\u52a0\u62ec\u53f7 \uff0c\u53ef\u4ee5\u4fdd\u7559\u5206\u5272\u5b57\u7b26\u3002\u4f8b\u5982\uff1a 1 2 3 >>> line = 'abc,dag,dag' >>> re . split ( r '(,)' , line ) [ 'abc' , ',' , 'dag' , ',' , 'dag' ]","title":"\u6b63\u5219\u8868\u8fbe\u5f0f"},{"location":"develop/python/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/#_1","text":"","title":"\u6b63\u5219\u8868\u8fbe\u5f0f"},{"location":"develop/python/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/#_2","text":"1 2 3 4 5 6 7 8 import re line = 'abc target ddd target2 d' match_obj = re . match ( r 'abc (.*?) ddd (.*?) d' , line , re . M | re . I ) if match_obj : print ( match_obj . group ()) print ( match_obj . group ( 1 )) print ( match_obj . group ( 2 ))","title":"\u5339\u914d\u9700\u8981\u7684\u6570\u636e"},{"location":"develop/python/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/#_3","text":"1 ? P < name > \u793a\u4f8b\uff1a 1 2 3 4 5 6 7 8 import re def double ( matched ): value = int ( matched . group ( 'value' )) return str ( value * 2 ) s = 'A23G4HFD567' print ( re . sub ( '(?P<value>\\d+)' , double , s )) \u5728 re.sub('(?P<value>\\d+)', <function_name>, <string>) \u4e2d\uff0c (?P<value>\\d+) \u7684\u610f\u601d\u662f\u547d\u540d\u4e00\u4e2a\u540d\u5b57\u4e3a value \u7684\u7ec4\uff0c\u5339\u914d\u89c4\u5219\u7b26\u5408\u540e\u9762\u7684 \\d+ \uff0c\u7136\u540e\u5c06\u5339\u914d\u5230\u7684\u5185\u5bb9\u4f20\u5165\u540e\u9762\u7684 <function_name> \u51fd\u6570\u3002","title":"\u5c06\u5339\u914d\u5230\u7684\u5185\u5bb9\u4f20\u5165\u51fd\u6570"},{"location":"develop/python/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/#_4","text":"\u4f7f\u7528re.split\u65f6\uff0c\u5bf9\u7528\u4e8e\u5206\u5272\u7684\u6b63\u5219\u8868\u8fbe\u5f0f \u6dfb\u52a0\u62ec\u53f7 \uff0c\u53ef\u4ee5\u4fdd\u7559\u5206\u5272\u5b57\u7b26\u3002\u4f8b\u5982\uff1a 1 2 3 >>> line = 'abc,dag,dag' >>> re . split ( r '(,)' , line ) [ 'abc' , ',' , 'dag' , ',' , 'dag' ]","title":"\u5207\u5206\u5b57\u7b26\u65f6\u4fdd\u7559\u5206\u5272\u5b57\u7b26"},{"location":"develop/shell/Linux%E6%93%8D%E4%BD%9C%E5%9F%BA%E7%A1%80%E5%A4%87%E5%BF%98%E5%BD%95/","text":"Linux\u64cd\u4f5c\u57fa\u7840\u5907\u5fd8\u5f55 \u547d\u4ee4 \u7b80\u8981\u8bf4\u660e \u793a\u4f8b \u793a\u4f8b\u8bf4\u660e man \u547d\u4ee4\u6587\u6863 man find which \u67e5\u770b\u7a0b\u5e8f\u7684binary\u6587\u4ef6\u6240\u5728\u8def\u5f84 whereis \u67e5\u770b\u7a0b\u5e8f\u641c\u7d22\u8def\u5f84\uff0c\u5f53\u5b89\u88c5\u540c\u4e00\u5de5\u5177\u591a\u4e2a\u7248\u672c\u65f6\uff0c\u4f1a\u5f88\u6709\u7528 find \u5b9e\u65f6\u6587\u4ef6\u67e5\u627e find /home -name \"*.txt\" locate \u6587\u4ef6\u7cfb\u7edf\u6570\u636e\u5e93\u4e0a\u67e5\u627e locate myfile ln -s \u8f6f\u94fe\u63a5 ln -s <\u771f\u5b9e\u6587\u4ef6> <\u5feb\u6377\u65b9\u5f0f> && \u524d\u9762\u6210\u529f\u5219\u6267\u884c\u540e\u9762 || \u524d\u9762\u5931\u8d25\u5219\u6267\u884c\u540e\u9762 ps -ef \u67e5\u8be2\u6b63\u5728\u8fd0\u884c\u7684\u8fdb\u7a0b\u4fe1\u606f kill \u6740\u6b7b\u8fdb\u7a0b kill -9 <PID> netstat \u663e\u793a\u7f51\u7edc\u4fe1\u606f netstat -a \u5217\u51fa\u6240\u6709\u7aef\u53e3\uff0c\u5305\u62ec\u76d1\u542c\u6216\u672a\u76d1\u542c\u7684\u7aef\u53e3 rsync \u590d\u5236 rsync -avzP <\u5f85\u590d\u5236\u6587\u4ef6> <\u76ee\u6807\u6587\u4ef6> \u5c06\u5f85\u590d\u5236\u6587\u4ef6\u590d\u5236\u5230\u76ee\u6807\u6587\u4ef6 scp \u8fdc\u7a0b\u4e0b\u8f7d/\u4e0a\u4f20 scp -r <localpath> <ID@host:path> \u4e0a\u4f20\uff0c\u5c06localpath\u4e0a\u4f20\u5230host\u7684path tar \u538b\u7f29/\u89e3\u538b\u7f29 tar -xvf <demo.tar> Linux\u57fa\u7840 Linux\u547d\u4ee4\u641c\u7d22","title":"Linux\u64cd\u4f5c\u57fa\u7840\u5907\u5fd8\u5f55"},{"location":"develop/shell/Linux%E6%93%8D%E4%BD%9C%E5%9F%BA%E7%A1%80%E5%A4%87%E5%BF%98%E5%BD%95/#linux","text":"\u547d\u4ee4 \u7b80\u8981\u8bf4\u660e \u793a\u4f8b \u793a\u4f8b\u8bf4\u660e man \u547d\u4ee4\u6587\u6863 man find which \u67e5\u770b\u7a0b\u5e8f\u7684binary\u6587\u4ef6\u6240\u5728\u8def\u5f84 whereis \u67e5\u770b\u7a0b\u5e8f\u641c\u7d22\u8def\u5f84\uff0c\u5f53\u5b89\u88c5\u540c\u4e00\u5de5\u5177\u591a\u4e2a\u7248\u672c\u65f6\uff0c\u4f1a\u5f88\u6709\u7528 find \u5b9e\u65f6\u6587\u4ef6\u67e5\u627e find /home -name \"*.txt\" locate \u6587\u4ef6\u7cfb\u7edf\u6570\u636e\u5e93\u4e0a\u67e5\u627e locate myfile ln -s \u8f6f\u94fe\u63a5 ln -s <\u771f\u5b9e\u6587\u4ef6> <\u5feb\u6377\u65b9\u5f0f> && \u524d\u9762\u6210\u529f\u5219\u6267\u884c\u540e\u9762 || \u524d\u9762\u5931\u8d25\u5219\u6267\u884c\u540e\u9762 ps -ef \u67e5\u8be2\u6b63\u5728\u8fd0\u884c\u7684\u8fdb\u7a0b\u4fe1\u606f kill \u6740\u6b7b\u8fdb\u7a0b kill -9 <PID> netstat \u663e\u793a\u7f51\u7edc\u4fe1\u606f netstat -a \u5217\u51fa\u6240\u6709\u7aef\u53e3\uff0c\u5305\u62ec\u76d1\u542c\u6216\u672a\u76d1\u542c\u7684\u7aef\u53e3 rsync \u590d\u5236 rsync -avzP <\u5f85\u590d\u5236\u6587\u4ef6> <\u76ee\u6807\u6587\u4ef6> \u5c06\u5f85\u590d\u5236\u6587\u4ef6\u590d\u5236\u5230\u76ee\u6807\u6587\u4ef6 scp \u8fdc\u7a0b\u4e0b\u8f7d/\u4e0a\u4f20 scp -r <localpath> <ID@host:path> \u4e0a\u4f20\uff0c\u5c06localpath\u4e0a\u4f20\u5230host\u7684path tar \u538b\u7f29/\u89e3\u538b\u7f29 tar -xvf <demo.tar> Linux\u57fa\u7840 Linux\u547d\u4ee4\u641c\u7d22","title":"Linux\u64cd\u4f5c\u57fa\u7840\u5907\u5fd8\u5f55"},{"location":"develop/shell/cat%E5%92%8CEOF/","text":"cat\u548cEOF \u5728shell\u4e0a\u5411\u4e00\u4e2a\u6587\u4ef6\u4e2d\u5199\u5165\u591a\u884c\u5185\u5bb9\uff0c\u5e76\u4e14\u81ea\u5b9a\u4e49\u6587\u4ef6\u7ed3\u675f\u7b26\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528 cat > file << EOF \u6765\u5b8c\u6210\uff1a 1 2 3 4 5 6 7 8 9 # \u4ee5\u4e0b\u547d\u4ee4\u5411g_with_slot.txt\u4e2d\u5199\u5165\u5982\u4e0b\u5185\u5bb9\uff1a # 0 1 \u6253 \u6253 # 1 2 <ADDRESS_SLOT> <ADDRESS_SLOT> # 2 cat > g_with_slot.txt <<EOF 0 1 \u6253 \u6253 1 2 <ADDRESS_SLOT> <ADDRESS_SLOT> 2 EOF cat > file << EOF \u4e2d\uff0c cat > file \u8868\u793a\u521b\u5efa\u6587\u4ef6\u5e76\u5c06\u6807\u51c6\u8f93\u5165\u8bbe\u5907\u4e0a\u7684\u5185\u5bb9\u8f93\u51fa\u91cd\u5b9a\u5411\u5230 file \u6587\u4ef6\u4e2d\uff0c\u5f53\u7136\u53ef\u4ee5\u7528 >> \u4ee3\u66ff > \u8ffd\u52a0\u5185\u5bb9\u800c\u975e\u8986\u76d6\u5185\u5bb9\u3002 << EOF \u663e\u793a\u8f93\u5165\u63d0\u793a\u7b26 > \uff0c\u5e76\u4ee5 EOF \u5224\u5b9a\u6587\u4ef6\u5185\u5bb9\u7684\u8f93\u5165\u7ed3\u675f\u3002 EOF \u5e76\u975e\u56fa\u5b9a\u7684\u6587\u4ef6\u7ed3\u675f\u7b26\uff0c\u4e5f\u53ef\u4ee5\u5199\u4f5c cat > file << EOF2 \uff0c\u6b64\u65f6\u5219\u4ee5 EOF2 \u5224\u5b9a\u6587\u4ef6\u5185\u5bb9\u7684\u8f93\u5165\u7ed3\u675f\u3002 << EOF \u548c > file \u7684\u4f4d\u7f6e\u4e0d\u56fa\u5b9a\uff0c\u4e24\u8005\u53ef\u4ea4\u6362\u3002 Linux\u5c0f\u6280\u5de7\uff1acat > file \u548c EOF \u7684\u5999\u7528_\u66fe\u7ecf\u53bb\u8fc7\u8de8\u8d8a\u4e00\u4e2a\u5c0f\u65f6\u7684\u5730\u65b9\u7684\u535a\u5ba2-CSDN\u535a\u5ba2","title":"cat\u548cEOF"},{"location":"develop/shell/cat%E5%92%8CEOF/#cateof","text":"\u5728shell\u4e0a\u5411\u4e00\u4e2a\u6587\u4ef6\u4e2d\u5199\u5165\u591a\u884c\u5185\u5bb9\uff0c\u5e76\u4e14\u81ea\u5b9a\u4e49\u6587\u4ef6\u7ed3\u675f\u7b26\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528 cat > file << EOF \u6765\u5b8c\u6210\uff1a 1 2 3 4 5 6 7 8 9 # \u4ee5\u4e0b\u547d\u4ee4\u5411g_with_slot.txt\u4e2d\u5199\u5165\u5982\u4e0b\u5185\u5bb9\uff1a # 0 1 \u6253 \u6253 # 1 2 <ADDRESS_SLOT> <ADDRESS_SLOT> # 2 cat > g_with_slot.txt <<EOF 0 1 \u6253 \u6253 1 2 <ADDRESS_SLOT> <ADDRESS_SLOT> 2 EOF cat > file << EOF \u4e2d\uff0c cat > file \u8868\u793a\u521b\u5efa\u6587\u4ef6\u5e76\u5c06\u6807\u51c6\u8f93\u5165\u8bbe\u5907\u4e0a\u7684\u5185\u5bb9\u8f93\u51fa\u91cd\u5b9a\u5411\u5230 file \u6587\u4ef6\u4e2d\uff0c\u5f53\u7136\u53ef\u4ee5\u7528 >> \u4ee3\u66ff > \u8ffd\u52a0\u5185\u5bb9\u800c\u975e\u8986\u76d6\u5185\u5bb9\u3002 << EOF \u663e\u793a\u8f93\u5165\u63d0\u793a\u7b26 > \uff0c\u5e76\u4ee5 EOF \u5224\u5b9a\u6587\u4ef6\u5185\u5bb9\u7684\u8f93\u5165\u7ed3\u675f\u3002 EOF \u5e76\u975e\u56fa\u5b9a\u7684\u6587\u4ef6\u7ed3\u675f\u7b26\uff0c\u4e5f\u53ef\u4ee5\u5199\u4f5c cat > file << EOF2 \uff0c\u6b64\u65f6\u5219\u4ee5 EOF2 \u5224\u5b9a\u6587\u4ef6\u5185\u5bb9\u7684\u8f93\u5165\u7ed3\u675f\u3002 << EOF \u548c > file \u7684\u4f4d\u7f6e\u4e0d\u56fa\u5b9a\uff0c\u4e24\u8005\u53ef\u4ea4\u6362\u3002 Linux\u5c0f\u6280\u5de7\uff1acat > file \u548c EOF \u7684\u5999\u7528_\u66fe\u7ecf\u53bb\u8fc7\u8de8\u8d8a\u4e00\u4e2a\u5c0f\u65f6\u7684\u5730\u65b9\u7684\u535a\u5ba2-CSDN\u535a\u5ba2","title":"cat\u548cEOF"},{"location":"develop/shell/shell%E8%AF%AD%E6%B3%95%E9%80%9F%E6%9F%A5%E6%89%8B%E5%86%8C/","text":"shell\u8bed\u6cd5\u901f\u67e5\u624b\u518c \u7b80\u4ecb sh \u662fUnix\u6700\u521d\u4f7f\u7528\u7684shell\uff0cLinux\u9ed8\u8ba4\u4e3a bash \uff0c\u662f sh \u7684\u6269\u5c55\u3002 source <FileName> \uff1a\u5728\u5f53\u524dbash\u73af\u5883\u4e0b\uff0c\u8bfb\u53d6\u5e76\u6267\u884c FileName \u4e2d\u7684\u547d\u4ee4\uff0c\u8be5 FileName \u53ef\u4ee5\u65e0\u6267\u884c\u6743\u9650\uff0c\u8be5\u547d\u4ee4\u53ef\u4ee5\u7528\u547d\u4ee4 . \u4ee3\u66ff\uff1b sh <FileName> \u6216\u8005 bash <FileName> \uff1a\u6253\u5f00\u5b50shell\u6765\u8bfb\u53d6\u5e76\u6267\u884c FileName \u4e2d\u7684\u547d\u4ee4\uff0c\u8be5 FileName \u53ef\u4ee5\u65e0\u6267\u884c\u6743\u9650\uff1b ./<FileName> \uff1a\u6253\u5f00\u5b50shell\u6765\u8bfb\u53d6\u5e76\u6267\u884c FileName \u4e2d\u7684\u547d\u4ee4\uff0c\u8be5 FileName \u9700\u8981\u6267\u884c\u6743\u9650\u3002 shell\u53d8\u91cf \u5b9a\u4e49\u53d8\u91cf\uff1a var_name=\"linxi\" \u4f7f\u7528\u53d8\u91cf\uff1a echo $var_name \u6216\u8005 echo ${var_name} \uff0c\u540e\u8005\u4f7f\u7528\u53d8\u91cf\u65f6\u52a0\u5165\u4e86\u82b1\u62ec\u53f7 {} \uff0c\u8fd9\u662f\u53ef\u9009\u7684\uff0c\u52a0\u4e0d\u52a0\u90fd\u884c\uff0c\u4f46\u662f \u63a8\u8350 \u52a0\u4e0a\uff0c\u4ee5\u4fbf\u5e2e\u52a9shell\u754c\u5b9a\u53d8\u91cf\u540d\u7684\u8fb9\u754c\u3002\u6bd4\u5982 echo ${var_name}Script \uff0c\u53bb\u6389\u82b1\u62ec\u53f7\uff0cshell\u5c06\u8ba4\u4e3a\u53d8\u91cf\u540d\u4e3a var_nameScript \uff0c\u800c\u975e var_name \u3002 \u53ea\u8bfb\u53d8\u91cf\uff1a readonly \u3002\u6bd4\u5982\uff1a 1 2 var_name = \"my var\" readonly var_name \u5220\u9664\u53d8\u91cf\uff1a unset \uff0c unset <var_name> \u3002 shell\u5b57\u7b26\u4e32 \u5355\u5f15\u53f7\uff1a\u5355\u5f15\u53f7\u7684\u4efb\u4f55\u5b57\u7b26\u4e32\u90fd\u4f1a\u539f\u6837\u8f93\u51fa\uff0c\u5355\u5f15\u53f7\u5185\u7684\u53d8\u91cf\u540d\u662f\u65e0\u6548\u7684\uff1b \u53cc\u5f15\u53f7\uff1a\u53cc\u5f15\u53f7\u5185\u53ef\u4ee5\u6709\u53d8\u91cf\uff0c\u53cc\u5f15\u53f7\u91cc\u53ef\u4ee5\u51fa\u73b0\u8f6c\u4e49\u5b57\u7b26\u3002 \u83b7\u53d6\u5b57\u7b26\u4e32\u957f\u5ea6\uff1a 1 2 string = \"12\" echo ${# string } \u63d0\u53d6\u5b50\u5b57\u7b26\u4e32\uff1a echo ${string:1:4} shell\u6570\u7ec4\uff1a\u7528\u62ec\u53f7\u8868\u793a\u6570\u7ec4\uff0c\u6570\u7ec4\u5143\u7d20\u7528 \u7a7a\u683c \u9694\u5f00\uff0c\u4e00\u822c\u5f62\u5f0f\uff1a 1 arr_name =( val1 val2 val3 ) \u6216\u8005 1 2 3 arr_name =( val1 val2 val3 ) \u8bfb\u53d6\u6570\u7ec4\uff1a ${var_name[index]} \u83b7\u53d6\u6570\u7ec4\u4e2d\u6240\u6709\u5143\u7d20\uff1a ${arr_name[@]} \u83b7\u53d6\u6570\u7ec4\u957f\u5ea6\uff1a ${#arr_name[@]} \u6216\u8005 ${#arr_name[#]} shell\u4f20\u9012\u53c2\u6570 \u5411shell\u811a\u672c\u5185\u4f20\u9012\u53c2\u6570\uff0c\u811a\u672c\u5185\u83b7\u53d6\u53c2\u6570\u7684\u683c\u5f0f\u4e3a\uff1a $n \uff0c\u5176\u4e2d n \u8868\u793a\u4ee5\u4e00\u4e2a\u6570\u5b57\uff0c 1 \u662f\u6267\u884c\u811a\u672c\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\uff0c 2 \u662f\u7b2c\u4e8c\u4e2a\u53c2\u6570\u2026\u2026 0 \u662f\u6267\u884c\u7684\u811a\u672c\u540d\u3002 \u5728\u5411shell\u811a\u672c\u4f20\u9012\u7684\u53c2\u6570\u4e2d\u5982\u679c\u5305\u542b\u7a7a\u683c\uff0c\u5e94\u8be5\u4f7f\u7528\u5355\u5f15\u53f7\u6216\u8005\u53cc\u5f15\u53f7\u5c06\u8be5\u53c2\u6570\u62ec\u8d77\u6765\uff0c\u4ee5\u4fbf\u811a\u672c\u5c06\u8be5\u53c2\u6570\u4f5c\u4e3a\u6574\u4f53\u63a5\u6536\uff1b shell\u91cd\u70b9\u4e2d\u62ec\u53f7\uff08\u5305\u62ec\u5355\u4e2d\u62ec\u53f7 [] \u548c\u53cc\u4e2d\u62ec\u53f7 [[]] \uff09\u53ef\u7528\u4e8e\u4e00\u4e9b\u6761\u4ef6\u7684\u6d4b\u8bd5\uff1a \u7b97\u6cd5\u6bd4\u8f83\uff0c\u6bd4\u5982\u68c0\u67e5\u4e00\u4e2a\u53d8\u91cf\u662f\u5426\u662f0\uff0c\u5e94\u5199\u4f5c [ $var_name -eq 0 ] \u6587\u4ef6\u5c5e\u6027\uff0c\u6bd4\u5982\u786e\u5b9a\u4e00\u4e2a\u6587\u4ef6\u662f\u5426\u5b58\u5728\uff0c\u5e94\u5199\u4f5c [ -e $file ] \uff1b\u4e00\u4e2a\u76ee\u5f55\u662f\u5426\u5b58\u5728\uff0c\u5e94\u5199\u4f5c [ -d $dir ] ; \u5b57\u7b26\u4e32\u6bd4\u8f83\uff0c\u6bd4\u5982\u6bd4\u8f83\u4e24\u4e2a\u5b57\u7b26\u4e32\u662f\u5426\u76f8\u540c\uff1a [[ \"$string1\" = \"$string2\" ]] \u3002 shell\u57fa\u672c\u8fd0\u7b97\u7b26 \u539f\u751fshell\u4e0d\u652f\u6301\u7b80\u5355\u7684\u6570\u5b66\u8fd0\u7b97\uff0c\u4f46\u53ef\u4ee5\u901a\u8fc7\u5176\u4ed6\u547d\u4ee4\u5b9e\u73b0\uff0c\u4f8b\u5982 awk \u548c expr \uff0c\u5176\u4e2d expr \u6700\u5e38\u7528\uff0c\u6bd4\u5982\u4e24\u6570\u5b57\u76f8\u52a0\uff1a 1 2 val = ` expr 2 + 2 ` # \u6ce8\u610f\uff0c\u8868\u8fbe\u5f0f\u548c\u8fd0\u7b97\u7b26\u4e4b\u95f4\u5fc5\u987b\u8981\u6709\u7a7a\u683c\uff0c\u4f8b\u5982\u201c2+2\u201d\u662f\u4e0d\u6b63\u786e\u7684\uff0c\u5e94\u4e3a\u201c2 + 2\u201d val = $( expr 2 + 2 ) # \u5b8c\u6574\u7684\u8868\u8fbe\u5f0f\u8981\u88ab``\u5305\u88f9 \u7b97\u672f\u8fd0\u7b97\u7b26 + , - , \\* , / , % , = , == , != \u3002\u4f8b\u5982\uff1a 1 2 3 if [ $a ! = $b ] ; then echo \"a\u4e0d\u7b49\u4e8eb\" fi \u5173\u7cfb\u8fd0\u7b97\u7b26 -eq (equal), -ne (negative equal), -gt (greater than), lt (less than), -ge (greater equal), -le (less equal) 1 2 3 4 5 if [ $a -le $b ] ; then echo \" $a -le $b : a\u5c0f\u4e8e\u7b49\u4e8eb\" else echo \" $a -gt $b : a\u5927\u4e8eb\" fi \u5e03\u5c14\u8fd0\u7b97\u7b26 ! \uff08\u975e\u8fd0\u7b97\uff09 1 2 3 4 5 6 7 # echo \"!false\" flag = false if [ ! ${ flag } ] ; then echo \"! ${ flag } \" else echo \"NO!\" fi -o \uff08\u6216\u8fd0\u7b97\uff09 1 2 3 4 5 6 7 8 # echo \"1 -lt 2 -o 2 -lt 2\" a = 1 b = 2 if [ $a -lt 2 -o $b -lt 2 ] ; then echo \" $a -lt 2 -o $b -lt 2\" else echo \"NO!\" fi -a \uff08\u4e0e\u8fd0\u7b97\uff09 1 2 3 4 5 6 7 8 # echo \"1 -le 2 -o 2 -le 2\" a = 1 b = 2 if [ $a -le 2 -a $b -le 2 ] ; then echo \"1 -le 2 -a 2 -le 2\" else echo \"NO!\" fi \u903b\u8f91\u8fd0\u7b97\u7b26\uff0c && \u903b\u8f91AND\uff0c || \u903b\u8f91OR \u5b57\u7b26\u4e32\u8fd0\u7b97\u7b26 == \u68c0\u67e5\u4e24\u4e2a\u5b57\u7b26\u4e32\u662f\u5426\u76f8\u7b49\uff0c\u76f8\u7b49\u8fd4\u56detrue != \u68c0\u6d4b\u5b57\u7b26\u4e32\u4e0d\u76f8\u7b49 -z \u68c0\u6d4b\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u662f\u5426 \u662f0 \uff0c\u957f\u5ea6\u662f0\u5c31\u8fd4\u56detrue -n \u68c0\u6d4b\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u662f\u5426 \u4e0d\u662f0 \uff0c\u957f\u5ea6\u4e0d\u662f0\u5c31\u8fd4\u56detrue \u6587\u4ef6\u6d4b\u8bd5\u8fd0\u7b97\u7b26 -d <dir> \u68c0\u67e5 <dir> \u662f\u5426\u662f\u76ee\u5f55\uff0c\u5982\u679c\u662f\u76ee\u5f55\u5219\u8fd4\u56detrue 1 2 3 4 5 6 7 # echo \"/home/my_dir is dir\" dir_path = /home/my_dir # this is the path of one directory if [[ -d ${ dir_path } ]] ; then echo \" ${ dir_path } is dir\" else echo \"NO!\" fi -f <file> \u68c0\u67e5 <file> \u662f\u5426\u662f\u6587\u4ef6\uff0c\u5982\u679c\u662f\u6587\u4ef6\u5219\u8fd4\u56detrue -e <file> \u68c0\u67e5\u6587\u4ef6\u6216\u8005\u76ee\u5f55 <file> \u662f\u5426\u5b58\u5728\uff0c\u5982\u679c\u5b58\u5728\u8fd4\u56detrue -x <file> \u68c0\u67e5\u6587\u4ef6\u662f\u5426\u53ef\u6267\u884c -s <file> \u68c0\u67e5\u6587\u4ef6\u662f\u5426\u4e3a\u7a7a Tricks \u5728\u5224\u65ad\u6761\u4ef6\u4e2d\u63a8\u8350\u4f7f\u7528 [[]] \u800c\u975e [] \u53ef\u4ee5\u907f\u514d\u811a\u672c\u4e2d\u7684\u903b\u8f91\u9519\u8bef\uff0c\u6bd4\u5982 && \u548c || \uff0c\u4ee5\u53ca\u64cd\u4f5c\u7b26 > \u548c < \u90fd\u5b58\u5728\u4e8e [[]] \u4e2d\uff0c\u800c\u4e0d\u80fd\u5b58\u5728\u4e8e [] \u4e2d\uff1b [] \u8868\u8fbe\u5f0f\uff1a\u5728 [] \u8868\u8fbe\u5f0f\u4e2d\uff0c\u5e38\u89c1\u7684 > \uff0c < \u9700\u8981\u52a0\u8f6c\u4e49\u5b57\u7b26\uff1b [[]] \u8868\u8fbe\u5f0f\uff1a\u652f\u6301 < \uff0c > \u4e14\u4e0d\u9700\u8981\u8f6c\u4e49\u5b57\u7b26\uff0c\u5e76\u4e14\u652f\u6301 || \uff0c && \u903b\u8f91\u8fd0\u7b97\u7b26\uff0c\u5728 [[]] \u4e2d\u4e0d\u9002\u7528 -a \uff0c -o \u3002 \u5b57\u7b26\u4e32\u8f93\u51fa echo \u8f93\u51fa\u5b57\u7b26\u4e32\u3002 > \u91cd\u5b9a\u5411\u8f93\u51fa\u81f3\u67d0\u4f4d\u7f6e\uff0c\u6ca1\u6709\u5219\u65b0\u5efa\uff0c\u6e05\u7a7a\u539f\u6709\u5185\u5bb9\uff1b >> \u91cd\u5b9a\u5411\u8ffd\u52a0\u81f3\u67d0\u4f4d\u7f6e\uff0c\u6ca1\u6709\u5219\u65b0\u5efa\uff0c\u8ffd\u52a0\u5185\u5bb9\u3002 2 > \u91cd\u5b9a\u5411\u9519\u8bef\u8f93\u51fa 2 >> \u91cd\u5b9a\u5411\u9519\u8bef\uff0c\u8ffd\u52a0\u8f93\u51fa\u5230\u6587\u4ef6\u7ed3\u5c3e & > \u6df7\u5408\u9519\u8bef\u548c\u6b63\u786e\u8f93\u51fa shell\u6d41\u7a0b\u63a7\u5236 if else 1 2 3 4 5 6 7 8 9 if condition1 ; then command1 elif condition2 ; then command2 elif condition3 ; then command3 else command4 fi \u4f8b\uff1a 1 2 3 4 5 6 7 a = 10 b = 20 if [ $a == $b ] ; then echo \" $a == $b \" elif [ $a -gt $b ] ; then echo \" $a greater than $b \" fi for 1 2 3 for var in item1 item2 itemN ; do command done \u6216\u8005 1 2 3 for (( assignment ; condition ; next )) ; do command done while 1 2 3 while condition ; do command done \u4f8b\uff1a 1 2 3 4 5 i = 1 while (( $i < = 5 )) ; do echo \"i is $i \" let \"i++\" done \u65e0\u9650\u5faa\u73af\uff1a 1 2 3 4 while do command done \u6216\u8005 1 2 3 4 while true: do command done \u6216\u8005 1 for (( ;; )) until \u5faa\u73af\uff1a\u4e0e while \u7684condition\u76f8\u53cd 1 2 3 4 until condition do command done case \uff1a\u591a\u9009\u62e9\u8bed\u53e5 break \uff1a\u8df3\u51fa\u5faa\u73af continue \uff1a\u8df3\u51fa\u672c\u6b65\u5faa\u73af \u8f93\u5165/\u8f93\u51fa\u91cd\u5b9a\u5411 \u5982\u679c\u5e0c\u671b\u5c06 stdout \u548c stderr \u5408\u5e76\u540e\u91cd\u5b9a\u5411\u5230 file \uff0c\u5219\u53ef\u4ee5\u8fd9\u6837\u5199\uff1a 1 command > file 2 > & 1 \u6216\u8005 1 command >> file 2 > & 1 2>1 \u8868\u793a\u5c06 stderr \u91cd\u5b9a\u5411\u5230\u5f53\u524d\u8def\u5f84\u4e0b\u6587\u4ef6\u540d\u4e3a 1 \u7684 \u666e\u901a\u6587\u4ef6 \u4e2d\uff1b\u800c 2>&1 \u8868\u793a\u5c06 stderr \u91cd\u5b9a\u5411\u5230\u6587\u4ef6\u63cf\u8ff0\u7b26\u4e3a 1 \u7684 \u6587\u4ef6\uff08\u4e5f\u5373/dev/stdout\uff09 \u4e2d\uff0c\u8fd9\u4e2a\u6587\u4ef6\u5176\u5b9e\u662f stdout \u5728\u6587\u4ef6\u7cfb\u7edf\u4e2d\u7684\u6620\u5c04\u3002 \u4f8b\u5982\uff1a 1 find /etc -names \"*.txt\" > list 2 > & 1 \u4e0a\u4f8b\u4e2d\uff0c\u547d\u4ee4\u4ece\u5de6\u5411\u53f3\u6267\u884c\uff0c\u6267\u884c\u81f3 list \u65f6\uff0c\u6b64\u65f6\u6807\u51c6\u8f93\u51fa stdout \u4e3a list \uff1b\u800c\u6267\u884c\u5230 2>&1 \u65f6\uff0c\u5219\u8868\u793a stderr \u4e5f\u91cd\u5b9a\u5411\u5230 stdout \uff0c\u5728\u672c\u4f8b\u4e2d\u5373\u662f list \u6587\u4ef6\uff1b \u53c8\u7531\u4e8e find \u547d\u4ee4\u7684\u53c2\u6570\u5e94\u4e3a -name \u800c\u975e -names \uff0c\u56e0\u6b64\u4f1a\u53d1\u751f\u9519\u8bef\uff0c\u9519\u8bef\u4fe1\u606f 2>&1 \uff0c\u91cd\u5b9a\u5411\u81f3\u6807\u51c6\u8f93\u51fa\uff0c\u4e5f\u5c31\u662f list \u6587\u4ef6\u3002\u6b64\u65f6\u5c4f\u5e55\u4e0d\u4f1a\u51fa\u73b0\u9519\u8bef\u4fe1\u606f\uff0c\u800c\u5168\u90e8\u6253\u5370\u5230 list \u6587\u4ef6\u4e2d\u3002 \u4f8b\uff1a 1 2 # \u5c4f\u853d\u6240\u6709\u8f93\u51fa command > /dev/null 2 > & 1","title":"shell\u8bed\u6cd5\u901f\u67e5\u624b\u518c"},{"location":"develop/shell/shell%E8%AF%AD%E6%B3%95%E9%80%9F%E6%9F%A5%E6%89%8B%E5%86%8C/#shell","text":"","title":"shell\u8bed\u6cd5\u901f\u67e5\u624b\u518c"},{"location":"develop/shell/shell%E8%AF%AD%E6%B3%95%E9%80%9F%E6%9F%A5%E6%89%8B%E5%86%8C/#_1","text":"sh \u662fUnix\u6700\u521d\u4f7f\u7528\u7684shell\uff0cLinux\u9ed8\u8ba4\u4e3a bash \uff0c\u662f sh \u7684\u6269\u5c55\u3002 source <FileName> \uff1a\u5728\u5f53\u524dbash\u73af\u5883\u4e0b\uff0c\u8bfb\u53d6\u5e76\u6267\u884c FileName \u4e2d\u7684\u547d\u4ee4\uff0c\u8be5 FileName \u53ef\u4ee5\u65e0\u6267\u884c\u6743\u9650\uff0c\u8be5\u547d\u4ee4\u53ef\u4ee5\u7528\u547d\u4ee4 . \u4ee3\u66ff\uff1b sh <FileName> \u6216\u8005 bash <FileName> \uff1a\u6253\u5f00\u5b50shell\u6765\u8bfb\u53d6\u5e76\u6267\u884c FileName \u4e2d\u7684\u547d\u4ee4\uff0c\u8be5 FileName \u53ef\u4ee5\u65e0\u6267\u884c\u6743\u9650\uff1b ./<FileName> \uff1a\u6253\u5f00\u5b50shell\u6765\u8bfb\u53d6\u5e76\u6267\u884c FileName \u4e2d\u7684\u547d\u4ee4\uff0c\u8be5 FileName \u9700\u8981\u6267\u884c\u6743\u9650\u3002","title":"\u7b80\u4ecb"},{"location":"develop/shell/shell%E8%AF%AD%E6%B3%95%E9%80%9F%E6%9F%A5%E6%89%8B%E5%86%8C/#shell_1","text":"\u5b9a\u4e49\u53d8\u91cf\uff1a var_name=\"linxi\" \u4f7f\u7528\u53d8\u91cf\uff1a echo $var_name \u6216\u8005 echo ${var_name} \uff0c\u540e\u8005\u4f7f\u7528\u53d8\u91cf\u65f6\u52a0\u5165\u4e86\u82b1\u62ec\u53f7 {} \uff0c\u8fd9\u662f\u53ef\u9009\u7684\uff0c\u52a0\u4e0d\u52a0\u90fd\u884c\uff0c\u4f46\u662f \u63a8\u8350 \u52a0\u4e0a\uff0c\u4ee5\u4fbf\u5e2e\u52a9shell\u754c\u5b9a\u53d8\u91cf\u540d\u7684\u8fb9\u754c\u3002\u6bd4\u5982 echo ${var_name}Script \uff0c\u53bb\u6389\u82b1\u62ec\u53f7\uff0cshell\u5c06\u8ba4\u4e3a\u53d8\u91cf\u540d\u4e3a var_nameScript \uff0c\u800c\u975e var_name \u3002 \u53ea\u8bfb\u53d8\u91cf\uff1a readonly \u3002\u6bd4\u5982\uff1a 1 2 var_name = \"my var\" readonly var_name \u5220\u9664\u53d8\u91cf\uff1a unset \uff0c unset <var_name> \u3002 shell\u5b57\u7b26\u4e32 \u5355\u5f15\u53f7\uff1a\u5355\u5f15\u53f7\u7684\u4efb\u4f55\u5b57\u7b26\u4e32\u90fd\u4f1a\u539f\u6837\u8f93\u51fa\uff0c\u5355\u5f15\u53f7\u5185\u7684\u53d8\u91cf\u540d\u662f\u65e0\u6548\u7684\uff1b \u53cc\u5f15\u53f7\uff1a\u53cc\u5f15\u53f7\u5185\u53ef\u4ee5\u6709\u53d8\u91cf\uff0c\u53cc\u5f15\u53f7\u91cc\u53ef\u4ee5\u51fa\u73b0\u8f6c\u4e49\u5b57\u7b26\u3002 \u83b7\u53d6\u5b57\u7b26\u4e32\u957f\u5ea6\uff1a 1 2 string = \"12\" echo ${# string } \u63d0\u53d6\u5b50\u5b57\u7b26\u4e32\uff1a echo ${string:1:4} shell\u6570\u7ec4\uff1a\u7528\u62ec\u53f7\u8868\u793a\u6570\u7ec4\uff0c\u6570\u7ec4\u5143\u7d20\u7528 \u7a7a\u683c \u9694\u5f00\uff0c\u4e00\u822c\u5f62\u5f0f\uff1a 1 arr_name =( val1 val2 val3 ) \u6216\u8005 1 2 3 arr_name =( val1 val2 val3 ) \u8bfb\u53d6\u6570\u7ec4\uff1a ${var_name[index]} \u83b7\u53d6\u6570\u7ec4\u4e2d\u6240\u6709\u5143\u7d20\uff1a ${arr_name[@]} \u83b7\u53d6\u6570\u7ec4\u957f\u5ea6\uff1a ${#arr_name[@]} \u6216\u8005 ${#arr_name[#]}","title":"shell\u53d8\u91cf"},{"location":"develop/shell/shell%E8%AF%AD%E6%B3%95%E9%80%9F%E6%9F%A5%E6%89%8B%E5%86%8C/#shell_2","text":"\u5411shell\u811a\u672c\u5185\u4f20\u9012\u53c2\u6570\uff0c\u811a\u672c\u5185\u83b7\u53d6\u53c2\u6570\u7684\u683c\u5f0f\u4e3a\uff1a $n \uff0c\u5176\u4e2d n \u8868\u793a\u4ee5\u4e00\u4e2a\u6570\u5b57\uff0c 1 \u662f\u6267\u884c\u811a\u672c\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\uff0c 2 \u662f\u7b2c\u4e8c\u4e2a\u53c2\u6570\u2026\u2026 0 \u662f\u6267\u884c\u7684\u811a\u672c\u540d\u3002 \u5728\u5411shell\u811a\u672c\u4f20\u9012\u7684\u53c2\u6570\u4e2d\u5982\u679c\u5305\u542b\u7a7a\u683c\uff0c\u5e94\u8be5\u4f7f\u7528\u5355\u5f15\u53f7\u6216\u8005\u53cc\u5f15\u53f7\u5c06\u8be5\u53c2\u6570\u62ec\u8d77\u6765\uff0c\u4ee5\u4fbf\u811a\u672c\u5c06\u8be5\u53c2\u6570\u4f5c\u4e3a\u6574\u4f53\u63a5\u6536\uff1b shell\u91cd\u70b9\u4e2d\u62ec\u53f7\uff08\u5305\u62ec\u5355\u4e2d\u62ec\u53f7 [] \u548c\u53cc\u4e2d\u62ec\u53f7 [[]] \uff09\u53ef\u7528\u4e8e\u4e00\u4e9b\u6761\u4ef6\u7684\u6d4b\u8bd5\uff1a \u7b97\u6cd5\u6bd4\u8f83\uff0c\u6bd4\u5982\u68c0\u67e5\u4e00\u4e2a\u53d8\u91cf\u662f\u5426\u662f0\uff0c\u5e94\u5199\u4f5c [ $var_name -eq 0 ] \u6587\u4ef6\u5c5e\u6027\uff0c\u6bd4\u5982\u786e\u5b9a\u4e00\u4e2a\u6587\u4ef6\u662f\u5426\u5b58\u5728\uff0c\u5e94\u5199\u4f5c [ -e $file ] \uff1b\u4e00\u4e2a\u76ee\u5f55\u662f\u5426\u5b58\u5728\uff0c\u5e94\u5199\u4f5c [ -d $dir ] ; \u5b57\u7b26\u4e32\u6bd4\u8f83\uff0c\u6bd4\u5982\u6bd4\u8f83\u4e24\u4e2a\u5b57\u7b26\u4e32\u662f\u5426\u76f8\u540c\uff1a [[ \"$string1\" = \"$string2\" ]] \u3002","title":"shell\u4f20\u9012\u53c2\u6570"},{"location":"develop/shell/shell%E8%AF%AD%E6%B3%95%E9%80%9F%E6%9F%A5%E6%89%8B%E5%86%8C/#shell_3","text":"\u539f\u751fshell\u4e0d\u652f\u6301\u7b80\u5355\u7684\u6570\u5b66\u8fd0\u7b97\uff0c\u4f46\u53ef\u4ee5\u901a\u8fc7\u5176\u4ed6\u547d\u4ee4\u5b9e\u73b0\uff0c\u4f8b\u5982 awk \u548c expr \uff0c\u5176\u4e2d expr \u6700\u5e38\u7528\uff0c\u6bd4\u5982\u4e24\u6570\u5b57\u76f8\u52a0\uff1a 1 2 val = ` expr 2 + 2 ` # \u6ce8\u610f\uff0c\u8868\u8fbe\u5f0f\u548c\u8fd0\u7b97\u7b26\u4e4b\u95f4\u5fc5\u987b\u8981\u6709\u7a7a\u683c\uff0c\u4f8b\u5982\u201c2+2\u201d\u662f\u4e0d\u6b63\u786e\u7684\uff0c\u5e94\u4e3a\u201c2 + 2\u201d val = $( expr 2 + 2 ) # \u5b8c\u6574\u7684\u8868\u8fbe\u5f0f\u8981\u88ab``\u5305\u88f9 \u7b97\u672f\u8fd0\u7b97\u7b26 + , - , \\* , / , % , = , == , != \u3002\u4f8b\u5982\uff1a 1 2 3 if [ $a ! = $b ] ; then echo \"a\u4e0d\u7b49\u4e8eb\" fi \u5173\u7cfb\u8fd0\u7b97\u7b26 -eq (equal), -ne (negative equal), -gt (greater than), lt (less than), -ge (greater equal), -le (less equal) 1 2 3 4 5 if [ $a -le $b ] ; then echo \" $a -le $b : a\u5c0f\u4e8e\u7b49\u4e8eb\" else echo \" $a -gt $b : a\u5927\u4e8eb\" fi \u5e03\u5c14\u8fd0\u7b97\u7b26 ! \uff08\u975e\u8fd0\u7b97\uff09 1 2 3 4 5 6 7 # echo \"!false\" flag = false if [ ! ${ flag } ] ; then echo \"! ${ flag } \" else echo \"NO!\" fi -o \uff08\u6216\u8fd0\u7b97\uff09 1 2 3 4 5 6 7 8 # echo \"1 -lt 2 -o 2 -lt 2\" a = 1 b = 2 if [ $a -lt 2 -o $b -lt 2 ] ; then echo \" $a -lt 2 -o $b -lt 2\" else echo \"NO!\" fi -a \uff08\u4e0e\u8fd0\u7b97\uff09 1 2 3 4 5 6 7 8 # echo \"1 -le 2 -o 2 -le 2\" a = 1 b = 2 if [ $a -le 2 -a $b -le 2 ] ; then echo \"1 -le 2 -a 2 -le 2\" else echo \"NO!\" fi \u903b\u8f91\u8fd0\u7b97\u7b26\uff0c && \u903b\u8f91AND\uff0c || \u903b\u8f91OR \u5b57\u7b26\u4e32\u8fd0\u7b97\u7b26 == \u68c0\u67e5\u4e24\u4e2a\u5b57\u7b26\u4e32\u662f\u5426\u76f8\u7b49\uff0c\u76f8\u7b49\u8fd4\u56detrue != \u68c0\u6d4b\u5b57\u7b26\u4e32\u4e0d\u76f8\u7b49 -z \u68c0\u6d4b\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u662f\u5426 \u662f0 \uff0c\u957f\u5ea6\u662f0\u5c31\u8fd4\u56detrue -n \u68c0\u6d4b\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u662f\u5426 \u4e0d\u662f0 \uff0c\u957f\u5ea6\u4e0d\u662f0\u5c31\u8fd4\u56detrue \u6587\u4ef6\u6d4b\u8bd5\u8fd0\u7b97\u7b26 -d <dir> \u68c0\u67e5 <dir> \u662f\u5426\u662f\u76ee\u5f55\uff0c\u5982\u679c\u662f\u76ee\u5f55\u5219\u8fd4\u56detrue 1 2 3 4 5 6 7 # echo \"/home/my_dir is dir\" dir_path = /home/my_dir # this is the path of one directory if [[ -d ${ dir_path } ]] ; then echo \" ${ dir_path } is dir\" else echo \"NO!\" fi -f <file> \u68c0\u67e5 <file> \u662f\u5426\u662f\u6587\u4ef6\uff0c\u5982\u679c\u662f\u6587\u4ef6\u5219\u8fd4\u56detrue -e <file> \u68c0\u67e5\u6587\u4ef6\u6216\u8005\u76ee\u5f55 <file> \u662f\u5426\u5b58\u5728\uff0c\u5982\u679c\u5b58\u5728\u8fd4\u56detrue -x <file> \u68c0\u67e5\u6587\u4ef6\u662f\u5426\u53ef\u6267\u884c -s <file> \u68c0\u67e5\u6587\u4ef6\u662f\u5426\u4e3a\u7a7a Tricks \u5728\u5224\u65ad\u6761\u4ef6\u4e2d\u63a8\u8350\u4f7f\u7528 [[]] \u800c\u975e [] \u53ef\u4ee5\u907f\u514d\u811a\u672c\u4e2d\u7684\u903b\u8f91\u9519\u8bef\uff0c\u6bd4\u5982 && \u548c || \uff0c\u4ee5\u53ca\u64cd\u4f5c\u7b26 > \u548c < \u90fd\u5b58\u5728\u4e8e [[]] \u4e2d\uff0c\u800c\u4e0d\u80fd\u5b58\u5728\u4e8e [] \u4e2d\uff1b [] \u8868\u8fbe\u5f0f\uff1a\u5728 [] \u8868\u8fbe\u5f0f\u4e2d\uff0c\u5e38\u89c1\u7684 > \uff0c < \u9700\u8981\u52a0\u8f6c\u4e49\u5b57\u7b26\uff1b [[]] \u8868\u8fbe\u5f0f\uff1a\u652f\u6301 < \uff0c > \u4e14\u4e0d\u9700\u8981\u8f6c\u4e49\u5b57\u7b26\uff0c\u5e76\u4e14\u652f\u6301 || \uff0c && \u903b\u8f91\u8fd0\u7b97\u7b26\uff0c\u5728 [[]] \u4e2d\u4e0d\u9002\u7528 -a \uff0c -o \u3002","title":"shell\u57fa\u672c\u8fd0\u7b97\u7b26"},{"location":"develop/shell/shell%E8%AF%AD%E6%B3%95%E9%80%9F%E6%9F%A5%E6%89%8B%E5%86%8C/#_2","text":"echo \u8f93\u51fa\u5b57\u7b26\u4e32\u3002 > \u91cd\u5b9a\u5411\u8f93\u51fa\u81f3\u67d0\u4f4d\u7f6e\uff0c\u6ca1\u6709\u5219\u65b0\u5efa\uff0c\u6e05\u7a7a\u539f\u6709\u5185\u5bb9\uff1b >> \u91cd\u5b9a\u5411\u8ffd\u52a0\u81f3\u67d0\u4f4d\u7f6e\uff0c\u6ca1\u6709\u5219\u65b0\u5efa\uff0c\u8ffd\u52a0\u5185\u5bb9\u3002 2 > \u91cd\u5b9a\u5411\u9519\u8bef\u8f93\u51fa 2 >> \u91cd\u5b9a\u5411\u9519\u8bef\uff0c\u8ffd\u52a0\u8f93\u51fa\u5230\u6587\u4ef6\u7ed3\u5c3e & > \u6df7\u5408\u9519\u8bef\u548c\u6b63\u786e\u8f93\u51fa","title":"\u5b57\u7b26\u4e32\u8f93\u51fa"},{"location":"develop/shell/shell%E8%AF%AD%E6%B3%95%E9%80%9F%E6%9F%A5%E6%89%8B%E5%86%8C/#shell_4","text":"if else 1 2 3 4 5 6 7 8 9 if condition1 ; then command1 elif condition2 ; then command2 elif condition3 ; then command3 else command4 fi \u4f8b\uff1a 1 2 3 4 5 6 7 a = 10 b = 20 if [ $a == $b ] ; then echo \" $a == $b \" elif [ $a -gt $b ] ; then echo \" $a greater than $b \" fi for 1 2 3 for var in item1 item2 itemN ; do command done \u6216\u8005 1 2 3 for (( assignment ; condition ; next )) ; do command done while 1 2 3 while condition ; do command done \u4f8b\uff1a 1 2 3 4 5 i = 1 while (( $i < = 5 )) ; do echo \"i is $i \" let \"i++\" done \u65e0\u9650\u5faa\u73af\uff1a 1 2 3 4 while do command done \u6216\u8005 1 2 3 4 while true: do command done \u6216\u8005 1 for (( ;; )) until \u5faa\u73af\uff1a\u4e0e while \u7684condition\u76f8\u53cd 1 2 3 4 until condition do command done case \uff1a\u591a\u9009\u62e9\u8bed\u53e5 break \uff1a\u8df3\u51fa\u5faa\u73af continue \uff1a\u8df3\u51fa\u672c\u6b65\u5faa\u73af","title":"shell\u6d41\u7a0b\u63a7\u5236"},{"location":"develop/shell/shell%E8%AF%AD%E6%B3%95%E9%80%9F%E6%9F%A5%E6%89%8B%E5%86%8C/#_3","text":"\u5982\u679c\u5e0c\u671b\u5c06 stdout \u548c stderr \u5408\u5e76\u540e\u91cd\u5b9a\u5411\u5230 file \uff0c\u5219\u53ef\u4ee5\u8fd9\u6837\u5199\uff1a 1 command > file 2 > & 1 \u6216\u8005 1 command >> file 2 > & 1 2>1 \u8868\u793a\u5c06 stderr \u91cd\u5b9a\u5411\u5230\u5f53\u524d\u8def\u5f84\u4e0b\u6587\u4ef6\u540d\u4e3a 1 \u7684 \u666e\u901a\u6587\u4ef6 \u4e2d\uff1b\u800c 2>&1 \u8868\u793a\u5c06 stderr \u91cd\u5b9a\u5411\u5230\u6587\u4ef6\u63cf\u8ff0\u7b26\u4e3a 1 \u7684 \u6587\u4ef6\uff08\u4e5f\u5373/dev/stdout\uff09 \u4e2d\uff0c\u8fd9\u4e2a\u6587\u4ef6\u5176\u5b9e\u662f stdout \u5728\u6587\u4ef6\u7cfb\u7edf\u4e2d\u7684\u6620\u5c04\u3002 \u4f8b\u5982\uff1a 1 find /etc -names \"*.txt\" > list 2 > & 1 \u4e0a\u4f8b\u4e2d\uff0c\u547d\u4ee4\u4ece\u5de6\u5411\u53f3\u6267\u884c\uff0c\u6267\u884c\u81f3 list \u65f6\uff0c\u6b64\u65f6\u6807\u51c6\u8f93\u51fa stdout \u4e3a list \uff1b\u800c\u6267\u884c\u5230 2>&1 \u65f6\uff0c\u5219\u8868\u793a stderr \u4e5f\u91cd\u5b9a\u5411\u5230 stdout \uff0c\u5728\u672c\u4f8b\u4e2d\u5373\u662f list \u6587\u4ef6\uff1b \u53c8\u7531\u4e8e find \u547d\u4ee4\u7684\u53c2\u6570\u5e94\u4e3a -name \u800c\u975e -names \uff0c\u56e0\u6b64\u4f1a\u53d1\u751f\u9519\u8bef\uff0c\u9519\u8bef\u4fe1\u606f 2>&1 \uff0c\u91cd\u5b9a\u5411\u81f3\u6807\u51c6\u8f93\u51fa\uff0c\u4e5f\u5c31\u662f list \u6587\u4ef6\u3002\u6b64\u65f6\u5c4f\u5e55\u4e0d\u4f1a\u51fa\u73b0\u9519\u8bef\u4fe1\u606f\uff0c\u800c\u5168\u90e8\u6253\u5370\u5230 list \u6587\u4ef6\u4e2d\u3002 \u4f8b\uff1a 1 2 # \u5c4f\u853d\u6240\u6709\u8f93\u51fa command > /dev/null 2 > & 1","title":"\u8f93\u5165/\u8f93\u51fa\u91cd\u5b9a\u5411"},{"location":"develop/shell/shell%E8%B0%83%E8%AF%95/","text":"shell\u8c03\u8bd5 Shell\u811a\u672c\u8c03\u8bd5\u9009\u9879 Shell\u672c\u8eab\u63d0\u4f9b\u4e00\u4e9b\u8c03\u8bd5\u65b9\u6cd5\u9009\u9879\uff1a 1 2 3 4 -n\uff0c\u8bfb\u4e00\u904d\u811a\u672c\u4e2d\u7684\u547d\u4ee4\u4f46\u4e0d\u6267\u884c\uff0c\u7528\u4e8e\u68c0\u67e5\u811a\u672c\u4e2d\u7684\u8bed\u6cd5\u9519\u8bef\u3002 -v\uff0c\u4e00\u8fb9\u6267\u884c\u811a\u672c\uff0c\u4e00\u8fb9\u5c06\u6267\u884c\u8fc7\u7684\u811a\u672c\u547d\u4ee4\u6253\u5370\u5230\u6807\u51c6\u8f93\u51fa\u3002 -x\uff0c\u63d0\u4f9b\u8ddf\u8e2a\u6267\u884c\u4fe1\u606f\uff0c\u5c06\u6267\u884c\u7684\u6bcf\u4e00\u6761\u547d\u4ee4\u548c\u7ed3\u679c\u4f9d\u6b21\u6253\u5370\u51fa\u6765\u3002 \u4f7f\u7528\u8fd9\u4e9b\u9009\u9879\u6709\u4e09\u79cd\u65b9\u6cd5(\u6ce8\u610f:\u907f\u514d\u51e0\u79cd\u8c03\u8bd5\u9009\u9879\u6df7\u7528) \u5728\u547d\u4ee4\u884c\u63d0\u4f9b\u53c2\u6570\uff1a $sh -x script.sh \u811a\u672c\u5f00\u5934\u63d0\u4f9b\u53c2\u6570\uff1a #!/bin/sh -x \u5728\u811a\u672c\u4e2d\u7528set\u547d\u4ee4\u542f\u7528or\u7981\u7528\u53c2\u6570\uff1a\u5176\u4e2d set -x \u8868\u793a\u542f\u7528\uff0c set +x \u8868\u793a\u7981\u7528\u3002 set\u547d\u4ee4\u7684\u8be6\u7ec6\u8bf4\u660e\uff1a - http://man.linuxde.net/set - https://www.runoob.com/linux/linux-comm-set.html https://www.cnblogs.com/anliven/p/6032081.html","title":"shell\u8c03\u8bd5"},{"location":"develop/shell/shell%E8%B0%83%E8%AF%95/#shell","text":"","title":"shell\u8c03\u8bd5"},{"location":"develop/shell/shell%E8%B0%83%E8%AF%95/#shell_1","text":"Shell\u672c\u8eab\u63d0\u4f9b\u4e00\u4e9b\u8c03\u8bd5\u65b9\u6cd5\u9009\u9879\uff1a 1 2 3 4 -n\uff0c\u8bfb\u4e00\u904d\u811a\u672c\u4e2d\u7684\u547d\u4ee4\u4f46\u4e0d\u6267\u884c\uff0c\u7528\u4e8e\u68c0\u67e5\u811a\u672c\u4e2d\u7684\u8bed\u6cd5\u9519\u8bef\u3002 -v\uff0c\u4e00\u8fb9\u6267\u884c\u811a\u672c\uff0c\u4e00\u8fb9\u5c06\u6267\u884c\u8fc7\u7684\u811a\u672c\u547d\u4ee4\u6253\u5370\u5230\u6807\u51c6\u8f93\u51fa\u3002 -x\uff0c\u63d0\u4f9b\u8ddf\u8e2a\u6267\u884c\u4fe1\u606f\uff0c\u5c06\u6267\u884c\u7684\u6bcf\u4e00\u6761\u547d\u4ee4\u548c\u7ed3\u679c\u4f9d\u6b21\u6253\u5370\u51fa\u6765\u3002 \u4f7f\u7528\u8fd9\u4e9b\u9009\u9879\u6709\u4e09\u79cd\u65b9\u6cd5(\u6ce8\u610f:\u907f\u514d\u51e0\u79cd\u8c03\u8bd5\u9009\u9879\u6df7\u7528) \u5728\u547d\u4ee4\u884c\u63d0\u4f9b\u53c2\u6570\uff1a $sh -x script.sh \u811a\u672c\u5f00\u5934\u63d0\u4f9b\u53c2\u6570\uff1a #!/bin/sh -x \u5728\u811a\u672c\u4e2d\u7528set\u547d\u4ee4\u542f\u7528or\u7981\u7528\u53c2\u6570\uff1a\u5176\u4e2d set -x \u8868\u793a\u542f\u7528\uff0c set +x \u8868\u793a\u7981\u7528\u3002 set\u547d\u4ee4\u7684\u8be6\u7ec6\u8bf4\u660e\uff1a - http://man.linuxde.net/set - https://www.runoob.com/linux/linux-comm-set.html https://www.cnblogs.com/anliven/p/6032081.html","title":"Shell\u811a\u672c\u8c03\u8bd5\u9009\u9879"},{"location":"develop/shell/tailf/","text":"tailf \u52a8\u6001\u8ddf\u8e2a\u65e5\u5fd7\u6587\u4ef6\u3002 1 tailf logfile # \u52a8\u6001\u8ddf\u8e2a\u65e5\u5fd7\u6587\u4ef6logfile\uff0c\u6700\u521d\u7684\u65f6\u5019\u6253\u5370\u6587\u4ef6\u7684\u6700\u540e10\u884c\u5185\u5bb9\u3002","title":"tailf"},{"location":"develop/shell/tailf/#tailf","text":"\u52a8\u6001\u8ddf\u8e2a\u65e5\u5fd7\u6587\u4ef6\u3002 1 tailf logfile # \u52a8\u6001\u8ddf\u8e2a\u65e5\u5fd7\u6587\u4ef6logfile\uff0c\u6700\u521d\u7684\u65f6\u5019\u6253\u5370\u6587\u4ef6\u7684\u6700\u540e10\u884c\u5185\u5bb9\u3002","title":"tailf"},{"location":"develop/shell/top_linux%E4%B8%8B%E7%9A%84%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%86%E5%99%A8/","text":"top_linux\u4e0b\u7684\u4efb\u52a1\u7ba1\u7406\u5668 top \u5de5\u5177\uff0c\u7c7b\u4f3c\u4e8eWindows\u4e0b\u7684\u4efb\u52a1\u7ba1\u7406\u5668\u3002 \u6267\u884c\u7ed3\u679c \u6267\u884c\u7684\u7ed3\u679c\u5f62\u5982\uff1a 1 2 3 4 5 6 7 8 9 10 11 $top top - 09:14:56 up 264 days, 20:56, 1 user, load average: 0.02, 0.04, 0.00 Tasks: 87 total, 1 running, 86 sleeping, 0 stopped, 0 zombie Cpu(s): 0.0%us, 0.2%sy, 0.0%ni, 99.7%id, 0.0%wa, 0.0%hi, 0.0%si, 0.2%st Mem: 377672k total, 322332k used, 55340k free, 32592k buffers Swap: 397308k total, 67192k used, 330116k free, 71900k cached PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND 1 root 20 0 2856 656 388 S 0.0 0.2 0:49.40 init 2 root 20 0 0 0 0 S 0.0 0.0 0:00.00 kthreadd 3 root 20 0 0 0 0 S 0.0 0.0 7:15.20 ksoftirqd/0 4 root RT 0 0 0 0 S 0.0 0.0 0:00.00 migration/0 CPU\u4fe1\u606f\u3002\u5982\u4e0a\u4f8b\u6240\u793a\uff0c\u9700\u8981\u5173\u6ce8\uff1a \u7b2c\u4e00\u884c\uff1a load average: 0.02, 0.04, 0.00 \u3002\u7cfb\u7edf1\u5206\u949f\u30015\u5206\u949f\u300115\u5206\u949f\u7684CPU\u8d1f\u8f7d\u3002 \u7b2c\u4e09\u884cCpu (s)\uff1a 99.7%id \uff1a\u7a7a\u95f2CPU\u65f6\u95f4\u767e\u5206\u6bd4\u3002\u5982\u679c\u8fd9\u4e2a\u503c\u8fc7\u4f4e\uff0c\u8868\u660e\u7cfb\u7edfCPU\u5b58\u5728\u74f6\u9888\u3002 0.0%wa \uff1a\u7b49\u5f85I/O\u7684CPU\u65f6\u95f4\u767e\u5206\u6bd4\u3002\u5982\u679c\u8fd9\u4e2a\u503c\u8fc7\u9ad8\uff0c\u8868\u660eIO\u5b58\u5728\u74f6\u9888\u3002 \u5185\u5b58\u4fe1\u606f\u3002\u4ec5\u67e5\u770b\u5185\u5b58\u65f6\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 free -m \u7b49\u547d\u4ee4\u3002\u5982\u4e0a\u4f8b\u6240\u793a\uff0c\u9700\u8981\u5173\u6ce8\uff1a \u7b2c\u56db\u884cMem\uff1a 116452k free \uff1a\u7a7a\u95f2\u7684\u7269\u7406\u5185\u5b58\u91cf\u3002 \u7b2c\u4e94\u884cSwap\uff1a 330116k free \uff1a\u7a7a\u95f2\u7684\u4ea4\u6362\u533a\u91cf\u3002 Swap \u5c31\u662fLinux\u4e0b\u7684\u865a\u62df\u5185\u5b58\uff0c\u7528\u786c\u76d8\u5145\u5f53\u5185\u5b58\u3002 \u8fdb\u7a0b\u4fe1\u606f\u3002 PID\uff1a\u8fdb\u7a0bID\u3002 USER\uff1a\u8fdb\u7a0b\u62e5\u6709\u8005\u3002 PR\uff1a\u8fdb\u7a0b\u4f18\u5148\u7ea7\uff0c\u8d8a\u5c0f\uff0c\u4f18\u5148\u7ea7\u8d8a\u9ad8\uff0c\u8d8a\u65e9\u88ab\u6267\u884c\u3002 %CPU\uff1a\u8fdb\u7a0b\u5360\u7528\u7684CPU\u4f7f\u7528\u7387\u3002 %MEM\uff1a\u8fdb\u7a0b\u5360\u7528\u7684\u7269\u7406\u5185\u5b58\u4f7f\u7528\u7387\u3002 TIME+\uff1a\u7d2f\u52a0\u7684\u8fdb\u7a0bCPU\u4f7f\u7528\u65f6\u95f4\u3002 COMMAND\uff1a\u8fdb\u7a0b\u542f\u52a8\u547d\u4ee4\u540d\u79f0\u3002 top\u547d\u4ee4\u4ea4\u4e92\u64cd\u4f5c\u6307\u4ee4 s\uff1a\u8bbe\u7f6e\u5237\u65b0\u95f4\u9694\u3002 <Space> \u7acb\u5373\u5237\u65b0\u3002 i\uff1a\u4e0d\u663e\u793a\u95f2\u7f6e\u6216\u50f5\u6b7b\u8fdb\u7a0b\u3002 P\uff1a\u6309%CPU\u6392\u884c\u3002 T\uff1a\u6309TIME+\u6392\u884c\u3002 M\uff1a\u6309%MEM\u6392\u884c\u3002 u\uff1a\u663e\u793a\u6307\u5b9a\u7528\u6237\u8fdb\u7a0b\u3002 c\uff1a\u663e\u793a\u5b8c\u6574\u547d\u4ee4\u3002 q\uff1a\u9000\u51fa\u3002 8. top linux\u4e0b\u7684\u4efb\u52a1\u7ba1\u7406\u5668 3. \u6027\u80fd\u4f18\u5316 What does SWAP mean in top?","title":"top_linux\u4e0b\u7684\u4efb\u52a1\u7ba1\u7406\u5668"},{"location":"develop/shell/top_linux%E4%B8%8B%E7%9A%84%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%86%E5%99%A8/#top_linux","text":"top \u5de5\u5177\uff0c\u7c7b\u4f3c\u4e8eWindows\u4e0b\u7684\u4efb\u52a1\u7ba1\u7406\u5668\u3002","title":"top_linux\u4e0b\u7684\u4efb\u52a1\u7ba1\u7406\u5668"},{"location":"develop/shell/top_linux%E4%B8%8B%E7%9A%84%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%86%E5%99%A8/#_1","text":"\u6267\u884c\u7684\u7ed3\u679c\u5f62\u5982\uff1a 1 2 3 4 5 6 7 8 9 10 11 $top top - 09:14:56 up 264 days, 20:56, 1 user, load average: 0.02, 0.04, 0.00 Tasks: 87 total, 1 running, 86 sleeping, 0 stopped, 0 zombie Cpu(s): 0.0%us, 0.2%sy, 0.0%ni, 99.7%id, 0.0%wa, 0.0%hi, 0.0%si, 0.2%st Mem: 377672k total, 322332k used, 55340k free, 32592k buffers Swap: 397308k total, 67192k used, 330116k free, 71900k cached PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND 1 root 20 0 2856 656 388 S 0.0 0.2 0:49.40 init 2 root 20 0 0 0 0 S 0.0 0.0 0:00.00 kthreadd 3 root 20 0 0 0 0 S 0.0 0.0 7:15.20 ksoftirqd/0 4 root RT 0 0 0 0 S 0.0 0.0 0:00.00 migration/0 CPU\u4fe1\u606f\u3002\u5982\u4e0a\u4f8b\u6240\u793a\uff0c\u9700\u8981\u5173\u6ce8\uff1a \u7b2c\u4e00\u884c\uff1a load average: 0.02, 0.04, 0.00 \u3002\u7cfb\u7edf1\u5206\u949f\u30015\u5206\u949f\u300115\u5206\u949f\u7684CPU\u8d1f\u8f7d\u3002 \u7b2c\u4e09\u884cCpu (s)\uff1a 99.7%id \uff1a\u7a7a\u95f2CPU\u65f6\u95f4\u767e\u5206\u6bd4\u3002\u5982\u679c\u8fd9\u4e2a\u503c\u8fc7\u4f4e\uff0c\u8868\u660e\u7cfb\u7edfCPU\u5b58\u5728\u74f6\u9888\u3002 0.0%wa \uff1a\u7b49\u5f85I/O\u7684CPU\u65f6\u95f4\u767e\u5206\u6bd4\u3002\u5982\u679c\u8fd9\u4e2a\u503c\u8fc7\u9ad8\uff0c\u8868\u660eIO\u5b58\u5728\u74f6\u9888\u3002 \u5185\u5b58\u4fe1\u606f\u3002\u4ec5\u67e5\u770b\u5185\u5b58\u65f6\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 free -m \u7b49\u547d\u4ee4\u3002\u5982\u4e0a\u4f8b\u6240\u793a\uff0c\u9700\u8981\u5173\u6ce8\uff1a \u7b2c\u56db\u884cMem\uff1a 116452k free \uff1a\u7a7a\u95f2\u7684\u7269\u7406\u5185\u5b58\u91cf\u3002 \u7b2c\u4e94\u884cSwap\uff1a 330116k free \uff1a\u7a7a\u95f2\u7684\u4ea4\u6362\u533a\u91cf\u3002 Swap \u5c31\u662fLinux\u4e0b\u7684\u865a\u62df\u5185\u5b58\uff0c\u7528\u786c\u76d8\u5145\u5f53\u5185\u5b58\u3002 \u8fdb\u7a0b\u4fe1\u606f\u3002 PID\uff1a\u8fdb\u7a0bID\u3002 USER\uff1a\u8fdb\u7a0b\u62e5\u6709\u8005\u3002 PR\uff1a\u8fdb\u7a0b\u4f18\u5148\u7ea7\uff0c\u8d8a\u5c0f\uff0c\u4f18\u5148\u7ea7\u8d8a\u9ad8\uff0c\u8d8a\u65e9\u88ab\u6267\u884c\u3002 %CPU\uff1a\u8fdb\u7a0b\u5360\u7528\u7684CPU\u4f7f\u7528\u7387\u3002 %MEM\uff1a\u8fdb\u7a0b\u5360\u7528\u7684\u7269\u7406\u5185\u5b58\u4f7f\u7528\u7387\u3002 TIME+\uff1a\u7d2f\u52a0\u7684\u8fdb\u7a0bCPU\u4f7f\u7528\u65f6\u95f4\u3002 COMMAND\uff1a\u8fdb\u7a0b\u542f\u52a8\u547d\u4ee4\u540d\u79f0\u3002","title":"\u6267\u884c\u7ed3\u679c"},{"location":"develop/shell/top_linux%E4%B8%8B%E7%9A%84%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%86%E5%99%A8/#top","text":"s\uff1a\u8bbe\u7f6e\u5237\u65b0\u95f4\u9694\u3002 <Space> \u7acb\u5373\u5237\u65b0\u3002 i\uff1a\u4e0d\u663e\u793a\u95f2\u7f6e\u6216\u50f5\u6b7b\u8fdb\u7a0b\u3002 P\uff1a\u6309%CPU\u6392\u884c\u3002 T\uff1a\u6309TIME+\u6392\u884c\u3002 M\uff1a\u6309%MEM\u6392\u884c\u3002 u\uff1a\u663e\u793a\u6307\u5b9a\u7528\u6237\u8fdb\u7a0b\u3002 c\uff1a\u663e\u793a\u5b8c\u6574\u547d\u4ee4\u3002 q\uff1a\u9000\u51fa\u3002 8. top linux\u4e0b\u7684\u4efb\u52a1\u7ba1\u7406\u5668 3. \u6027\u80fd\u4f18\u5316 What does SWAP mean in top?","title":"top\u547d\u4ee4\u4ea4\u4e92\u64cd\u4f5c\u6307\u4ee4"},{"location":"develop/shell/vim/","text":"vim \u6309\u952e \u8bf4\u660e 0\u6216\u529f\u80fd\u952e Home \u79fb\u52a8\u5230\u4e00\u884c\u7684\u6700\u524d\u9762\u5b57\u7b26\u5904 $\u6216\u529f\u80fd\u952e End \u79fb\u52a8\u5230\u4e00\u884c\u7684\u6700\u540e\u9762\u5b57\u7b26\u5904 G \u79fb\u52a8\u5230\u6700\u540e\u4e00\u884c nG n\u4e3a\u6570\u5b57\uff0c\u79fb\u52a8\u5230\u8fd9\u4e2a\u6863\u6848\u7684\u7b2cn\u884c gg \u79fb\u52a8\u5230\u7b2c\u4e00\u884c\uff0c\u76f8\u5f53\u4e8e1G /word \u5411\u5149\u6807\u4e4b\u4e0b\u5bfb\u627e\u4e00\u4e2a\u540d\u79f0\u4e3aword\u7684\u5b57\u7b26\u4e32 n \u91cd\u590d\u524d\u4e00\u4e2a\u641c\u7d22\u52a8\u4f5c N \u53cd\u5411\u91cd\u590d\u524d\u4e00\u4e2a\u641c\u7d22\u52a8\u4f5c :n1,n2s/word1/word2/g \u5728\u7b2c n1 \u4e0e n2 \u884c\u4e4b\u95f4\u5bfb\u627e word1 \u8fd9\u4e2a\u5b57\u7b26\u4e32\uff0c\u5e76\u5c06\u8be5\u5b57\u7b26\u4e32\u53d6\u4ee3\u4e3a word2 :1,$s/word1/word2/g \u4ece\u7b2c\u4e00\u884c\u5230\u6700\u540e\u4e00\u884c\u5bfb\u627e word1 \u5b57\u7b26\u4e32\uff0c\u5e76\u5c06\u8be5\u5b57\u7b26\u4e32\u53d6\u4ee3\u4e3a word2 :1,$s/word1/word2/gc \u4ece\u7b2c\u4e00\u884c\u5230\u6700\u540e\u4e00\u884c\u5bfb\u627e word1 \u5b57\u7b26\u4e32\uff0c\u5e76\u5c06\u8be5\u5b57\u7b26\u4e32\u53d6\u4ee3\u4e3a word2\uff0c\u5728\u66ff\u6362\u524d\u8981\u6c42\u7528\u6237\u786e\u8ba4\uff08confirm\uff09 dd \u526a\u5207\u6e38\u6807\u6240\u5728\u7684\u4e00\u6574\u884c\uff0c\u7528p/P\u7c98\u8d34 ndd n \u4e3a\u6570\u5b57\uff0c\u526a\u5207\u5149\u6807\u6240\u5728\u7684\u5411\u4e0b n \u884c\uff0c\u7528p/P\u7c98\u8d34 yy \u590d\u5236\u6e38\u6807\u6240\u5728\u7684\u4e00\u884c u \u590d\u539f\u524d\u4e00\u4e2a\u52a8\u4f5c [Ctrl]+r \u91cd\u505a\u524d\u4e00\u4e2a\u52a8\u4f5c :set nu \u663e\u793a\u884c\u53f7 :set nonu \u53d6\u6d88\u884c\u53f7 Linux vi/vim | \u83dc\u9e1f\u6559\u7a0b","title":"vim"},{"location":"develop/shell/vim/#vim","text":"\u6309\u952e \u8bf4\u660e 0\u6216\u529f\u80fd\u952e Home \u79fb\u52a8\u5230\u4e00\u884c\u7684\u6700\u524d\u9762\u5b57\u7b26\u5904 $\u6216\u529f\u80fd\u952e End \u79fb\u52a8\u5230\u4e00\u884c\u7684\u6700\u540e\u9762\u5b57\u7b26\u5904 G \u79fb\u52a8\u5230\u6700\u540e\u4e00\u884c nG n\u4e3a\u6570\u5b57\uff0c\u79fb\u52a8\u5230\u8fd9\u4e2a\u6863\u6848\u7684\u7b2cn\u884c gg \u79fb\u52a8\u5230\u7b2c\u4e00\u884c\uff0c\u76f8\u5f53\u4e8e1G /word \u5411\u5149\u6807\u4e4b\u4e0b\u5bfb\u627e\u4e00\u4e2a\u540d\u79f0\u4e3aword\u7684\u5b57\u7b26\u4e32 n \u91cd\u590d\u524d\u4e00\u4e2a\u641c\u7d22\u52a8\u4f5c N \u53cd\u5411\u91cd\u590d\u524d\u4e00\u4e2a\u641c\u7d22\u52a8\u4f5c :n1,n2s/word1/word2/g \u5728\u7b2c n1 \u4e0e n2 \u884c\u4e4b\u95f4\u5bfb\u627e word1 \u8fd9\u4e2a\u5b57\u7b26\u4e32\uff0c\u5e76\u5c06\u8be5\u5b57\u7b26\u4e32\u53d6\u4ee3\u4e3a word2 :1,$s/word1/word2/g \u4ece\u7b2c\u4e00\u884c\u5230\u6700\u540e\u4e00\u884c\u5bfb\u627e word1 \u5b57\u7b26\u4e32\uff0c\u5e76\u5c06\u8be5\u5b57\u7b26\u4e32\u53d6\u4ee3\u4e3a word2 :1,$s/word1/word2/gc \u4ece\u7b2c\u4e00\u884c\u5230\u6700\u540e\u4e00\u884c\u5bfb\u627e word1 \u5b57\u7b26\u4e32\uff0c\u5e76\u5c06\u8be5\u5b57\u7b26\u4e32\u53d6\u4ee3\u4e3a word2\uff0c\u5728\u66ff\u6362\u524d\u8981\u6c42\u7528\u6237\u786e\u8ba4\uff08confirm\uff09 dd \u526a\u5207\u6e38\u6807\u6240\u5728\u7684\u4e00\u6574\u884c\uff0c\u7528p/P\u7c98\u8d34 ndd n \u4e3a\u6570\u5b57\uff0c\u526a\u5207\u5149\u6807\u6240\u5728\u7684\u5411\u4e0b n \u884c\uff0c\u7528p/P\u7c98\u8d34 yy \u590d\u5236\u6e38\u6807\u6240\u5728\u7684\u4e00\u884c u \u590d\u539f\u524d\u4e00\u4e2a\u52a8\u4f5c [Ctrl]+r \u91cd\u505a\u524d\u4e00\u4e2a\u52a8\u4f5c :set nu \u663e\u793a\u884c\u53f7 :set nonu \u53d6\u6d88\u884c\u53f7 Linux vi/vim | \u83dc\u9e1f\u6559\u7a0b","title":"vim"},{"location":"dsp/%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/","text":"\u53c2\u8003\u8d44\u6599 \u6b66\u6c49\u5927\u5b66-\u6570\u5b57\u4fe1\u53f7\u5904\u7406 \u53f0\u6e7e\u5927\u5b66\u674e\u7433\u5c71-\u6570\u4f4d\u8bed\u97f3\u5904\u7406 An Introduction to Signal Processing for Speech \u7231\u4e01\u5821\u5927\u5b66\u8bfe\u4ef6","title":"\u53c2\u8003\u8d44\u6599"},{"location":"dsp/%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/#_1","text":"\u6b66\u6c49\u5927\u5b66-\u6570\u5b57\u4fe1\u53f7\u5904\u7406 \u53f0\u6e7e\u5927\u5b66\u674e\u7433\u5c71-\u6570\u4f4d\u8bed\u97f3\u5904\u7406 An Introduction to Signal Processing for Speech \u7231\u4e01\u5821\u5927\u5b66\u8bfe\u4ef6","title":"\u53c2\u8003\u8d44\u6599"},{"location":"dsp/%E8%AF%AD%E9%9F%B3%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/","text":"\u8bed\u97f3\u57fa\u672c\u6982\u5ff5 \u58f0\u6ce2\u901a\u8fc7\u7a7a\u6c14\u4f20\u64ad\uff0c\u88ab\u9ea6\u514b\u98ce\u63a5\u6536\uff0c\u901a\u8fc7 \u91c7\u6837 \u3001 \u91cf\u5316 \u3001 \u7f16\u7801 \u8f6c\u6362\u4e3a\u79bb\u6563\u7684\u6570\u5b57\u4fe1\u53f7\uff0c\u5373\u6ce2\u5f62\u6587\u4ef6\u3002\u97f3\u91cf\u3001\u97f3\u9ad8\u548c\u97f3\u8272\u662f\u58f0\u97f3\u7684\u57fa\u672c\u5c5e\u6027\u3002 \u8bed\u97f3\u5e38\u89c1\u7279\u5f81 \u80fd\u91cf \u97f3\u9891\u7684\u80fd\u91cf\u901a\u5e38\u6307\u7684\u662f\u65f6\u57df\u4e0a\u6bcf\u5e27\u7684\u80fd\u91cf\uff0c\u5e45\u5ea6\u7684\u5e73\u65b9\u3002\u5728\u7b80\u5355\u7684\u8bed\u97f3\u6d3b\u52a8\u68c0\u6d4b\uff08Voice Activity Detection\uff0cVAD\uff09\u4e2d\uff0c\u76f4\u63a5\u5229\u7528\u80fd\u91cf\u7279\u5f81\uff1a\u80fd\u91cf\u5927\u7684\u97f3\u9891\u7247\u6bb5\u662f\u8bed\u97f3\uff0c\u80fd\u91cf\u5c0f\u7684\u97f3\u9891\u7247\u6bb5\u662f\u975e\u8bed\u97f3\uff08\u5305\u62ec\u566a\u97f3\u3001\u9759\u97f3\u6bb5\u7b49\uff09\u3002\u8fd9\u79cdVAD\u7684\u5c40\u9650\u6027\u6bd4\u8f83\u5927\uff0c\u6b63\u786e\u7387\u4e5f\u4e0d\u9ad8\uff0c\u5bf9\u566a\u97f3\u975e\u5e38\u654f\u611f\u3002 \u77ed\u65f6\u80fd\u91cf \u77ed\u65f6\u80fd\u91cf\u4f53\u73b0\u7684\u662f\u4fe1\u53f7\u5728\u4e0d\u540c\u65f6\u523b\u7684\u5f3a\u5f31\u7a0b\u5ea6\u3002\u8bbe\u7b2cn\u5e27\u8bed\u97f3\u4fe1\u53f7\u7684\u77ed\u65f6\u80fd\u91cf\u7528 \\(E_n\\) \u8868\u793a\uff0c\u5219\u5176\u8ba1\u7b97\u516c\u5f0f\u4e3a\uff1a \\[ E_n=\\sum_{m=0}^{M-1}x_n^2(m) \\] \u4e0a\u5f0f\u4e2d\uff0c \\(M\\) \u4e3a\u5e27\u957f\uff0c \\(x_n(m)\\) \u4e3a\u8be5\u5e27\u4e2d\u7684\u6837\u672c\u70b9\u3002 \u58f0\u5f3a\u548c\u58f0\u5f3a\u7ea7 \u5355\u4f4d\u65f6\u95f4\u5185\u901a\u8fc7\u5782\u76f4\u4e8e\u58f0\u6ce2\u4f20\u64ad\u65b9\u5411\u7684\u5355\u4f4d\u9762\u79ef\u7684\u5e73\u5747\u58f0\u80fd\uff0c\u79f0\u4f5c\u58f0\u5f3a\uff0c\u58f0\u5f3a\u7528I\u8868\u793a\uff0c\u5355\u4f4d\u4e3a\u201c\u74e6/\u5e73\u7c73\u201d\uff08 \\(W/m^2\\) \uff09\u3002\u5b9e\u9a8c\u7814\u7a76\u8868\u660e\uff0c\u4eba\u5bf9\u58f0\u97f3\u7684\u5f3a\u5f31\u611f\u89c9\u5e76\u4e0d\u662f\u4e0e\u58f0\u5f3a\u6210\u6b63\u6bd4\uff0c\u800c\u662f\u4e0e\u5176\u5bf9\u6570\u6210\u6b63\u6bd4\uff0c\u6240\u4ee5\u4e00\u822c\u58f0\u5f3a\u7528\u58f0\u5f3a\u7ea7\uff08Sound Intensity Level\uff0cSIL\uff09\u6765\u8868\u793a\uff1a \\[ SIL=10{\\rm log}(\\frac{I}{I'}) \\] \u5176\u4e2d\uff0cI\u4e3a\u58f0\u5f3a\uff0c \\(I'=10e^{-12}w/m^2\\) \u79f0\u4e3a\u57fa\u672c\u58f0\u5f3a\uff0c\u58f0\u5f3a\u7ea7\u7684\u5e38\u7528\u5355\u4f4d\u662f\u5206\u8d1d(dB)\u3002 \u54cd\u5ea6 \u4e0e\u58f0\u5f3a\u4e0d\u540c\uff0c\u54cd\u5ea6\u662f\u4e00\u79cd\u4e3b\u89c2\u5fc3\u7406\u91cf\uff0c\u662f\u4eba\u7c7b\u4e3b\u89c2\u611f\u89c9\u5230\u7684\u58f0\u97f3\u5f3a\u5f31\u7a0b\u5ea6\uff0c\u53c8\u79f0\u97f3\u91cf\u3002 \u54cd\u5ea6\u4e0e\u58f0\u538b\u7ea7\uff08Sound Pressure Level\uff0cSPL\uff09\u3001\u9891\u7387\u548c\u53d1\u97f3\u65f6\u957f\u6709\u5173 \uff0c\u4e00\u822c\u6765\u8bf4\uff0c\u58f0\u97f3\u9891\u7387\u4e00\u5b9a\u65f6\uff0c\u58f0\u538b\u8d8a\u5f3a\uff0c\u54cd\u5ea6\u4e5f\u8d8a\u5927\u3002\u76f8\u540c\u7684\u58f0\u538b\uff0c\u9891\u7387\u4e0d\u540c\u65f6\uff0c\u54cd\u5ea6\u4e5f\u53ef\u80fd\u4e0d\u540c\u3002\u54cd\u5ea6\u7684\u5e38\u7528\u5355\u4f4d\u662f \u5b8b\uff08sone\uff09 \u3002 \u54cd\u5ea6\u82e5\u7528\u5bf9\u6570\u503c\u8868\u793a\uff0c\u5373\u4e3a\u54cd\u5ea6\u7ea7\uff0c\u54cd\u5ea6\u7ea7\u7684\u5e38\u7528\u5355\u4f4d\u4e3a \u65b9\uff08phon\uff09 \u3002\u5b9a\u4e491000Hz\u7eaf\u97f3\u4ea7\u751f\u76f8\u540c\u54cd\u5ea6\u65f6\uff0c\u5bf9\u5e94\u58f0\u538b\u7ea7\u7684\u6570\u503c\u30020 dB\u58f0\u538b\u7ea71000Hz\u7eaf\u97f3\u7684\u54cd\u5ea6\u7ea7\u5b9a\u4e49\u4e3a0 phon\uff0cn dB\u58f0\u538b\u7ea71000Hz\u7eaf\u97f3\u7684\u54cd\u5ea6\u7ea7\u5c31\u662fn phon\uff0c\u4e00\u4e2a60 phon \u7684\u7eaf\u97f3\uff0c\u548c\u4e00\u4e2a1000 Hz\u300160 dB \u58f0\u538b\u7ea7\uff08Sound Pressure Level\uff0cSPL\uff09\u7684\u7eaf\u97f3\uff0c\u6709\u7740\u76f8\u540c\u7684\u54cd\u5ea6\u3002\u5176\u5b83\u9891\u7387\u7684\u58f0\u538b\u7ea7\u4e0e\u54cd\u5ea6\u7684\u5bf9\u5e94\u5173\u7cfb\u53ef\u4ee5\u4ece\u5982\u4e0b\u56fe\u7b49\u54cd\u5ea6\u66f2\u7ebf\u67e5\u51fa\u3002 \u4e0a\u56fe\u7684\u7b49\u54cd\u66f2\u7ebf\u4e2d\uff0c\u6a2a\u5750\u6807\u4e3a\u9891\u7387\uff0c\u7eb5\u5750\u6807\u4e3a \u58f0\u538b\u7ea7 \uff0c\u5728\u540c\u4e00\u6761\u66f2\u7ebf\u4e0a\u6240\u6709\u9891\u7387\u548c\u58f0\u538b\u7684\u7ec4\u5408\uff0c\u90fd\u62e5\u6709\u76f8\u540c\u7684\u54cd\u5ea6\u3002\u6700\u4e0b\u9762\u7684\u66f2\u7ebf\u8868\u793a\u4eba\u7c7b\u80fd\u591f\u542c\u5230\u7684\u6700\u5c0f\u58f0\u97f3\u54cd\u5ea6\uff0c\u5373\u542c\u9608\u3002\u53c2\u89c1\uff1a Loudness \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u542c\u9608\u4e0a\u7684\u58f0\u97f3\u5982\u679c\u9891\u7387\u548c\u58f0\u5f3a\u90fd\u4e0d\u53d8\u3001\u65f6\u957f\u589e\u52a0\uff0c\u5b83\u7684\u54cd\u5ea6\u4e5f\u53ef\u80fd\u968f\u4e4b\u589e\u5927\u3002\u5728\u5177\u4f53\u7684\u8bed\u79cd\u4e2d\uff0c\u53ef\u4ee5\u6539\u53d8\u97f3\u9ad8\u3001\u97f3\u957f\u548c\u58f0\u5f3a\u7b49\uff0c\u4ece\u800c\u6539\u53d8\u67d0\u4e9b\u97f3\u8282\u6216\u8bed\u97f3\u6210\u5206\u7684\u54cd\u5ea6\uff0c\u5373\u8f7b\u91cd\u97f3\u3002\u4e0d\u540c\u7684\u8bed\u8a00\u4e2d\uff0c\u6539\u53d8\u54cd\u5ea6\u65f6\u6240\u4fa7\u91cd\u7684\u8981\u7d20\u4e0d\u540c\u3002\u6bd4\u5982\u6c49\u8bed\u666e\u901a\u8bdd\u4e2d\u54cd\u5ea6\u8f83\u5c0f\u7684\u8f7b\u58f0\uff0c\u4e3b\u8981\u662f\u9760\u7f29\u77ed\u97f3\u957f\u6765\u5b9e\u73b0\u7684\uff1b\u82f1\u8bed\u4e2d\u7684\u91cd\u97f3\u5219\u4f9d\u9760\u63d0\u9ad8\u97f3\u9ad8\uff0c\u6765\u63d0\u9ad8\u54cd\u5ea6\u3002\u53c2\u89c1\uff1a \u54cd\u5ea6 \u8fc7\u96f6\u7387 \u8fc7\u96f6\u7387\u4f53\u73b0\u7684\u662f\u4fe1\u53f7\u8fc7\u96f6\u70b9\u7684\u6b21\u6570\uff0c\u4f53\u73b0\u7684\u662f\u9891\u7387\u7279\u6027\u3002 \\[ Z_n=\\sum_{n=0}^{N-1}\\sum_{m=0}^{M-1}|{\\rm sgn}(x_n(m))-{\\rm sgn}(x_n(m-1))| \\] \u5176\u4e2d\uff0c \\(N\\) \u8868\u793a\u5e27\u6570\uff0c \\(M\\) \u8868\u793a\u6bcf\u4e00\u5e27\u4e2d\u7684\u6837\u672c\u70b9\u4e2a\u6570\uff0c \\({\\rm sgn()}\\) \u4e3a\u7b26\u53f7\u51fd\u6570\uff0c\u5373 \\[ {\\rm sgn}=\\left\\{\\begin{matrix} & 1,x \\geq 0 \\\\ & -1,x<0 \\end{matrix}\\right. \\] \u5171\u632f\u5cf0 \u58f0\u95e8\u5904\u7684\u51c6\u5468\u671f\u6fc0\u52b1\u8fdb\u5165\u58f0\u9053\u65f6\u4f1a\u5f15\u8d77\u5171\u632f\u7279\u6027\uff0c\u4ea7\u751f\u4e00\u7ec4\u5171\u632f\u9891\u7387\uff0c\u8fd9\u4e00\u7ec4\u5171\u632f\u9891\u7387\u79f0\u4e3a\u5171\u632f\u5cf0\u9891\u7387\u6216\u7b80\u79f0\u5171\u632f\u5cf0\u3002\u5171\u632f\u5cf0\u5305\u542b\u5728\u8bed\u97f3\u7684\u9891\u8c31\u5305\u7edc\u4e2d\uff0c\u9891\u8c31\u5305\u7edc\u7684\u5c40\u90e8\u6781\u5927\u503c\u5c31\u662f\u5171\u632f\u5cf0\u3002\u9891\u7387\u6700\u4f4e\u7684\u5171\u632f\u5cf0\u79f0\u4e3a\u7b2c\u4e00\u5171\u632f\u5cf0\uff0c\u8bb0\u4f5c \\(f_1\\) \uff0c\u9891\u7387\u66f4\u9ad8\u7684\u5171\u632f\u5cf0\u79f0\u4e3a\u7b2c\u4e8c\u5171\u632f\u5cf0 \\(f_2\\) \u3001\u7b2c\u4e09\u5171\u632f\u5cf0 \\(f_3\\) ......\u4ee5\u6b64\u7c7b\u63a8\u3002\u5b9e\u8df5\u4e2d\u4e00\u4e2a\u5143\u97f3\u7528\u4e09\u4e2a\u5171\u632f\u5cf0\u8868\u793a\uff0c\u590d\u6742\u7684\u8f85\u97f3\u6216\u9f3b\u97f3\uff0c\u8981\u7528\u4e94\u4e2a\u5171\u632f\u5cf0\u3002\u53c2\u89c1\uff1a \u4e0d\u540c\u5143\u97f3\u8f85\u97f3\u5728\u58f0\u97f3\u9891\u8c31\u7684\u8868\u73b0\u662f\u4ec0\u4e48\u6837\u5b50\uff1f \uff0c \u4ec0\u4e48\u662f\u5171\u632f\u5cf0\uff1f \u57fa\u9891\u548c\u57fa\u97f3\u5468\u671f \u57fa\u97f3\u5468\u671f\u53cd\u6620\u4e86\u58f0\u95e8\u76f8\u90bb\u4e24\u6b21\u5f00\u95ed\u4e4b\u95f4\u7684\u65f6\u95f4\u95f4\u9694\uff0c\u57fa\u9891\uff08fundamental frequency\uff0cf0/F0\uff09\u5219\u662f\u57fa\u97f3\u5468\u671f\u7684\u5012\u6570\uff0c\u5bf9\u5e94\u7740\u58f0\u5e26\u632f\u52a8\u7684\u9891\u7387\uff0c\u4ee3\u8868\u58f0\u97f3\u7684\u97f3\u9ad8\uff0c\u58f0\u5e26\u632f\u52a8\u8d8a\u5feb\uff0c\u57fa\u9891\u8d8a\u9ad8\u3002\u5b83\u662f\u8bed\u97f3\u6fc0\u52b1\u6e90\u7684\u4e00\u4e2a\u91cd\u8981\u7279\u5f81\uff0c\u6bd4\u5982\u53ef\u4ee5\u901a\u8fc7\u57fa\u9891\u533a\u5206\u6027\u522b\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u6210\u5e74\u7537\u6027\u57fa\u9891\u5728100 \\(\\sim\\) 250Hz\u5de6\u53f3\uff0c\u6210\u5e74\u5973\u6027\u57fa\u9891\u5728150 \\(\\sim\\) 350Hz\u5de6\u53f3\uff0c\u5973\u58f0\u7684\u97f3\u9ad8\u4e00\u822c\u6bd4\u7537\u58f0\u7a0d\u9ad8\u3002 \u5982\u4e0b\u56fe\u6240\u793a\uff0c\u84dd\u8272\u7bad\u5934\u6307\u5411\u7684\u660e\u4eae\u6a2a\u7ebf\u5bf9\u5e94\u9891\u7387\u5c31\u662f\u57fa\u9891\uff0c\u51b3\u5b9a\u97f3\u9ad8\uff1b\u800c\u7eff\u6846\u4e2d\u7684\u660e\u4eae\u6a2a\u7ebf\u7edf\u79f0\u4e3a\u8c10\u6ce2\u3002\u8c10\u6ce2\u662f\u57fa\u9891\u5bf9\u5e94\u7684\u6574\u6570\u6b21\u9891\u7387\u6210\u5206\uff0c\u7531\u58f0\u5e26\u53d1\u58f0\u5e26\u52a8\u7a7a\u6c14\u5171\u632f\u5f62\u6210\u7684\uff0c\u5bf9\u5e94\u7740\u58f0\u97f3\u4e09\u8981\u7d20\u7684\u97f3\u8272\u3002\u8c10\u6ce2\u7684\u4f4d\u7f6e\uff0c\u76f8\u90bb\u7684\u8ddd\u79bb\u5171\u540c\u5f62\u6210\u4e86\u97f3\u8272\u7279\u5f81\u3002\u8c10\u6ce2\u4e4b\u95f4\u8ddd\u79bb\u8fd1\u542c\u8d77\u6765\u5219\u504f\u539a\u7c97\uff0c\u4e4b\u95f4\u8ddd\u79bb\u8fdc\u542c\u8d77\u6765\u504f\u6e05\u6f88\u3002\u5728\u7537\u58f0\u53d8\u5973\u58f0\u7684\u65f6\u5019\uff0c\u9664\u4e86\u57fa\u9891\u7684\u79fb\u52a8\uff0c\u8fd8\u9700\u8981\u8c03\u6574\u8c10\u6ce2\u95f4\u7684\u5305\u7edc\uff0c\u8ddd\u79bb\u7b49\uff0c\u5426\u5219\u5c06\u4f1a\u4e22\u5931\u97f3\u8272\u4fe1\u606f\u3002 \u4eba\u7c7b\u53ef\u611f\u77e5\u58f0\u97f3\u7684\u9891\u7387\u5927\u81f4\u572820-20000Hz\u4e4b\u95f4\uff0c\u4eba\u7c7b\u5bf9\u4e8e\u57fa\u9891\u7684\u611f\u77e5\u9075\u5faa\u5bf9\u6570\u5f8b\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u4eba\u4eec\u4f1a\u611f\u89c9100Hz\u5230200Hz\u7684\u5dee\u8ddd\uff0c\u4e0e200Hz\u5230400Hz\u7684\u5dee\u8ddd\u76f8\u540c\u3002\u56e0\u6b64\uff0c\u97f3\u9ad8\u5e38\u5e38\u7528\u57fa\u9891\u7684\u5bf9\u6570\u6765\u8868\u793a\u3002\u5728\u97f3\u4e50\u4e0a\uff0c\u628a\u76f8\u5dee\u4e00\u500d\u7684\u4e24\u4e2a\u57fa\u9891\u7684\u5dee\u8ddd\u79f0\u4e3a\u4e00\u4e2a\u516b\u5ea6\uff08octave\uff09\uff1b\u628a\u4e00\u4e2a\u516b\u5ea612\u7b49\u5206\uff0c\u6bcf\u4e00\u4efd\u79f0\u4e3a\u4e00\u4e2a\u534a\u97f3\uff08semitone\uff09\uff1b\u628a\u4e00\u4e2a\u534a\u97f3\u518d100\u7b49\u5206\uff0c\u6bcf\u4e00\u4efd\u79f0\u4e3a\u4e00\u4e2a\u97f3\u5206\uff08cent\uff09\u3002 \u57fa\u9891\u662f\u8bed\u97f3\u7684\u91cd\u8981\u7279\u5f81\uff0c\u5728\u5305\u62ec\u8bed\u97f3\u5408\u6210\u7684\u8bed\u97f3\u5904\u7406\u4e2d\u6709\u7740\u5e7f\u6cdb\u7684\u5e94\u7528\uff0c\u6bd4\u5982\u8bed\u97f3\u8f6c\u6362\uff08Voice Conversion\uff0cVC\uff09\u548c\u8bed\u97f3\u5408\u6210\u4e2d\u57fa\u9891\u662f\u4e00\u4e2a\u5f3a\u7279\u5f81\u3002\u57fa\u9891\u7684\u63d0\u53d6\u53ef\u4ee5\u5206\u4e3a\u65f6\u57df\u6cd5\u548c\u9891\u57df\u6cd5\u3002\u65f6\u57df\u6cd5\u4ee5\u6ce2\u5f62\u4e3a\u8f93\u5165\uff0c\u57fa\u672c\u539f\u7406\u662f\u5bfb\u627e\u6ce2\u5f62\u7684\u6700\u5c0f\u6b63\u5468\u671f\uff1b\u9891\u57df\u6cd5\u5219\u4f1a\u5148\u5bf9\u4fe1\u53f7\u8fdb\u884c\u5085\u91cc\u53f6\u53d8\u6362\uff0c\u5f97\u5230\u9891\u8c31\uff0c\u9891\u8c31\u5728\u57fa\u9891\u7684\u6574\u500d\u6570\u5904\u6709\u5c16\u5cf0\uff0c\u9891\u57df\u6cd5\u7684\u57fa\u672c\u539f\u7406\u5c31\u662f\u6c42\u51fa\u8fd9\u4e9b\u5c16\u5cf0\u9891\u7387\u7684\u6700\u5927\u516c\u7ea6\u6570\u3002\u4f46\u662f\u8003\u8651\u5230\u57fa\u9891\u5e76\u975e\u6bcf\u4e00\u5e27\u90fd\u6709\uff0c\u56e0\u6b64\u5728\u63d0\u53d6\u57fa\u9891\u524d\u540e\uff0c\u90fd\u9700\u8981\u5224\u65ad\u6709\u65e0\u57fa\u9891\uff0c\u79f0\u4e4b\u4e3a\u6e05\u6d4a\u97f3\u5224\u65ad\uff08Unvoiced/Voiced Decision\uff0cU/V Decision\uff09\u3002\u8bed\u97f3\u7684\u57fa\u9891\u5f80\u5f80\u968f\u7740\u65f6\u95f4\u53d8\u5316\uff0c\u5728\u63d0\u53d6\u57fa\u9891\u4e4b\u524d\u5f80\u5f80\u8981\u8fdb\u884c\u5206\u5e27\uff0c\u9010\u5e27\u63d0\u53d6\u7684\u57fa\u9891\u5e38\u5e38\u542b\u6709\u9519\u8bef\uff0c\u5176\u4e2d\u5e38\u89c1\u7684\u9519\u8bef\u5c31\u662f\u500d\u9891\u9519\u8bef\u548c\u534a\u9891\u9519\u8bef\uff0c\u4e5f\u5c31\u662f\u63d0\u53d6\u51fa\u6765\u7684\u57fa\u9891\u662f\u771f\u5b9e\u57fa\u9891\u7684\u4e24\u500d\u6216\u8005\u4e00\u534a\uff0c\u56e0\u6b64\u57fa\u9891\u63d0\u53d6\u540e\u8981\u8fdb\u884c\u5e73\u6ed1\u64cd\u4f5c\u3002\u5e38\u89c1\u7684\u57fa\u9891\u63d0\u53d6\u7b97\u6cd5\u6709\u57fa\u4e8e\u4fe1\u53f7\u5904\u7406\u65f6\u57df\u6cd5\u7684YIN\uff0c\u57fa\u4e8e\u4fe1\u53f7\u5904\u7406\u9891\u57df\u6cd5\u7684SWIPE\uff0c\u57fa\u4e8e\u673a\u5668\u5b66\u4e60\u65f6\u57df\u6cd5\u7684CREPE\u548c\u57fa\u4e8e\u673a\u5668\u5b66\u4e60\u9891\u57df\u6cd5\u7684SPICE\u3002\u5e38\u7528\u7684\u57fa\u9891\u63d0\u53d6\u5de5\u5177\u6709 pyWORLD \uff0c Parselmouth \uff0c CREPE \uff0c YIN \u7b49\u3002\u53c2\u89c1 \u57fa\u9891\u63d0\u53d6\u7b97\u6cd5\u7efc\u8ff0 \u3002 A. de Cheveign\u00e9 and H. Kawahara, \"YIN, a fundamental frequency estimator for speech and music\", Journal of the Acoustical Society of America, 2002. A. Camacho and J. G. Harris, \"A sawtooth waveform inspired pitch estimator for speech and music\", Journal of the Acoustical Society of America, 2008. J. W. Kim, et al., \"CREPE: A convolutional representation for pitch estimation\", ICASSP, 2018. B. Gfeller, et al., \"SPICE: Self-supervised pitch estimation\", IEEE Transactions on Audio, Speech and Language Processing, 2020. \u97f3\u9ad8 \u97f3\u9ad8\uff08pitch\uff09\u662f\u7531\u58f0\u97f3\u7684\u57fa\u9891\u51b3\u5b9a\u7684\uff0c\u97f3\u9ad8\u548c\u57fa\u9891\u5e38\u5e38\u6df7\u7528\u3002\u53ef\u4ee5\u8fd9\u6837\u8ba4\u4e3a\uff0c\u97f3\u9ad8\uff08pitch\uff09\u662f\u7a00\u758f\u79bb\u6563\u5316\u7684\u57fa\u9891\uff08F0\uff09\u3002\u7531\u89c4\u5f8b\u632f\u52a8\u4ea7\u751f\u7684\u58f0\u97f3\u4e00\u822c\u90fd\u4f1a\u6709\u57fa\u9891\uff0c\u6bd4\u5982\u8bed\u97f3\u4e2d\u7684\u5143\u97f3\u548c\u6d4a\u8f85\u97f3\uff1b\u4e5f\u6709\u4e9b\u58f0\u97f3\u6ca1\u6709\u57fa\u9891\uff0c\u6bd4\u5982\u4eba\u7c7b\u901a\u8fc7\u53e3\u8154\u6324\u538b\u6c14\u6d41\u7684\u6e05\u8f85\u97f3\u3002\u5728\u6c49\u8bed\u4e2d\uff0c\u5143\u97f3\u6709a/e/i/o/u\uff0c\u6d4a\u8f85\u97f3\u6709y/w/v\uff0c\u5176\u4f59\u97f3\u7d20\u6bd4\u5982b/p/q/x\u7b49\u5747\u4e3a\u6e05\u8f85\u97f3\uff0c\u5728\u53d1\u97f3\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7\u89e6\u6478\u5589\u5499\u611f\u53d7\u548c\u5224\u65ad\u53d1\u97f3\u6240\u5c5e\u97f3\u7d20\u7684\u79cd\u7c7b\u3002 MFCC\u548c\u8bed\u8c31\u56fe \u5bf9\u8bed\u97f3\u8fdb\u884c\u5206\u6790\u548c\u5904\u7406\u65f6\uff0c\u90e8\u5206\u4fe1\u606f\u5728\u65f6\u57df\u4e0a\u96be\u4ee5\u5206\u6790\uff0c\u56e0\u6b64\u5f80\u5f80\u4f1a\u63d0\u53d6\u9891\u8c31\u7279\u5f81\u3002\u5728\u8bed\u97f3\u5408\u6210\u4e2d\uff0c\u901a\u5e38\u5c06\u9891\u8c31\u4f5c\u4e3a\u4e2d\u95f4\u58f0\u5b66\u7279\u5f81\uff1a\u9996\u5148\u5c06\u6587\u672c\u8f6c\u6362\u4e3a\u9891\u8c31\uff0c\u518d\u5c06\u9891\u8c31\u8f6c\u6362\u4e3a\u6ce2\u5f62\uff1b\u5728\u8bed\u97f3\u8bc6\u522b\u4e2d\uff0c\u5219\u5c06\u9891\u8c31\u6216\u8005MFCC\u4f5c\u4e3a\u4e2d\u95f4\u58f0\u5b66\u7279\u5f81\u3002\u8bed\u97f3\u901a\u8fc7\u9884\u52a0\u91cd\u3001\u5206\u5e27\u3001\u52a0\u7a97\u3001\u5085\u91cc\u53f6\u53d8\u6362\u4e4b\u540e\uff0c\u53d6\u529f\u7387\u8c31\u7684\u5e45\u5ea6\u5e73\u65b9\uff0c\u8fdb\u884c\u6885\u5c14\u6ee4\u6ce2\u53d6\u5bf9\u6570\u4e4b\u540e\uff0c\u5c31\u5f97\u5230\u4e86\u6885\u5c14\u9891\u8c31\uff08\u6216\u79f0FilterBank/FBank\uff09\uff0c\u5982\u679c\u518d\u8fdb\u884c\u79bb\u6563\u4f59\u5f26\u53d8\u6362\uff0c\u5c31\u80fd\u591f\u83b7\u5f97MFCC\uff0c\u4e0b\u4e00\u7ae0\u5c06\u8fdb\u884c\u8be6\u8ff0\u3002\u8bed\u97f3\u901a\u5e38\u662f\u4e00\u4e2a\u77ed\u65f6\u5e73\u7a33\u4fe1\u53f7\uff0c\u5728\u8fdb\u884c\u5085\u91cc\u53f6\u53d8\u6362\u4e4b\u524d\uff0c\u4e00\u822c\u8981\u8fdb\u884c\u5206\u5e27\uff0c\u53d6\u97f3\u9891\u7684\u4e00\u4e2a\u5c0f\u7247\u6bb5\u8fdb\u884c\u77ed\u65f6\u5085\u91cc\u53f6\u53d8\u6362\uff08STFT\uff09\u3002STFT\u7684\u7ed3\u679c\u662f\u4e00\u4e2a\u590d\u6570\uff0c\u5305\u62ec\u5e45\u5ea6\u548c\u76f8\u4f4d\u4fe1\u606f\uff0c\u5c06\u8be5\u590d\u6570\u4e2d\u7684\u9891\u7387\u4f5c\u4e3a\u6a2a\u8f74\uff0c\u5e45\u5ea6\u4f5c\u4e3a\u7eb5\u8f74\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u5c31\u7ec4\u6210\u4e86\u9891\u8c31\u56fe\uff0c\u5c06\u9891\u8c31\u56fe\u4e2d\u7684\u5c16\u5cf0\u70b9\u8fde\u63a5\u8d77\u6765\uff0c\u5c31\u5f62\u6210\u4e86\u9891\u8c31\u5305\u7edc\u3002\u6ce8\u610f\u5230\uff0c\u9891\u8c31\u56fe\u53cd\u6620\u4e00\u4e2a\u8bed\u97f3\u5e27\u7684\u9891\u57df\u60c5\u51b5\uff0c\u6ca1\u6709\u65f6\u95f4\u4fe1\u606f\u3002\u56e0\u6b64\uff0c\u5c06\u6bcf\u4e2a\u5e27\u5bf9\u5e94\u7684\u9891\u8c31\u56fe\u8fde\u63a5\u8d77\u6765\uff0c\u4ee5\u65f6\u95f4\u4f5c\u4e3a\u6a2a\u8f74\uff0c\u9891\u7387\u4f5c\u4e3a\u7eb5\u8f74\uff0c\u989c\u8272\u6df1\u6d45\u8868\u793a\u5e45\u5ea6\uff0c\u5982\u4e0b\u56fe\u7684\u7ea2\u56fe\u6240\u793a\uff0c\u5c31\u7ec4\u6210\u4e86\u8bed\u8c31\u56fe\u3002\u8bed\u8c31\u56fe\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u4e09\u7ef4\u56fe\uff0c\u6a2a\u8f74\u65f6\u95f4\uff0c\u7eb5\u8f74\u9891\u7387\uff0c\u989c\u8272\u6df1\u6d45\u8868\u793a\u5e45\u5ea6\u5927\u5c0f\uff0c\u4e00\u822c\u6765\u8bf4\uff0c\u989c\u8272\u8d8a\u6df1\uff0c\u8868\u793a\u5e45\u5ea6\u503c\u8d8a\u5927\u3002 \u97f3\u9891\u683c\u5f0f *.wav : \u6ce2\u5f62\u65e0\u635f\u538b\u7f29\u683c\u5f0f\uff0c\u662f\u8bed\u97f3\u5408\u6210\u4e2d\u97f3\u9891\u8bed\u6599\u7684\u5e38\u7528\u683c\u5f0f\uff0c\u4e3b\u8981\u7684\u4e09\u4e2a\u53c2\u6570\uff1a\u91c7\u6837\u7387\uff0c\u91cf\u5316\u4f4d\u6570\u548c\u901a\u9053\u6570\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u5408\u6210\u8bed\u97f3\u7684\u91c7\u6837\u7387\u91c7\u752816kHz\u300122050Hz\u300124kHz\uff0c\u5bf9\u4e8e\u6b4c\u5531\u5408\u6210\u7b49\u9ad8\u8d28\u91cf\u5408\u6210\u573a\u666f\u91c7\u6837\u7387\u53ef\u8fbe\u523048kHz\uff1b\u91cf\u5316\u4f4d\u6570\u91c7\u752816bit\uff1b\u901a\u9053\u6570\u91c7\u75281. *.flac : Free Lossless Audio Codec\uff0c\u65e0\u635f\u97f3\u9891\u538b\u7f29\u7f16\u7801\u3002 *.mp3 : Moving Picture Experts Group Audio Player III\uff0c\u6709\u635f\u538b\u7f29\u3002 *.wma : Window Media Audio\uff0c\u6709\u635f\u538b\u7f29\u3002 *.avi : Audio Video Interleaved\uff0cavi\u6587\u4ef6\u5c06\u97f3\u9891\u548c\u89c6\u9891\u5305\u542b\u5728\u4e00\u4e2a\u6587\u4ef6\u5bb9\u5668\u4e2d\uff0c\u5141\u8bb8\u97f3\u89c6\u9891\u540c\u6b65\u64ad\u653e\u3002 \u6570\u5b57\u4fe1\u53f7\u5904\u7406 \u6a21\u6570\u8f6c\u6362 \u6a21\u62df\u4fe1\u53f7\u5230\u6570\u5b57\u4fe1\u53f7\u7684\u8f6c\u6362\uff08Analog to Digital Converter\uff0cADC\uff09\u79f0\u4e3a\u6a21\u6570\u8f6c\u6362\u3002 \u5948\u594e\u65af\u7279\u91c7\u6837\u5b9a\u7406\uff1a\u8981\u4ece\u62bd\u6837\u4fe1\u53f7\u4e2d\u65e0\u5931\u771f\u5730\u6062\u590d\u539f\u4fe1\u53f7\uff0c\u62bd\u6837\u9891\u7387\u5e94\u5927\u4e8e2\u500d\u4fe1\u53f7\u6700\u9ad8\u9891\u7387\u3002\u62bd\u6837\u9891\u7387\u5c0f\u4e8e2\u500d\u9891\u8c31\u6700\u9ad8\u9891\u7387\u65f6\uff0c\u4fe1\u53f7\u7684\u9891\u8c31\u6709\u6df7\u53e0\u3002\u62bd\u6837\u9891\u7387\u5927\u4e8e2\u500d\u9891\u8c31\u6700\u9ad8\u9891\u7387\u65f6\uff0c\u4fe1\u53f7\u7684\u9891\u8c31\u65e0\u6df7\u53e0\u3002\u5982\u679c\u5bf9\u8bed\u97f3\u6a21\u62df\u4fe1\u53f7\u8fdb\u884c\u91c7\u6837\u7387\u4e3a16000Hz\u7684\u91c7\u6837\uff0c\u5f97\u5230\u7684\u79bb\u6563\u4fe1\u53f7\u4e2d\u5305\u542b\u7684\u6700\u5927\u9891\u7387\u4e3a8000Hz\u3002 \u9891\u8c31\u6cc4\u9732 \u97f3\u9891\u5904\u7406\u4e2d\uff0c\u7ecf\u5e38\u9700\u8981\u5229\u7528\u5085\u91cc\u53f6\u53d8\u6362\u5c06\u65f6\u57df\u4fe1\u53f7\u8f6c\u6362\u5230\u9891\u57df\uff0c\u800c\u4e00\u6b21\u5feb\u901f\u5085\u91cc\u53f6\u53d8\u6362\uff08FFT\uff09\u53ea\u80fd\u5904\u7406\u6709\u9650\u957f\u7684\u65f6\u57df\u4fe1\u53f7\uff0c\u4f46\u8bed\u97f3\u4fe1\u53f7\u901a\u5e38\u662f\u957f\u7684\uff0c\u6240\u4ee5\u9700\u8981\u5c06\u539f\u59cb\u8bed\u97f3\u622a\u65ad\u6210\u4e00\u5e27\u4e00\u5e27\u957f\u5ea6\u7684\u6570\u636e\u5757\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u53eb \u4fe1\u53f7\u622a\u65ad \uff0c\u4e5f\u53eb \u5206\u5e27 \u3002\u5206\u5b8c\u5e27\u540e\u518d\u5bf9\u6bcf\u5e27\u505aFFT\uff0c\u5f97\u5230\u5bf9\u5e94\u7684\u9891\u57df\u4fe1\u53f7\u3002FFT\u662f\u79bb\u6563\u5085\u91cc\u53f6\u53d8\u6362\uff08DFT\uff09\u7684\u5feb\u901f\u8ba1\u7b97\u65b9\u5f0f\uff0c\u800c\u505aDFT\u6709\u4e00\u4e2a\u5148\u9a8c\u6761\u4ef6\uff1a\u5206\u5e27\u5f97\u5230\u7684\u6570\u636e\u5757\u5fc5\u987b\u662f\u6574\u6570\u5468\u671f\u7684\u4fe1\u53f7\uff0c\u4e5f\u5373\u662f\u6bcf\u6b21\u622a\u65ad\u5f97\u5230\u7684\u4fe1\u53f7\u8981\u6c42\u662f\u5468\u671f\u4e3b\u503c\u5e8f\u5217\u3002 \u4f46\u505a\u5206\u5e27\u65f6\uff0c\u5f88\u96be\u6ee1\u8db3 \u5468\u671f\u622a\u65ad \uff0c\u56e0\u6b64\u5c31\u4f1a\u5bfc\u81f4 \u9891\u8c31\u6cc4\u9732 \u3002\u8981\u89e3\u51b3\u975e\u5468\u671f\u622a\u65ad\u5bfc\u81f4\u7684\u9891\u8c31\u6cc4\u9732\u662f\u6bd4\u8f83\u56f0\u96be\u7684\uff0c\u53ef\u4ee5\u901a\u8fc7 \u52a0\u7a97 \u5c3d\u53ef\u80fd\u51cf\u5c11\u9891\u8c31\u6cc4\u9732\u5e26\u6765\u7684\u5f71\u54cd\u3002\u7a97\u7c7b\u578b\u53ef\u4ee5\u5206\u4e3a\u6c49\u5b81\u7a97\u3001\u6c49\u660e\u7a97\u3001\u5e73\u9876\u7a97\u7b49\u3002\u867d\u7136\u52a0\u7a97\u80fd\u591f\u51cf\u5c11\u9891\u8c31\u6cc4\u9732\uff0c\u4f46\u52a0\u7a97\u8870\u51cf\u4e86\u6bcf\u5e27\u4fe1\u53f7\u7684\u80fd\u91cf\uff0c\u7279\u522b\u662f\u8fb9\u754c\u5904\u7684\u80fd\u91cf\uff0c\u8fd9\u65f6\u52a0\u4e00\u4e2a\u5408\u6210\u7a97\uff0c\u4e14overlap-add\uff0c\u4fbf\u53ef\u4ee5\u8865\u56de\u80fd\u91cf\u3002\u53c2\u89c1\uff1a \u9891\u8c31\u6cc4\u9732\u548c\u52a0\u7a97 \u3002 \u9891\u7387\u5206\u8fa8\u7387 \u9891\u7387\u5206\u8fa8\u7387\u662f\u6307\u5c06\u4e24\u4e2a\u76f8\u90bb\u8c31\u5cf0\u5206\u5f00\u7684\u80fd\u529b\uff0c\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u662f\u6307\u5206\u8fa8\u4e24\u4e2a\u4e0d\u540c\u9891\u7387\u4fe1\u53f7\u7684\u6700\u5c0f\u95f4\u9694\u3002 \u5176\u5b83\u6982\u5ff5 \u6ce2\u5f62\uff08waveform\uff09\uff1a \u58f0\u97f3\u662f\u7531\u58f0\u6e90\u632f\u52a8\u4ea7\u751f\u7684\u6ce2\u3002 \u4fe1\u9053\uff1a\u901a\u4fe1\u7684\u901a\u9053Channel\uff0c\u662f\u4fe1\u53f7\u4f20\u8f93\u7684\u5a92\u4ecb\u3002 \u58f0\u9053\uff1a\u58f0\u97f3\u5728\u5f55\u5236\u548c\u64ad\u653e\u65f6\uff0c\u5728\u4e0d\u540c\u7a7a\u95f4\u4f4d\u7f6e\u91c7\u96c6\u6216\u56de\u653e\u76f8\u4e92\u72ec\u7acb\u7684\u97f3\u9891\u4fe1\u53f7\uff0c\u56e0\u6b64\u58f0\u9053\u6570\u4e5f\u5c31\u662f\u58f0\u97f3\u5f55\u5236\u65f6\u7684\u97f3\u6e90\u6570\u91cf\u6216\u56de\u653e\u65f6\u76f8\u5e94\u7684\u626c\u58f0\u5668\u6570\u91cf\u3002 \u91c7\u6837\u7387\uff1a\u5355\u4f4d\u65f6\u95f4\u5185\u4ece\u8fde\u7eed\u4fe1\u53f7\u4e2d\u63d0\u53d6\u5e76\u7ec4\u6210\u79bb\u6563\u4fe1\u53f7\u7684\u91c7\u6837\u4e2a\u6570\uff0c\u97f3\u9891\u5e38\u7528\u5355\u4f4dkHz\u3002 \u91c7\u6837\u4f4d\u6570/\u91c7\u6837\u6df1\u5ea6\uff1a\u6570\u5b57\u4fe1\u53f7\u7684\u4e8c\u8fdb\u5236\u4f4d\u6570\uff0c\u4e0e\u6bcf\u6b21\u91c7\u6837\u7684\u53ef\u80fd\u503c\u4e2a\u6570\u6709\u5173\uff0c\u97f3\u9891\u5e38\u7528\u5355\u4f4dbit\u3002\u5e38\u89c1\u7684\u97f3\u9891\u683c\u5f0f\uff0c\u6bd4\u5982 16kHz\uff0c16bit \u4e2d16kHz\u6307\u7684\u662f\u91c7\u6837\u7387\uff0c16bit\u8868\u793a\u91c7\u6837\u4f4d\u6df1\u3002 \u4fe1\u566a\u6bd4\uff08SNR\uff09\uff1a\u548c\u58f0\u538b\u7ea7\u7c7b\u4f3c\uff0c\u5355\u4f4d\u4ecd\u91c7\u7528\u5206\u8d1d\uff0c\u6570\u503c\u8d8a\u9ad8\uff0c\u8868\u793a\u58f0\u97f3\u8d8a\u5e72\u51c0\uff0c\u566a\u97f3\u6bd4\u4f8b\u8d8a\u5c0f\u3002 LPC\u3002\u7ebf\u6027\u9884\u6d4b\u7cfb\u6570\u3002LPC\u7684\u57fa\u672c\u601d\u60f3\u662f\uff0c\u5f53\u524d\u65f6\u523b\u7684\u4fe1\u53f7\u53ef\u4ee5\u7528\u82e5\u5e72\u5386\u53f2\u65f6\u523b\u4fe1\u53f7\u7684\u7ebf\u6027\u7ec4\u5408\u6765\u4f30\u8ba1\uff0c\u901a\u8fc7\u4f7f\u5b9e\u9645\u8bed\u97f3\u7684\u91c7\u6837\u503c\u548c\u7ebf\u6027\u9884\u6d4b\u7684\u91c7\u6837\u503c\u4e4b\u95f4\u8fbe\u5230\u5747\u65b9\u5dee\u6700\u5c0f\uff0c\u5373\u53ef\u5f97\u5230\u4e00\u7ec4\u7ebf\u6027\u9884\u6d4b\u7cfb\u6570\u3002\u6c42\u89e3LPC\u7cfb\u6570\u53ef\u4ee5\u91c7\u7528\u81ea\u76f8\u5173\u6cd5\u3001\u534f\u65b9\u5dee\u6cd5\u3001\u683c\u578b\u6cd5\u7b49\u5feb\u901f\u7b97\u6cd5\u3002 \u8bed\u97f3\u4fe1\u53f7\u7684\u6570\u5b57\u8868\u793a\u53ef\u4ee5\u5206\u4e3a\u4e24\u7c7b\uff1a \u6ce2\u5f62\u8868\u793a \u548c \u53c2\u6570\u8868\u793a \uff0c\u6ce2\u5f62\u8868\u793a\u4ec5\u901a\u8fc7\u91c7\u6837\u548c\u91cf\u5316\u4fdd\u5b58\u6a21\u62df\u4fe1\u53f7\u7684\u6ce2\u5f62\uff1b\u800c\u53c2\u6570\u8868\u793a\u5c06\u8bed\u97f3\u4fe1\u53f7\u8868\u793a\u4e3a\u67d0\u79cd\u8bed\u97f3\u4ea7\u751f\u6a21\u578b\u7684\u8f93\u51fa\uff0c\u662f\u5bf9\u6570\u5b57\u5316\u8bed\u97f3\u8fdb\u884c\u5206\u6790\u548c\u5904\u7406\u4e4b\u540e\u5f97\u5230\u7684\u3002 \u5229\u7528\u540c\u6001\u5904\u7406\u65b9\u6cd5\uff0c\u5bf9\u8bed\u97f3\u4fe1\u53f7\u6c42\u79bb\u6563\u5085\u91cc\u53f6\u53d8\u6362\u4e4b\u540e\u53d6\u5bf9\u6570\uff0c\u518d\u6c42\u53cd\u53d8\u6362\u5c31\u53ef\u4ee5\u5f97\u5230\u5012\u8c31\u7cfb\u6570\u3002\u5176\u4e2d\uff0cLPC\u5012\u8c31\uff08LPCCEP\uff09\u662f\u5efa\u7acb\u5728LPC\u8c31\u4e0a\u7684\uff0c\u800c\u6885\u5c14\u5012\u8c31\u7cfb\u6570\uff08Mel Frequency Cepstrum Coefficient\uff0cMFCC\uff09\u5219\u662f\u57fa\u4e8e\u6885\u5c14\u9891\u8c31\u7684\u3002 LPCC\u3002LPCC\u7279\u5f81\u5047\u5b9a\u4fe1\u53f7\u5b58\u5728\u4e00\u79cd\u7ebf\u6027\u9884\u6d4b\u7684\u7ed3\u6784\uff0c\u8fd9\u5bf9\u4e8e\u5468\u671f\u7279\u6027\u7684\u6d4a\u97f3\u63cf\u8ff0\u6bd4\u8f83\u51c6\u786e\uff0c\u800c\u5bf9\u4e8e\u8f85\u97f3\u5219\u76f8\u5f53\u4e8e\u5f3a\u52a0\u4e86\u4e00\u79cd\u9519\u8bef\u7684\u7ed3\u6784\u3002MFCC\u76f8\u90bb\u5e27\u7279\u5f81\u8fd1\u4e4e\u72ec\u7acb\uff0c\u6240\u4ee5\u80fd\u591f\u6bd4\u8f83\u597d\u5730\u63cf\u8ff0\u8f85\u97f3\uff0c\u4f46\u5ffd\u7565\u4e86\u4fe1\u53f7\u53ef\u80fd\u7684\u5185\u5728\u7ed3\u6784\uff0c\u5982\u76f8\u90bb\u5e27\u4e4b\u95f4\u7684\u5173\u8054\uff0c\u7ecf\u9a8c\u8868\u660eMFCC\u66f4\u597d\u7528\uff0c\u5e76\u4e14\u7ecf\u5e38\u4f1a\u52a0\u5165\u5dee\u5206\u7279\u5f81\u4ee5\u51cf\u5f31\u5176\u72ec\u7acb\u6027\u3002 \u7ebf\u6027\u9884\u6d4b\u5012\u8c31\u7cfb\u6570\uff08LPCC\uff09\u662f\u6839\u636e\u58f0\u7ba1\u6a21\u578b\u5efa\u7acb\u7684\u7279\u5f81\u53c2\u6570\uff0c\u662f\u5bf9\u58f0\u9053\u54cd\u5e94\u7684\u7279\u5f81\u8868\u5f81\u3002\u6885\u5c14\u9891\u8c31\u5012\u8c31\u7cfb\u6570\uff08MFCC\uff09\u662f\u57fa\u4e8e\u4eba\u7c7b\u542c\u89c9\u673a\u7406\u63d0\u53d6\u51fa\u7684\u7279\u5f81\u53c2\u6570\uff0c\u662f\u5bf9\u4eba\u8033\u542c\u89c9\u7684\u7279\u5f81\u8868\u5f81\u3002 \u5bf9\u4e8e\u4e00\u6bb51\u79d2\u7684\u6ce2\u5f62\uff0c\u5047\u8bbe\u91c7\u6837\u738716kHz\uff0c\u91c7\u6837\u4f4d\u6df116bit\uff0c\u5219\u5305\u542b\u6837\u672c\u70b9 \\(1\\times 16000=16000\\) \u4e2a\uff0c\u6240\u5360\u5bb9\u91cf \\(1\\times 16000\\times 16 /8=32000\\) \u5b57\u8282\uff08B\uff09\u3002","title":"\u8bed\u97f3\u57fa\u672c\u6982\u5ff5"},{"location":"dsp/%E8%AF%AD%E9%9F%B3%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/#_1","text":"\u58f0\u6ce2\u901a\u8fc7\u7a7a\u6c14\u4f20\u64ad\uff0c\u88ab\u9ea6\u514b\u98ce\u63a5\u6536\uff0c\u901a\u8fc7 \u91c7\u6837 \u3001 \u91cf\u5316 \u3001 \u7f16\u7801 \u8f6c\u6362\u4e3a\u79bb\u6563\u7684\u6570\u5b57\u4fe1\u53f7\uff0c\u5373\u6ce2\u5f62\u6587\u4ef6\u3002\u97f3\u91cf\u3001\u97f3\u9ad8\u548c\u97f3\u8272\u662f\u58f0\u97f3\u7684\u57fa\u672c\u5c5e\u6027\u3002","title":"\u8bed\u97f3\u57fa\u672c\u6982\u5ff5"},{"location":"dsp/%E8%AF%AD%E9%9F%B3%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/#_2","text":"","title":"\u8bed\u97f3\u5e38\u89c1\u7279\u5f81"},{"location":"dsp/%E8%AF%AD%E9%9F%B3%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/#_3","text":"\u97f3\u9891\u7684\u80fd\u91cf\u901a\u5e38\u6307\u7684\u662f\u65f6\u57df\u4e0a\u6bcf\u5e27\u7684\u80fd\u91cf\uff0c\u5e45\u5ea6\u7684\u5e73\u65b9\u3002\u5728\u7b80\u5355\u7684\u8bed\u97f3\u6d3b\u52a8\u68c0\u6d4b\uff08Voice Activity Detection\uff0cVAD\uff09\u4e2d\uff0c\u76f4\u63a5\u5229\u7528\u80fd\u91cf\u7279\u5f81\uff1a\u80fd\u91cf\u5927\u7684\u97f3\u9891\u7247\u6bb5\u662f\u8bed\u97f3\uff0c\u80fd\u91cf\u5c0f\u7684\u97f3\u9891\u7247\u6bb5\u662f\u975e\u8bed\u97f3\uff08\u5305\u62ec\u566a\u97f3\u3001\u9759\u97f3\u6bb5\u7b49\uff09\u3002\u8fd9\u79cdVAD\u7684\u5c40\u9650\u6027\u6bd4\u8f83\u5927\uff0c\u6b63\u786e\u7387\u4e5f\u4e0d\u9ad8\uff0c\u5bf9\u566a\u97f3\u975e\u5e38\u654f\u611f\u3002","title":"\u80fd\u91cf"},{"location":"dsp/%E8%AF%AD%E9%9F%B3%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/#_4","text":"\u77ed\u65f6\u80fd\u91cf\u4f53\u73b0\u7684\u662f\u4fe1\u53f7\u5728\u4e0d\u540c\u65f6\u523b\u7684\u5f3a\u5f31\u7a0b\u5ea6\u3002\u8bbe\u7b2cn\u5e27\u8bed\u97f3\u4fe1\u53f7\u7684\u77ed\u65f6\u80fd\u91cf\u7528 \\(E_n\\) \u8868\u793a\uff0c\u5219\u5176\u8ba1\u7b97\u516c\u5f0f\u4e3a\uff1a \\[ E_n=\\sum_{m=0}^{M-1}x_n^2(m) \\] \u4e0a\u5f0f\u4e2d\uff0c \\(M\\) \u4e3a\u5e27\u957f\uff0c \\(x_n(m)\\) \u4e3a\u8be5\u5e27\u4e2d\u7684\u6837\u672c\u70b9\u3002","title":"\u77ed\u65f6\u80fd\u91cf"},{"location":"dsp/%E8%AF%AD%E9%9F%B3%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/#_5","text":"\u5355\u4f4d\u65f6\u95f4\u5185\u901a\u8fc7\u5782\u76f4\u4e8e\u58f0\u6ce2\u4f20\u64ad\u65b9\u5411\u7684\u5355\u4f4d\u9762\u79ef\u7684\u5e73\u5747\u58f0\u80fd\uff0c\u79f0\u4f5c\u58f0\u5f3a\uff0c\u58f0\u5f3a\u7528I\u8868\u793a\uff0c\u5355\u4f4d\u4e3a\u201c\u74e6/\u5e73\u7c73\u201d\uff08 \\(W/m^2\\) \uff09\u3002\u5b9e\u9a8c\u7814\u7a76\u8868\u660e\uff0c\u4eba\u5bf9\u58f0\u97f3\u7684\u5f3a\u5f31\u611f\u89c9\u5e76\u4e0d\u662f\u4e0e\u58f0\u5f3a\u6210\u6b63\u6bd4\uff0c\u800c\u662f\u4e0e\u5176\u5bf9\u6570\u6210\u6b63\u6bd4\uff0c\u6240\u4ee5\u4e00\u822c\u58f0\u5f3a\u7528\u58f0\u5f3a\u7ea7\uff08Sound Intensity Level\uff0cSIL\uff09\u6765\u8868\u793a\uff1a \\[ SIL=10{\\rm log}(\\frac{I}{I'}) \\] \u5176\u4e2d\uff0cI\u4e3a\u58f0\u5f3a\uff0c \\(I'=10e^{-12}w/m^2\\) \u79f0\u4e3a\u57fa\u672c\u58f0\u5f3a\uff0c\u58f0\u5f3a\u7ea7\u7684\u5e38\u7528\u5355\u4f4d\u662f\u5206\u8d1d(dB)\u3002","title":"\u58f0\u5f3a\u548c\u58f0\u5f3a\u7ea7"},{"location":"dsp/%E8%AF%AD%E9%9F%B3%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/#_6","text":"\u4e0e\u58f0\u5f3a\u4e0d\u540c\uff0c\u54cd\u5ea6\u662f\u4e00\u79cd\u4e3b\u89c2\u5fc3\u7406\u91cf\uff0c\u662f\u4eba\u7c7b\u4e3b\u89c2\u611f\u89c9\u5230\u7684\u58f0\u97f3\u5f3a\u5f31\u7a0b\u5ea6\uff0c\u53c8\u79f0\u97f3\u91cf\u3002 \u54cd\u5ea6\u4e0e\u58f0\u538b\u7ea7\uff08Sound Pressure Level\uff0cSPL\uff09\u3001\u9891\u7387\u548c\u53d1\u97f3\u65f6\u957f\u6709\u5173 \uff0c\u4e00\u822c\u6765\u8bf4\uff0c\u58f0\u97f3\u9891\u7387\u4e00\u5b9a\u65f6\uff0c\u58f0\u538b\u8d8a\u5f3a\uff0c\u54cd\u5ea6\u4e5f\u8d8a\u5927\u3002\u76f8\u540c\u7684\u58f0\u538b\uff0c\u9891\u7387\u4e0d\u540c\u65f6\uff0c\u54cd\u5ea6\u4e5f\u53ef\u80fd\u4e0d\u540c\u3002\u54cd\u5ea6\u7684\u5e38\u7528\u5355\u4f4d\u662f \u5b8b\uff08sone\uff09 \u3002 \u54cd\u5ea6\u82e5\u7528\u5bf9\u6570\u503c\u8868\u793a\uff0c\u5373\u4e3a\u54cd\u5ea6\u7ea7\uff0c\u54cd\u5ea6\u7ea7\u7684\u5e38\u7528\u5355\u4f4d\u4e3a \u65b9\uff08phon\uff09 \u3002\u5b9a\u4e491000Hz\u7eaf\u97f3\u4ea7\u751f\u76f8\u540c\u54cd\u5ea6\u65f6\uff0c\u5bf9\u5e94\u58f0\u538b\u7ea7\u7684\u6570\u503c\u30020 dB\u58f0\u538b\u7ea71000Hz\u7eaf\u97f3\u7684\u54cd\u5ea6\u7ea7\u5b9a\u4e49\u4e3a0 phon\uff0cn dB\u58f0\u538b\u7ea71000Hz\u7eaf\u97f3\u7684\u54cd\u5ea6\u7ea7\u5c31\u662fn phon\uff0c\u4e00\u4e2a60 phon \u7684\u7eaf\u97f3\uff0c\u548c\u4e00\u4e2a1000 Hz\u300160 dB \u58f0\u538b\u7ea7\uff08Sound Pressure Level\uff0cSPL\uff09\u7684\u7eaf\u97f3\uff0c\u6709\u7740\u76f8\u540c\u7684\u54cd\u5ea6\u3002\u5176\u5b83\u9891\u7387\u7684\u58f0\u538b\u7ea7\u4e0e\u54cd\u5ea6\u7684\u5bf9\u5e94\u5173\u7cfb\u53ef\u4ee5\u4ece\u5982\u4e0b\u56fe\u7b49\u54cd\u5ea6\u66f2\u7ebf\u67e5\u51fa\u3002 \u4e0a\u56fe\u7684\u7b49\u54cd\u66f2\u7ebf\u4e2d\uff0c\u6a2a\u5750\u6807\u4e3a\u9891\u7387\uff0c\u7eb5\u5750\u6807\u4e3a \u58f0\u538b\u7ea7 \uff0c\u5728\u540c\u4e00\u6761\u66f2\u7ebf\u4e0a\u6240\u6709\u9891\u7387\u548c\u58f0\u538b\u7684\u7ec4\u5408\uff0c\u90fd\u62e5\u6709\u76f8\u540c\u7684\u54cd\u5ea6\u3002\u6700\u4e0b\u9762\u7684\u66f2\u7ebf\u8868\u793a\u4eba\u7c7b\u80fd\u591f\u542c\u5230\u7684\u6700\u5c0f\u58f0\u97f3\u54cd\u5ea6\uff0c\u5373\u542c\u9608\u3002\u53c2\u89c1\uff1a Loudness \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u542c\u9608\u4e0a\u7684\u58f0\u97f3\u5982\u679c\u9891\u7387\u548c\u58f0\u5f3a\u90fd\u4e0d\u53d8\u3001\u65f6\u957f\u589e\u52a0\uff0c\u5b83\u7684\u54cd\u5ea6\u4e5f\u53ef\u80fd\u968f\u4e4b\u589e\u5927\u3002\u5728\u5177\u4f53\u7684\u8bed\u79cd\u4e2d\uff0c\u53ef\u4ee5\u6539\u53d8\u97f3\u9ad8\u3001\u97f3\u957f\u548c\u58f0\u5f3a\u7b49\uff0c\u4ece\u800c\u6539\u53d8\u67d0\u4e9b\u97f3\u8282\u6216\u8bed\u97f3\u6210\u5206\u7684\u54cd\u5ea6\uff0c\u5373\u8f7b\u91cd\u97f3\u3002\u4e0d\u540c\u7684\u8bed\u8a00\u4e2d\uff0c\u6539\u53d8\u54cd\u5ea6\u65f6\u6240\u4fa7\u91cd\u7684\u8981\u7d20\u4e0d\u540c\u3002\u6bd4\u5982\u6c49\u8bed\u666e\u901a\u8bdd\u4e2d\u54cd\u5ea6\u8f83\u5c0f\u7684\u8f7b\u58f0\uff0c\u4e3b\u8981\u662f\u9760\u7f29\u77ed\u97f3\u957f\u6765\u5b9e\u73b0\u7684\uff1b\u82f1\u8bed\u4e2d\u7684\u91cd\u97f3\u5219\u4f9d\u9760\u63d0\u9ad8\u97f3\u9ad8\uff0c\u6765\u63d0\u9ad8\u54cd\u5ea6\u3002\u53c2\u89c1\uff1a \u54cd\u5ea6","title":"\u54cd\u5ea6"},{"location":"dsp/%E8%AF%AD%E9%9F%B3%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/#_7","text":"\u8fc7\u96f6\u7387\u4f53\u73b0\u7684\u662f\u4fe1\u53f7\u8fc7\u96f6\u70b9\u7684\u6b21\u6570\uff0c\u4f53\u73b0\u7684\u662f\u9891\u7387\u7279\u6027\u3002 \\[ Z_n=\\sum_{n=0}^{N-1}\\sum_{m=0}^{M-1}|{\\rm sgn}(x_n(m))-{\\rm sgn}(x_n(m-1))| \\] \u5176\u4e2d\uff0c \\(N\\) \u8868\u793a\u5e27\u6570\uff0c \\(M\\) \u8868\u793a\u6bcf\u4e00\u5e27\u4e2d\u7684\u6837\u672c\u70b9\u4e2a\u6570\uff0c \\({\\rm sgn()}\\) \u4e3a\u7b26\u53f7\u51fd\u6570\uff0c\u5373 \\[ {\\rm sgn}=\\left\\{\\begin{matrix} & 1,x \\geq 0 \\\\ & -1,x<0 \\end{matrix}\\right. \\]","title":"\u8fc7\u96f6\u7387"},{"location":"dsp/%E8%AF%AD%E9%9F%B3%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/#_8","text":"\u58f0\u95e8\u5904\u7684\u51c6\u5468\u671f\u6fc0\u52b1\u8fdb\u5165\u58f0\u9053\u65f6\u4f1a\u5f15\u8d77\u5171\u632f\u7279\u6027\uff0c\u4ea7\u751f\u4e00\u7ec4\u5171\u632f\u9891\u7387\uff0c\u8fd9\u4e00\u7ec4\u5171\u632f\u9891\u7387\u79f0\u4e3a\u5171\u632f\u5cf0\u9891\u7387\u6216\u7b80\u79f0\u5171\u632f\u5cf0\u3002\u5171\u632f\u5cf0\u5305\u542b\u5728\u8bed\u97f3\u7684\u9891\u8c31\u5305\u7edc\u4e2d\uff0c\u9891\u8c31\u5305\u7edc\u7684\u5c40\u90e8\u6781\u5927\u503c\u5c31\u662f\u5171\u632f\u5cf0\u3002\u9891\u7387\u6700\u4f4e\u7684\u5171\u632f\u5cf0\u79f0\u4e3a\u7b2c\u4e00\u5171\u632f\u5cf0\uff0c\u8bb0\u4f5c \\(f_1\\) \uff0c\u9891\u7387\u66f4\u9ad8\u7684\u5171\u632f\u5cf0\u79f0\u4e3a\u7b2c\u4e8c\u5171\u632f\u5cf0 \\(f_2\\) \u3001\u7b2c\u4e09\u5171\u632f\u5cf0 \\(f_3\\) ......\u4ee5\u6b64\u7c7b\u63a8\u3002\u5b9e\u8df5\u4e2d\u4e00\u4e2a\u5143\u97f3\u7528\u4e09\u4e2a\u5171\u632f\u5cf0\u8868\u793a\uff0c\u590d\u6742\u7684\u8f85\u97f3\u6216\u9f3b\u97f3\uff0c\u8981\u7528\u4e94\u4e2a\u5171\u632f\u5cf0\u3002\u53c2\u89c1\uff1a \u4e0d\u540c\u5143\u97f3\u8f85\u97f3\u5728\u58f0\u97f3\u9891\u8c31\u7684\u8868\u73b0\u662f\u4ec0\u4e48\u6837\u5b50\uff1f \uff0c \u4ec0\u4e48\u662f\u5171\u632f\u5cf0\uff1f","title":"\u5171\u632f\u5cf0"},{"location":"dsp/%E8%AF%AD%E9%9F%B3%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/#_9","text":"\u57fa\u97f3\u5468\u671f\u53cd\u6620\u4e86\u58f0\u95e8\u76f8\u90bb\u4e24\u6b21\u5f00\u95ed\u4e4b\u95f4\u7684\u65f6\u95f4\u95f4\u9694\uff0c\u57fa\u9891\uff08fundamental frequency\uff0cf0/F0\uff09\u5219\u662f\u57fa\u97f3\u5468\u671f\u7684\u5012\u6570\uff0c\u5bf9\u5e94\u7740\u58f0\u5e26\u632f\u52a8\u7684\u9891\u7387\uff0c\u4ee3\u8868\u58f0\u97f3\u7684\u97f3\u9ad8\uff0c\u58f0\u5e26\u632f\u52a8\u8d8a\u5feb\uff0c\u57fa\u9891\u8d8a\u9ad8\u3002\u5b83\u662f\u8bed\u97f3\u6fc0\u52b1\u6e90\u7684\u4e00\u4e2a\u91cd\u8981\u7279\u5f81\uff0c\u6bd4\u5982\u53ef\u4ee5\u901a\u8fc7\u57fa\u9891\u533a\u5206\u6027\u522b\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u6210\u5e74\u7537\u6027\u57fa\u9891\u5728100 \\(\\sim\\) 250Hz\u5de6\u53f3\uff0c\u6210\u5e74\u5973\u6027\u57fa\u9891\u5728150 \\(\\sim\\) 350Hz\u5de6\u53f3\uff0c\u5973\u58f0\u7684\u97f3\u9ad8\u4e00\u822c\u6bd4\u7537\u58f0\u7a0d\u9ad8\u3002 \u5982\u4e0b\u56fe\u6240\u793a\uff0c\u84dd\u8272\u7bad\u5934\u6307\u5411\u7684\u660e\u4eae\u6a2a\u7ebf\u5bf9\u5e94\u9891\u7387\u5c31\u662f\u57fa\u9891\uff0c\u51b3\u5b9a\u97f3\u9ad8\uff1b\u800c\u7eff\u6846\u4e2d\u7684\u660e\u4eae\u6a2a\u7ebf\u7edf\u79f0\u4e3a\u8c10\u6ce2\u3002\u8c10\u6ce2\u662f\u57fa\u9891\u5bf9\u5e94\u7684\u6574\u6570\u6b21\u9891\u7387\u6210\u5206\uff0c\u7531\u58f0\u5e26\u53d1\u58f0\u5e26\u52a8\u7a7a\u6c14\u5171\u632f\u5f62\u6210\u7684\uff0c\u5bf9\u5e94\u7740\u58f0\u97f3\u4e09\u8981\u7d20\u7684\u97f3\u8272\u3002\u8c10\u6ce2\u7684\u4f4d\u7f6e\uff0c\u76f8\u90bb\u7684\u8ddd\u79bb\u5171\u540c\u5f62\u6210\u4e86\u97f3\u8272\u7279\u5f81\u3002\u8c10\u6ce2\u4e4b\u95f4\u8ddd\u79bb\u8fd1\u542c\u8d77\u6765\u5219\u504f\u539a\u7c97\uff0c\u4e4b\u95f4\u8ddd\u79bb\u8fdc\u542c\u8d77\u6765\u504f\u6e05\u6f88\u3002\u5728\u7537\u58f0\u53d8\u5973\u58f0\u7684\u65f6\u5019\uff0c\u9664\u4e86\u57fa\u9891\u7684\u79fb\u52a8\uff0c\u8fd8\u9700\u8981\u8c03\u6574\u8c10\u6ce2\u95f4\u7684\u5305\u7edc\uff0c\u8ddd\u79bb\u7b49\uff0c\u5426\u5219\u5c06\u4f1a\u4e22\u5931\u97f3\u8272\u4fe1\u606f\u3002 \u4eba\u7c7b\u53ef\u611f\u77e5\u58f0\u97f3\u7684\u9891\u7387\u5927\u81f4\u572820-20000Hz\u4e4b\u95f4\uff0c\u4eba\u7c7b\u5bf9\u4e8e\u57fa\u9891\u7684\u611f\u77e5\u9075\u5faa\u5bf9\u6570\u5f8b\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u4eba\u4eec\u4f1a\u611f\u89c9100Hz\u5230200Hz\u7684\u5dee\u8ddd\uff0c\u4e0e200Hz\u5230400Hz\u7684\u5dee\u8ddd\u76f8\u540c\u3002\u56e0\u6b64\uff0c\u97f3\u9ad8\u5e38\u5e38\u7528\u57fa\u9891\u7684\u5bf9\u6570\u6765\u8868\u793a\u3002\u5728\u97f3\u4e50\u4e0a\uff0c\u628a\u76f8\u5dee\u4e00\u500d\u7684\u4e24\u4e2a\u57fa\u9891\u7684\u5dee\u8ddd\u79f0\u4e3a\u4e00\u4e2a\u516b\u5ea6\uff08octave\uff09\uff1b\u628a\u4e00\u4e2a\u516b\u5ea612\u7b49\u5206\uff0c\u6bcf\u4e00\u4efd\u79f0\u4e3a\u4e00\u4e2a\u534a\u97f3\uff08semitone\uff09\uff1b\u628a\u4e00\u4e2a\u534a\u97f3\u518d100\u7b49\u5206\uff0c\u6bcf\u4e00\u4efd\u79f0\u4e3a\u4e00\u4e2a\u97f3\u5206\uff08cent\uff09\u3002 \u57fa\u9891\u662f\u8bed\u97f3\u7684\u91cd\u8981\u7279\u5f81\uff0c\u5728\u5305\u62ec\u8bed\u97f3\u5408\u6210\u7684\u8bed\u97f3\u5904\u7406\u4e2d\u6709\u7740\u5e7f\u6cdb\u7684\u5e94\u7528\uff0c\u6bd4\u5982\u8bed\u97f3\u8f6c\u6362\uff08Voice Conversion\uff0cVC\uff09\u548c\u8bed\u97f3\u5408\u6210\u4e2d\u57fa\u9891\u662f\u4e00\u4e2a\u5f3a\u7279\u5f81\u3002\u57fa\u9891\u7684\u63d0\u53d6\u53ef\u4ee5\u5206\u4e3a\u65f6\u57df\u6cd5\u548c\u9891\u57df\u6cd5\u3002\u65f6\u57df\u6cd5\u4ee5\u6ce2\u5f62\u4e3a\u8f93\u5165\uff0c\u57fa\u672c\u539f\u7406\u662f\u5bfb\u627e\u6ce2\u5f62\u7684\u6700\u5c0f\u6b63\u5468\u671f\uff1b\u9891\u57df\u6cd5\u5219\u4f1a\u5148\u5bf9\u4fe1\u53f7\u8fdb\u884c\u5085\u91cc\u53f6\u53d8\u6362\uff0c\u5f97\u5230\u9891\u8c31\uff0c\u9891\u8c31\u5728\u57fa\u9891\u7684\u6574\u500d\u6570\u5904\u6709\u5c16\u5cf0\uff0c\u9891\u57df\u6cd5\u7684\u57fa\u672c\u539f\u7406\u5c31\u662f\u6c42\u51fa\u8fd9\u4e9b\u5c16\u5cf0\u9891\u7387\u7684\u6700\u5927\u516c\u7ea6\u6570\u3002\u4f46\u662f\u8003\u8651\u5230\u57fa\u9891\u5e76\u975e\u6bcf\u4e00\u5e27\u90fd\u6709\uff0c\u56e0\u6b64\u5728\u63d0\u53d6\u57fa\u9891\u524d\u540e\uff0c\u90fd\u9700\u8981\u5224\u65ad\u6709\u65e0\u57fa\u9891\uff0c\u79f0\u4e4b\u4e3a\u6e05\u6d4a\u97f3\u5224\u65ad\uff08Unvoiced/Voiced Decision\uff0cU/V Decision\uff09\u3002\u8bed\u97f3\u7684\u57fa\u9891\u5f80\u5f80\u968f\u7740\u65f6\u95f4\u53d8\u5316\uff0c\u5728\u63d0\u53d6\u57fa\u9891\u4e4b\u524d\u5f80\u5f80\u8981\u8fdb\u884c\u5206\u5e27\uff0c\u9010\u5e27\u63d0\u53d6\u7684\u57fa\u9891\u5e38\u5e38\u542b\u6709\u9519\u8bef\uff0c\u5176\u4e2d\u5e38\u89c1\u7684\u9519\u8bef\u5c31\u662f\u500d\u9891\u9519\u8bef\u548c\u534a\u9891\u9519\u8bef\uff0c\u4e5f\u5c31\u662f\u63d0\u53d6\u51fa\u6765\u7684\u57fa\u9891\u662f\u771f\u5b9e\u57fa\u9891\u7684\u4e24\u500d\u6216\u8005\u4e00\u534a\uff0c\u56e0\u6b64\u57fa\u9891\u63d0\u53d6\u540e\u8981\u8fdb\u884c\u5e73\u6ed1\u64cd\u4f5c\u3002\u5e38\u89c1\u7684\u57fa\u9891\u63d0\u53d6\u7b97\u6cd5\u6709\u57fa\u4e8e\u4fe1\u53f7\u5904\u7406\u65f6\u57df\u6cd5\u7684YIN\uff0c\u57fa\u4e8e\u4fe1\u53f7\u5904\u7406\u9891\u57df\u6cd5\u7684SWIPE\uff0c\u57fa\u4e8e\u673a\u5668\u5b66\u4e60\u65f6\u57df\u6cd5\u7684CREPE\u548c\u57fa\u4e8e\u673a\u5668\u5b66\u4e60\u9891\u57df\u6cd5\u7684SPICE\u3002\u5e38\u7528\u7684\u57fa\u9891\u63d0\u53d6\u5de5\u5177\u6709 pyWORLD \uff0c Parselmouth \uff0c CREPE \uff0c YIN \u7b49\u3002\u53c2\u89c1 \u57fa\u9891\u63d0\u53d6\u7b97\u6cd5\u7efc\u8ff0 \u3002 A. de Cheveign\u00e9 and H. Kawahara, \"YIN, a fundamental frequency estimator for speech and music\", Journal of the Acoustical Society of America, 2002. A. Camacho and J. G. Harris, \"A sawtooth waveform inspired pitch estimator for speech and music\", Journal of the Acoustical Society of America, 2008. J. W. Kim, et al., \"CREPE: A convolutional representation for pitch estimation\", ICASSP, 2018. B. Gfeller, et al., \"SPICE: Self-supervised pitch estimation\", IEEE Transactions on Audio, Speech and Language Processing, 2020.","title":"\u57fa\u9891\u548c\u57fa\u97f3\u5468\u671f"},{"location":"dsp/%E8%AF%AD%E9%9F%B3%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/#_10","text":"\u97f3\u9ad8\uff08pitch\uff09\u662f\u7531\u58f0\u97f3\u7684\u57fa\u9891\u51b3\u5b9a\u7684\uff0c\u97f3\u9ad8\u548c\u57fa\u9891\u5e38\u5e38\u6df7\u7528\u3002\u53ef\u4ee5\u8fd9\u6837\u8ba4\u4e3a\uff0c\u97f3\u9ad8\uff08pitch\uff09\u662f\u7a00\u758f\u79bb\u6563\u5316\u7684\u57fa\u9891\uff08F0\uff09\u3002\u7531\u89c4\u5f8b\u632f\u52a8\u4ea7\u751f\u7684\u58f0\u97f3\u4e00\u822c\u90fd\u4f1a\u6709\u57fa\u9891\uff0c\u6bd4\u5982\u8bed\u97f3\u4e2d\u7684\u5143\u97f3\u548c\u6d4a\u8f85\u97f3\uff1b\u4e5f\u6709\u4e9b\u58f0\u97f3\u6ca1\u6709\u57fa\u9891\uff0c\u6bd4\u5982\u4eba\u7c7b\u901a\u8fc7\u53e3\u8154\u6324\u538b\u6c14\u6d41\u7684\u6e05\u8f85\u97f3\u3002\u5728\u6c49\u8bed\u4e2d\uff0c\u5143\u97f3\u6709a/e/i/o/u\uff0c\u6d4a\u8f85\u97f3\u6709y/w/v\uff0c\u5176\u4f59\u97f3\u7d20\u6bd4\u5982b/p/q/x\u7b49\u5747\u4e3a\u6e05\u8f85\u97f3\uff0c\u5728\u53d1\u97f3\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7\u89e6\u6478\u5589\u5499\u611f\u53d7\u548c\u5224\u65ad\u53d1\u97f3\u6240\u5c5e\u97f3\u7d20\u7684\u79cd\u7c7b\u3002","title":"\u97f3\u9ad8"},{"location":"dsp/%E8%AF%AD%E9%9F%B3%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/#mfcc","text":"\u5bf9\u8bed\u97f3\u8fdb\u884c\u5206\u6790\u548c\u5904\u7406\u65f6\uff0c\u90e8\u5206\u4fe1\u606f\u5728\u65f6\u57df\u4e0a\u96be\u4ee5\u5206\u6790\uff0c\u56e0\u6b64\u5f80\u5f80\u4f1a\u63d0\u53d6\u9891\u8c31\u7279\u5f81\u3002\u5728\u8bed\u97f3\u5408\u6210\u4e2d\uff0c\u901a\u5e38\u5c06\u9891\u8c31\u4f5c\u4e3a\u4e2d\u95f4\u58f0\u5b66\u7279\u5f81\uff1a\u9996\u5148\u5c06\u6587\u672c\u8f6c\u6362\u4e3a\u9891\u8c31\uff0c\u518d\u5c06\u9891\u8c31\u8f6c\u6362\u4e3a\u6ce2\u5f62\uff1b\u5728\u8bed\u97f3\u8bc6\u522b\u4e2d\uff0c\u5219\u5c06\u9891\u8c31\u6216\u8005MFCC\u4f5c\u4e3a\u4e2d\u95f4\u58f0\u5b66\u7279\u5f81\u3002\u8bed\u97f3\u901a\u8fc7\u9884\u52a0\u91cd\u3001\u5206\u5e27\u3001\u52a0\u7a97\u3001\u5085\u91cc\u53f6\u53d8\u6362\u4e4b\u540e\uff0c\u53d6\u529f\u7387\u8c31\u7684\u5e45\u5ea6\u5e73\u65b9\uff0c\u8fdb\u884c\u6885\u5c14\u6ee4\u6ce2\u53d6\u5bf9\u6570\u4e4b\u540e\uff0c\u5c31\u5f97\u5230\u4e86\u6885\u5c14\u9891\u8c31\uff08\u6216\u79f0FilterBank/FBank\uff09\uff0c\u5982\u679c\u518d\u8fdb\u884c\u79bb\u6563\u4f59\u5f26\u53d8\u6362\uff0c\u5c31\u80fd\u591f\u83b7\u5f97MFCC\uff0c\u4e0b\u4e00\u7ae0\u5c06\u8fdb\u884c\u8be6\u8ff0\u3002\u8bed\u97f3\u901a\u5e38\u662f\u4e00\u4e2a\u77ed\u65f6\u5e73\u7a33\u4fe1\u53f7\uff0c\u5728\u8fdb\u884c\u5085\u91cc\u53f6\u53d8\u6362\u4e4b\u524d\uff0c\u4e00\u822c\u8981\u8fdb\u884c\u5206\u5e27\uff0c\u53d6\u97f3\u9891\u7684\u4e00\u4e2a\u5c0f\u7247\u6bb5\u8fdb\u884c\u77ed\u65f6\u5085\u91cc\u53f6\u53d8\u6362\uff08STFT\uff09\u3002STFT\u7684\u7ed3\u679c\u662f\u4e00\u4e2a\u590d\u6570\uff0c\u5305\u62ec\u5e45\u5ea6\u548c\u76f8\u4f4d\u4fe1\u606f\uff0c\u5c06\u8be5\u590d\u6570\u4e2d\u7684\u9891\u7387\u4f5c\u4e3a\u6a2a\u8f74\uff0c\u5e45\u5ea6\u4f5c\u4e3a\u7eb5\u8f74\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u5c31\u7ec4\u6210\u4e86\u9891\u8c31\u56fe\uff0c\u5c06\u9891\u8c31\u56fe\u4e2d\u7684\u5c16\u5cf0\u70b9\u8fde\u63a5\u8d77\u6765\uff0c\u5c31\u5f62\u6210\u4e86\u9891\u8c31\u5305\u7edc\u3002\u6ce8\u610f\u5230\uff0c\u9891\u8c31\u56fe\u53cd\u6620\u4e00\u4e2a\u8bed\u97f3\u5e27\u7684\u9891\u57df\u60c5\u51b5\uff0c\u6ca1\u6709\u65f6\u95f4\u4fe1\u606f\u3002\u56e0\u6b64\uff0c\u5c06\u6bcf\u4e2a\u5e27\u5bf9\u5e94\u7684\u9891\u8c31\u56fe\u8fde\u63a5\u8d77\u6765\uff0c\u4ee5\u65f6\u95f4\u4f5c\u4e3a\u6a2a\u8f74\uff0c\u9891\u7387\u4f5c\u4e3a\u7eb5\u8f74\uff0c\u989c\u8272\u6df1\u6d45\u8868\u793a\u5e45\u5ea6\uff0c\u5982\u4e0b\u56fe\u7684\u7ea2\u56fe\u6240\u793a\uff0c\u5c31\u7ec4\u6210\u4e86\u8bed\u8c31\u56fe\u3002\u8bed\u8c31\u56fe\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u4e09\u7ef4\u56fe\uff0c\u6a2a\u8f74\u65f6\u95f4\uff0c\u7eb5\u8f74\u9891\u7387\uff0c\u989c\u8272\u6df1\u6d45\u8868\u793a\u5e45\u5ea6\u5927\u5c0f\uff0c\u4e00\u822c\u6765\u8bf4\uff0c\u989c\u8272\u8d8a\u6df1\uff0c\u8868\u793a\u5e45\u5ea6\u503c\u8d8a\u5927\u3002","title":"MFCC\u548c\u8bed\u8c31\u56fe"},{"location":"dsp/%E8%AF%AD%E9%9F%B3%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/#_11","text":"*.wav : \u6ce2\u5f62\u65e0\u635f\u538b\u7f29\u683c\u5f0f\uff0c\u662f\u8bed\u97f3\u5408\u6210\u4e2d\u97f3\u9891\u8bed\u6599\u7684\u5e38\u7528\u683c\u5f0f\uff0c\u4e3b\u8981\u7684\u4e09\u4e2a\u53c2\u6570\uff1a\u91c7\u6837\u7387\uff0c\u91cf\u5316\u4f4d\u6570\u548c\u901a\u9053\u6570\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u5408\u6210\u8bed\u97f3\u7684\u91c7\u6837\u7387\u91c7\u752816kHz\u300122050Hz\u300124kHz\uff0c\u5bf9\u4e8e\u6b4c\u5531\u5408\u6210\u7b49\u9ad8\u8d28\u91cf\u5408\u6210\u573a\u666f\u91c7\u6837\u7387\u53ef\u8fbe\u523048kHz\uff1b\u91cf\u5316\u4f4d\u6570\u91c7\u752816bit\uff1b\u901a\u9053\u6570\u91c7\u75281. *.flac : Free Lossless Audio Codec\uff0c\u65e0\u635f\u97f3\u9891\u538b\u7f29\u7f16\u7801\u3002 *.mp3 : Moving Picture Experts Group Audio Player III\uff0c\u6709\u635f\u538b\u7f29\u3002 *.wma : Window Media Audio\uff0c\u6709\u635f\u538b\u7f29\u3002 *.avi : Audio Video Interleaved\uff0cavi\u6587\u4ef6\u5c06\u97f3\u9891\u548c\u89c6\u9891\u5305\u542b\u5728\u4e00\u4e2a\u6587\u4ef6\u5bb9\u5668\u4e2d\uff0c\u5141\u8bb8\u97f3\u89c6\u9891\u540c\u6b65\u64ad\u653e\u3002","title":"\u97f3\u9891\u683c\u5f0f"},{"location":"dsp/%E8%AF%AD%E9%9F%B3%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/#_12","text":"","title":"\u6570\u5b57\u4fe1\u53f7\u5904\u7406"},{"location":"dsp/%E8%AF%AD%E9%9F%B3%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/#_13","text":"\u6a21\u62df\u4fe1\u53f7\u5230\u6570\u5b57\u4fe1\u53f7\u7684\u8f6c\u6362\uff08Analog to Digital Converter\uff0cADC\uff09\u79f0\u4e3a\u6a21\u6570\u8f6c\u6362\u3002 \u5948\u594e\u65af\u7279\u91c7\u6837\u5b9a\u7406\uff1a\u8981\u4ece\u62bd\u6837\u4fe1\u53f7\u4e2d\u65e0\u5931\u771f\u5730\u6062\u590d\u539f\u4fe1\u53f7\uff0c\u62bd\u6837\u9891\u7387\u5e94\u5927\u4e8e2\u500d\u4fe1\u53f7\u6700\u9ad8\u9891\u7387\u3002\u62bd\u6837\u9891\u7387\u5c0f\u4e8e2\u500d\u9891\u8c31\u6700\u9ad8\u9891\u7387\u65f6\uff0c\u4fe1\u53f7\u7684\u9891\u8c31\u6709\u6df7\u53e0\u3002\u62bd\u6837\u9891\u7387\u5927\u4e8e2\u500d\u9891\u8c31\u6700\u9ad8\u9891\u7387\u65f6\uff0c\u4fe1\u53f7\u7684\u9891\u8c31\u65e0\u6df7\u53e0\u3002\u5982\u679c\u5bf9\u8bed\u97f3\u6a21\u62df\u4fe1\u53f7\u8fdb\u884c\u91c7\u6837\u7387\u4e3a16000Hz\u7684\u91c7\u6837\uff0c\u5f97\u5230\u7684\u79bb\u6563\u4fe1\u53f7\u4e2d\u5305\u542b\u7684\u6700\u5927\u9891\u7387\u4e3a8000Hz\u3002","title":"\u6a21\u6570\u8f6c\u6362"},{"location":"dsp/%E8%AF%AD%E9%9F%B3%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/#_14","text":"\u97f3\u9891\u5904\u7406\u4e2d\uff0c\u7ecf\u5e38\u9700\u8981\u5229\u7528\u5085\u91cc\u53f6\u53d8\u6362\u5c06\u65f6\u57df\u4fe1\u53f7\u8f6c\u6362\u5230\u9891\u57df\uff0c\u800c\u4e00\u6b21\u5feb\u901f\u5085\u91cc\u53f6\u53d8\u6362\uff08FFT\uff09\u53ea\u80fd\u5904\u7406\u6709\u9650\u957f\u7684\u65f6\u57df\u4fe1\u53f7\uff0c\u4f46\u8bed\u97f3\u4fe1\u53f7\u901a\u5e38\u662f\u957f\u7684\uff0c\u6240\u4ee5\u9700\u8981\u5c06\u539f\u59cb\u8bed\u97f3\u622a\u65ad\u6210\u4e00\u5e27\u4e00\u5e27\u957f\u5ea6\u7684\u6570\u636e\u5757\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u53eb \u4fe1\u53f7\u622a\u65ad \uff0c\u4e5f\u53eb \u5206\u5e27 \u3002\u5206\u5b8c\u5e27\u540e\u518d\u5bf9\u6bcf\u5e27\u505aFFT\uff0c\u5f97\u5230\u5bf9\u5e94\u7684\u9891\u57df\u4fe1\u53f7\u3002FFT\u662f\u79bb\u6563\u5085\u91cc\u53f6\u53d8\u6362\uff08DFT\uff09\u7684\u5feb\u901f\u8ba1\u7b97\u65b9\u5f0f\uff0c\u800c\u505aDFT\u6709\u4e00\u4e2a\u5148\u9a8c\u6761\u4ef6\uff1a\u5206\u5e27\u5f97\u5230\u7684\u6570\u636e\u5757\u5fc5\u987b\u662f\u6574\u6570\u5468\u671f\u7684\u4fe1\u53f7\uff0c\u4e5f\u5373\u662f\u6bcf\u6b21\u622a\u65ad\u5f97\u5230\u7684\u4fe1\u53f7\u8981\u6c42\u662f\u5468\u671f\u4e3b\u503c\u5e8f\u5217\u3002 \u4f46\u505a\u5206\u5e27\u65f6\uff0c\u5f88\u96be\u6ee1\u8db3 \u5468\u671f\u622a\u65ad \uff0c\u56e0\u6b64\u5c31\u4f1a\u5bfc\u81f4 \u9891\u8c31\u6cc4\u9732 \u3002\u8981\u89e3\u51b3\u975e\u5468\u671f\u622a\u65ad\u5bfc\u81f4\u7684\u9891\u8c31\u6cc4\u9732\u662f\u6bd4\u8f83\u56f0\u96be\u7684\uff0c\u53ef\u4ee5\u901a\u8fc7 \u52a0\u7a97 \u5c3d\u53ef\u80fd\u51cf\u5c11\u9891\u8c31\u6cc4\u9732\u5e26\u6765\u7684\u5f71\u54cd\u3002\u7a97\u7c7b\u578b\u53ef\u4ee5\u5206\u4e3a\u6c49\u5b81\u7a97\u3001\u6c49\u660e\u7a97\u3001\u5e73\u9876\u7a97\u7b49\u3002\u867d\u7136\u52a0\u7a97\u80fd\u591f\u51cf\u5c11\u9891\u8c31\u6cc4\u9732\uff0c\u4f46\u52a0\u7a97\u8870\u51cf\u4e86\u6bcf\u5e27\u4fe1\u53f7\u7684\u80fd\u91cf\uff0c\u7279\u522b\u662f\u8fb9\u754c\u5904\u7684\u80fd\u91cf\uff0c\u8fd9\u65f6\u52a0\u4e00\u4e2a\u5408\u6210\u7a97\uff0c\u4e14overlap-add\uff0c\u4fbf\u53ef\u4ee5\u8865\u56de\u80fd\u91cf\u3002\u53c2\u89c1\uff1a \u9891\u8c31\u6cc4\u9732\u548c\u52a0\u7a97 \u3002","title":"\u9891\u8c31\u6cc4\u9732"},{"location":"dsp/%E8%AF%AD%E9%9F%B3%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/#_15","text":"\u9891\u7387\u5206\u8fa8\u7387\u662f\u6307\u5c06\u4e24\u4e2a\u76f8\u90bb\u8c31\u5cf0\u5206\u5f00\u7684\u80fd\u529b\uff0c\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u662f\u6307\u5206\u8fa8\u4e24\u4e2a\u4e0d\u540c\u9891\u7387\u4fe1\u53f7\u7684\u6700\u5c0f\u95f4\u9694\u3002","title":"\u9891\u7387\u5206\u8fa8\u7387"},{"location":"dsp/%E8%AF%AD%E9%9F%B3%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/#_16","text":"\u6ce2\u5f62\uff08waveform\uff09\uff1a \u58f0\u97f3\u662f\u7531\u58f0\u6e90\u632f\u52a8\u4ea7\u751f\u7684\u6ce2\u3002 \u4fe1\u9053\uff1a\u901a\u4fe1\u7684\u901a\u9053Channel\uff0c\u662f\u4fe1\u53f7\u4f20\u8f93\u7684\u5a92\u4ecb\u3002 \u58f0\u9053\uff1a\u58f0\u97f3\u5728\u5f55\u5236\u548c\u64ad\u653e\u65f6\uff0c\u5728\u4e0d\u540c\u7a7a\u95f4\u4f4d\u7f6e\u91c7\u96c6\u6216\u56de\u653e\u76f8\u4e92\u72ec\u7acb\u7684\u97f3\u9891\u4fe1\u53f7\uff0c\u56e0\u6b64\u58f0\u9053\u6570\u4e5f\u5c31\u662f\u58f0\u97f3\u5f55\u5236\u65f6\u7684\u97f3\u6e90\u6570\u91cf\u6216\u56de\u653e\u65f6\u76f8\u5e94\u7684\u626c\u58f0\u5668\u6570\u91cf\u3002 \u91c7\u6837\u7387\uff1a\u5355\u4f4d\u65f6\u95f4\u5185\u4ece\u8fde\u7eed\u4fe1\u53f7\u4e2d\u63d0\u53d6\u5e76\u7ec4\u6210\u79bb\u6563\u4fe1\u53f7\u7684\u91c7\u6837\u4e2a\u6570\uff0c\u97f3\u9891\u5e38\u7528\u5355\u4f4dkHz\u3002 \u91c7\u6837\u4f4d\u6570/\u91c7\u6837\u6df1\u5ea6\uff1a\u6570\u5b57\u4fe1\u53f7\u7684\u4e8c\u8fdb\u5236\u4f4d\u6570\uff0c\u4e0e\u6bcf\u6b21\u91c7\u6837\u7684\u53ef\u80fd\u503c\u4e2a\u6570\u6709\u5173\uff0c\u97f3\u9891\u5e38\u7528\u5355\u4f4dbit\u3002\u5e38\u89c1\u7684\u97f3\u9891\u683c\u5f0f\uff0c\u6bd4\u5982 16kHz\uff0c16bit \u4e2d16kHz\u6307\u7684\u662f\u91c7\u6837\u7387\uff0c16bit\u8868\u793a\u91c7\u6837\u4f4d\u6df1\u3002 \u4fe1\u566a\u6bd4\uff08SNR\uff09\uff1a\u548c\u58f0\u538b\u7ea7\u7c7b\u4f3c\uff0c\u5355\u4f4d\u4ecd\u91c7\u7528\u5206\u8d1d\uff0c\u6570\u503c\u8d8a\u9ad8\uff0c\u8868\u793a\u58f0\u97f3\u8d8a\u5e72\u51c0\uff0c\u566a\u97f3\u6bd4\u4f8b\u8d8a\u5c0f\u3002 LPC\u3002\u7ebf\u6027\u9884\u6d4b\u7cfb\u6570\u3002LPC\u7684\u57fa\u672c\u601d\u60f3\u662f\uff0c\u5f53\u524d\u65f6\u523b\u7684\u4fe1\u53f7\u53ef\u4ee5\u7528\u82e5\u5e72\u5386\u53f2\u65f6\u523b\u4fe1\u53f7\u7684\u7ebf\u6027\u7ec4\u5408\u6765\u4f30\u8ba1\uff0c\u901a\u8fc7\u4f7f\u5b9e\u9645\u8bed\u97f3\u7684\u91c7\u6837\u503c\u548c\u7ebf\u6027\u9884\u6d4b\u7684\u91c7\u6837\u503c\u4e4b\u95f4\u8fbe\u5230\u5747\u65b9\u5dee\u6700\u5c0f\uff0c\u5373\u53ef\u5f97\u5230\u4e00\u7ec4\u7ebf\u6027\u9884\u6d4b\u7cfb\u6570\u3002\u6c42\u89e3LPC\u7cfb\u6570\u53ef\u4ee5\u91c7\u7528\u81ea\u76f8\u5173\u6cd5\u3001\u534f\u65b9\u5dee\u6cd5\u3001\u683c\u578b\u6cd5\u7b49\u5feb\u901f\u7b97\u6cd5\u3002 \u8bed\u97f3\u4fe1\u53f7\u7684\u6570\u5b57\u8868\u793a\u53ef\u4ee5\u5206\u4e3a\u4e24\u7c7b\uff1a \u6ce2\u5f62\u8868\u793a \u548c \u53c2\u6570\u8868\u793a \uff0c\u6ce2\u5f62\u8868\u793a\u4ec5\u901a\u8fc7\u91c7\u6837\u548c\u91cf\u5316\u4fdd\u5b58\u6a21\u62df\u4fe1\u53f7\u7684\u6ce2\u5f62\uff1b\u800c\u53c2\u6570\u8868\u793a\u5c06\u8bed\u97f3\u4fe1\u53f7\u8868\u793a\u4e3a\u67d0\u79cd\u8bed\u97f3\u4ea7\u751f\u6a21\u578b\u7684\u8f93\u51fa\uff0c\u662f\u5bf9\u6570\u5b57\u5316\u8bed\u97f3\u8fdb\u884c\u5206\u6790\u548c\u5904\u7406\u4e4b\u540e\u5f97\u5230\u7684\u3002 \u5229\u7528\u540c\u6001\u5904\u7406\u65b9\u6cd5\uff0c\u5bf9\u8bed\u97f3\u4fe1\u53f7\u6c42\u79bb\u6563\u5085\u91cc\u53f6\u53d8\u6362\u4e4b\u540e\u53d6\u5bf9\u6570\uff0c\u518d\u6c42\u53cd\u53d8\u6362\u5c31\u53ef\u4ee5\u5f97\u5230\u5012\u8c31\u7cfb\u6570\u3002\u5176\u4e2d\uff0cLPC\u5012\u8c31\uff08LPCCEP\uff09\u662f\u5efa\u7acb\u5728LPC\u8c31\u4e0a\u7684\uff0c\u800c\u6885\u5c14\u5012\u8c31\u7cfb\u6570\uff08Mel Frequency Cepstrum Coefficient\uff0cMFCC\uff09\u5219\u662f\u57fa\u4e8e\u6885\u5c14\u9891\u8c31\u7684\u3002 LPCC\u3002LPCC\u7279\u5f81\u5047\u5b9a\u4fe1\u53f7\u5b58\u5728\u4e00\u79cd\u7ebf\u6027\u9884\u6d4b\u7684\u7ed3\u6784\uff0c\u8fd9\u5bf9\u4e8e\u5468\u671f\u7279\u6027\u7684\u6d4a\u97f3\u63cf\u8ff0\u6bd4\u8f83\u51c6\u786e\uff0c\u800c\u5bf9\u4e8e\u8f85\u97f3\u5219\u76f8\u5f53\u4e8e\u5f3a\u52a0\u4e86\u4e00\u79cd\u9519\u8bef\u7684\u7ed3\u6784\u3002MFCC\u76f8\u90bb\u5e27\u7279\u5f81\u8fd1\u4e4e\u72ec\u7acb\uff0c\u6240\u4ee5\u80fd\u591f\u6bd4\u8f83\u597d\u5730\u63cf\u8ff0\u8f85\u97f3\uff0c\u4f46\u5ffd\u7565\u4e86\u4fe1\u53f7\u53ef\u80fd\u7684\u5185\u5728\u7ed3\u6784\uff0c\u5982\u76f8\u90bb\u5e27\u4e4b\u95f4\u7684\u5173\u8054\uff0c\u7ecf\u9a8c\u8868\u660eMFCC\u66f4\u597d\u7528\uff0c\u5e76\u4e14\u7ecf\u5e38\u4f1a\u52a0\u5165\u5dee\u5206\u7279\u5f81\u4ee5\u51cf\u5f31\u5176\u72ec\u7acb\u6027\u3002 \u7ebf\u6027\u9884\u6d4b\u5012\u8c31\u7cfb\u6570\uff08LPCC\uff09\u662f\u6839\u636e\u58f0\u7ba1\u6a21\u578b\u5efa\u7acb\u7684\u7279\u5f81\u53c2\u6570\uff0c\u662f\u5bf9\u58f0\u9053\u54cd\u5e94\u7684\u7279\u5f81\u8868\u5f81\u3002\u6885\u5c14\u9891\u8c31\u5012\u8c31\u7cfb\u6570\uff08MFCC\uff09\u662f\u57fa\u4e8e\u4eba\u7c7b\u542c\u89c9\u673a\u7406\u63d0\u53d6\u51fa\u7684\u7279\u5f81\u53c2\u6570\uff0c\u662f\u5bf9\u4eba\u8033\u542c\u89c9\u7684\u7279\u5f81\u8868\u5f81\u3002 \u5bf9\u4e8e\u4e00\u6bb51\u79d2\u7684\u6ce2\u5f62\uff0c\u5047\u8bbe\u91c7\u6837\u738716kHz\uff0c\u91c7\u6837\u4f4d\u6df116bit\uff0c\u5219\u5305\u542b\u6837\u672c\u70b9 \\(1\\times 16000=16000\\) \u4e2a\uff0c\u6240\u5360\u5bb9\u91cf \\(1\\times 16000\\times 16 /8=32000\\) \u5b57\u8282\uff08B\uff09\u3002","title":"\u5176\u5b83\u6982\u5ff5"},{"location":"dsp/%E8%AF%AD%E9%9F%B3%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96/","text":"\u8bed\u97f3\u7279\u5f81\u63d0\u53d6 \u539f\u59cb\u4fe1\u53f7\u662f\u4e0d\u5b9a\u957f\u7684\u65f6\u5e8f\u4fe1\u53f7\uff0c\u4e0d\u9002\u5408\u4f5c\u4e3a\u673a\u5668\u5b66\u4e60\u7684\u8f93\u5165\u3002\u56e0\u6b64\u4e00\u822c\u9700\u8981\u5c06\u539f\u59cb\u6ce2\u5f62\u8f6c\u6362\u4e3a\u7279\u5b9a\u7684\u7279\u5f81\u5411\u91cf\u8868\u793a\uff0c\u8be5\u8fc7\u7a0b\u79f0\u4e3a\u8bed\u97f3\u7279\u5f81\u63d0\u53d6\u3002 \u9884\u5904\u7406 \u5305\u62ec\u9884\u52a0\u91cd\u3001\u5206\u5e27\u548c\u52a0\u7a97\u3002 \u9884\u52a0\u91cd \u8bed\u97f3\u7ecf\u8fc7\u8bf4\u8bdd\u4eba\u7684\u53e3\u5507\u8f90\u5c04\u53d1\u51fa\uff0c\u53d7\u5230\u5507\u7aef\u8f90\u5c04\u6291\u5236\uff0c\u9ad8\u9891\u80fd\u91cf\u660e\u663e\u964d\u4f4e\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u5f53\u8bed\u97f3\u4fe1\u53f7\u7684\u9891\u7387\u63d0\u9ad8\u4e24\u500d\u65f6\uff0c\u5176\u529f\u7387\u8c31\u7684\u5e45\u5ea6\u4e0b\u964d\u7ea66dB\uff0c\u5373\u8bed\u97f3\u4fe1\u53f7\u7684\u9ad8\u9891\u90e8\u5206\u53d7\u5230\u7684\u6291\u5236\u5f71\u54cd\u8f83\u5927\u3002\u5728\u8fdb\u884c\u8bed\u97f3\u4fe1\u53f7\u7684\u5206\u6790\u548c\u5904\u7406\u65f6\uff0c\u53ef\u91c7\u7528\u9884\u52a0\u91cd\uff08pre-emphasis\uff09\u7684\u65b9\u6cd5\u8865\u507f\u8bed\u97f3\u4fe1\u53f7\u9ad8\u9891\u90e8\u5206\u7684\u632f\u5e45\uff0c\u5728\u5085\u91cc\u53f6\u53d8\u6362\u64cd\u4f5c\u4e2d\u907f\u514d\u6570\u503c\u95ee\u9898\uff0c\u672c\u8d28\u662f\u65bd\u52a0\u9ad8\u901a\u6ee4\u6ce2\u5668\u3002\u5047\u8bbe\u8f93\u5165\u4fe1\u53f7\u7b2c \\(n\\) \u4e2a\u91c7\u6837\u70b9\u4e3a \\(x[n]\\) \uff0c\u5219\u9884\u52a0\u91cd\u516c\u5f0f\u5982\u4e0b\uff1a \\[ x'[n]=x[n]-a\\times x[n-1] \\] \u5176\u4e2d\uff0c \\(a\\) \u662f\u9884\u52a0\u91cd\u7cfb\u6570\uff0c\u4e00\u822c\u53d6 \\(a=0.97\\) \u6216 \\(a=0.95\\) \u3002 \u5206\u5e27 \u8bed\u97f3\u4fe1\u53f7\u662f\u975e\u5e73\u7a33\u4fe1\u53f7\uff0c\u8003\u8651\u5230\u53d1\u6d4a\u97f3\u65f6\u58f0\u5e26\u6709\u89c4\u5f8b\u632f\u52a8\uff0c\u5373\u57fa\u97f3\u9891\u7387\u5728\u77ed\u65f6\u8303\u56f4\u5185\u65f6\u76f8\u5bf9\u56fa\u5b9a\u7684\uff0c\u56e0\u6b64\u53ef\u4ee5\u8ba4\u4e3a\u8bed\u97f3\u4fe1\u53f7\u5177\u6709\u77ed\u65f6\u5e73\u7a33\u7279\u6027\uff0c\u4e00\u822c\u8ba4\u4e3a10ms~50ms\u7684\u8bed\u97f3\u4fe1\u53f7\u7247\u6bb5\u662f\u4e00\u4e2a\u51c6\u7a33\u6001\u8fc7\u7a0b\u3002\u77ed\u65f6\u5206\u6790\u91c7\u7528\u5206\u5e27\u65b9\u5f0f\uff0c\u4e00\u822c\u6bcf\u5e27\u5e27\u957f\u4e3a20ms\u621650ms\u3002\u5047\u8bbe\u8bed\u97f3\u91c7\u6837\u7387\u4e3a16kHz\uff0c\u5e27\u957f\u4e3a20ms\uff0c\u5219\u4e00\u5e27\u6709 \\(16000\\times 0.02=320\\) \u4e2a\u6837\u672c\u70b9\u3002 \u76f8\u90bb\u4e24\u5e27\u4e4b\u95f4\u7684\u57fa\u97f3\u6709\u53ef\u80fd\u53d1\u751f\u53d8\u5316\uff0c\u5982\u4e24\u4e2a\u97f3\u8282\u4e4b\u95f4\uff0c\u6216\u8005\u58f0\u6bcd\u5411\u97f5\u6bcd\u8fc7\u6e21\u3002\u4e3a\u786e\u4fdd\u58f0\u5b66\u7279\u5f81\u53c2\u6570\u7684\u5e73\u6ed1\u6027\uff0c\u4e00\u822c\u91c7\u7528\u91cd\u53e0\u53d6\u5e27\u7684\u65b9\u5f0f\uff0c\u5373\u76f8\u90bb\u5e27\u4e4b\u95f4\u5b58\u5728\u91cd\u53e0\u90e8\u5206\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u5e27\u957f\u548c\u5e27\u79fb\u7684\u6bd4\u4f8b\u4e3a \\(1:4\\) \u6216 \\(1:5\\) \u3002 \u52a0\u7a97 \u5206\u5e27\u76f8\u5f53\u4e8e\u5bf9\u8bed\u97f3\u4fe1\u53f7\u52a0\u77e9\u5f62\u7a97\uff0c\u77e9\u5f62\u7a97\u5728\u65f6\u57df\u4e0a\u5bf9\u4fe1\u53f7\u8fdb\u884c\u622a\u65ad\uff0c\u5728\u8fb9\u754c\u5904\u5b58\u5728\u591a\u4e2a\u65c1\u74e3\uff0c\u4f1a\u53d1\u751f\u9891\u8c31\u6cc4\u9732\u3002\u4e3a\u4e86\u51cf\u5c11\u9891\u8c31\u6cc4\u9732\uff0c\u901a\u5e38\u5bf9\u5206\u5e27\u4e4b\u540e\u7684\u4fe1\u53f7\u8fdb\u884c\u5176\u5b83\u5f62\u5f0f\u7684\u52a0\u7a97\u64cd\u4f5c\u3002\u5e38\u7528\u7684\u7a97\u51fd\u6570\u6709\uff1a\u6c49\u660e\uff08Hamming\uff09\u7a97\u3001\u6c49\u5b81\uff08Hanning\uff09\u7a97\u548c\u5e03\u83b1\u514b\u66fc\uff08Blackman\uff09\u7a97\u7b49\u3002 \u6c49\u660e\u7a97\u7684\u7a97\u51fd\u6570\u4e3a\uff1a \\[ W_{ham}[n]=0.54-0.46\\mathop{cos}(\\frac{2\\pi n}{N}-1) \\] \u5176\u4e2d\uff0c \\(0\\leq n\\leq N-1\\) \uff0c \\(N\\) \u662f\u7a97\u7684\u957f\u5ea6\u3002 \u6c49\u5b81\u7a97\u7684\u7a97\u51fd\u6570\u4e3a\uff1a \\[ W_{han}[n]=0.5[1-\\mathop{cos}(\\frac{2\\pi n}{N}-1)] \\] \u5176\u4e2d\uff0c \\(0\\leq n\\leq N-1\\) \uff0c \\(N\\) \u662f\u7a97\u7684\u957f\u5ea6\u3002 \u77ed\u65f6\u5085\u91cc\u53f6\u53d8\u6362 \u4eba\u7c7b\u542c\u89c9\u7cfb\u7edf\u4e0e\u9891\u8c31\u5206\u6790\u7d27\u5bc6\u76f8\u5173\uff0c\u5bf9\u8bed\u97f3\u4fe1\u53f7\u8fdb\u884c\u9891\u8c31\u5206\u6790\uff0c\u662f\u8ba4\u8bc6\u548c\u5904\u7406\u8bed\u97f3\u4fe1\u53f7\u7684\u91cd\u8981\u65b9\u6cd5\u3002\u58f0\u97f3\u4ece\u9891\u7387\u4e0a\u53ef\u4ee5\u5206\u4e3a\u7eaf\u97f3\u548c\u590d\u5408\u97f3\uff0c\u7eaf\u97f3\u53ea\u5305\u542b\u4e00\u79cd\u9891\u7387\u7684\u58f0\u97f3\uff08\u57fa\u97f3\uff09\uff0c\u800c\u6ca1\u6709\u500d\u97f3\u3002\u590d\u5408\u97f3\u662f\u9664\u4e86\u57fa\u97f3\u4e4b\u5916\uff0c\u8fd8\u5305\u542b\u591a\u79cd\u500d\u97f3\u7684\u58f0\u97f3\u3002\u5927\u90e8\u5206\u8bed\u97f3\u90fd\u662f\u590d\u5408\u97f3\uff0c\u6d89\u53ca\u591a\u4e2a\u9891\u7387\u6bb5\uff0c\u53ef\u4ee5\u901a\u8fc7\u5085\u91cc\u53f6\u53d8\u6362\u8fdb\u884c\u9891\u8c31\u5206\u6790\u3002 \u6bcf\u4e2a\u9891\u7387\u7684\u4fe1\u53f7\u53ef\u4ee5\u7528\u6b63\u5f26\u6ce2\u8868\u793a\uff0c\u91c7\u7528\u6b63\u5f26\u51fd\u6570\u5efa\u6a21\u3002\u57fa\u4e8e\u6b27\u62c9\u516c\u5f0f\uff0c\u53ef\u4ee5\u5c06\u6b63\u5f26\u51fd\u6570\u5bf9\u5e94\u5230\u7edf\u4e00\u7684\u6307\u6570\u5f62\u5f0f\uff1a \\[ e^{jwn}=\\mathop{cos}(wn)+j\\mathop{sin}(wn) \\] \u6b63\u5f26\u51fd\u6570\u5177\u6709\u6b63\u4ea4\u6027\uff0c\u5373\u4efb\u610f\u4e24\u4e2a\u4e0d\u540c\u9891\u7387\u7684\u6b63\u5f26\u6ce2\u4e58\u79ef\uff0c\u5728\u4e24\u8005\u7684\u516c\u5171\u5468\u671f\u5185\u79ef\u5206\u7b49\u4e8e\u96f6\u3002\u6b63\u4ea4\u6027\u7528\u590d\u6307\u6570\u8fd0\u7b97\u8868\u793a\u5982\u4e0b\uff1a \\[ \\int_{-\\infty}^{+\\infty}e^{j\\alpha t}e^{-j\\beta t}dt=0,\\quad if\\ \\alpha\\neq \\beta \\] \u57fa\u4e8e\u6b63\u5f26\u51fd\u6570\u7684\u6b63\u4ea4\u6027\uff0c\u901a\u8fc7\u76f8\u5173\u5904\u7406\u53ef\u4ee5\u4ece\u8bed\u97f3\u4fe1\u53f7\u5206\u79bb\u51fa\u5bf9\u5e94\u4e0d\u540c\u9891\u7387\u7684\u6b63\u5f26\u4fe1\u53f7\u3002\u5bf9\u4e8e\u79bb\u6563\u91c7\u6837\u7684\u8bed\u97f3\u4fe1\u53f7\uff0c\u53ef\u4ee5\u91c7\u7528\u79bb\u6563\u5085\u91cc\u53f6\u53d8\u6362\uff08DFT\uff09\u3002DFT\u7684\u7b2c \\(k\\) \u4e2a\u70b9\u8ba1\u7b97\u5982\u4e0b\uff1a \\[ X[k]=\\sum_{n=0}^{N-1} x[n]e^{-\\frac{j2\\pi kn}{K}},\\quad k=0,1,...,K-1 \\] \u5176\u4e2d\uff0c \\(x[n]\\) \u662f\u65f6\u57df\u6ce2\u5f62\u7b2c \\(n\\) \u4e2a\u91c7\u6837\u70b9\u503c\uff0c \\(X[k]\\) \u662f\u7b2c \\(k\\) \u4e2a\u5085\u91cc\u53f6\u9891\u8c31\u503c\uff0c \\(N\\) \u662f\u91c7\u6837\u70b9\u5e8f\u5217\u7684\u70b9\u6570\uff0c \\(K\\) \u662f\u9891\u8c31\u7cfb\u6570\u7684\u70b9\u6570\uff0c\u4e14 \\(K\\geq N\\) \u3002\u5229\u7528DFT\u83b7\u5f97\u7684\u9891\u8c31\u503c\u901a\u5e38\u662f\u590d\u6570\u5f62\u5f0f\uff0c\u8fd9\u662f\u56e0\u4e3a\u4e0a\u5f0f\u4e2d\uff0c \\[ e^{-\\frac{j2\\pi kn}{K}}=\\mathop{cos}(\\frac{2\\pi kn}{K})-j\\mathop{sin}(\\frac{2\\pi kn}{K}) \\] \u5219 \\[ X[k]=X_{real}[k]-jX_{imag}[k] \\] \u5176\u4e2d\uff0c \\[ X_{real}[k]=\\sum_{n=0}^{N-1}x[n]\\mathop{cos}(\\frac{2\\pi kn}{K}) \\] \\[ X_{imag}[k]=\\sum_{n=0}^{N-1}x[n]\\mathop{sin}(\\frac{2\\pi kn}{K}) \\] \\(N\\) \u4e2a\u91c7\u6837\u70b9\u5e8f\u5217\u7ec4\u6210\u7684\u65f6\u57df\u4fe1\u53f7\u7ecf\u8fc7DFT\u4e4b\u540e\uff0c\u5bf9\u5e94 \\(K\\) \u4e2a\u9891\u7387\u70b9\u3002\u7ecfDFT\u53d8\u6362\u5f97\u5230\u4fe1\u53f7\u7684\u9891\u8c31\u8868\u793a\uff0c\u5176\u9891\u8c31\u5e45\u503c\u548c\u76f8\u4f4d\u968f\u7740\u9891\u7387\u53d8\u5316\u800c\u53d8\u5316\u3002 \u5728\u8bed\u97f3\u4fe1\u53f7\u5904\u7406\u4e2d\u4e3b\u8981\u5173\u6ce8\u4fe1\u53f7\u7684\u9891\u8c31\u5e45\u503c\uff0c\u4e5f\u79f0\u4e3a\u632f\u5e45\u9891\u8c31/\u632f\u5e45\u8c31\uff1a \\[ X_{magnitude}[k]=\\sqrt{X_{real}[k]^2+X_{imag}[k]^2} \\] \u80fd\u91cf\u9891\u8c31/\u80fd\u91cf\u8c31\u662f\u632f\u5e45\u9891\u8c31\u7684\u5e73\u65b9\uff1a \\[ X_{power}[k]=X_{real}[k]^2+X_{imag}[k]^2 \\] \u5404\u79cd\u58f0\u6e90\u53d1\u51fa\u7684\u58f0\u97f3\u5927\u591a\u7531\u8bb8\u591a\u4e0d\u540c\u5f3a\u5ea6\u3001\u4e0d\u540c\u9891\u7387\u7684\u58f0\u97f3\u7ec4\u6210\u590d\u5408\u97f3\uff0c\u5728\u590d\u5408\u97f3\u4e2d\uff0c\u4e0d\u540c\u9891\u7387\u6210\u5206\u4e0e\u80fd\u91cf\u5206\u5e03\u7684\u5173\u7cfb\u79f0\u4e3a\u58f0\u97f3\u7684\u9891\u8c31\uff0c\u5229\u7528\u9891\u8c31\u56fe\u8868\u793a\u5404\u9891\u7387\u6210\u5206\u4e0e\u80fd\u91cf\u5206\u5e03\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u9891\u8c31\u56fe\u6a2a\u8f74\u662f\u9891\u7387\uff08Hz\uff09\uff0c\u7eb5\u8f74\u662f\u5e45\u5ea6\uff08dB\uff09\u3002 \u901a\u8fc7\u5bf9\u9891\u57df\u4fe1\u53f7\u8fdb\u884c\u9006\u5085\u91cc\u53f6\u53d8\u6362\uff08IDFT\uff09\uff0c\u53ef\u4ee5\u6062\u590d\u65f6\u57df\u4fe1\u53f7\uff1a \\[ x[n]=\\frac{1}{K}\\sum_{k=0}^{K-1}X[k]e^{\\frac{j2\\pi kn}{N}},\\quad n=0,1,...,N-1 \\] \u79bb\u6563\u5085\u91cc\u53f6\u53d8\u6362\uff08DFT\uff09\u7684\u8ba1\u7b97\u590d\u6742\u5ea6\u4e3a \\(O(N^2)\\) \uff0c\u53ef\u4ee5\u91c7\u7528\u5feb\u901f\u5085\u91cc\u53f6\u53d8\u6362\uff08FFT\uff09\uff0c\u7b80\u5316\u8ba1\u7b97\u590d\u6742\u5ea6\uff0c\u5728 \\(O(N\\mathop{log}_2 N)\\) \u7684\u65f6\u95f4\u5185\u8ba1\u7b97\u51faDFT\u3002\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u5bf9\u8bed\u97f3\u4fe1\u53f7\u8fdb\u884c\u5206\u5e27\u52a0\u7a97\u5904\u7406\uff0c\u5c06\u5176\u5206\u5272\u6210\u4e00\u5e27\u5e27\u7684\u79bb\u6563\u5e8f\u5217\uff0c\u53ef\u89c6\u4e3a\u77ed\u65f6\u5085\u91cc\u53f6\u53d8\u6362\uff08STFT\uff09\uff1a \\[ X[k,l]=\\sum_{n=0}^{N-1} x_l[n]e^{-\\frac{j2\\pi nk}{K}}=\\sum_{n=0}^{N-1} w[n]x[n+lL]e^{-\\frac{j2\\pi nk}{K}} \\] \u5176\u4e2d\uff0c \\(K\\) \u662fDFT\u540e\u7684\u9891\u7387\u70b9\u4e2a\u6570\uff0c \\(k\\) \u662f\u9891\u7387\u7d22\u5f15\uff0c \\(0\\leq k< K\\) \u3002 \\(X[k,l]\\) \u5efa\u7acb\u8d77\u7d22\u5f15\u4e3a \\(lL\\) \u7684\u65f6\u57df\u4fe1\u53f7\uff0c\u4e0e\u7d22\u5f15\u4e3a \\(k\\) \u7684\u9891\u57df\u4fe1\u53f7\u4e4b\u95f4\u7684\u5173\u7cfb\u3002 \u542c\u89c9\u7279\u6027 \u6885\u5c14\u6ee4\u6ce2 \u4eba\u7c7b\u5bf9\u4e0d\u540c\u9891\u7387\u7684\u8bed\u97f3\u6709\u4e0d\u540c\u7684\u611f\u77e5\u80fd\u529b\uff1a 1kHz\u4ee5\u4e0b\uff0c\u4eba\u8033\u611f\u77e5\u4e0e\u9891\u7387\u6210\u7ebf\u6027\u5173\u7cfb\u3002 1kHz\u4ee5\u4e0a\uff0c\u4eba\u8033\u611f\u77e5\u4e0e\u9891\u7387\u6210\u5bf9\u6570\u5173\u7cfb\u3002 \u56e0\u6b64\uff0c\u4eba\u8033\u5bf9\u4f4e\u9891\u4fe1\u53f7\u6bd4\u9ad8\u9891\u4fe1\u53f7\u66f4\u4e3a\u654f\u611f\u3002\u56e0\u6b64\u6839\u636e\u4eba\u8033\u7684\u7279\u6027\u63d0\u51fa\u4e86\u4e00\u79cdmel\u523b\u5ea6\uff0c\u5373\u5b9a\u4e491\u4e2amel\u523b\u5ea6\u76f8\u5f53\u4e8e\u4eba\u5bf91kHz\u97f3\u9891\u611f\u77e5\u7a0b\u5ea6\u7684\u5343\u5206\u4e4b\u4e00\uff0cmel\u523b\u5ea6\u8868\u8fbe\u7684\u662f\uff0c\u4ece\u7ebf\u6027\u9891\u7387\u5230\"\u611f\u77e5\u9891\u7387\"\u7684\u8f6c\u6362\u5173\u7cfb\uff1a \\[ mel(f)=2595\\mathop{lg}(1+\\frac{f}{700}) \\] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 from matplotlib import pyplot as plt import numpy as np x = np . linspace ( 0 , 5000 , 50000 ) y = 2595 * np . log10 ( 1 + x / 700 ) x0 = 1000 y0 = 2595 * np . log10 ( 1 + x0 / 700 ) plt . plot ( x , y ) plt . scatter ( x0 , y0 ) plt . plot ([ x0 , x0 ], [ 0 , y0 ], 'k--' ) plt . plot ([ 0 , x0 ], [ x0 , y0 ], 'k--' ) plt . xlabel ( 'f (Hz)' ) plt . ylabel ( 'Mel(f)' ) plt . title ( 'relationship between linear and mel scale' ) plt . xlim ( 0 , x [ - 1 ]) plt . ylim ( 0 , y [ - 1 ]) plt . savefig ( 'mel_vs_f.png' ) plt . show () \u4eba\u4eec\u6839\u636e\u4e00\u7cfb\u5217\u5fc3\u7406\u58f0\u5b66\u5b9e\u9a8c\u5f97\u5230\u4e86\u7c7b\u4f3c\u8033\u8717\u4f5c\u7528\u7684\u6ee4\u6ce2\u5668\u7ec4\uff0c\u7528\u4e8e\u6a21\u62df\u4eba\u8033\u4e0d\u540c\u9891\u6bb5\u58f0\u97f3\u7684\u611f\u77e5\u80fd\u529b\uff0c\u4e5f\u5c31\u662f\u591a\u4e2a\u4e09\u89d2\u6ee4\u6ce2\u5668\u7ec4\u6210\u7684mel\u9891\u7387\u6ee4\u6ce2\u5668\u7ec4\u3002\u6bcf\u4e2a\u6ee4\u6ce2\u5668\u5e26\u5bbd\u4e0d\u7b49\uff0c\u7ebf\u6027\u9891\u7387\u5c0f\u4e8e1000Hz\u7684\u90e8\u5206\u4e3a\u7ebf\u6027\u95f4\u9694\uff0c\u800c\u7ebf\u6027\u9891\u7387\u5927\u4e8e1000Hz\u7684\u90e8\u5206\u4e3a\u5bf9\u6570\u95f4\u9694\u3002\u540c\u6837\u5730\uff0c\u5c06\u6885\u5c14\u9891\u7387\u8f6c\u6362\u5230\u7ebf\u6027\u9891\u7387\u7684\u516c\u5f0f\u4e3a\uff1a \\[ f_{mel}^{-1}=700\\cdot (10^{\\frac{f_{mel}}{2595}}-1) \\] Bark\u6ee4\u6ce2 \u58f0\u97f3\u7684\u54cd\u5ea6\uff0c\u53cd\u6620\u4eba\u5bf9\u4e0d\u540c\u9891\u7387\u6210\u5206\u58f0\u5f3a/\u58f0\u97f3\u5f3a\u5f31\u7684\u4e3b\u89c2\u611f\u53d7\u3002\u54cd\u5ea6\u4e0e\u58f0\u5f3a\u3001\u9891\u7387\u7684\u5173\u7cfb\u53ef\u4ee5\u7528 \u7b49\u54cd\u5ea6\u8f6e\u5ed3\u66f2\u7ebf \u8868\u793a\u3002 \u4eba\u8033\u5bf9\u54cd\u5ea6\u7684\u611f\u77e5\u6709\u4e00\u4e2a\u8303\u56f4\uff0c\u5f53\u58f0\u97f3\u4f4e\u4e8e\u67d0\u4e2a\u54cd\u5ea6\u65f6\uff0c\u4eba\u8033\u662f\u65e0\u6cd5\u611f\u77e5\u5230\u7684\uff0c\u8fd9\u4e2a\u54cd\u5ea6\u503c\u79f0\u4e3a\u542c\u89c9\u9608\u503c\uff0c\u6216\u79f0\u542c\u9608\u3002\u5728\u5b9e\u9645\u73af\u5883\u4e2d\uff0c\u4f46\u4e00\u4e2a\u8f83\u5f3a\u4fe1\u53f7\uff08\u63a9\u853d\u97f3\uff09\u5b58\u5728\u65f6\uff0c\u542c\u9608\u5c31\u4e0d\u7b49\u4e8e\u5b89\u9759\u65f6\u7684\u9608\u503c\uff0c\u800c\u662f\u6709\u6240\u63d0\u9ad8\u3002\u8fd9\u610f\u5473\u7740\uff0c\u90bb\u8fd1\u9891\u7387\u7684\u4e24\u4e2a\u58f0\u97f3\u4fe1\u53f7\uff0c\u5f31\u54cd\u5ea6\u7684\u58f0\u97f3\u4fe1\u53f7\u4f1a\u88ab\u5f3a\u54cd\u5ea6\u7684\u58f0\u97f3\u4fe1\u53f7\u6240\u63a9\u853d\uff08Mask\uff09\uff0c\u8fd9\u5c31\u662f \u9891\u57df\u63a9\u853d \u3002 \u6839\u636e\u542c\u89c9\u9891\u57df\u5206\u8fa8\u7387\u548c\u9891\u57df\u63a9\u853d\u7684\u7279\u70b9\uff0c\u5b9a\u4e49\u80fd\u591f\u5f15\u8d77\u542c\u89c9\u4e3b\u89c2\u53d8\u5316\u7684\u9891\u7387\u5e26\u5bbd\u4e3a\u4e00\u4e2a \u4e34\u754c\u9891\u5e26 \u3002\u4e00\u4e2a\u4e34\u754c\u9891\u5e26\u7684\u5bbd\u5ea6\u88ab\u79f0\u4e3a\u4e00\u4e2aBark\uff0cBark\u9891\u7387 \\(Z(f)\\) \u548c\u7ebf\u6027\u9891\u7387 \\(f\\) \u7684\u5bf9\u5e94\u5173\u7cfb\u5b9a\u4e49\u5982\u4e0b\uff1a \\[ Z(f)=6\\mathop{ln}(\\frac{f}{600}+((\\frac{f}{600})^2+1)^{\\frac{1}{2}}) \\] \u5176\u4e2d\uff0c\u7ebf\u6027\u9891\u7387 \\(f\\) \u7684\u5355\u4f4d\u4e3aHz\uff0c\u4e34\u754c\u9891\u5e26 \\(Z(f)\\) \u7684\u5355\u4f4d\u4e3aBark\u3002 \u5012\u8c31\u5206\u6790 \u8bed\u97f3\u4fe1\u53f7\u7684\u4ea7\u751f\u6a21\u578b\u5305\u62ec\u53d1\u751f\u6e90\uff08Source\uff09\u548c\u6ee4\u6ce2\u5668\uff08Filter\uff09\u3002\u4eba\u5728\u53d1\u58f0\u65f6\uff0c\u80ba\u90e8\u7a7a\u6c14\u53d7\u5230\u6324\u538b\u5f62\u6210\u6c14\u6d41\uff0c\u6c14\u6d41\u901a\u8fc7\u58f0\u95e8\uff08\u58f0\u5e26\uff09\u632f\u52a8\u4ea7\u751f\u58f0\u95e8\u6e90\u6fc0\u52b1 \\(e[n]\\) \u3002\u5bf9\u4e8e\u6d4a\u97f3\uff0c\u6fc0\u52b1 \\(e[n]\\) \u662f\u4ee5\u57fa\u97f3\u5468\u671f\u91cd\u590d\u7684\u5355\u4f4d\u51b2\u6fc0\uff1b\u5bf9\u4e8e\u6e05\u97f3\uff0c \\(e[n]\\) \u662f\u5e73\u7a33\u767d\u566a\u58f0\u3002\u8be5\u6fc0\u52b1\u4fe1\u53f7 \\(e[n]\\) \u7ecf\u8fc7\u54bd\u5589\u3001\u53e3\u8154\u5f62\u6210\u58f0\u9053\u7684\u5171\u632f\u548c\u8c03\u5236\uff0c\u7279\u522b\u662f\u820c\u5934\u80fd\u591f\u6539\u53d8\u58f0\u9053\u7684\u5bb9\u79ef\uff0c\u4ece\u800c\u6539\u53d8\u53d1\u97f3\uff0c\u5f62\u6210\u4e0d\u540c\u9891\u7387\u7684\u58f0\u97f3\u3002\u6c14\u6d41\u3001\u58f0\u95e8\u53ef\u4ee5\u7b49\u6548\u4e3a\u4e00\u4e2a\u6fc0\u52b1\u6e90\uff0c\u58f0\u9053\u7b49\u6548\u4e3a\u4e00\u4e2a\u65f6\u53d8\u6ee4\u6ce2\u5668\uff0c\u8bed\u97f3\u4fe1\u53f7 \\(x[n]\\) \u53ef\u4ee5\u88ab\u770b\u6210\u6fc0\u52b1\u4fe1\u53f7 \\(e[n]\\) \u4e0e\u65f6\u53d8\u6ee4\u6ce2\u5668\u7684\u5355\u4f4d\u54cd\u5e94 \\(v[n]\\) \u7684\u5377\u79ef\uff1a \\[ x[n]=e[n]*v[n] \\] \u5df2\u77e5\u8bed\u97f3\u4fe1\u53f7 \\(x[n]\\) \uff0c\u5f85\u6c42\u51fa\u4e0a\u5f0f\u4e2d\u53c2\u4e0e\u5377\u79ef\u7684\u5404\u4e2a\u4fe1\u53f7\u5206\u91cf\uff0c\u4e5f\u5c31\u662f\u89e3\u5377\u79ef\u5904\u7406\u3002\u9664\u4e86\u7ebf\u6027\u9884\u6d4b\u65b9\u6cd5\u5916\uff0c\u8fd8\u53ef\u4ee5\u91c7\u7528 \u5012\u8c31\u5206\u6790 \u5b9e\u73b0\u89e3\u5377\u79ef\u5904\u7406\u3002\u5012\u8c31\u5206\u6790\uff0c\u53c8\u79f0\u4e3a \u540c\u6001\u6ee4\u6ce2 \uff0c\u91c7\u7528\u65f6\u9891\u53d8\u6362\uff0c\u5f97\u5230\u5bf9\u6570\u529f\u7387\u8c31\uff0c\u518d\u8fdb\u884c\u9006\u53d8\u6362\uff0c\u5206\u6790\u51fa\u5012\u8c31\u57df\u7684\u5012\u8c31\u7cfb\u6570\u3002 \u540c\u6001\u6ee4\u6ce2\u7684\u5904\u7406\u8fc7\u7a0b\u5982\u4e0b\uff1a \u5085\u91cc\u53f6\u53d8\u6362\u3002\u5c06\u65f6\u57df\u7684\u5377\u79ef\u4fe1\u53f7\u8f6c\u6362\u4e3a\u9891\u57df\u7684\u4e58\u79ef\u4fe1\u53f7\uff1a \\[ {\\rm DFT}(x[n])=X[z]=E[z]V[z] \\] \u5bf9\u6570\u8fd0\u7b97\u3002\u5c06\u4e58\u79ef\u4fe1\u53f7\u8f6c\u6362\u4e3a\u52a0\u6027\u4fe1\u53f7\uff1a \\[ {\\rm log} X[z]={\\rm log}E[z]+{\\rm log}V[z]=\\hat{E}[z]+\\hat{V}[z]=\\hat{X}[z] \\] \u5085\u91cc\u53f6\u53cd\u53d8\u6362\u3002\u5f97\u5230\u65f6\u57df\u7684\u8bed\u97f3\u4fe1\u53f7 \u5012\u8c31 \u3002 \\[ Z^{-1}(\\hat{X}[z])=Z^{-1}(\\hat{E}[z]+\\hat{V}[z])=\\hat{e}[n]+\\hat{v}[z]\\approx \\hat{x}[n] \\] \u5728\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u8003\u8651\u5230\u79bb\u6563\u4f59\u5f26\u53d8\u6362\uff08DCT\uff09\u5177\u6709\u6700\u4f18\u7684\u53bb\u76f8\u5173\u6027\u80fd\uff0c\u80fd\u591f\u5c06\u4fe1\u53f7\u80fd\u91cf\u96c6\u4e2d\u5230\u6781\u5c11\u6570\u7684\u53d8\u6362\u7cfb\u6570\u4e0a\uff0c\u7279\u522b\u662f\u80fd\u591f\u5c06\u5927\u591a\u6570\u7684\u81ea\u7136\u4fe1\u53f7\uff08\u5305\u62ec\u58f0\u97f3\u548c\u56fe\u50cf\uff09\u7684\u80fd\u91cf\u90fd\u96c6\u4e2d\u5728\u79bb\u6563\u4f59\u5f26\u53d8\u6362\u540e\u7684\u4f4e\u9891\u90e8\u5206\u3002\u4e00\u822c\u91c7\u7528DCT\u53cd\u53d8\u6362\u4ee3\u66ff\u5085\u91cc\u53f6\u53cd\u53d8\u6362\uff0c\u4e0a\u5f0f\u53ef\u4ee5\u6539\u5199\u6210\uff1a \\[ \\hat{c}[m]=\\sum_{k=1}^N{\\rm log}X[k]{\\rm cos}(\\frac{\\pi (k-0.5)m}{N}),\\quad m=1,2,...,M \\] \u5176\u4e2d\uff0c \\(X[k]\\) \u662fDFT\u53d8\u6362\u7cfb\u6570\uff0c \\(N\\) \u662fDFT\u7cfb\u6570\u7684\u4e2a\u6570\uff0c \\(M\\) \u662fDCT\u53d8\u6362\u7684\u4e2a\u6570\u3002 \u6b64\u65f6\uff0c \\(\\hat{x}[n]\\) \u662f\u590d\u5012\u8c31\u4fe1\u53f7\uff0c\u53ef\u91c7\u7528\u9006\u8fd0\u7b97\uff0c\u6062\u590d\u51fa\u8bed\u97f3\u4fe1\u53f7\uff0c\u4f46DCT\u4e0d\u53ef\u9006\uff0c\u4ece\u5012\u8c31\u4fe1\u53f7 \\(\\hat{c}[m]\\) \u4e0d\u53ef\u8fd8\u539f\u51fa\u8bed\u97f3 \\(x[n]\\) \u3002 \u5e38\u89c1\u7684\u58f0\u5b66\u7279\u5f81 \u5728\u8bed\u97f3\u5408\u6210\u4e2d\uff0c\u5e38\u7528\u7684\u58f0\u5b66\u7279\u5f81\u6709\u6885\u5c14\u9891\u8c31\uff08Mel-Spectrogram\uff09/\u6ee4\u6ce2\u5668\u7ec4\uff08Filter-bank\uff0cFank\uff09\uff0c\u6885\u5c14\u9891\u7387\u5012\u8c31\u7cfb\u6570\uff08Mel-Frequency Cepstral Coefficient\uff0cMFCC\uff09\u7b49\u3002 \u63a5\u4e0b\u6765\u91cd\u70b9\u4ecb\u7ecdFBank\u548cMFCC\u7684\u8ba1\u7b97\u8fc7\u7a0b\u3002 FBank FBank\u7684\u7279\u5f81\u63d0\u53d6\u8fc7\u7a0b\u5982\u4e0b\uff1a \u5c06\u4fe1\u53f7\u8fdb\u884c\u9884\u52a0\u91cd\u3001\u5206\u5e27\u3001\u52a0\u7a97\uff0c\u7136\u540e\u8fdb\u884c\u77ed\u65f6\u5085\u91cc\u53f6\u53d8\u6362\uff08STFT\uff09\u83b7\u5f97\u5bf9\u5e94\u7684 \u9891\u8c31 \u3002 \u6c42\u9891\u8c31\u7684\u5e73\u65b9\uff0c\u5373 \u80fd\u91cf\u8c31 \u3002\u8fdb\u884c\u6885\u5c14\u6ee4\u6ce2\uff0c\u5373\u5c06\u6bcf\u4e2a\u6ee4\u6ce2\u9891\u5e26\u5185\u7684\u80fd\u91cf\u8fdb\u884c\u53e0\u52a0\uff0c\u7b2c \\(k\\) \u4e2a\u6ee4\u6ce2\u5668\u8f93\u51fa\u529f\u7387\u8c31\u4e3a \\(X[k]\\) \u3002 \u5c06\u6bcf\u4e2a\u6ee4\u6ce2\u5668\u7684\u8f93\u51fa\u53d6\u5bf9\u6570\uff0c\u5f97\u5230\u76f8\u5e94\u9891\u5e26\u7684\u5bf9\u6570\u529f\u7387\u8c31\u3002 \\[ Y_{\\rm FBank}[k]={\\rm log}X[k] \\] FBank\u7279\u5f81\u672c\u8d28\u4e0a\u662f\u5bf9\u6570\u529f\u7387\u8c31\uff0c\u5305\u62ec\u4f4e\u9891\u548c\u9ad8\u9891\u4fe1\u606f\u3002\u76f8\u6bd4\u4e8e\u8bed\u8c31\u56fe\uff0cFBank\u7ecf\u8fc7\u4e86\u6885\u5c14\u6ee4\u6ce2\uff0c\u4f9d\u636e\u4eba\u8033\u542c\u89c9\u7279\u6027\u8fdb\u884c\u4e86\u538b\u7f29\uff0c\u6291\u5236\u4e86\u4e00\u90e8\u5206\u4eba\u8033\u65e0\u6cd5\u611f\u77e5\u7684\u5197\u4f59\u4fe1\u606f\u3002 MFCC MFCC\u548cFBank\u552f\u4e00\u7684\u4e0d\u540c\u5c31\u5728\u4e8e\uff0c\u83b7\u5f97FBank\u7279\u5f81\u4e4b\u540e\uff0c\u518d\u7ecf\u8fc7\u53cd\u79bb\u6563\u4f59\u5f26\u53d8\u6362\uff0c\u5c31\u5f97\u5230 \\(L\\) \u4e2aMFCC\u7cfb\u6570\u3002\u5728\u5b9e\u9645\u64cd\u4f5c\u4e2d\uff0c\u5f97\u5230\u7684 \\(L\\) \u4e2aMFCC\u7279\u5f81\u503c\u53ef\u4ee5\u4f5c\u4e3a \u9759\u6001\u7279\u5f81 \uff0c\u518d\u5bf9\u8fd9\u4e9b\u9759\u6001\u7279\u5f81\u505a\u4e00\u9636\u548c\u4e8c\u9636\u5dee\u5206\uff0c\u5f97\u5230\u76f8\u5e94\u7684\u9759\u6001\u7279\u5f81\u3002 \u5177\u4f53\u64cd\u4f5c \u5229\u7528librosa\u8bfb\u53d6\u97f3\u9891 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 from matplotlib import pyplot as plt import numpy as np import librosa # \u5229\u7528librosa\u8bfb\u53d6\u97f3\u9891 input_wav_path = r 'test.wav' y , sr = librosa . load ( input_wav_path ) y_num = np . arange ( len ( y )) # \u622a\u53d6\u524d0.3s\u7684\u97f3\u9891 sample_signal = y [ 0 : int ( sr * 0.3 )] sample_num = np . arange ( len ( sample_signal )) plt . figure ( figsize = ( 11 , 7 ), dpi = 500 ) plt . subplot ( 211 ) plt . plot ( y_num / sr , y , color = 'black' ) plt . plot ( sample_num / sr , sample_signal , color = 'blue' ) plt . xlabel ( 'Time (sec)' ) plt . ylabel ( 'Amplitude' ) plt . title ( 'Waveform' ) plt . subplot ( 212 ) plt . plot ( sample_num / sr , sample_signal , color = 'blue' ) plt . xlabel ( 'Time (sec)' ) plt . ylabel ( 'Amplitude' ) plt . title ( '0~0.3s waveform' ) plt . tight_layout () plt . savefig ( 'waveform.png' , dpi = 500 ) plt . show () \u97f3\u9891\u6709\u4e0d\u540c\u7684\u7f16\u7801\u7c7b\u578b\uff0clibrosa\u9ed8\u8ba4\u91c7\u53d6\u6d6e\u70b9\u683c\u5f0f\u8bfb\u53d6\uff0c\u5373\u8bfb\u53d6\u7684\u6837\u672c\u70b9\u5747\u662f \\([-1,-1]\\) \u4e4b\u95f4\u7684\u6d6e\u70b9\u503c\u3002\u66f4\u8be6\u7ec6\u7684\u6587\u6863\u53c2\u89c1 SoX \u7684 Input & Output File Format Options \u90e8\u5206\u3002 \u9009\u9879 \u63cf\u8ff0 \u5e38\u89c1\u53ef\u9009\u9879 b \u6bcf\u4e2a\u7f16\u7801\u6837\u672c\u6240\u5360\u7684\u6570\u636e\u4f4d\u6570\uff08\u4f4d\u6df1\uff09 8/16/32 c \u97f3\u9891\u6587\u4ef6\u5305\u542b\u7684\u901a\u9053\u6570 1 / 2 e \u97f3\u9891\u6587\u4ef6\u7684\u7f16\u7801\u7c7b\u578b signed-integer/unsigned-integer/floating-point r \u97f3\u9891\u6587\u4ef6\u7684\u91c7\u6837\u7387 16k/16000/22050 t \u97f3\u9891\u6587\u4ef6\u7684\u6587\u4ef6\u7c7b\u578b raw/mp3 \u63d0\u53d6\u6885\u5c14\u9891\u8c31 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 sample_rate = 16000 preemphasis = 0.97 n_fft = 1024 frame_length = 0.05 # ms frame_shift = 0.01 # ms fmin = 0 fmax = sample_rate / 2 eps = 1e-10 n_mel = 80 win_length = int ( sample_rate * frame_length ) hop_length = int ( sample_rate * frame_shift ) mel_basis = librosa . filters . mel ( sample_rate , n_fft , n_mel , fmin = fmin , fmax = fmax ) def get_spectrogram ( input_wav_path ): y , sr = librosa . load ( input_wav_path ) y = np . append ( y [ 0 ], y [ 1 :] - preemphasis * y [: - 1 ]) linear = librosa . stft ( y = y , n_fft = n_fft , hop_length = hop_length , win_length = win_length ) mag = np . abs ( linear ) mel = np . dot ( mel_basis , mag ) mel = np . log10 ( np . maximum ( eps , mel )) mel = mel . T . astype ( np . float32 ) # (T,n_mels) return mel # plt.switch_backend('agg') def plot_spectrogram ( spectrogram , file_path ): spectrogram = spectrogram . T fig = plt . figure ( figsize = ( 16 , 9 )) plt . imshow ( spectrogram , aspect = 'auto' , origin = 'lower' ) plt . colorbar () plt . xlabel ( 'frames' ) plt . tight_layout () plt . savefig ( file_path , dpi = 500 ) plt . show () mel_spec = get_spectrogram ( input_wav_path ) plot_spectrogram ( mel_spec , 'mel_spectrogram.png' ) \u63d0\u53d6MFCC 1 2 3 4 5 6 7 8 9 10 11 12 13 from scipy.fftpack import dct num_ceps = 12 # MFCC\u9636\u6570\uff0c\u53ef\u9009\u503c2~13 mfcc = dct ( mel_spec , type = 2 , axis = 1 , norm = 'ortho' )[:, 1 : ( num_ceps + 1 )] plot_spectrogram ( mfcc , 'mfcc.png' ) # \u5c06\u6b63\u5f26\u540c\u6001\u6ee4\u6ce2\uff08sinusoidal liftering\uff09\u5e94\u7528\u4e8eMFCC\u4ee5\u53bb\u5f3a\u8c03\u66f4\u9ad8\u7684MFCC\uff0c\u5176\u5df2\u88ab\u8bc1\u660e\u53ef\u4ee5\u6539\u5584\u566a\u58f0\u4fe1\u53f7\u4e2d\u7684\u8bed\u97f3\u8bc6\u522b\u3002 # reference: https://haythamfayek.com/2016/04/21/speech-processing-for-machine-learning.html ( nframes , ncoeff ) = mfcc . shape cep_lifter = 22 n = np . arange ( ncoeff ) lift = 1 + ( cep_lifter / 2 ) * np . sin ( np . pi * n / cep_lifter ) mfcc *= lift plot_spectrogram ( mfcc , 'mfcc_lift.png' ) \u5728\u8bed\u97f3\u5408\u6210\u4e2d\uff0c\u7c7b\u4f3c\u4e8e\u6df1\u5ea6\u5b66\u4e60\u5176\u5b83\u9886\u57df\uff0c\u8f93\u5165\u6570\u636e\u8981\u8fdb\u884c\u5747\u503c\u65b9\u5dee\u5f52\u4e00\u5316\uff0c\u4f7f\u5f97\u6570\u636e\u91cf\u7eb2\u4e00\u81f4\u5e76\u9075\u5faa\u4e00\u5b9a\u5206\u5e03\uff0c\u907f\u514d\u6a21\u578b\u68af\u5ea6\u7206\u70b8\uff0c\u964d\u4f4e\u5b66\u4e60\u96be\u5ea6\uff1a 1 2 3 4 5 frame_num = mel_spec . shape [ 0 ] cep_sum = np . sum ( mel_spec , axis = 0 ) cep_squ_sum = np . sum ( np . square ( mel_spec ), axis = 0 ) cep_mean = cep_sum / frame_num cep_std = cep_squ_sum / frame_num - np . square ( cep_mean )","title":"\u8bed\u97f3\u7279\u5f81\u63d0\u53d6"},{"location":"dsp/%E8%AF%AD%E9%9F%B3%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96/#_1","text":"\u539f\u59cb\u4fe1\u53f7\u662f\u4e0d\u5b9a\u957f\u7684\u65f6\u5e8f\u4fe1\u53f7\uff0c\u4e0d\u9002\u5408\u4f5c\u4e3a\u673a\u5668\u5b66\u4e60\u7684\u8f93\u5165\u3002\u56e0\u6b64\u4e00\u822c\u9700\u8981\u5c06\u539f\u59cb\u6ce2\u5f62\u8f6c\u6362\u4e3a\u7279\u5b9a\u7684\u7279\u5f81\u5411\u91cf\u8868\u793a\uff0c\u8be5\u8fc7\u7a0b\u79f0\u4e3a\u8bed\u97f3\u7279\u5f81\u63d0\u53d6\u3002","title":"\u8bed\u97f3\u7279\u5f81\u63d0\u53d6"},{"location":"dsp/%E8%AF%AD%E9%9F%B3%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96/#_2","text":"\u5305\u62ec\u9884\u52a0\u91cd\u3001\u5206\u5e27\u548c\u52a0\u7a97\u3002","title":"\u9884\u5904\u7406"},{"location":"dsp/%E8%AF%AD%E9%9F%B3%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96/#_3","text":"\u8bed\u97f3\u7ecf\u8fc7\u8bf4\u8bdd\u4eba\u7684\u53e3\u5507\u8f90\u5c04\u53d1\u51fa\uff0c\u53d7\u5230\u5507\u7aef\u8f90\u5c04\u6291\u5236\uff0c\u9ad8\u9891\u80fd\u91cf\u660e\u663e\u964d\u4f4e\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u5f53\u8bed\u97f3\u4fe1\u53f7\u7684\u9891\u7387\u63d0\u9ad8\u4e24\u500d\u65f6\uff0c\u5176\u529f\u7387\u8c31\u7684\u5e45\u5ea6\u4e0b\u964d\u7ea66dB\uff0c\u5373\u8bed\u97f3\u4fe1\u53f7\u7684\u9ad8\u9891\u90e8\u5206\u53d7\u5230\u7684\u6291\u5236\u5f71\u54cd\u8f83\u5927\u3002\u5728\u8fdb\u884c\u8bed\u97f3\u4fe1\u53f7\u7684\u5206\u6790\u548c\u5904\u7406\u65f6\uff0c\u53ef\u91c7\u7528\u9884\u52a0\u91cd\uff08pre-emphasis\uff09\u7684\u65b9\u6cd5\u8865\u507f\u8bed\u97f3\u4fe1\u53f7\u9ad8\u9891\u90e8\u5206\u7684\u632f\u5e45\uff0c\u5728\u5085\u91cc\u53f6\u53d8\u6362\u64cd\u4f5c\u4e2d\u907f\u514d\u6570\u503c\u95ee\u9898\uff0c\u672c\u8d28\u662f\u65bd\u52a0\u9ad8\u901a\u6ee4\u6ce2\u5668\u3002\u5047\u8bbe\u8f93\u5165\u4fe1\u53f7\u7b2c \\(n\\) \u4e2a\u91c7\u6837\u70b9\u4e3a \\(x[n]\\) \uff0c\u5219\u9884\u52a0\u91cd\u516c\u5f0f\u5982\u4e0b\uff1a \\[ x'[n]=x[n]-a\\times x[n-1] \\] \u5176\u4e2d\uff0c \\(a\\) \u662f\u9884\u52a0\u91cd\u7cfb\u6570\uff0c\u4e00\u822c\u53d6 \\(a=0.97\\) \u6216 \\(a=0.95\\) \u3002","title":"\u9884\u52a0\u91cd"},{"location":"dsp/%E8%AF%AD%E9%9F%B3%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96/#_4","text":"\u8bed\u97f3\u4fe1\u53f7\u662f\u975e\u5e73\u7a33\u4fe1\u53f7\uff0c\u8003\u8651\u5230\u53d1\u6d4a\u97f3\u65f6\u58f0\u5e26\u6709\u89c4\u5f8b\u632f\u52a8\uff0c\u5373\u57fa\u97f3\u9891\u7387\u5728\u77ed\u65f6\u8303\u56f4\u5185\u65f6\u76f8\u5bf9\u56fa\u5b9a\u7684\uff0c\u56e0\u6b64\u53ef\u4ee5\u8ba4\u4e3a\u8bed\u97f3\u4fe1\u53f7\u5177\u6709\u77ed\u65f6\u5e73\u7a33\u7279\u6027\uff0c\u4e00\u822c\u8ba4\u4e3a10ms~50ms\u7684\u8bed\u97f3\u4fe1\u53f7\u7247\u6bb5\u662f\u4e00\u4e2a\u51c6\u7a33\u6001\u8fc7\u7a0b\u3002\u77ed\u65f6\u5206\u6790\u91c7\u7528\u5206\u5e27\u65b9\u5f0f\uff0c\u4e00\u822c\u6bcf\u5e27\u5e27\u957f\u4e3a20ms\u621650ms\u3002\u5047\u8bbe\u8bed\u97f3\u91c7\u6837\u7387\u4e3a16kHz\uff0c\u5e27\u957f\u4e3a20ms\uff0c\u5219\u4e00\u5e27\u6709 \\(16000\\times 0.02=320\\) \u4e2a\u6837\u672c\u70b9\u3002 \u76f8\u90bb\u4e24\u5e27\u4e4b\u95f4\u7684\u57fa\u97f3\u6709\u53ef\u80fd\u53d1\u751f\u53d8\u5316\uff0c\u5982\u4e24\u4e2a\u97f3\u8282\u4e4b\u95f4\uff0c\u6216\u8005\u58f0\u6bcd\u5411\u97f5\u6bcd\u8fc7\u6e21\u3002\u4e3a\u786e\u4fdd\u58f0\u5b66\u7279\u5f81\u53c2\u6570\u7684\u5e73\u6ed1\u6027\uff0c\u4e00\u822c\u91c7\u7528\u91cd\u53e0\u53d6\u5e27\u7684\u65b9\u5f0f\uff0c\u5373\u76f8\u90bb\u5e27\u4e4b\u95f4\u5b58\u5728\u91cd\u53e0\u90e8\u5206\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u5e27\u957f\u548c\u5e27\u79fb\u7684\u6bd4\u4f8b\u4e3a \\(1:4\\) \u6216 \\(1:5\\) \u3002","title":"\u5206\u5e27"},{"location":"dsp/%E8%AF%AD%E9%9F%B3%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96/#_5","text":"\u5206\u5e27\u76f8\u5f53\u4e8e\u5bf9\u8bed\u97f3\u4fe1\u53f7\u52a0\u77e9\u5f62\u7a97\uff0c\u77e9\u5f62\u7a97\u5728\u65f6\u57df\u4e0a\u5bf9\u4fe1\u53f7\u8fdb\u884c\u622a\u65ad\uff0c\u5728\u8fb9\u754c\u5904\u5b58\u5728\u591a\u4e2a\u65c1\u74e3\uff0c\u4f1a\u53d1\u751f\u9891\u8c31\u6cc4\u9732\u3002\u4e3a\u4e86\u51cf\u5c11\u9891\u8c31\u6cc4\u9732\uff0c\u901a\u5e38\u5bf9\u5206\u5e27\u4e4b\u540e\u7684\u4fe1\u53f7\u8fdb\u884c\u5176\u5b83\u5f62\u5f0f\u7684\u52a0\u7a97\u64cd\u4f5c\u3002\u5e38\u7528\u7684\u7a97\u51fd\u6570\u6709\uff1a\u6c49\u660e\uff08Hamming\uff09\u7a97\u3001\u6c49\u5b81\uff08Hanning\uff09\u7a97\u548c\u5e03\u83b1\u514b\u66fc\uff08Blackman\uff09\u7a97\u7b49\u3002 \u6c49\u660e\u7a97\u7684\u7a97\u51fd\u6570\u4e3a\uff1a \\[ W_{ham}[n]=0.54-0.46\\mathop{cos}(\\frac{2\\pi n}{N}-1) \\] \u5176\u4e2d\uff0c \\(0\\leq n\\leq N-1\\) \uff0c \\(N\\) \u662f\u7a97\u7684\u957f\u5ea6\u3002 \u6c49\u5b81\u7a97\u7684\u7a97\u51fd\u6570\u4e3a\uff1a \\[ W_{han}[n]=0.5[1-\\mathop{cos}(\\frac{2\\pi n}{N}-1)] \\] \u5176\u4e2d\uff0c \\(0\\leq n\\leq N-1\\) \uff0c \\(N\\) \u662f\u7a97\u7684\u957f\u5ea6\u3002","title":"\u52a0\u7a97"},{"location":"dsp/%E8%AF%AD%E9%9F%B3%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96/#_6","text":"\u4eba\u7c7b\u542c\u89c9\u7cfb\u7edf\u4e0e\u9891\u8c31\u5206\u6790\u7d27\u5bc6\u76f8\u5173\uff0c\u5bf9\u8bed\u97f3\u4fe1\u53f7\u8fdb\u884c\u9891\u8c31\u5206\u6790\uff0c\u662f\u8ba4\u8bc6\u548c\u5904\u7406\u8bed\u97f3\u4fe1\u53f7\u7684\u91cd\u8981\u65b9\u6cd5\u3002\u58f0\u97f3\u4ece\u9891\u7387\u4e0a\u53ef\u4ee5\u5206\u4e3a\u7eaf\u97f3\u548c\u590d\u5408\u97f3\uff0c\u7eaf\u97f3\u53ea\u5305\u542b\u4e00\u79cd\u9891\u7387\u7684\u58f0\u97f3\uff08\u57fa\u97f3\uff09\uff0c\u800c\u6ca1\u6709\u500d\u97f3\u3002\u590d\u5408\u97f3\u662f\u9664\u4e86\u57fa\u97f3\u4e4b\u5916\uff0c\u8fd8\u5305\u542b\u591a\u79cd\u500d\u97f3\u7684\u58f0\u97f3\u3002\u5927\u90e8\u5206\u8bed\u97f3\u90fd\u662f\u590d\u5408\u97f3\uff0c\u6d89\u53ca\u591a\u4e2a\u9891\u7387\u6bb5\uff0c\u53ef\u4ee5\u901a\u8fc7\u5085\u91cc\u53f6\u53d8\u6362\u8fdb\u884c\u9891\u8c31\u5206\u6790\u3002 \u6bcf\u4e2a\u9891\u7387\u7684\u4fe1\u53f7\u53ef\u4ee5\u7528\u6b63\u5f26\u6ce2\u8868\u793a\uff0c\u91c7\u7528\u6b63\u5f26\u51fd\u6570\u5efa\u6a21\u3002\u57fa\u4e8e\u6b27\u62c9\u516c\u5f0f\uff0c\u53ef\u4ee5\u5c06\u6b63\u5f26\u51fd\u6570\u5bf9\u5e94\u5230\u7edf\u4e00\u7684\u6307\u6570\u5f62\u5f0f\uff1a \\[ e^{jwn}=\\mathop{cos}(wn)+j\\mathop{sin}(wn) \\] \u6b63\u5f26\u51fd\u6570\u5177\u6709\u6b63\u4ea4\u6027\uff0c\u5373\u4efb\u610f\u4e24\u4e2a\u4e0d\u540c\u9891\u7387\u7684\u6b63\u5f26\u6ce2\u4e58\u79ef\uff0c\u5728\u4e24\u8005\u7684\u516c\u5171\u5468\u671f\u5185\u79ef\u5206\u7b49\u4e8e\u96f6\u3002\u6b63\u4ea4\u6027\u7528\u590d\u6307\u6570\u8fd0\u7b97\u8868\u793a\u5982\u4e0b\uff1a \\[ \\int_{-\\infty}^{+\\infty}e^{j\\alpha t}e^{-j\\beta t}dt=0,\\quad if\\ \\alpha\\neq \\beta \\] \u57fa\u4e8e\u6b63\u5f26\u51fd\u6570\u7684\u6b63\u4ea4\u6027\uff0c\u901a\u8fc7\u76f8\u5173\u5904\u7406\u53ef\u4ee5\u4ece\u8bed\u97f3\u4fe1\u53f7\u5206\u79bb\u51fa\u5bf9\u5e94\u4e0d\u540c\u9891\u7387\u7684\u6b63\u5f26\u4fe1\u53f7\u3002\u5bf9\u4e8e\u79bb\u6563\u91c7\u6837\u7684\u8bed\u97f3\u4fe1\u53f7\uff0c\u53ef\u4ee5\u91c7\u7528\u79bb\u6563\u5085\u91cc\u53f6\u53d8\u6362\uff08DFT\uff09\u3002DFT\u7684\u7b2c \\(k\\) \u4e2a\u70b9\u8ba1\u7b97\u5982\u4e0b\uff1a \\[ X[k]=\\sum_{n=0}^{N-1} x[n]e^{-\\frac{j2\\pi kn}{K}},\\quad k=0,1,...,K-1 \\] \u5176\u4e2d\uff0c \\(x[n]\\) \u662f\u65f6\u57df\u6ce2\u5f62\u7b2c \\(n\\) \u4e2a\u91c7\u6837\u70b9\u503c\uff0c \\(X[k]\\) \u662f\u7b2c \\(k\\) \u4e2a\u5085\u91cc\u53f6\u9891\u8c31\u503c\uff0c \\(N\\) \u662f\u91c7\u6837\u70b9\u5e8f\u5217\u7684\u70b9\u6570\uff0c \\(K\\) \u662f\u9891\u8c31\u7cfb\u6570\u7684\u70b9\u6570\uff0c\u4e14 \\(K\\geq N\\) \u3002\u5229\u7528DFT\u83b7\u5f97\u7684\u9891\u8c31\u503c\u901a\u5e38\u662f\u590d\u6570\u5f62\u5f0f\uff0c\u8fd9\u662f\u56e0\u4e3a\u4e0a\u5f0f\u4e2d\uff0c \\[ e^{-\\frac{j2\\pi kn}{K}}=\\mathop{cos}(\\frac{2\\pi kn}{K})-j\\mathop{sin}(\\frac{2\\pi kn}{K}) \\] \u5219 \\[ X[k]=X_{real}[k]-jX_{imag}[k] \\] \u5176\u4e2d\uff0c \\[ X_{real}[k]=\\sum_{n=0}^{N-1}x[n]\\mathop{cos}(\\frac{2\\pi kn}{K}) \\] \\[ X_{imag}[k]=\\sum_{n=0}^{N-1}x[n]\\mathop{sin}(\\frac{2\\pi kn}{K}) \\] \\(N\\) \u4e2a\u91c7\u6837\u70b9\u5e8f\u5217\u7ec4\u6210\u7684\u65f6\u57df\u4fe1\u53f7\u7ecf\u8fc7DFT\u4e4b\u540e\uff0c\u5bf9\u5e94 \\(K\\) \u4e2a\u9891\u7387\u70b9\u3002\u7ecfDFT\u53d8\u6362\u5f97\u5230\u4fe1\u53f7\u7684\u9891\u8c31\u8868\u793a\uff0c\u5176\u9891\u8c31\u5e45\u503c\u548c\u76f8\u4f4d\u968f\u7740\u9891\u7387\u53d8\u5316\u800c\u53d8\u5316\u3002 \u5728\u8bed\u97f3\u4fe1\u53f7\u5904\u7406\u4e2d\u4e3b\u8981\u5173\u6ce8\u4fe1\u53f7\u7684\u9891\u8c31\u5e45\u503c\uff0c\u4e5f\u79f0\u4e3a\u632f\u5e45\u9891\u8c31/\u632f\u5e45\u8c31\uff1a \\[ X_{magnitude}[k]=\\sqrt{X_{real}[k]^2+X_{imag}[k]^2} \\] \u80fd\u91cf\u9891\u8c31/\u80fd\u91cf\u8c31\u662f\u632f\u5e45\u9891\u8c31\u7684\u5e73\u65b9\uff1a \\[ X_{power}[k]=X_{real}[k]^2+X_{imag}[k]^2 \\] \u5404\u79cd\u58f0\u6e90\u53d1\u51fa\u7684\u58f0\u97f3\u5927\u591a\u7531\u8bb8\u591a\u4e0d\u540c\u5f3a\u5ea6\u3001\u4e0d\u540c\u9891\u7387\u7684\u58f0\u97f3\u7ec4\u6210\u590d\u5408\u97f3\uff0c\u5728\u590d\u5408\u97f3\u4e2d\uff0c\u4e0d\u540c\u9891\u7387\u6210\u5206\u4e0e\u80fd\u91cf\u5206\u5e03\u7684\u5173\u7cfb\u79f0\u4e3a\u58f0\u97f3\u7684\u9891\u8c31\uff0c\u5229\u7528\u9891\u8c31\u56fe\u8868\u793a\u5404\u9891\u7387\u6210\u5206\u4e0e\u80fd\u91cf\u5206\u5e03\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u9891\u8c31\u56fe\u6a2a\u8f74\u662f\u9891\u7387\uff08Hz\uff09\uff0c\u7eb5\u8f74\u662f\u5e45\u5ea6\uff08dB\uff09\u3002 \u901a\u8fc7\u5bf9\u9891\u57df\u4fe1\u53f7\u8fdb\u884c\u9006\u5085\u91cc\u53f6\u53d8\u6362\uff08IDFT\uff09\uff0c\u53ef\u4ee5\u6062\u590d\u65f6\u57df\u4fe1\u53f7\uff1a \\[ x[n]=\\frac{1}{K}\\sum_{k=0}^{K-1}X[k]e^{\\frac{j2\\pi kn}{N}},\\quad n=0,1,...,N-1 \\] \u79bb\u6563\u5085\u91cc\u53f6\u53d8\u6362\uff08DFT\uff09\u7684\u8ba1\u7b97\u590d\u6742\u5ea6\u4e3a \\(O(N^2)\\) \uff0c\u53ef\u4ee5\u91c7\u7528\u5feb\u901f\u5085\u91cc\u53f6\u53d8\u6362\uff08FFT\uff09\uff0c\u7b80\u5316\u8ba1\u7b97\u590d\u6742\u5ea6\uff0c\u5728 \\(O(N\\mathop{log}_2 N)\\) \u7684\u65f6\u95f4\u5185\u8ba1\u7b97\u51faDFT\u3002\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u5bf9\u8bed\u97f3\u4fe1\u53f7\u8fdb\u884c\u5206\u5e27\u52a0\u7a97\u5904\u7406\uff0c\u5c06\u5176\u5206\u5272\u6210\u4e00\u5e27\u5e27\u7684\u79bb\u6563\u5e8f\u5217\uff0c\u53ef\u89c6\u4e3a\u77ed\u65f6\u5085\u91cc\u53f6\u53d8\u6362\uff08STFT\uff09\uff1a \\[ X[k,l]=\\sum_{n=0}^{N-1} x_l[n]e^{-\\frac{j2\\pi nk}{K}}=\\sum_{n=0}^{N-1} w[n]x[n+lL]e^{-\\frac{j2\\pi nk}{K}} \\] \u5176\u4e2d\uff0c \\(K\\) \u662fDFT\u540e\u7684\u9891\u7387\u70b9\u4e2a\u6570\uff0c \\(k\\) \u662f\u9891\u7387\u7d22\u5f15\uff0c \\(0\\leq k< K\\) \u3002 \\(X[k,l]\\) \u5efa\u7acb\u8d77\u7d22\u5f15\u4e3a \\(lL\\) \u7684\u65f6\u57df\u4fe1\u53f7\uff0c\u4e0e\u7d22\u5f15\u4e3a \\(k\\) \u7684\u9891\u57df\u4fe1\u53f7\u4e4b\u95f4\u7684\u5173\u7cfb\u3002","title":"\u77ed\u65f6\u5085\u91cc\u53f6\u53d8\u6362"},{"location":"dsp/%E8%AF%AD%E9%9F%B3%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96/#_7","text":"","title":"\u542c\u89c9\u7279\u6027"},{"location":"dsp/%E8%AF%AD%E9%9F%B3%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96/#_8","text":"\u4eba\u7c7b\u5bf9\u4e0d\u540c\u9891\u7387\u7684\u8bed\u97f3\u6709\u4e0d\u540c\u7684\u611f\u77e5\u80fd\u529b\uff1a 1kHz\u4ee5\u4e0b\uff0c\u4eba\u8033\u611f\u77e5\u4e0e\u9891\u7387\u6210\u7ebf\u6027\u5173\u7cfb\u3002 1kHz\u4ee5\u4e0a\uff0c\u4eba\u8033\u611f\u77e5\u4e0e\u9891\u7387\u6210\u5bf9\u6570\u5173\u7cfb\u3002 \u56e0\u6b64\uff0c\u4eba\u8033\u5bf9\u4f4e\u9891\u4fe1\u53f7\u6bd4\u9ad8\u9891\u4fe1\u53f7\u66f4\u4e3a\u654f\u611f\u3002\u56e0\u6b64\u6839\u636e\u4eba\u8033\u7684\u7279\u6027\u63d0\u51fa\u4e86\u4e00\u79cdmel\u523b\u5ea6\uff0c\u5373\u5b9a\u4e491\u4e2amel\u523b\u5ea6\u76f8\u5f53\u4e8e\u4eba\u5bf91kHz\u97f3\u9891\u611f\u77e5\u7a0b\u5ea6\u7684\u5343\u5206\u4e4b\u4e00\uff0cmel\u523b\u5ea6\u8868\u8fbe\u7684\u662f\uff0c\u4ece\u7ebf\u6027\u9891\u7387\u5230\"\u611f\u77e5\u9891\u7387\"\u7684\u8f6c\u6362\u5173\u7cfb\uff1a \\[ mel(f)=2595\\mathop{lg}(1+\\frac{f}{700}) \\] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 from matplotlib import pyplot as plt import numpy as np x = np . linspace ( 0 , 5000 , 50000 ) y = 2595 * np . log10 ( 1 + x / 700 ) x0 = 1000 y0 = 2595 * np . log10 ( 1 + x0 / 700 ) plt . plot ( x , y ) plt . scatter ( x0 , y0 ) plt . plot ([ x0 , x0 ], [ 0 , y0 ], 'k--' ) plt . plot ([ 0 , x0 ], [ x0 , y0 ], 'k--' ) plt . xlabel ( 'f (Hz)' ) plt . ylabel ( 'Mel(f)' ) plt . title ( 'relationship between linear and mel scale' ) plt . xlim ( 0 , x [ - 1 ]) plt . ylim ( 0 , y [ - 1 ]) plt . savefig ( 'mel_vs_f.png' ) plt . show () \u4eba\u4eec\u6839\u636e\u4e00\u7cfb\u5217\u5fc3\u7406\u58f0\u5b66\u5b9e\u9a8c\u5f97\u5230\u4e86\u7c7b\u4f3c\u8033\u8717\u4f5c\u7528\u7684\u6ee4\u6ce2\u5668\u7ec4\uff0c\u7528\u4e8e\u6a21\u62df\u4eba\u8033\u4e0d\u540c\u9891\u6bb5\u58f0\u97f3\u7684\u611f\u77e5\u80fd\u529b\uff0c\u4e5f\u5c31\u662f\u591a\u4e2a\u4e09\u89d2\u6ee4\u6ce2\u5668\u7ec4\u6210\u7684mel\u9891\u7387\u6ee4\u6ce2\u5668\u7ec4\u3002\u6bcf\u4e2a\u6ee4\u6ce2\u5668\u5e26\u5bbd\u4e0d\u7b49\uff0c\u7ebf\u6027\u9891\u7387\u5c0f\u4e8e1000Hz\u7684\u90e8\u5206\u4e3a\u7ebf\u6027\u95f4\u9694\uff0c\u800c\u7ebf\u6027\u9891\u7387\u5927\u4e8e1000Hz\u7684\u90e8\u5206\u4e3a\u5bf9\u6570\u95f4\u9694\u3002\u540c\u6837\u5730\uff0c\u5c06\u6885\u5c14\u9891\u7387\u8f6c\u6362\u5230\u7ebf\u6027\u9891\u7387\u7684\u516c\u5f0f\u4e3a\uff1a \\[ f_{mel}^{-1}=700\\cdot (10^{\\frac{f_{mel}}{2595}}-1) \\]","title":"\u6885\u5c14\u6ee4\u6ce2"},{"location":"dsp/%E8%AF%AD%E9%9F%B3%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96/#bark","text":"\u58f0\u97f3\u7684\u54cd\u5ea6\uff0c\u53cd\u6620\u4eba\u5bf9\u4e0d\u540c\u9891\u7387\u6210\u5206\u58f0\u5f3a/\u58f0\u97f3\u5f3a\u5f31\u7684\u4e3b\u89c2\u611f\u53d7\u3002\u54cd\u5ea6\u4e0e\u58f0\u5f3a\u3001\u9891\u7387\u7684\u5173\u7cfb\u53ef\u4ee5\u7528 \u7b49\u54cd\u5ea6\u8f6e\u5ed3\u66f2\u7ebf \u8868\u793a\u3002 \u4eba\u8033\u5bf9\u54cd\u5ea6\u7684\u611f\u77e5\u6709\u4e00\u4e2a\u8303\u56f4\uff0c\u5f53\u58f0\u97f3\u4f4e\u4e8e\u67d0\u4e2a\u54cd\u5ea6\u65f6\uff0c\u4eba\u8033\u662f\u65e0\u6cd5\u611f\u77e5\u5230\u7684\uff0c\u8fd9\u4e2a\u54cd\u5ea6\u503c\u79f0\u4e3a\u542c\u89c9\u9608\u503c\uff0c\u6216\u79f0\u542c\u9608\u3002\u5728\u5b9e\u9645\u73af\u5883\u4e2d\uff0c\u4f46\u4e00\u4e2a\u8f83\u5f3a\u4fe1\u53f7\uff08\u63a9\u853d\u97f3\uff09\u5b58\u5728\u65f6\uff0c\u542c\u9608\u5c31\u4e0d\u7b49\u4e8e\u5b89\u9759\u65f6\u7684\u9608\u503c\uff0c\u800c\u662f\u6709\u6240\u63d0\u9ad8\u3002\u8fd9\u610f\u5473\u7740\uff0c\u90bb\u8fd1\u9891\u7387\u7684\u4e24\u4e2a\u58f0\u97f3\u4fe1\u53f7\uff0c\u5f31\u54cd\u5ea6\u7684\u58f0\u97f3\u4fe1\u53f7\u4f1a\u88ab\u5f3a\u54cd\u5ea6\u7684\u58f0\u97f3\u4fe1\u53f7\u6240\u63a9\u853d\uff08Mask\uff09\uff0c\u8fd9\u5c31\u662f \u9891\u57df\u63a9\u853d \u3002 \u6839\u636e\u542c\u89c9\u9891\u57df\u5206\u8fa8\u7387\u548c\u9891\u57df\u63a9\u853d\u7684\u7279\u70b9\uff0c\u5b9a\u4e49\u80fd\u591f\u5f15\u8d77\u542c\u89c9\u4e3b\u89c2\u53d8\u5316\u7684\u9891\u7387\u5e26\u5bbd\u4e3a\u4e00\u4e2a \u4e34\u754c\u9891\u5e26 \u3002\u4e00\u4e2a\u4e34\u754c\u9891\u5e26\u7684\u5bbd\u5ea6\u88ab\u79f0\u4e3a\u4e00\u4e2aBark\uff0cBark\u9891\u7387 \\(Z(f)\\) \u548c\u7ebf\u6027\u9891\u7387 \\(f\\) \u7684\u5bf9\u5e94\u5173\u7cfb\u5b9a\u4e49\u5982\u4e0b\uff1a \\[ Z(f)=6\\mathop{ln}(\\frac{f}{600}+((\\frac{f}{600})^2+1)^{\\frac{1}{2}}) \\] \u5176\u4e2d\uff0c\u7ebf\u6027\u9891\u7387 \\(f\\) \u7684\u5355\u4f4d\u4e3aHz\uff0c\u4e34\u754c\u9891\u5e26 \\(Z(f)\\) \u7684\u5355\u4f4d\u4e3aBark\u3002","title":"Bark\u6ee4\u6ce2"},{"location":"dsp/%E8%AF%AD%E9%9F%B3%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96/#_9","text":"\u8bed\u97f3\u4fe1\u53f7\u7684\u4ea7\u751f\u6a21\u578b\u5305\u62ec\u53d1\u751f\u6e90\uff08Source\uff09\u548c\u6ee4\u6ce2\u5668\uff08Filter\uff09\u3002\u4eba\u5728\u53d1\u58f0\u65f6\uff0c\u80ba\u90e8\u7a7a\u6c14\u53d7\u5230\u6324\u538b\u5f62\u6210\u6c14\u6d41\uff0c\u6c14\u6d41\u901a\u8fc7\u58f0\u95e8\uff08\u58f0\u5e26\uff09\u632f\u52a8\u4ea7\u751f\u58f0\u95e8\u6e90\u6fc0\u52b1 \\(e[n]\\) \u3002\u5bf9\u4e8e\u6d4a\u97f3\uff0c\u6fc0\u52b1 \\(e[n]\\) \u662f\u4ee5\u57fa\u97f3\u5468\u671f\u91cd\u590d\u7684\u5355\u4f4d\u51b2\u6fc0\uff1b\u5bf9\u4e8e\u6e05\u97f3\uff0c \\(e[n]\\) \u662f\u5e73\u7a33\u767d\u566a\u58f0\u3002\u8be5\u6fc0\u52b1\u4fe1\u53f7 \\(e[n]\\) \u7ecf\u8fc7\u54bd\u5589\u3001\u53e3\u8154\u5f62\u6210\u58f0\u9053\u7684\u5171\u632f\u548c\u8c03\u5236\uff0c\u7279\u522b\u662f\u820c\u5934\u80fd\u591f\u6539\u53d8\u58f0\u9053\u7684\u5bb9\u79ef\uff0c\u4ece\u800c\u6539\u53d8\u53d1\u97f3\uff0c\u5f62\u6210\u4e0d\u540c\u9891\u7387\u7684\u58f0\u97f3\u3002\u6c14\u6d41\u3001\u58f0\u95e8\u53ef\u4ee5\u7b49\u6548\u4e3a\u4e00\u4e2a\u6fc0\u52b1\u6e90\uff0c\u58f0\u9053\u7b49\u6548\u4e3a\u4e00\u4e2a\u65f6\u53d8\u6ee4\u6ce2\u5668\uff0c\u8bed\u97f3\u4fe1\u53f7 \\(x[n]\\) \u53ef\u4ee5\u88ab\u770b\u6210\u6fc0\u52b1\u4fe1\u53f7 \\(e[n]\\) \u4e0e\u65f6\u53d8\u6ee4\u6ce2\u5668\u7684\u5355\u4f4d\u54cd\u5e94 \\(v[n]\\) \u7684\u5377\u79ef\uff1a \\[ x[n]=e[n]*v[n] \\] \u5df2\u77e5\u8bed\u97f3\u4fe1\u53f7 \\(x[n]\\) \uff0c\u5f85\u6c42\u51fa\u4e0a\u5f0f\u4e2d\u53c2\u4e0e\u5377\u79ef\u7684\u5404\u4e2a\u4fe1\u53f7\u5206\u91cf\uff0c\u4e5f\u5c31\u662f\u89e3\u5377\u79ef\u5904\u7406\u3002\u9664\u4e86\u7ebf\u6027\u9884\u6d4b\u65b9\u6cd5\u5916\uff0c\u8fd8\u53ef\u4ee5\u91c7\u7528 \u5012\u8c31\u5206\u6790 \u5b9e\u73b0\u89e3\u5377\u79ef\u5904\u7406\u3002\u5012\u8c31\u5206\u6790\uff0c\u53c8\u79f0\u4e3a \u540c\u6001\u6ee4\u6ce2 \uff0c\u91c7\u7528\u65f6\u9891\u53d8\u6362\uff0c\u5f97\u5230\u5bf9\u6570\u529f\u7387\u8c31\uff0c\u518d\u8fdb\u884c\u9006\u53d8\u6362\uff0c\u5206\u6790\u51fa\u5012\u8c31\u57df\u7684\u5012\u8c31\u7cfb\u6570\u3002 \u540c\u6001\u6ee4\u6ce2\u7684\u5904\u7406\u8fc7\u7a0b\u5982\u4e0b\uff1a \u5085\u91cc\u53f6\u53d8\u6362\u3002\u5c06\u65f6\u57df\u7684\u5377\u79ef\u4fe1\u53f7\u8f6c\u6362\u4e3a\u9891\u57df\u7684\u4e58\u79ef\u4fe1\u53f7\uff1a \\[ {\\rm DFT}(x[n])=X[z]=E[z]V[z] \\] \u5bf9\u6570\u8fd0\u7b97\u3002\u5c06\u4e58\u79ef\u4fe1\u53f7\u8f6c\u6362\u4e3a\u52a0\u6027\u4fe1\u53f7\uff1a \\[ {\\rm log} X[z]={\\rm log}E[z]+{\\rm log}V[z]=\\hat{E}[z]+\\hat{V}[z]=\\hat{X}[z] \\] \u5085\u91cc\u53f6\u53cd\u53d8\u6362\u3002\u5f97\u5230\u65f6\u57df\u7684\u8bed\u97f3\u4fe1\u53f7 \u5012\u8c31 \u3002 \\[ Z^{-1}(\\hat{X}[z])=Z^{-1}(\\hat{E}[z]+\\hat{V}[z])=\\hat{e}[n]+\\hat{v}[z]\\approx \\hat{x}[n] \\] \u5728\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u8003\u8651\u5230\u79bb\u6563\u4f59\u5f26\u53d8\u6362\uff08DCT\uff09\u5177\u6709\u6700\u4f18\u7684\u53bb\u76f8\u5173\u6027\u80fd\uff0c\u80fd\u591f\u5c06\u4fe1\u53f7\u80fd\u91cf\u96c6\u4e2d\u5230\u6781\u5c11\u6570\u7684\u53d8\u6362\u7cfb\u6570\u4e0a\uff0c\u7279\u522b\u662f\u80fd\u591f\u5c06\u5927\u591a\u6570\u7684\u81ea\u7136\u4fe1\u53f7\uff08\u5305\u62ec\u58f0\u97f3\u548c\u56fe\u50cf\uff09\u7684\u80fd\u91cf\u90fd\u96c6\u4e2d\u5728\u79bb\u6563\u4f59\u5f26\u53d8\u6362\u540e\u7684\u4f4e\u9891\u90e8\u5206\u3002\u4e00\u822c\u91c7\u7528DCT\u53cd\u53d8\u6362\u4ee3\u66ff\u5085\u91cc\u53f6\u53cd\u53d8\u6362\uff0c\u4e0a\u5f0f\u53ef\u4ee5\u6539\u5199\u6210\uff1a \\[ \\hat{c}[m]=\\sum_{k=1}^N{\\rm log}X[k]{\\rm cos}(\\frac{\\pi (k-0.5)m}{N}),\\quad m=1,2,...,M \\] \u5176\u4e2d\uff0c \\(X[k]\\) \u662fDFT\u53d8\u6362\u7cfb\u6570\uff0c \\(N\\) \u662fDFT\u7cfb\u6570\u7684\u4e2a\u6570\uff0c \\(M\\) \u662fDCT\u53d8\u6362\u7684\u4e2a\u6570\u3002 \u6b64\u65f6\uff0c \\(\\hat{x}[n]\\) \u662f\u590d\u5012\u8c31\u4fe1\u53f7\uff0c\u53ef\u91c7\u7528\u9006\u8fd0\u7b97\uff0c\u6062\u590d\u51fa\u8bed\u97f3\u4fe1\u53f7\uff0c\u4f46DCT\u4e0d\u53ef\u9006\uff0c\u4ece\u5012\u8c31\u4fe1\u53f7 \\(\\hat{c}[m]\\) \u4e0d\u53ef\u8fd8\u539f\u51fa\u8bed\u97f3 \\(x[n]\\) \u3002","title":"\u5012\u8c31\u5206\u6790"},{"location":"dsp/%E8%AF%AD%E9%9F%B3%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96/#_10","text":"\u5728\u8bed\u97f3\u5408\u6210\u4e2d\uff0c\u5e38\u7528\u7684\u58f0\u5b66\u7279\u5f81\u6709\u6885\u5c14\u9891\u8c31\uff08Mel-Spectrogram\uff09/\u6ee4\u6ce2\u5668\u7ec4\uff08Filter-bank\uff0cFank\uff09\uff0c\u6885\u5c14\u9891\u7387\u5012\u8c31\u7cfb\u6570\uff08Mel-Frequency Cepstral Coefficient\uff0cMFCC\uff09\u7b49\u3002 \u63a5\u4e0b\u6765\u91cd\u70b9\u4ecb\u7ecdFBank\u548cMFCC\u7684\u8ba1\u7b97\u8fc7\u7a0b\u3002","title":"\u5e38\u89c1\u7684\u58f0\u5b66\u7279\u5f81"},{"location":"dsp/%E8%AF%AD%E9%9F%B3%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96/#fbank","text":"FBank\u7684\u7279\u5f81\u63d0\u53d6\u8fc7\u7a0b\u5982\u4e0b\uff1a \u5c06\u4fe1\u53f7\u8fdb\u884c\u9884\u52a0\u91cd\u3001\u5206\u5e27\u3001\u52a0\u7a97\uff0c\u7136\u540e\u8fdb\u884c\u77ed\u65f6\u5085\u91cc\u53f6\u53d8\u6362\uff08STFT\uff09\u83b7\u5f97\u5bf9\u5e94\u7684 \u9891\u8c31 \u3002 \u6c42\u9891\u8c31\u7684\u5e73\u65b9\uff0c\u5373 \u80fd\u91cf\u8c31 \u3002\u8fdb\u884c\u6885\u5c14\u6ee4\u6ce2\uff0c\u5373\u5c06\u6bcf\u4e2a\u6ee4\u6ce2\u9891\u5e26\u5185\u7684\u80fd\u91cf\u8fdb\u884c\u53e0\u52a0\uff0c\u7b2c \\(k\\) \u4e2a\u6ee4\u6ce2\u5668\u8f93\u51fa\u529f\u7387\u8c31\u4e3a \\(X[k]\\) \u3002 \u5c06\u6bcf\u4e2a\u6ee4\u6ce2\u5668\u7684\u8f93\u51fa\u53d6\u5bf9\u6570\uff0c\u5f97\u5230\u76f8\u5e94\u9891\u5e26\u7684\u5bf9\u6570\u529f\u7387\u8c31\u3002 \\[ Y_{\\rm FBank}[k]={\\rm log}X[k] \\] FBank\u7279\u5f81\u672c\u8d28\u4e0a\u662f\u5bf9\u6570\u529f\u7387\u8c31\uff0c\u5305\u62ec\u4f4e\u9891\u548c\u9ad8\u9891\u4fe1\u606f\u3002\u76f8\u6bd4\u4e8e\u8bed\u8c31\u56fe\uff0cFBank\u7ecf\u8fc7\u4e86\u6885\u5c14\u6ee4\u6ce2\uff0c\u4f9d\u636e\u4eba\u8033\u542c\u89c9\u7279\u6027\u8fdb\u884c\u4e86\u538b\u7f29\uff0c\u6291\u5236\u4e86\u4e00\u90e8\u5206\u4eba\u8033\u65e0\u6cd5\u611f\u77e5\u7684\u5197\u4f59\u4fe1\u606f\u3002","title":"FBank"},{"location":"dsp/%E8%AF%AD%E9%9F%B3%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96/#mfcc","text":"MFCC\u548cFBank\u552f\u4e00\u7684\u4e0d\u540c\u5c31\u5728\u4e8e\uff0c\u83b7\u5f97FBank\u7279\u5f81\u4e4b\u540e\uff0c\u518d\u7ecf\u8fc7\u53cd\u79bb\u6563\u4f59\u5f26\u53d8\u6362\uff0c\u5c31\u5f97\u5230 \\(L\\) \u4e2aMFCC\u7cfb\u6570\u3002\u5728\u5b9e\u9645\u64cd\u4f5c\u4e2d\uff0c\u5f97\u5230\u7684 \\(L\\) \u4e2aMFCC\u7279\u5f81\u503c\u53ef\u4ee5\u4f5c\u4e3a \u9759\u6001\u7279\u5f81 \uff0c\u518d\u5bf9\u8fd9\u4e9b\u9759\u6001\u7279\u5f81\u505a\u4e00\u9636\u548c\u4e8c\u9636\u5dee\u5206\uff0c\u5f97\u5230\u76f8\u5e94\u7684\u9759\u6001\u7279\u5f81\u3002","title":"MFCC"},{"location":"dsp/%E8%AF%AD%E9%9F%B3%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96/#_11","text":"","title":"\u5177\u4f53\u64cd\u4f5c"},{"location":"dsp/%E8%AF%AD%E9%9F%B3%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96/#librosa","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 from matplotlib import pyplot as plt import numpy as np import librosa # \u5229\u7528librosa\u8bfb\u53d6\u97f3\u9891 input_wav_path = r 'test.wav' y , sr = librosa . load ( input_wav_path ) y_num = np . arange ( len ( y )) # \u622a\u53d6\u524d0.3s\u7684\u97f3\u9891 sample_signal = y [ 0 : int ( sr * 0.3 )] sample_num = np . arange ( len ( sample_signal )) plt . figure ( figsize = ( 11 , 7 ), dpi = 500 ) plt . subplot ( 211 ) plt . plot ( y_num / sr , y , color = 'black' ) plt . plot ( sample_num / sr , sample_signal , color = 'blue' ) plt . xlabel ( 'Time (sec)' ) plt . ylabel ( 'Amplitude' ) plt . title ( 'Waveform' ) plt . subplot ( 212 ) plt . plot ( sample_num / sr , sample_signal , color = 'blue' ) plt . xlabel ( 'Time (sec)' ) plt . ylabel ( 'Amplitude' ) plt . title ( '0~0.3s waveform' ) plt . tight_layout () plt . savefig ( 'waveform.png' , dpi = 500 ) plt . show () \u97f3\u9891\u6709\u4e0d\u540c\u7684\u7f16\u7801\u7c7b\u578b\uff0clibrosa\u9ed8\u8ba4\u91c7\u53d6\u6d6e\u70b9\u683c\u5f0f\u8bfb\u53d6\uff0c\u5373\u8bfb\u53d6\u7684\u6837\u672c\u70b9\u5747\u662f \\([-1,-1]\\) \u4e4b\u95f4\u7684\u6d6e\u70b9\u503c\u3002\u66f4\u8be6\u7ec6\u7684\u6587\u6863\u53c2\u89c1 SoX \u7684 Input & Output File Format Options \u90e8\u5206\u3002 \u9009\u9879 \u63cf\u8ff0 \u5e38\u89c1\u53ef\u9009\u9879 b \u6bcf\u4e2a\u7f16\u7801\u6837\u672c\u6240\u5360\u7684\u6570\u636e\u4f4d\u6570\uff08\u4f4d\u6df1\uff09 8/16/32 c \u97f3\u9891\u6587\u4ef6\u5305\u542b\u7684\u901a\u9053\u6570 1 / 2 e \u97f3\u9891\u6587\u4ef6\u7684\u7f16\u7801\u7c7b\u578b signed-integer/unsigned-integer/floating-point r \u97f3\u9891\u6587\u4ef6\u7684\u91c7\u6837\u7387 16k/16000/22050 t \u97f3\u9891\u6587\u4ef6\u7684\u6587\u4ef6\u7c7b\u578b raw/mp3","title":"\u5229\u7528librosa\u8bfb\u53d6\u97f3\u9891"},{"location":"dsp/%E8%AF%AD%E9%9F%B3%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96/#_12","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 sample_rate = 16000 preemphasis = 0.97 n_fft = 1024 frame_length = 0.05 # ms frame_shift = 0.01 # ms fmin = 0 fmax = sample_rate / 2 eps = 1e-10 n_mel = 80 win_length = int ( sample_rate * frame_length ) hop_length = int ( sample_rate * frame_shift ) mel_basis = librosa . filters . mel ( sample_rate , n_fft , n_mel , fmin = fmin , fmax = fmax ) def get_spectrogram ( input_wav_path ): y , sr = librosa . load ( input_wav_path ) y = np . append ( y [ 0 ], y [ 1 :] - preemphasis * y [: - 1 ]) linear = librosa . stft ( y = y , n_fft = n_fft , hop_length = hop_length , win_length = win_length ) mag = np . abs ( linear ) mel = np . dot ( mel_basis , mag ) mel = np . log10 ( np . maximum ( eps , mel )) mel = mel . T . astype ( np . float32 ) # (T,n_mels) return mel # plt.switch_backend('agg') def plot_spectrogram ( spectrogram , file_path ): spectrogram = spectrogram . T fig = plt . figure ( figsize = ( 16 , 9 )) plt . imshow ( spectrogram , aspect = 'auto' , origin = 'lower' ) plt . colorbar () plt . xlabel ( 'frames' ) plt . tight_layout () plt . savefig ( file_path , dpi = 500 ) plt . show () mel_spec = get_spectrogram ( input_wav_path ) plot_spectrogram ( mel_spec , 'mel_spectrogram.png' )","title":"\u63d0\u53d6\u6885\u5c14\u9891\u8c31"},{"location":"dsp/%E8%AF%AD%E9%9F%B3%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96/#mfcc_1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 from scipy.fftpack import dct num_ceps = 12 # MFCC\u9636\u6570\uff0c\u53ef\u9009\u503c2~13 mfcc = dct ( mel_spec , type = 2 , axis = 1 , norm = 'ortho' )[:, 1 : ( num_ceps + 1 )] plot_spectrogram ( mfcc , 'mfcc.png' ) # \u5c06\u6b63\u5f26\u540c\u6001\u6ee4\u6ce2\uff08sinusoidal liftering\uff09\u5e94\u7528\u4e8eMFCC\u4ee5\u53bb\u5f3a\u8c03\u66f4\u9ad8\u7684MFCC\uff0c\u5176\u5df2\u88ab\u8bc1\u660e\u53ef\u4ee5\u6539\u5584\u566a\u58f0\u4fe1\u53f7\u4e2d\u7684\u8bed\u97f3\u8bc6\u522b\u3002 # reference: https://haythamfayek.com/2016/04/21/speech-processing-for-machine-learning.html ( nframes , ncoeff ) = mfcc . shape cep_lifter = 22 n = np . arange ( ncoeff ) lift = 1 + ( cep_lifter / 2 ) * np . sin ( np . pi * n / cep_lifter ) mfcc *= lift plot_spectrogram ( mfcc , 'mfcc_lift.png' ) \u5728\u8bed\u97f3\u5408\u6210\u4e2d\uff0c\u7c7b\u4f3c\u4e8e\u6df1\u5ea6\u5b66\u4e60\u5176\u5b83\u9886\u57df\uff0c\u8f93\u5165\u6570\u636e\u8981\u8fdb\u884c\u5747\u503c\u65b9\u5dee\u5f52\u4e00\u5316\uff0c\u4f7f\u5f97\u6570\u636e\u91cf\u7eb2\u4e00\u81f4\u5e76\u9075\u5faa\u4e00\u5b9a\u5206\u5e03\uff0c\u907f\u514d\u6a21\u578b\u68af\u5ea6\u7206\u70b8\uff0c\u964d\u4f4e\u5b66\u4e60\u96be\u5ea6\uff1a 1 2 3 4 5 frame_num = mel_spec . shape [ 0 ] cep_sum = np . sum ( mel_spec , axis = 0 ) cep_squ_sum = np . sum ( np . square ( mel_spec ), axis = 0 ) cep_mean = cep_sum / frame_num cep_std = cep_squ_sum / frame_num - np . square ( cep_mean )","title":"\u63d0\u53d6MFCC"},{"location":"paper/%E6%9C%AC%E5%91%A8%E5%80%BC%E5%BE%97%E8%AF%BB_2022_04_23/","text":"\u672c\u5468\u503c\u5f97\u8bfb-2022_04_23 The 2021 NIST Speaker Recognition Evaluation \u7b80\u4ecb \u7ed3\u679c \u7b80\u8bc4 \u4ecb\u7ecd\u8bf4\u8bdd\u4eba\u8bc6\u522b\u6bd4\u8d5bSRE21 \u5927\u89c4\u6a21\u591a\u6a21\u6001\u8bf4\u8bdd\u4eba\u8bc6\u522b\u6bd4\u8d5b\uff1aThe 2021 Speaker Recognition Evaluation (SRE21)\u548cSRE19 \u8bed\u97f3-\u89c6\u89c9\u878d\u5408\u6a21\u578b\u663e\u8457\u4f18\u4e8e\u4ec5\u8bed\u97f3/\u4ec5\u89c6\u89c9\u7684\u7cfb\u7edf\uff1b\u6700\u4f18\u8bed\u97f3/\u4eba\u8138\u7684\u8bc6\u522b\u6027\u80fd\u76f8\u5f53\uff1b\u5ea6\u91cf\u635f\u5931+\u590d\u6742\u795e\u7ecf\u7f51\u7edc+\u6570\u636e\u589e\u5f3a+\u957f\u8bed\u6599\u5fae\u8c03\u663e\u8457\u63d0\u5347\u8bed\u97f3\u8bc6\u522b\u7684\u8868\u73b0\u3002 The NIST CTS Speaker Recognition Challenge \u7b80\u4ecb \u7ed3\u679c \u7b80\u8bc4 \u4ecb\u7ecd\u7535\u8bdd\u5bf9\u8bdd\u8bed\u97f3\uff08 Conversational Telephone Speech\uff0cCTS\uff09\u8bf4\u8bdd\u4eba\u8bc6\u522b\u6bd4\u8d5b\u3002 Cross-Speaker Emotion Transfer for Low-Resource Text-to-Speech Using Non-Parallel Voice Conversion with Pitch-Shift Data Augmentation \u7b80\u4ecb \u7ed3\u679c \u7b80\u8bc4 \u4f4e\u8d44\u6e90\u8de8\u8bf4\u8bdd\u4eba\u60c5\u611f\u8fc1\u79fb\u8bed\u97f3\u5408\u6210\uff0c\u4e3b\u8981\u9014\u5f84\u662f\u6570\u636e\u589e\u5f3a \u6837\u97f3\uff1ahttps://ryojerky.github.io/demo_vc-tts-ps/\uff0c\u6548\u679c\u8fd8\u4e0d\u9519\uff0c\u5de5\u7a0b\u6027\u8d28\u6bd4\u8f83\u5f3a FastDiff: A Fast Conditional Diffusion Model for High-Quality Speech Synthesis \u7b80\u4ecb \u7ed3\u679c \u7b80\u8bc4 \u57fa\u4e8e\u6982\u7387\u6269\u6563\u6a21\u578b\u7684\u8bed\u97f3\u5408\u6210\uff0c\u5806\u53e0\u4e0d\u540c\u611f\u53d7\u91ce\u6a21\u5f0f\u65f6\u95f4\u611f\u77e5\u7684\u5c40\u90e8\u5377\u79ef\uff0c\u4ee5\u5efa\u6a21\u53ef\u53d8\u6761\u4ef6\u7684\u957f\u65f6\u4f9d\u8d56\uff0c\u52a0\u5165\u566a\u97f3\u8ba1\u5212\u9884\u6d4b\u5668\uff08noise schedule predictor\uff09\uff0c\u4e0d\u9700\u8981\u6885\u5c14\u9891\u8c31\u7b49\u4e2d\u95f4\u58f0\u5b66\u7279\u5f81\uff0c\u5b8c\u5168\u7aef\u5230\u7aef\u7684\u8bed\u97f3\u5408\u6210\u6a21\u578b\u3002 \u6837\u97f3\u5730\u5740\uff1ahttps://fastdiff.github.io/\u3002\u6837\u97f3\u4e0a\u786e\u5b9e\u8fd8\u4e0d\u9519\uff0c\u6c99\u54d1\u7684\u60c5\u51b5\u53d8\u5c11\u4e86\uff0c\u7279\u522b\u662f\u672a\u89c1\u8bf4\u8bdd\u4eba\u5408\u6210\u4e0a\u4f18\u52bf\u660e\u663e\u3002 \u503c\u5f97\u7814\u7a76\u7684\u8bed\u97f3\u5408\u6210\u8bba\u6587\uff0c\u6700\u8fd1\u6982\u7387\u6269\u6563\u6a21\u578b\u5728\u8bed\u97f3\u5408\u6210\u4e0a\u8f83\u4e3a\u706b\u70ed\u3002 Layer-wise Fast Adaptation for End-to-End Multi-Accent Speech Recognition \u7b80\u4ecb \u7ed3\u679c \u7b80\u8bc4 \u7814\u7a76\u8bed\u97f3\u8bc6\u522b\u4e2d\u7684\u53e3\u97f3\u95ee\u9898\u3002\u5f15\u5165\u53e3\u97f3\u81ea\u9002\u5e94\u7ed3\u6784\uff0c\u8f93\u5165\u4e00\u4e2a\u53e5\u5b50\uff0c\u8be5\u7ed3\u6784\u63d0\u53d6\u5bf9\u5e94\u7684\u53e3\u97f3\u4fe1\u606f\u3002\u5728AESRC2020\u53e3\u97f3\u6570\u636e\u96c6\u548cLibrispeech\u4e0a\uff0c\u83b7\u5f97WER12%\u548c10%\u7684\u76f8\u5bf9\u63d0\u5347\u3002 Clotho-AQA: A Crowdsourced Dataset for Audio Question Answering \u7b80\u4ecb \u7ed3\u679c \u7b80\u8bc4 \u8bed\u97f3\u95ee\u7b54\u6570\u636e\u96c6\u3002\u5305\u62ec1991\u676115\u523030\u79d2\u7684\u97f3\u9891\uff0c\u6bcf\u6761\u8bed\u97f3\u8bbe\u7f6e\u4e866\u4e2a\u56de\u7b54\u3002\u5730\u5740\uff1ahttps://zenodo.org/record/6473207 Exploring Continuous Integrate-and-Fire for Adaptive Simultaneous Speech Translation \u7b80\u4ecb \u7ed3\u679c \u7b80\u8bc4 \u8fde\u7eed\u8bed\u97f3\u7ffb\u8bd1\uff08Simultaneous speech translation\uff0cSimulST\uff09\uff0c\u96be\u70b9\uff1a\u6d41\u5f0f\u6a21\u5f0f\u4e0b\uff0c\u5728\u5c1a\u672a\u83b7\u5f97\u5b8c\u6574\u8f93\u5165\u4e4b\u524d\u5c31\u5f00\u59cb\u7ffb\u8bd1\u51fa\u5bf9\u5e94\u8bed\u97f3\u3002SimulST\u901a\u5e38\u5305\u62ec\u4e24\u4e2a\u7ed3\u6784\uff1a\u6574\u5408\u8bed\u97f3\u4fe1\u606f\u7684\u9884\u51b3\u7b56\uff08pre-decision\uff09\u7ed3\u6784\uff0c\u51b3\u5b9a\u8bfb\u6216\u5199\u7684\u7ed3\u6784\u3002\u8be5\u6587\u9488\u5bf9\u9884\u51b3\u7b56\uff0c\u63d0\u51fa\u8fde\u7eed\u6574\u5408\u548c\u8f93\u51fa\uff08the Continuous Integrateand-Fire\uff0cCIF\uff09\uff0c\u8ba1\u7b97\u66f4\u7b80\u5355\uff0c\u5ef6\u8fdf\u66f4\u5c0f\uff0c\u957f\u53e5\u5408\u6210\u66f4\u597d\u3002 Improving Self-Supervised Speech Representations by Disentangling Speakers \u7b80\u4ecb \u7ed3\u679c \u7b80\u8bc4 \u901a\u8fc7\u89e3\u8026\u8bf4\u8bdd\u4eba\u63d0\u5347\u81ea\u76d1\u7763\u8bed\u97f3\u8868\u793a\uff0c\u8be5\u5de5\u4f5c\u662fHuBERT\u7684\u6539\u8fdb\u3002 An Investigation of Monotonic Transducers for Large-Scale Automatic Speech Recognition \u7b80\u4ecb \u7ed3\u679c \u7b80\u8bc4 Meta\u5de5\u4f5c\uff0c\u901a\u8fc7\u8054\u5408LAS\u8bad\u7ec3\uff0c\u6216\u8005\u5229\u7528RNN-T\u521d\u59cb\u5316\u53c2\u6570\uff0cMonoRNN-T\u548cCTC-T\u7684\u8868\u73b0\u6301\u5e73\u751a\u81f3\u4f18\u4e8eRNN-T\u3002 Time Domain Adversarial Voice Conversion for ADD 2022 \u7b80\u4ecb \u7ed3\u679c \u7b80\u8ff0 \u8d1d\u58f3\u5728ADD 2022\uff08Audio Deep Synthesis Detection Challenge\uff09\u6bd4\u8d5b\u4e2d\u63d0\u51fa\u7684\u8bed\u97f3\u8f6c\u6362\u6a21\u578b\u3002 On the Locality of Attention in Direct Speech Translation \u7b80\u4ecb \u7ed3\u679c \u7b80\u8bc4 \u8bed\u97f3\u7ffb\u8bd1\uff0c\u63d0\u51fa\u4e86\u4e00\u79cd\u5c40\u90e8\u6709\u6548\u6ce8\u610f\u529b\u673a\u5236\u66ff\u6362Transformer\u4e2d\u7684\u6807\u51c6\u81ea\u6ce8\u610f\u529b\u673a\u5236\u3002 Blockwise Streaming Transformer for Spoken Language Understanding and Simultaneous Speech Translation \u7b80\u4ecb \u7ed3\u679c \u7b80\u8bc4 \u9488\u5bf9\u8bed\u8a00\u7406\u89e3\uff08Spoken Language Understanding\uff0cSLU\uff09\u548c\u8bed\u97f3\u7ffb\u8bd1\uff08Speech Translation\uff0cST\uff09\u4efb\u52a1\uff0c\u63d0\u51fa\u4e86\u5757\u72b6\u6d41\u5f0fTransformer\u3002 Self Supervised Adversarial Domain Adaptation for Cross-Corpus and Cross-Language Speech Emotion Recognition \u7b80\u4ecb \u7ed3\u679c \u7b80\u8bc4 \u81ea\u76d1\u7763\u8bed\u97f3\u60c5\u611f\u8bc6\u522b\u3002 Extracting Targeted Training Data from ASR Models, and How to Mitigate It \u7b80\u4ecb \u7ed3\u679c \u7b80\u8bc4 \u8c37\u6b4c\u5de5\u4f5c\uff0c\u9632\u6b62ASR\u6a21\u578b\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u5bfc\u81f4\u7684\u6570\u636e\u6cc4\u9732\u3002 Advances in Thunder Sound Synthesis \u7b80\u4ecb \u7ed3\u679c \u7b80\u8bc4 \u96f7\u58f0\u3001\u7206\u70b8\u58f0\u751f\u6210\u3002https://github.com/bineferg/thunder-synthesis Improving Rare Word Recognition with LM-aware MWER Training \u7b80\u4ecb \u7ed3\u679c \u7b80\u8bc4 \u8c37\u6b4c\u5de5\u4f5c\uff0c\u63d0\u5347\u8bed\u97f3\u8bc6\u522b\u4e2d\u7684\u7f55\u89c1\u8bcd\u8bc6\u522b\u51c6\u786e\u7387\uff0c\u5c06\u8bed\u8a00\u6a21\u578b\u5f15\u5165\u8bed\u97f3\u8bc6\u522b\u58f0\u5b66\u6a21\u578b\u7684\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u3002 Applying Feature Underspecified Lexicon Phonological Features in Multilingual Text-to-Speech \u7b80\u4ecb \u7ed3\u679c \u7b80\u8bc4 \u591a\u8bed\u79cd\u8bed\u97f3\u5408\u6210\u4e2d\u7684\u6587\u672c\u524d\u7aef\u7279\u5f81\u8bbe\u8ba1\u3002 \u6837\u97f3\u6548\u679c\u4e0d\u884c\uff0chttps://congzhang365.github.io/feature_tts/","title":"\u672c\u5468\u503c\u5f97\u8bfb-2022_04_23"},{"location":"paper/%E6%9C%AC%E5%91%A8%E5%80%BC%E5%BE%97%E8%AF%BB_2022_04_23/#-2022_04_23","text":"","title":"\u672c\u5468\u503c\u5f97\u8bfb-2022_04_23"},{"location":"paper/%E6%9C%AC%E5%91%A8%E5%80%BC%E5%BE%97%E8%AF%BB_2022_04_23/#the-2021-nist-speaker-recognition-evaluation","text":"","title":"The 2021 NIST Speaker Recognition Evaluation"},{"location":"paper/%E6%9C%AC%E5%91%A8%E5%80%BC%E5%BE%97%E8%AF%BB_2022_04_23/#_1","text":"","title":"\u7b80\u4ecb"},{"location":"paper/%E6%9C%AC%E5%91%A8%E5%80%BC%E5%BE%97%E8%AF%BB_2022_04_23/#_2","text":"","title":"\u7ed3\u679c"},{"location":"paper/%E6%9C%AC%E5%91%A8%E5%80%BC%E5%BE%97%E8%AF%BB_2022_04_23/#_3","text":"\u4ecb\u7ecd\u8bf4\u8bdd\u4eba\u8bc6\u522b\u6bd4\u8d5bSRE21 \u5927\u89c4\u6a21\u591a\u6a21\u6001\u8bf4\u8bdd\u4eba\u8bc6\u522b\u6bd4\u8d5b\uff1aThe 2021 Speaker Recognition Evaluation (SRE21)\u548cSRE19 \u8bed\u97f3-\u89c6\u89c9\u878d\u5408\u6a21\u578b\u663e\u8457\u4f18\u4e8e\u4ec5\u8bed\u97f3/\u4ec5\u89c6\u89c9\u7684\u7cfb\u7edf\uff1b\u6700\u4f18\u8bed\u97f3/\u4eba\u8138\u7684\u8bc6\u522b\u6027\u80fd\u76f8\u5f53\uff1b\u5ea6\u91cf\u635f\u5931+\u590d\u6742\u795e\u7ecf\u7f51\u7edc+\u6570\u636e\u589e\u5f3a+\u957f\u8bed\u6599\u5fae\u8c03\u663e\u8457\u63d0\u5347\u8bed\u97f3\u8bc6\u522b\u7684\u8868\u73b0\u3002","title":"\u7b80\u8bc4"},{"location":"paper/%E6%9C%AC%E5%91%A8%E5%80%BC%E5%BE%97%E8%AF%BB_2022_04_23/#the-nist-cts-speaker-recognition-challenge","text":"","title":"The NIST CTS Speaker Recognition Challenge"},{"location":"paper/%E6%9C%AC%E5%91%A8%E5%80%BC%E5%BE%97%E8%AF%BB_2022_04_23/#_4","text":"","title":"\u7b80\u4ecb"},{"location":"paper/%E6%9C%AC%E5%91%A8%E5%80%BC%E5%BE%97%E8%AF%BB_2022_04_23/#_5","text":"","title":"\u7ed3\u679c"},{"location":"paper/%E6%9C%AC%E5%91%A8%E5%80%BC%E5%BE%97%E8%AF%BB_2022_04_23/#_6","text":"\u4ecb\u7ecd\u7535\u8bdd\u5bf9\u8bdd\u8bed\u97f3\uff08 Conversational Telephone Speech\uff0cCTS\uff09\u8bf4\u8bdd\u4eba\u8bc6\u522b\u6bd4\u8d5b\u3002","title":"\u7b80\u8bc4"},{"location":"paper/%E6%9C%AC%E5%91%A8%E5%80%BC%E5%BE%97%E8%AF%BB_2022_04_23/#cross-speaker-emotion-transfer-for-low-resource-text-to-speech-using-non-parallel-voice-conversion-with-pitch-shift-data-augmentation","text":"","title":"Cross-Speaker Emotion Transfer for Low-Resource Text-to-Speech Using Non-Parallel Voice Conversion with Pitch-Shift Data Augmentation"},{"location":"paper/%E6%9C%AC%E5%91%A8%E5%80%BC%E5%BE%97%E8%AF%BB_2022_04_23/#_7","text":"","title":"\u7b80\u4ecb"},{"location":"paper/%E6%9C%AC%E5%91%A8%E5%80%BC%E5%BE%97%E8%AF%BB_2022_04_23/#_8","text":"","title":"\u7ed3\u679c"},{"location":"paper/%E6%9C%AC%E5%91%A8%E5%80%BC%E5%BE%97%E8%AF%BB_2022_04_23/#_9","text":"\u4f4e\u8d44\u6e90\u8de8\u8bf4\u8bdd\u4eba\u60c5\u611f\u8fc1\u79fb\u8bed\u97f3\u5408\u6210\uff0c\u4e3b\u8981\u9014\u5f84\u662f\u6570\u636e\u589e\u5f3a \u6837\u97f3\uff1ahttps://ryojerky.github.io/demo_vc-tts-ps/\uff0c\u6548\u679c\u8fd8\u4e0d\u9519\uff0c\u5de5\u7a0b\u6027\u8d28\u6bd4\u8f83\u5f3a","title":"\u7b80\u8bc4"},{"location":"paper/%E6%9C%AC%E5%91%A8%E5%80%BC%E5%BE%97%E8%AF%BB_2022_04_23/#fastdiff-a-fast-conditional-diffusion-model-for-high-quality-speech-synthesis","text":"","title":"FastDiff: A Fast Conditional Diffusion Model for High-Quality Speech Synthesis"},{"location":"paper/%E6%9C%AC%E5%91%A8%E5%80%BC%E5%BE%97%E8%AF%BB_2022_04_23/#_10","text":"","title":"\u7b80\u4ecb"},{"location":"paper/%E6%9C%AC%E5%91%A8%E5%80%BC%E5%BE%97%E8%AF%BB_2022_04_23/#_11","text":"","title":"\u7ed3\u679c"},{"location":"paper/%E6%9C%AC%E5%91%A8%E5%80%BC%E5%BE%97%E8%AF%BB_2022_04_23/#_12","text":"\u57fa\u4e8e\u6982\u7387\u6269\u6563\u6a21\u578b\u7684\u8bed\u97f3\u5408\u6210\uff0c\u5806\u53e0\u4e0d\u540c\u611f\u53d7\u91ce\u6a21\u5f0f\u65f6\u95f4\u611f\u77e5\u7684\u5c40\u90e8\u5377\u79ef\uff0c\u4ee5\u5efa\u6a21\u53ef\u53d8\u6761\u4ef6\u7684\u957f\u65f6\u4f9d\u8d56\uff0c\u52a0\u5165\u566a\u97f3\u8ba1\u5212\u9884\u6d4b\u5668\uff08noise schedule predictor\uff09\uff0c\u4e0d\u9700\u8981\u6885\u5c14\u9891\u8c31\u7b49\u4e2d\u95f4\u58f0\u5b66\u7279\u5f81\uff0c\u5b8c\u5168\u7aef\u5230\u7aef\u7684\u8bed\u97f3\u5408\u6210\u6a21\u578b\u3002 \u6837\u97f3\u5730\u5740\uff1ahttps://fastdiff.github.io/\u3002\u6837\u97f3\u4e0a\u786e\u5b9e\u8fd8\u4e0d\u9519\uff0c\u6c99\u54d1\u7684\u60c5\u51b5\u53d8\u5c11\u4e86\uff0c\u7279\u522b\u662f\u672a\u89c1\u8bf4\u8bdd\u4eba\u5408\u6210\u4e0a\u4f18\u52bf\u660e\u663e\u3002 \u503c\u5f97\u7814\u7a76\u7684\u8bed\u97f3\u5408\u6210\u8bba\u6587\uff0c\u6700\u8fd1\u6982\u7387\u6269\u6563\u6a21\u578b\u5728\u8bed\u97f3\u5408\u6210\u4e0a\u8f83\u4e3a\u706b\u70ed\u3002","title":"\u7b80\u8bc4"},{"location":"paper/%E6%9C%AC%E5%91%A8%E5%80%BC%E5%BE%97%E8%AF%BB_2022_04_23/#layer-wise-fast-adaptation-for-end-to-end-multi-accent-speech-recognition","text":"","title":"Layer-wise Fast Adaptation for End-to-End Multi-Accent Speech Recognition"},{"location":"paper/%E6%9C%AC%E5%91%A8%E5%80%BC%E5%BE%97%E8%AF%BB_2022_04_23/#_13","text":"","title":"\u7b80\u4ecb"},{"location":"paper/%E6%9C%AC%E5%91%A8%E5%80%BC%E5%BE%97%E8%AF%BB_2022_04_23/#_14","text":"","title":"\u7ed3\u679c"},{"location":"paper/%E6%9C%AC%E5%91%A8%E5%80%BC%E5%BE%97%E8%AF%BB_2022_04_23/#_15","text":"\u7814\u7a76\u8bed\u97f3\u8bc6\u522b\u4e2d\u7684\u53e3\u97f3\u95ee\u9898\u3002\u5f15\u5165\u53e3\u97f3\u81ea\u9002\u5e94\u7ed3\u6784\uff0c\u8f93\u5165\u4e00\u4e2a\u53e5\u5b50\uff0c\u8be5\u7ed3\u6784\u63d0\u53d6\u5bf9\u5e94\u7684\u53e3\u97f3\u4fe1\u606f\u3002\u5728AESRC2020\u53e3\u97f3\u6570\u636e\u96c6\u548cLibrispeech\u4e0a\uff0c\u83b7\u5f97WER12%\u548c10%\u7684\u76f8\u5bf9\u63d0\u5347\u3002","title":"\u7b80\u8bc4"},{"location":"paper/%E6%9C%AC%E5%91%A8%E5%80%BC%E5%BE%97%E8%AF%BB_2022_04_23/#clotho-aqa-a-crowdsourced-dataset-for-audio-question-answering","text":"","title":"Clotho-AQA: A Crowdsourced Dataset for Audio Question Answering"},{"location":"paper/%E6%9C%AC%E5%91%A8%E5%80%BC%E5%BE%97%E8%AF%BB_2022_04_23/#_16","text":"","title":"\u7b80\u4ecb"},{"location":"paper/%E6%9C%AC%E5%91%A8%E5%80%BC%E5%BE%97%E8%AF%BB_2022_04_23/#_17","text":"","title":"\u7ed3\u679c"},{"location":"paper/%E6%9C%AC%E5%91%A8%E5%80%BC%E5%BE%97%E8%AF%BB_2022_04_23/#_18","text":"\u8bed\u97f3\u95ee\u7b54\u6570\u636e\u96c6\u3002\u5305\u62ec1991\u676115\u523030\u79d2\u7684\u97f3\u9891\uff0c\u6bcf\u6761\u8bed\u97f3\u8bbe\u7f6e\u4e866\u4e2a\u56de\u7b54\u3002\u5730\u5740\uff1ahttps://zenodo.org/record/6473207","title":"\u7b80\u8bc4"},{"location":"paper/%E6%9C%AC%E5%91%A8%E5%80%BC%E5%BE%97%E8%AF%BB_2022_04_23/#exploring-continuous-integrate-and-fire-for-adaptive-simultaneous-speech-translation","text":"","title":"Exploring Continuous Integrate-and-Fire for Adaptive Simultaneous Speech Translation"},{"location":"paper/%E6%9C%AC%E5%91%A8%E5%80%BC%E5%BE%97%E8%AF%BB_2022_04_23/#_19","text":"","title":"\u7b80\u4ecb"},{"location":"paper/%E6%9C%AC%E5%91%A8%E5%80%BC%E5%BE%97%E8%AF%BB_2022_04_23/#_20","text":"","title":"\u7ed3\u679c"},{"location":"paper/%E6%9C%AC%E5%91%A8%E5%80%BC%E5%BE%97%E8%AF%BB_2022_04_23/#_21","text":"\u8fde\u7eed\u8bed\u97f3\u7ffb\u8bd1\uff08Simultaneous speech translation\uff0cSimulST\uff09\uff0c\u96be\u70b9\uff1a\u6d41\u5f0f\u6a21\u5f0f\u4e0b\uff0c\u5728\u5c1a\u672a\u83b7\u5f97\u5b8c\u6574\u8f93\u5165\u4e4b\u524d\u5c31\u5f00\u59cb\u7ffb\u8bd1\u51fa\u5bf9\u5e94\u8bed\u97f3\u3002SimulST\u901a\u5e38\u5305\u62ec\u4e24\u4e2a\u7ed3\u6784\uff1a\u6574\u5408\u8bed\u97f3\u4fe1\u606f\u7684\u9884\u51b3\u7b56\uff08pre-decision\uff09\u7ed3\u6784\uff0c\u51b3\u5b9a\u8bfb\u6216\u5199\u7684\u7ed3\u6784\u3002\u8be5\u6587\u9488\u5bf9\u9884\u51b3\u7b56\uff0c\u63d0\u51fa\u8fde\u7eed\u6574\u5408\u548c\u8f93\u51fa\uff08the Continuous Integrateand-Fire\uff0cCIF\uff09\uff0c\u8ba1\u7b97\u66f4\u7b80\u5355\uff0c\u5ef6\u8fdf\u66f4\u5c0f\uff0c\u957f\u53e5\u5408\u6210\u66f4\u597d\u3002","title":"\u7b80\u8bc4"},{"location":"paper/%E6%9C%AC%E5%91%A8%E5%80%BC%E5%BE%97%E8%AF%BB_2022_04_23/#improving-self-supervised-speech-representations-by-disentangling-speakers","text":"","title":"Improving Self-Supervised Speech Representations by Disentangling Speakers"},{"location":"paper/%E6%9C%AC%E5%91%A8%E5%80%BC%E5%BE%97%E8%AF%BB_2022_04_23/#_22","text":"","title":"\u7b80\u4ecb"},{"location":"paper/%E6%9C%AC%E5%91%A8%E5%80%BC%E5%BE%97%E8%AF%BB_2022_04_23/#_23","text":"","title":"\u7ed3\u679c"},{"location":"paper/%E6%9C%AC%E5%91%A8%E5%80%BC%E5%BE%97%E8%AF%BB_2022_04_23/#_24","text":"\u901a\u8fc7\u89e3\u8026\u8bf4\u8bdd\u4eba\u63d0\u5347\u81ea\u76d1\u7763\u8bed\u97f3\u8868\u793a\uff0c\u8be5\u5de5\u4f5c\u662fHuBERT\u7684\u6539\u8fdb\u3002","title":"\u7b80\u8bc4"},{"location":"paper/%E6%9C%AC%E5%91%A8%E5%80%BC%E5%BE%97%E8%AF%BB_2022_04_23/#an-investigation-of-monotonic-transducers-for-large-scale-automatic-speech-recognition","text":"","title":"An Investigation of Monotonic Transducers for Large-Scale Automatic Speech Recognition"},{"location":"paper/%E6%9C%AC%E5%91%A8%E5%80%BC%E5%BE%97%E8%AF%BB_2022_04_23/#_25","text":"","title":"\u7b80\u4ecb"},{"location":"paper/%E6%9C%AC%E5%91%A8%E5%80%BC%E5%BE%97%E8%AF%BB_2022_04_23/#_26","text":"","title":"\u7ed3\u679c"},{"location":"paper/%E6%9C%AC%E5%91%A8%E5%80%BC%E5%BE%97%E8%AF%BB_2022_04_23/#_27","text":"Meta\u5de5\u4f5c\uff0c\u901a\u8fc7\u8054\u5408LAS\u8bad\u7ec3\uff0c\u6216\u8005\u5229\u7528RNN-T\u521d\u59cb\u5316\u53c2\u6570\uff0cMonoRNN-T\u548cCTC-T\u7684\u8868\u73b0\u6301\u5e73\u751a\u81f3\u4f18\u4e8eRNN-T\u3002","title":"\u7b80\u8bc4"},{"location":"paper/%E6%9C%AC%E5%91%A8%E5%80%BC%E5%BE%97%E8%AF%BB_2022_04_23/#time-domain-adversarial-voice-conversion-for-add-2022","text":"","title":"Time Domain Adversarial Voice Conversion for ADD 2022"},{"location":"paper/%E6%9C%AC%E5%91%A8%E5%80%BC%E5%BE%97%E8%AF%BB_2022_04_23/#_28","text":"","title":"\u7b80\u4ecb"},{"location":"paper/%E6%9C%AC%E5%91%A8%E5%80%BC%E5%BE%97%E8%AF%BB_2022_04_23/#_29","text":"","title":"\u7ed3\u679c"},{"location":"paper/%E6%9C%AC%E5%91%A8%E5%80%BC%E5%BE%97%E8%AF%BB_2022_04_23/#_30","text":"\u8d1d\u58f3\u5728ADD 2022\uff08Audio Deep Synthesis Detection Challenge\uff09\u6bd4\u8d5b\u4e2d\u63d0\u51fa\u7684\u8bed\u97f3\u8f6c\u6362\u6a21\u578b\u3002","title":"\u7b80\u8ff0"},{"location":"paper/%E6%9C%AC%E5%91%A8%E5%80%BC%E5%BE%97%E8%AF%BB_2022_04_23/#on-the-locality-of-attention-in-direct-speech-translation","text":"","title":"On the Locality of Attention in Direct Speech Translation"},{"location":"paper/%E6%9C%AC%E5%91%A8%E5%80%BC%E5%BE%97%E8%AF%BB_2022_04_23/#_31","text":"","title":"\u7b80\u4ecb"},{"location":"paper/%E6%9C%AC%E5%91%A8%E5%80%BC%E5%BE%97%E8%AF%BB_2022_04_23/#_32","text":"","title":"\u7ed3\u679c"},{"location":"paper/%E6%9C%AC%E5%91%A8%E5%80%BC%E5%BE%97%E8%AF%BB_2022_04_23/#_33","text":"\u8bed\u97f3\u7ffb\u8bd1\uff0c\u63d0\u51fa\u4e86\u4e00\u79cd\u5c40\u90e8\u6709\u6548\u6ce8\u610f\u529b\u673a\u5236\u66ff\u6362Transformer\u4e2d\u7684\u6807\u51c6\u81ea\u6ce8\u610f\u529b\u673a\u5236\u3002","title":"\u7b80\u8bc4"},{"location":"paper/%E6%9C%AC%E5%91%A8%E5%80%BC%E5%BE%97%E8%AF%BB_2022_04_23/#blockwise-streaming-transformer-for-spoken-language-understanding-and-simultaneous-speech-translation","text":"","title":"Blockwise Streaming Transformer for Spoken Language Understanding and Simultaneous Speech Translation"},{"location":"paper/%E6%9C%AC%E5%91%A8%E5%80%BC%E5%BE%97%E8%AF%BB_2022_04_23/#_34","text":"","title":"\u7b80\u4ecb"},{"location":"paper/%E6%9C%AC%E5%91%A8%E5%80%BC%E5%BE%97%E8%AF%BB_2022_04_23/#_35","text":"","title":"\u7ed3\u679c"},{"location":"paper/%E6%9C%AC%E5%91%A8%E5%80%BC%E5%BE%97%E8%AF%BB_2022_04_23/#_36","text":"\u9488\u5bf9\u8bed\u8a00\u7406\u89e3\uff08Spoken Language Understanding\uff0cSLU\uff09\u548c\u8bed\u97f3\u7ffb\u8bd1\uff08Speech Translation\uff0cST\uff09\u4efb\u52a1\uff0c\u63d0\u51fa\u4e86\u5757\u72b6\u6d41\u5f0fTransformer\u3002","title":"\u7b80\u8bc4"},{"location":"paper/%E6%9C%AC%E5%91%A8%E5%80%BC%E5%BE%97%E8%AF%BB_2022_04_23/#self-supervised-adversarial-domain-adaptation-for-cross-corpus-and-cross-language-speech-emotion-recognition","text":"","title":"Self Supervised Adversarial Domain Adaptation for Cross-Corpus and Cross-Language Speech Emotion Recognition"},{"location":"paper/%E6%9C%AC%E5%91%A8%E5%80%BC%E5%BE%97%E8%AF%BB_2022_04_23/#_37","text":"","title":"\u7b80\u4ecb"},{"location":"paper/%E6%9C%AC%E5%91%A8%E5%80%BC%E5%BE%97%E8%AF%BB_2022_04_23/#_38","text":"","title":"\u7ed3\u679c"},{"location":"paper/%E6%9C%AC%E5%91%A8%E5%80%BC%E5%BE%97%E8%AF%BB_2022_04_23/#_39","text":"\u81ea\u76d1\u7763\u8bed\u97f3\u60c5\u611f\u8bc6\u522b\u3002","title":"\u7b80\u8bc4"},{"location":"paper/%E6%9C%AC%E5%91%A8%E5%80%BC%E5%BE%97%E8%AF%BB_2022_04_23/#extracting-targeted-training-data-from-asr-models-and-how-to-mitigate-it","text":"","title":"Extracting Targeted Training Data from ASR Models, and How to Mitigate It"},{"location":"paper/%E6%9C%AC%E5%91%A8%E5%80%BC%E5%BE%97%E8%AF%BB_2022_04_23/#_40","text":"","title":"\u7b80\u4ecb"},{"location":"paper/%E6%9C%AC%E5%91%A8%E5%80%BC%E5%BE%97%E8%AF%BB_2022_04_23/#_41","text":"","title":"\u7ed3\u679c"},{"location":"paper/%E6%9C%AC%E5%91%A8%E5%80%BC%E5%BE%97%E8%AF%BB_2022_04_23/#_42","text":"\u8c37\u6b4c\u5de5\u4f5c\uff0c\u9632\u6b62ASR\u6a21\u578b\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u5bfc\u81f4\u7684\u6570\u636e\u6cc4\u9732\u3002","title":"\u7b80\u8bc4"},{"location":"paper/%E6%9C%AC%E5%91%A8%E5%80%BC%E5%BE%97%E8%AF%BB_2022_04_23/#advances-in-thunder-sound-synthesis","text":"","title":"Advances in Thunder Sound Synthesis"},{"location":"paper/%E6%9C%AC%E5%91%A8%E5%80%BC%E5%BE%97%E8%AF%BB_2022_04_23/#_43","text":"","title":"\u7b80\u4ecb"},{"location":"paper/%E6%9C%AC%E5%91%A8%E5%80%BC%E5%BE%97%E8%AF%BB_2022_04_23/#_44","text":"","title":"\u7ed3\u679c"},{"location":"paper/%E6%9C%AC%E5%91%A8%E5%80%BC%E5%BE%97%E8%AF%BB_2022_04_23/#_45","text":"\u96f7\u58f0\u3001\u7206\u70b8\u58f0\u751f\u6210\u3002https://github.com/bineferg/thunder-synthesis","title":"\u7b80\u8bc4"},{"location":"paper/%E6%9C%AC%E5%91%A8%E5%80%BC%E5%BE%97%E8%AF%BB_2022_04_23/#improving-rare-word-recognition-with-lm-aware-mwer-training","text":"","title":"Improving Rare Word Recognition with LM-aware MWER Training"},{"location":"paper/%E6%9C%AC%E5%91%A8%E5%80%BC%E5%BE%97%E8%AF%BB_2022_04_23/#_46","text":"","title":"\u7b80\u4ecb"},{"location":"paper/%E6%9C%AC%E5%91%A8%E5%80%BC%E5%BE%97%E8%AF%BB_2022_04_23/#_47","text":"","title":"\u7ed3\u679c"},{"location":"paper/%E6%9C%AC%E5%91%A8%E5%80%BC%E5%BE%97%E8%AF%BB_2022_04_23/#_48","text":"\u8c37\u6b4c\u5de5\u4f5c\uff0c\u63d0\u5347\u8bed\u97f3\u8bc6\u522b\u4e2d\u7684\u7f55\u89c1\u8bcd\u8bc6\u522b\u51c6\u786e\u7387\uff0c\u5c06\u8bed\u8a00\u6a21\u578b\u5f15\u5165\u8bed\u97f3\u8bc6\u522b\u58f0\u5b66\u6a21\u578b\u7684\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u3002","title":"\u7b80\u8bc4"},{"location":"paper/%E6%9C%AC%E5%91%A8%E5%80%BC%E5%BE%97%E8%AF%BB_2022_04_23/#applying-feature-underspecified-lexicon-phonological-features-in-multilingual-text-to-speech","text":"","title":"Applying Feature Underspecified Lexicon Phonological Features in Multilingual Text-to-Speech"},{"location":"paper/%E6%9C%AC%E5%91%A8%E5%80%BC%E5%BE%97%E8%AF%BB_2022_04_23/#_49","text":"","title":"\u7b80\u4ecb"},{"location":"paper/%E6%9C%AC%E5%91%A8%E5%80%BC%E5%BE%97%E8%AF%BB_2022_04_23/#_50","text":"","title":"\u7ed3\u679c"},{"location":"paper/%E6%9C%AC%E5%91%A8%E5%80%BC%E5%BE%97%E8%AF%BB_2022_04_23/#_51","text":"\u591a\u8bed\u79cd\u8bed\u97f3\u5408\u6210\u4e2d\u7684\u6587\u672c\u524d\u7aef\u7279\u5f81\u8bbe\u8ba1\u3002 \u6837\u97f3\u6548\u679c\u4e0d\u884c\uff0chttps://congzhang365.github.io/feature_tts/","title":"\u7b80\u8bc4"},{"location":"tts/%E5%A3%B0%E5%AD%A6%E6%A8%A1%E5%9E%8B/","text":"\u58f0\u5b66\u6a21\u578b \u73b0\u4ee3\u5de5\u4e1a\u7ea7\u795e\u7ecf\u7f51\u7edc\u8bed\u97f3\u5408\u6210\u7cfb\u7edf\u4e3b\u8981\u5305\u62ec\u4e09\u4e2a\u90e8\u5206\uff1a\u6587\u672c\u524d\u7aef\u3001\u58f0\u5b66\u6a21\u578b\u548c\u58f0\u7801\u5668\uff0c\u6587\u672c\u8f93\u5165\u5230\u6587\u672c\u524d\u7aef\u4e2d\uff0c\u5c06\u6587\u672c\u8f6c\u6362\u4e3a\u97f3\u7d20\u3001\u97f5\u5f8b\u8fb9\u754c\u7b49\u6587\u672c\u7279\u5f81\u3002\u6587\u672c\u7279\u5f81\u8f93\u5165\u5230\u58f0\u5b66\u6a21\u578b\uff0c\u8f6c\u6362\u4e3a\u5bf9\u5e94\u7684\u58f0\u5b66\u7279\u5f81\u3002\u58f0\u5b66\u7279\u5f81\u8f93\u5165\u5230\u58f0\u7801\u5668\uff0c\u91cd\u5efa\u4e3a\u539f\u59cb\u6ce2\u5f62\u3002 \u4e3b\u8981\u91c7\u7528\u7684\u58f0\u5b66\u6a21\u578b\u5305\u62ecTacotron\u7cfb\u5217\u3001FastSpeech\u7cfb\u5217\u7b49\uff0c\u76ee\u524d\u540c\u6837\u51fa\u73b0\u4e86\u4e00\u4e9b\u5b8c\u5168\u7aef\u5230\u7aef\u7684\u8bed\u97f3\u5408\u6210\u6a21\u578b\uff0c\u4e5f\u5373\u662f\u76f4\u63a5\u7531\u5b57\u7b26/\u97f3\u7d20\u6620\u5c04\u4e3a\u6ce2\u5f62\u3002 Tacotron Tacotron-2\u7b80\u4ecb \u4ee5\u6700\u5e38\u4f7f\u7528\u7684Tacotron-2\u58f0\u5b66\u6a21\u578b\u4e3a\u4f8b\u3002\u539f\u59cb\u8bba\u6587\u53c2\u89c1\uff1a Tacotron: Towards End-to-End Speech Synthesis Natural TTS Synthesis by Conditioning WaveNet on Mel Spectrogram Predictions \u6b64\u5916\uff0c\u8c37\u6b4c\u5728\u8bed\u97f3\u5408\u6210\u9886\u57df\uff0c\u7279\u522b\u662f\u7aef\u5230\u7aef\u8bed\u97f3\u5408\u6210\u9886\u57df\u505a\u51fa\u4e86\u5f00\u521b\u6027\u7684\u5171\u4eab\uff0c\u8be5\u7ec4\u4f1a\u5c06\u6700\u65b0\u7684\u8bba\u6587\u6c47\u603b\u5728 Tacotron(/t\u00e4k\u014d\u02cctr\u00e4n/): An end-to-end speech synthesis system by Google . \u58f0\u5b66\u7279\u5f81\u5efa\u6a21\u7f51\u7edc Tacotron-2\u7684\u58f0\u5b66\u6a21\u578b\u90e8\u5206\u91c7\u7528\u5178\u578b\u7684\u5e8f\u5217\u5230\u5e8f\u5217\u7ed3\u6784\u3002\u7f16\u7801\u5668\u662f3\u4e2a\u5377\u79ef\u5c42\u548c\u4e00\u4e2a\u53cc\u5411LSTM\u5c42\u7ec4\u6210\u7684\u6a21\u5757\uff0c\u5377\u79ef\u5c42\u7ed9\u4e88\u4e86\u6a21\u578b\u7c7b\u4f3c\u4e8eN-gram\u611f\u77e5\u4e0a\u4e0b\u6587\u7684\u80fd\u529b\uff0c\u5e76\u4e14\u5bf9\u4e0d\u53d1\u97f3\u5b57\u7b26\u66f4\u52a0\u9c81\u68d2\u3002\u7ecf\u8bcd\u5d4c\u5165\u7684\u6ce8\u97f3\u5e8f\u5217\u9996\u5148\u8fdb\u5165\u5377\u79ef\u5c42\u63d0\u53d6\u4e0a\u4e0b\u6587\u4fe1\u606f\uff0c\u7136\u540e\u9001\u5165\u53cc\u5411LSTM\u751f\u6210\u7f16\u7801\u5668\u9690\u72b6\u6001\u3002\u7f16\u7801\u5668\u9690\u72b6\u6001\u751f\u6210\u540e\uff0c\u5c31\u4f1a\u88ab\u9001\u5165\u6ce8\u610f\u529b\u673a\u5236\uff0c\u4ee5\u751f\u6210\u7f16\u7801\u5411\u91cf\u3002\u6211\u4eec\u5229\u7528\u4e86\u4e00\u79cd\u88ab\u79f0\u4e3a\u4f4d\u7f6e\u654f\u611f\u6ce8\u610f\u529b\uff08Location Sensitive Attention\uff0cLSA\uff09\uff0c\u8be5\u6ce8\u610f\u529b\u673a\u5236\u7684\u5bf9\u9f50\u51fd\u6570\u4e3a\uff1a \\[ score(s_{i-1},h_j)=v_a^T{\\rm tanh}(Ws_{i-1}+Vh_j+Uf_{i,j}+b) \\] \u5176\u4e2d\uff0c \\(v_a,W,V,U\\) \u4e3a\u5f85\u8bad\u7ec3\u53c2\u6570\uff0c \\(b\\) \u662f\u504f\u7f6e\u503c\uff0c \\(s_{i-1}\\) \u4e3a\u4e0a\u4e00\u65f6\u95f4\u6b65 \\(i-1\\) \u7684\u89e3\u7801\u5668\u9690\u72b6\u6001\uff0c \\(h_j\\) \u4e3a\u5f53\u524d\u65f6\u95f4\u6b65 \\(j\\) \u7684\u7f16\u7801\u5668\u9690\u72b6\u6001\uff0c \\(f_{i,j}\\) \u4e3a\u4e0a\u4e00\u4e2a\u89e3\u7801\u6b65\u7684\u6ce8\u610f\u529b\u6743\u91cd \\(\\alpha_{i-1}\\) \u7ecf\u5377\u79ef\u83b7\u5f97\u7684\u4f4d\u7f6e\u7279\u5f81\uff0c\u5982\u4e0b\u5f0f\uff1a \\[ f_{i,j}=F*\\alpha_{i-1} \\] \u5176\u4e2d\uff0c \\(\\alpha_{i-1}\\) \u662f\u7ecf\u8fc7softmax\u7684\u6ce8\u610f\u529b\u6743\u91cd\u7684\u7d2f\u52a0\u548c\u3002\u4f4d\u7f6e\u654f\u611f\u6ce8\u610f\u529b\u673a\u5236\u4e0d\u4f46\u7efc\u5408\u4e86\u5185\u5bb9\u65b9\u9762\u7684\u4fe1\u606f\uff0c\u800c\u4e14\u5173\u6ce8\u4e86\u4f4d\u7f6e\u7279\u5f81\u3002\u89e3\u7801\u8fc7\u7a0b\u4ece\u8f93\u5165\u4e0a\u4e00\u89e3\u7801\u6b65\u6216\u8005\u771f\u5b9e\u97f3\u9891\u7684\u9891\u8c31\u8fdb\u5165\u89e3\u7801\u5668\u9884\u5904\u7406\u7f51\u7edc\u5f00\u59cb\uff0c\u5230\u7ebf\u6027\u6620\u5c04\u8f93\u51fa\u8be5\u65f6\u95f4\u6b65\u4e0a\u7684\u9891\u8c31\u5e27\u7ed3\u675f\uff0c\u6a21\u578b\u7684\u89e3\u7801\u8fc7\u7a0b\u5982\u4e0b\u56fe\u6240\u793a\u3002 \u9891\u8c31\u751f\u6210\u7f51\u7edc\u7684\u89e3\u7801\u5668\u5c06\u9884\u5904\u7406\u7f51\u7edc\u7684\u8f93\u51fa\u548c\u6ce8\u610f\u529b\u673a\u5236\u7684\u7f16\u7801\u5411\u91cf\u505a\u62fc\u63a5\uff0c\u7136\u540e\u6574\u4f53\u9001\u5165LSTM\u4e2d\uff0cLSTM\u7684\u8f93\u51fa\u7528\u6765\u8ba1\u7b97\u65b0\u7684\u7f16\u7801\u5411\u91cf\uff0c\u6700\u540e\u65b0\u8ba1\u7b97\u51fa\u6765\u7684\u7f16\u7801\u5411\u91cf\u4e0eLSTM\u8f93\u51fa\u505a\u62fc\u63a5\uff0c\u9001\u5165\u6620\u5c04\u5c42\u4ee5\u8ba1\u7b97\u8f93\u51fa\u3002\u8f93\u51fa\u6709\u4e24\u79cd\u5f62\u5f0f\uff0c\u4e00\u79cd\u662f\u9891\u8c31\u5e27\uff0c\u53e6\u4e00\u79cd\u662f\u505c\u6b62\u7b26\u7684\u6982\u7387\uff0c\u540e\u8005\u662f\u4e00\u4e2a\u7b80\u5355\u4e8c\u5206\u7c7b\u95ee\u9898\uff0c\u51b3\u5b9a\u89e3\u7801\u8fc7\u7a0b\u662f\u5426\u7ed3\u675f\u3002\u4e3a\u4e86\u80fd\u591f\u6709\u6548\u52a0\u901f\u8ba1\u7b97\uff0c\u51cf\u5c0f\u5185\u5b58\u5360\u7528\uff0c\u5f15\u5165\u7f29\u51cf\u56e0\u5b50r\uff08Reduction Factor\uff09\uff0c\u5373\u6bcf\u4e00\u4e2a\u65f6\u95f4\u6b65\u5141\u8bb8\u89e3\u7801\u5668\u9884\u6d4br\u4e2a\u9891\u8c31\u5e27\u8fdb\u884c\u8f93\u51fa\u3002\u89e3\u7801\u5b8c\u6210\u540e\uff0c\u9001\u5165\u540e\u5904\u7406\u7f51\u7edc\u5904\u7406\u4ee5\u751f\u6210\u6700\u7ec8\u7684\u6885\u5c14\u9891\u8c31\uff0c\u5982\u4e0b\u5f0f\u6240\u793a\u3002 \\[ s_{final}=s_i+s_i' \\] \u5176\u4e2d\uff0c \\(s_i\\) \u662f\u89e3\u7801\u5668\u8f93\u51fa\uff0c \\(s_{final}\\) \u8868\u793a\u6700\u7ec8\u8f93\u51fa\u7684\u6885\u5c14\u9891\u8c31\uff0c \\(s_i'\\) \u662f\u540e\u5904\u7406\u7f51\u7edc\u7684\u8f93\u51fa\uff0c\u89e3\u7801\u5668\u7684\u8f93\u51fa\u7ecf\u8fc7\u540e\u5904\u7406\u7f51\u7edc\u4e4b\u540e\u83b7\u5f97 \\(s_i'\\) \u3002 \u5728Tacotron-2\u539f\u59cb\u8bba\u6587\u4e2d\uff0c\u76f4\u63a5\u5c06\u6885\u5c14\u9891\u8c31\u9001\u5165\u58f0\u7801\u5668WaveNet\u751f\u6210\u6700\u7ec8\u7684\u65f6\u57df\u6ce2\u5f62\u3002\u4f46\u662fWaveNet\u8ba1\u7b97\u590d\u6742\u5ea6\u8fc7\u9ad8\uff0c\u51e0\u4e4e\u65e0\u6cd5\u5b9e\u9645\u4f7f\u7528\uff0c\u56e0\u6b64\u53ef\u4ee5\u4f7f\u7528\u5176\u5b83\u58f0\u7801\u5668\uff0c\u6bd4\u5982Griffin-Lim\u3001HiFiGAN\u7b49\u3002 \u635f\u5931\u51fd\u6570 Tacotron2\u7684\u635f\u5931\u51fd\u6570\u4e3b\u8981\u5305\u62ec\u4ee5\u4e0b4\u4e2a\u65b9\u9762\uff1a \u8fdb\u5165\u540e\u5904\u7406\u7f51\u7edc\u524d\u540e\u7684\u5e73\u65b9\u635f\u5931\u3002 \\[ {\\rm MelLoss}=\\frac{1}{n}\\sum_{i=1}^n(y_{real,i}^{mel}-y_{before,i}^{mel})^2+\\frac{1}{n}\\sum_{i=1}^n(y_{real,i}^{mel}-y_{after,i}^{mel})^2 \\] \u5176\u4e2d\uff0c \\(y_{real,i}^{mel}\\) \u8868\u793a\u4ece\u97f3\u9891\u4e2d\u63d0\u53d6\u7684\u771f\u5b9e\u9891\u8c31\uff0c \\(y_{before,i}^{mel},y_{after,i}^{mel}\\) \u5206\u522b\u4e3a\u8fdb\u5165\u540e\u5904\u7406\u7f51\u7edc\u524d\u3001\u540e\u7684\u89e3\u7801\u5668\u8f93\u51fa\uff0c \\(n\\) \u4e3a\u6bcf\u6279\u7684\u6837\u672c\u6570\u3002 \u4eceCBHG\u6a21\u5757\u4e2d\u8f93\u51fa\u7ebf\u6027\u8c31\u7684\u5e73\u65b9\u635f\u5931\u3002 \\[ {\\rm LinearLoss}=\\frac{1}{n}\\sum_{i=1}^{n}(y_{real,i}^{linear}-y_{i}^{linear})^2 \\] \u5176\u4e2d\uff0c \\(y_{real,i}^{linear}\\) \u662f\u4ece\u771f\u5b9e\u8bed\u97f3\u4e2d\u8ba1\u7b97\u83b7\u5f97\u7684\u7ebf\u6027\u8c31\uff0c \\(y_{i}^{linear}\\) \u662f\u4eceCBHG\u6a21\u5757\u8f93\u51fa\u7684\u7ebf\u6027\u8c31\u3002 \u505c\u6b62\u7b26\u4ea4\u53c9\u71b5 \\[ {\\rm StopTokenLoss}=-[y\\cdot {\\rm log}(p)+(1-y)\\cdot {\\rm log}(1-p)] \\] \u5176\u4e2d\uff0c \\(y\\) \u4e3a\u505c\u6b62\u7b26\u771f\u5b9e\u6982\u7387\u5206\u5e03\uff0c \\(p\\) \u662f\u89e3\u7801\u5668\u7ebf\u6027\u6620\u5c04\u8f93\u51fa\u7684\u9884\u6d4b\u5206\u5e03\u3002 L2\u6b63\u5219\u5316 \\[ {\\rm RegulationLoss}=\\frac{1}{K}\\sum_{k=1}^K w_k^2 \\] \u5176\u4e2d\uff0c \\(K\\) \u4e3a\u53c2\u6570\u603b\u6570\uff0c \\(w_k\\) \u4e3a\u6a21\u578b\u4e2d\u7684\u53c2\u6570\uff0c\u8fd9\u91cc\u6392\u9664\u504f\u7f6e\u503c\u3001RNN\u4ee5\u53ca\u7ebf\u6027\u6620\u5c04\u4e2d\u7684\u53c2\u6570\u3002\u6700\u7ec8\u7684\u635f\u5931\u51fd\u6570\u4e3a\u4e0a\u8ff04\u4e2a\u90e8\u5206\u7684\u635f\u5931\u4e4b\u548c\uff0c\u5982\u4e0b\u5f0f\uff1a \\[ {\\rm Loss}={\\rm MelLoss}+{\\rm LinearLoss}+{\\rm StopTokenLoss}+{\\rm RegulationLoss} \\] FastSpeech FastSpeech\u662f\u57fa\u4e8eTransformer\u663e\u5f0f\u65f6\u957f\u5efa\u6a21\u7684\u58f0\u5b66\u6a21\u578b\uff0c\u7531\u5fae\u8f6f\u548c\u6d59\u5927\u63d0\u51fa\u3002\u539f\u59cb\u8bba\u6587\u53c2\u89c1\uff1a FastSpeech: Fast, Robust and Controllable Text to Speech FastSpeech 2: Fast and High-Quality End-to-End Text to Speech \u76f8\u5bf9\u5e94\u5730\uff0c\u5fae\u8f6f\u5728\u8bed\u97f3\u5408\u6210\u9886\u57df\u7684\u8bba\u6587\u5e38\u5e38\u53d1\u5e03\u5728 Microsoft-Speech Research \u3002 \u6a21\u578b\u7ed3\u6784 FastSpeech 2\u548c\u4e0a\u4ee3FastSpeech\u7684\u7f16\u89e3\u7801\u5668\u5747\u662f\u91c7\u7528FFT\uff08feed-forward Transformer\uff0c\u524d\u9988Transformer\uff09\u5757\u3002\u7f16\u89e3\u7801\u5668\u7684\u8f93\u5165\u9996\u5148\u8fdb\u884c\u4f4d\u7f6e\u7f16\u7801\uff0c\u4e4b\u540e\u8fdb\u5165FFT\u5757\u3002FFT\u5757\u4e3b\u8981\u5305\u62ec\u591a\u5934\u6ce8\u610f\u529b\u6a21\u5757\u548c\u4f4d\u7f6e\u524d\u9988\u7f51\u7edc\uff0c\u4f4d\u7f6e\u524d\u9988\u7f51\u7edc\u53ef\u4ee5\u7531\u82e5\u5e72\u5c42Conv1d\u3001LayerNorm\u548cDropout\u7ec4\u6210\u3002 \u8bba\u6587\u4e2d\u63d0\u5230\u8bed\u97f3\u5408\u6210\u662f\u5178\u578b\u7684\u4e00\u5bf9\u591a\u95ee\u9898\uff0c\u540c\u6837\u7684\u6587\u672c\u53ef\u4ee5\u5408\u6210\u65e0\u6570\u79cd\u8bed\u97f3\u3002\u4e0a\u4e00\u4ee3FastSpeech\u4e3b\u8981\u901a\u8fc7\u76ee\u6807\u4fa7\u4f7f\u7528\u6559\u5e08\u6a21\u578b\u7684\u5408\u6210\u9891\u8c31\u800c\u975e\u771f\u5b9e\u9891\u8c31\uff0c\u4ee5\u7b80\u5316\u6570\u636e\u504f\u5dee\uff0c\u51cf\u5c11\u8bed\u97f3\u4e2d\u7684\u591a\u6837\u6027\uff0c\u4ece\u800c\u964d\u4f4e\u8bad\u7ec3\u96be\u5ea6\uff1b\u5411\u6a21\u578b\u63d0\u4f9b\u989d\u5916\u7684\u65f6\u957f\u4fe1\u606f\u4e24\u4e2a\u9014\u5f84\u89e3\u51b3\u4e00\u5bf9\u591a\u7684\u95ee\u9898\u3002\u5728\u8bed\u97f3\u4e2d\uff0c\u97f3\u7d20\u65f6\u957f\u81ea\u4e0d\u5fc5\u8bf4\uff0c\u76f4\u63a5\u5f71\u54cd\u53d1\u97f3\u957f\u5ea6\u548c\u6574\u4f53\u97f5\u5f8b\uff1b\u97f3\u8c03\u5219\u662f\u5f71\u54cd\u60c5\u611f\u548c\u97f5\u5f8b\u7684\u53e6\u4e00\u4e2a\u7279\u5f81\uff1b\u80fd\u91cf\u5219\u5f71\u54cd\u9891\u8c31\u7684\u5e45\u5ea6\uff0c\u76f4\u63a5\u5f71\u54cd\u97f3\u9891\u7684\u97f3\u91cf\u3002\u5728FastSpeech 2\u4e2d\u5bf9\u8fd9\u4e09\u4e2a\u6700\u91cd\u8981\u7684\u8bed\u97f3\u5c5e\u6027\u5355\u72ec\u5efa\u6a21\uff0c\u4ece\u800c\u7f13\u89e3\u4e00\u5bf9\u591a\u5e26\u6765\u7684\u6a21\u578b\u5b66\u4e60\u76ee\u6807\u4e0d\u786e\u5b9a\u7684\u95ee\u9898\u3002 \u5728\u5bf9\u65f6\u957f\u3001\u57fa\u9891\u548c\u80fd\u91cf\u5355\u72ec\u5efa\u6a21\u65f6\uff0c\u6240\u4f7f\u7528\u7684\u7f51\u7edc\u7ed3\u6784\u5b9e\u9645\u662f\u76f8\u4f3c\u7684\uff0c\u5728\u8bba\u6587\u4e2d\u79f0\u8fd9\u79cd\u8bed\u97f3\u5c5e\u6027\u5efa\u6a21\u7f51\u7edc\u4e3a\u53d8\u91cf\u9002\u914d\u5668\uff08Variance Adaptor\uff09\u3002\u65f6\u957f\u9884\u6d4b\u7684\u8f93\u51fa\u4e5f\u4f5c\u4e3a\u57fa\u9891\u548c\u80fd\u91cf\u9884\u6d4b\u7684\u8f93\u5165\u3002\u6700\u540e\uff0c\u57fa\u9891\u9884\u6d4b\u548c\u80fd\u91cf\u9884\u6d4b\u7684\u8f93\u51fa\uff0c\u4ee5\u53ca\u4f9d\u9760\u65f6\u957f\u4fe1\u606f\u5c55\u5f00\u7684\u7f16\u7801\u5668\u8f93\u5165\u5143\u7d20\u52a0\u8d77\u6765\uff0c\u4f5c\u4e3a\u4e0b\u6e38\u7f51\u7edc\u7684\u8f93\u5165\u3002\u53d8\u91cf\u9002\u914d\u5668\u4e3b\u8981\u662f\u75312\u5c42\u5377\u79ef\u548c1\u5c42\u7ebf\u6027\u6620\u5c04\u5c42\u7ec4\u6210\uff0c\u6bcf\u5c42\u5377\u79ef\u540e\u52a0ReLU\u6fc0\u6d3b\u3001LayerNorm\u548cDropout\u3002\u4ee3\u7801\u6458\u6284\u81ea FastSpeech2 \uff0c\u6dfb\u52a0\u4e86\u4e00\u4e9b\u6ce8\u91ca\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 class VariancePredictor ( nn . Module ): \"\"\" Duration, Pitch and Energy Predictor \"\"\" def __init__ ( self ): super ( VariancePredictor , self ) . __init__ () self . input_size = hp . encoder_hidden self . filter_size = hp . variance_predictor_filter_size self . kernel = hp . variance_predictor_kernel_size self . conv_output_size = hp . variance_predictor_filter_size self . dropout = hp . variance_predictor_dropout self . conv_layer = nn . Sequential ( OrderedDict ([ ( \"conv1d_1\" , Conv ( self . input_size , self . filter_size , kernel_size = self . kernel , padding = ( self . kernel - 1 ) // 2 )), ( \"relu_1\" , nn . ReLU ()), ( \"layer_norm_1\" , nn . LayerNorm ( self . filter_size )), ( \"dropout_1\" , nn . Dropout ( self . dropout )), ( \"conv1d_2\" , Conv ( self . filter_size , self . filter_size , kernel_size = self . kernel , padding = 1 )), ( \"relu_2\" , nn . ReLU ()), ( \"layer_norm_2\" , nn . LayerNorm ( self . filter_size )), ( \"dropout_2\" , nn . Dropout ( self . dropout )) ])) self . linear_layer = nn . Linear ( self . conv_output_size , 1 ) def forward ( self , encoder_output , mask ): ''' :param encoder_output: Output of encoder. [batch_size,seq_len,encoder_hidden] :param mask: Mask for encoder. [batch_size,seq_len] ''' out = self . conv_layer ( encoder_output ) out = self . linear_layer ( out ) out = out . squeeze ( - 1 ) if mask is not None : out = out . masked_fill ( mask , 0. ) return out \u5229\u7528\u8be5\u53d8\u91cf\u9002\u914d\u5668\u5bf9\u65f6\u957f\u3001\u57fa\u9891\u548c\u80fd\u91cf\u8fdb\u884c\u5efa\u6a21\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 class VarianceAdaptor ( nn . Module ): \"\"\" Variance Adaptor \"\"\" def __init__ ( self ): super ( VarianceAdaptor , self ) . __init__ () self . duration_predictor = VariancePredictor () self . length_regulator = LengthRegulator () self . pitch_predictor = VariancePredictor () self . energy_predictor = VariancePredictor () self . pitch_bins = nn . Parameter ( torch . exp ( torch . linspace ( np . log ( hp . f0_min ), np . log ( hp . f0_max ), hp . n_bins - 1 )), requires_grad = False ) self . energy_bins = nn . Parameter ( torch . linspace ( hp . energy_min , hp . energy_max , hp . n_bins - 1 ), requires_grad = False ) self . pitch_embedding = nn . Embedding ( hp . n_bins , hp . encoder_hidden ) self . energy_embedding = nn . Embedding ( hp . n_bins , hp . encoder_hidden ) def forward ( self , x , src_mask , mel_mask = None , duration_target = None , pitch_target = None , energy_target = None , max_len = None , d_control = 1.0 , p_control = 1.0 , e_control = 1.0 ): ''' :param x: Output of encoder. [batch_size,seq_len,encoder_hidden] :param src_mask: Mask of encoder, can get src_mask form input_lengths. [batch_size,seq_len] :param duration_target, pitch_target, energy_target: Ground-truth when training, None when synthesis. [batch_size,seq_len] ''' log_duration_prediction = self . duration_predictor ( x , src_mask ) if duration_target is not None : x , mel_len = self . length_regulator ( x , duration_target , max_len ) else : duration_rounded = torch . clamp ( ( torch . round ( torch . exp ( log_duration_prediction ) - hp . log_offset ) * d_control ), min = 0 ) x , mel_len = self . length_regulator ( x , duration_rounded , max_len ) mel_mask = utils . get_mask_from_lengths ( mel_len ) pitch_prediction = self . pitch_predictor ( x , mel_mask ) if pitch_target is not None : pitch_embedding = self . pitch_embedding ( torch . bucketize ( pitch_target , self . pitch_bins )) else : pitch_prediction = pitch_prediction * p_control pitch_embedding = self . pitch_embedding ( torch . bucketize ( pitch_prediction , self . pitch_bins )) energy_prediction = self . energy_predictor ( x , mel_mask ) if energy_target is not None : energy_embedding = self . energy_embedding ( torch . bucketize ( energy_target , self . energy_bins )) else : energy_prediction = energy_prediction * e_control energy_embedding = self . energy_embedding ( torch . bucketize ( energy_prediction , self . energy_bins )) x = x + pitch_embedding + energy_embedding return x , log_duration_prediction , pitch_prediction , energy_prediction , mel_len , mel_mask \u540c\u6837\u662f\u901a\u8fc7\u957f\u5ea6\u8c03\u8282\u5668\uff08Length Regulator\uff09\uff0c\u5229\u7528\u65f6\u957f\u4fe1\u606f\u5c06\u7f16\u7801\u5668\u8f93\u51fa\u957f\u5ea6\u6269\u5c55\u5230\u9891\u8c31\u957f\u5ea6\u3002\u5177\u4f53\u5b9e\u73b0\u5c31\u662f\u6839\u636eduration\u7684\u5177\u4f53\u503c\uff0c\u76f4\u63a5\u4e0a\u91c7\u6837\u3002\u4e00\u4e2a\u97f3\u7d20\u65f6\u957f\u4e3a2\uff0c\u5c31\u5c06\u7f16\u7801\u5668\u8f93\u51fa\u590d\u52362\u4efd\uff0c\u7ed93\u5c31\u76f4\u63a5\u590d\u52363\u4efd\uff0c\u62fc\u63a5\u4e4b\u540e\u4f5c\u4e3a\u6700\u7ec8\u7684\u8f93\u51fa\u3002\u5b9e\u73b0\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 class LengthRegulator ( nn . Module ): \"\"\" Length Regulator \"\"\" def __init__ ( self ): super ( LengthRegulator , self ) . __init__ () def LR ( self , x , duration , max_len ): ''' :param x: Output of encoder. [batch_size,phoneme_seq_len,encoder_hidden] :param duration: Duration for phonemes. [batch_size,phoneme_seq_len] :param max_len: Max length for mel-frames. scaler Return: output: Expanded output of encoder. [batch_size,mel_len,encoder_hidden] ''' output = list () mel_len = list () for batch , expand_target in zip ( x , duration ): # batch: [seq_len,encoder_hidden] # expand_target: [seq_len] expanded = self . expand ( batch , expand_target ) output . append ( expanded ) mel_len . append ( expanded . shape [ 0 ]) if max_len is not None : output = utils . pad ( output , max_len ) else : output = utils . pad ( output ) return output , torch . LongTensor ( mel_len ) . to ( device ) def expand ( self , batch , predicted ): out = list () for i , vec in enumerate ( batch ): # expand_size: scaler expand_size = predicted [ i ] . item () # Passing -1 as the size for a dimension means not changing the size of that dimension. out . append ( vec . expand ( int ( expand_size ), - 1 )) out = torch . cat ( out , 0 ) return out def forward ( self , x , duration , max_len ): output , mel_len = self . LR ( x , duration , max_len ) return output , mel_len \u5bf9\u4e8e\u97f3\u9ad8\u548c\u80fd\u91cf\u7684\u9884\u6d4b\uff0c\u6a21\u5757\u7684\u4e3b\u5e72\u7f51\u7edc\u76f8\u4f3c\uff0c\u4f46\u4f7f\u7528\u65b9\u6cd5\u6709\u6240\u4e0d\u540c\u3002\u4ee5\u97f3\u9ad8\u4e3a\u4f8b\uff0c\u80fd\u91cf\u7684\u4f7f\u7528\u65b9\u5f0f\u76f8\u4f3c\u3002\u9996\u5148\u5bf9\u9884\u6d4b\u51fa\u7684\u5b9e\u6570\u57df\u97f3\u9ad8\u503c\u8fdb\u884c\u5206\u6876\uff0c\u6620\u5c04\u4e3a\u4e00\u5b9a\u8303\u56f4\u5185\u7684\u81ea\u7136\u6570\u96c6\uff0c\u7136\u540e\u505a\u5d4c\u5165\u3002 1 2 3 4 5 6 7 8 pitch_prediction = self . pitch_predictor ( x , mel_mask ) if pitch_target is not None : pitch_embedding = self . pitch_embedding ( torch . bucketize ( pitch_target , self . pitch_bins )) else : pitch_prediction = pitch_prediction * p_control pitch_embedding = self . pitch_embedding ( torch . bucketize ( pitch_prediction , self . pitch_bins )) \u8fd9\u91cc\u7528\u5230\u4e86Pytorch\u4e2d\u4e00\u4e2a\u4e0d\u662f\u7279\u522b\u5e38\u89c1\u7684\u51fd\u6570 torch.bucketize \u3002\u8fd9\u662fPytorch\u4e2d\u7684\u5206\u6876\u51fd\u6570\uff0cboundaries\u786e\u5b9a\u4e86\u5404\u4e2a\u6876\u7684\u8fb9\u754c\uff0c\u662f\u4e00\u4e2a\u5355\u8c03\u9012\u589e\u5411\u91cf\uff0c\u7528\u4e8e\u5212\u5206input\uff0c\u5e76\u8fd4\u56deinput\u6240\u5c5e\u6876\u7684\u7d22\u5f15\uff0c\u6876\u7d22\u5f15\u4ece0\u5f00\u59cb\u3002 \u80fd\u91cf\u5d4c\u5165\u5411\u91cf\u7684\u8ba1\u7b97\u65b9\u6cd5\u4e0e\u4e4b\u7c7b\u4f3c\u3002\u81f3\u6b64\uff0c\u83b7\u5f97\u4e86\u5c55\u5f00\u4e4b\u540e\u7684\u7f16\u7801\u5668\u8f93\u51fax\uff0c\u57fa\u9891\u5d4c\u5165\u5411\u91cf pitch_embedding \u548c\u80fd\u91cf\u5d4c\u5165\u5411\u91cf energy_embedding \u4e4b\u540e\uff0c\u5143\u7d20\u52a0\u83b7\u5f97\u6700\u7ec8\u7f16\u89e3\u7801\u5668\u7684\u8f93\u5165\u3002 \u635f\u5931\u51fd\u6570 FastSpeech 2\u7684\u76ee\u6807\u51fd\u6570\u7531PostNet\u524d\u540e\u7684\u9891\u8c31\u5747\u65b9\u5dee\uff0c\u65f6\u957f\u3001\u97f3\u9ad8\u548c\u80fd\u91cf\u7684\u5747\u65b9\u5dee\u7ec4\u6210\u3002\u65f6\u957f\u6620\u5c04\u5230\u6307\u6570\u57df\uff08\u65f6\u957f\u9884\u6d4b\u5668\u8f93\u51fa\u7684\u6570\u503c \\(x\\) \u4f5c\u4e3a\u6307\u6570\uff0c\u6700\u7ec8\u7684\u9884\u6d4b\u65f6\u957f\u4e3a \\(e^x\\) \uff09\uff0c\u97f3\u9ad8\u6620\u5c04\u5230\u5bf9\u6570\u57df\uff08\u97f3\u9ad8\u9884\u6d4b\u5668\u8f93\u51fa\u7684\u6570\u503c \\(x\\) \u505a\u5bf9\u6570\uff0c\u4f5c\u4e3a\u6700\u7ec8\u7684\u97f3\u9ad8 \\({\\rm log} x\\) \uff09\uff0c\u800c\u80fd\u91cf\u76f4\u63a5\u91c7\u7528\u80fd\u91cf\u9884\u6d4b\u5668\u7684\u8f93\u51fa\u503c\u3002\u6574\u4f53\u7684\u635f\u5931\u51fd\u6570\u4e3a\uff1a \\[ {\\rm Loss}={\\rm Loss}_{mel}+{\\rm Loss}_{mel}^{post}+{\\rm Loss}_{duration}+{\\rm Loss}_{pitch}+{\\rm Loss}_{energy} \\] \u9891\u8c31\u7684\u635f\u5931\u51fd\u6570\u5f62\u5f0f\u91c7\u7528\u5747\u65b9\u5dee\uff08MSE\uff09\uff0c\u65f6\u957f\u3001\u57fa\u9891\u548c\u80fd\u91cf\u91c7\u7528\u5e73\u5747\u7edd\u5bf9\u8bef\u5dee\uff08MAE\uff09\uff0c\u5177\u4f53\u7684\u5b9e\u73b0\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 log_d_target . requires_grad = False p_target . requires_grad = False e_target . requires_grad = False mel_target . requires_grad = False log_d_predicted = log_d_predicted . masked_select ( src_mask ) log_d_target = log_d_target . masked_select ( src_mask ) p_predicted = p_predicted . masked_select ( mel_mask ) p_target = p_target . masked_select ( mel_mask ) e_predicted = e_predicted . masked_select ( mel_mask ) e_target = e_target . masked_select ( mel_mask ) mel = mel . masked_select ( mel_mask . unsqueeze ( - 1 )) mel_postnet = mel_postnet . masked_select ( mel_mask . unsqueeze ( - 1 )) mel_target = mel_target . masked_select ( mel_mask . unsqueeze ( - 1 )) mel_loss = self . mse_loss ( mel , mel_target ) mel_postnet_loss = self . mse_loss ( mel_postnet , mel_target ) d_loss = self . mae_loss ( log_d_predicted , log_d_target ) p_loss = self . mae_loss ( p_predicted , p_target ) e_loss = self . mae_loss ( e_predicted , e_target ) total_loss = mel_loss + mel_postnet_loss + d_loss + p_loss + e_loss \u5c0f\u7ed3 FastSpeech\u7cfb\u5217\u7684\u58f0\u5b66\u6a21\u578b\u5c06Transformer\u5f15\u5165\u8bed\u97f3\u5408\u6210\u9886\u57df\uff0c\u5e76\u4e14\u663e\u5f0f\u5efa\u6a21\u8bed\u97f3\u4e2d\u7684\u91cd\u8981\u7279\u5f81\uff0c\u6bd4\u5982\u65f6\u957f\u3001\u97f3\u9ad8\u548c\u80fd\u91cf\u7b49\u3002\u5b9e\u9645\u4e0a\uff0c\u5fae\u8f6f\u9996\u6b21\u5728 Neural Speech Synthesis with Transformer Network \u5c06Transformer\u4f5c\u4e3a\u4e3b\u5e72\u7f51\u7edc\uff0c\u5b9e\u73b0\u8bed\u97f3\u5408\u6210\u7684\u58f0\u5b66\u6a21\u578b\uff0c\u8fd9\u4e00\u601d\u60f3\u540c\u6837\u88ab FastPitch: Parallel Text-to-speech with Pitch Prediction \u91c7\u7528\uff0c\u76f8\u5173\u7684\u5f00\u6e90\u4ee3\u7801\uff1a as-ideas/TransformerTTS \u3002 VITS VITS\uff08Variational Inference with adversarial learning for end-to-end Text-to-Speech\uff09\u662f\u4e00\u79cd\u7ed3\u5408\u53d8\u5206\u63a8\u7406\uff08variational inference\uff09\u3001\u6807\u51c6\u5316\u6d41\uff08normalizing flows\uff09\u548c\u5bf9\u6297\u8bad\u7ec3\u7684\u9ad8\u8868\u73b0\u529b\u8bed\u97f3\u5408\u6210\u6a21\u578b\u3002\u548cTacotron\u548cFastSpeech\u4e0d\u540c\uff0cTacotron / FastSpeech\u5b9e\u9645\u662f\u5c06\u5b57\u7b26\u6216\u97f3\u7d20\u6620\u5c04\u4e3a\u4e2d\u95f4\u58f0\u5b66\u8868\u5f81\uff0c\u6bd4\u5982\u6885\u5c14\u9891\u8c31\uff0c\u7136\u540e\u901a\u8fc7\u58f0\u7801\u5668\u5c06\u6885\u5c14\u9891\u8c31\u8fd8\u539f\u4e3a\u6ce2\u5f62\uff0c\u800cVITS\u5219\u76f4\u63a5\u5c06\u5b57\u7b26\u6216\u97f3\u7d20\u6620\u5c04\u4e3a\u6ce2\u5f62\uff0c\u4e0d\u9700\u8981\u989d\u5916\u7684\u58f0\u7801\u5668\u91cd\u5efa\u6ce2\u5f62\uff0c\u771f\u6b63\u7684\u7aef\u5230\u7aef\u8bed\u97f3\u5408\u6210\u6a21\u578b\u3002VITS\u901a\u8fc7\u9690\u53d8\u91cf\u800c\u975e\u4e4b\u524d\u7684\u9891\u8c31\u4e32\u8054\u8bed\u97f3\u5408\u6210\u4e2d\u7684\u58f0\u5b66\u6a21\u578b\u548c\u58f0\u7801\u5668\uff0c\u5728\u9690\u53d8\u91cf\u4e0a\u8fdb\u884c\u5efa\u6a21\u5e76\u5229\u7528\u968f\u673a\u65f6\u957f\u9884\u6d4b\u5668\uff0c\u63d0\u9ad8\u4e86\u5408\u6210\u8bed\u97f3\u7684\u591a\u6837\u6027\uff0c\u8f93\u5165\u540c\u6837\u7684\u6587\u672c\uff0c\u80fd\u591f\u5408\u6210\u4e0d\u540c\u58f0\u8c03\u548c\u97f5\u5f8b\u7684\u8bed\u97f3\u3002VITS\u5408\u6210\u97f3\u8d28\u8f83\u9ad8\uff0c\u5e76\u4e14\u53ef\u4ee5\u501f\u9274\u4e4b\u524d\u7684FastSpeech\uff0c\u5355\u72ec\u5bf9\u97f3\u9ad8\u7b49\u7279\u5f81\u8fdb\u884c\u5efa\u6a21\uff0c\u4ee5\u8fdb\u4e00\u6b65\u63d0\u5347\u5408\u6210\u8bed\u97f3\u7684\u8d28\u91cf\uff0c\u662f\u4e00\u79cd\u975e\u5e38\u6709\u6f5c\u529b\u7684\u8bed\u97f3\u5408\u6210\u6a21\u578b\u3002 \u6a21\u578b\u6574\u4f53\u7ed3\u6784 VITS\u5305\u62ec\u4e09\u4e2a\u90e8\u5206\uff1a \u540e\u9a8c\u7f16\u7801\u5668\u3002\u5982\u4e0a\u56fe\uff08a\uff09\u7684\u5de6\u4e0b\u90e8\u5206\u6240\u793a\uff0c\u5728\u8bad\u7ec3\u65f6\u8f93\u5165\u7ebf\u6027\u8c31\uff0c\u8f93\u51fa\u9690\u53d8\u91cf \\(z\\) \uff0c\u63a8\u65ad\u65f6\u9690\u53d8\u91cf \\(z\\) \u5219\u7531 \\(f_\\theta\\) \u4ea7\u751f\u3002VITS\u7684\u540e\u9a8c\u7f16\u7801\u5668\u91c7\u7528WaveGlow\u548cGlow-TTS\u4e2d\u7684\u975e\u56e0\u679cWaveNet\u6b8b\u5dee\u6a21\u5757\u3002\u5e94\u7528\u4e8e\u591a\u4eba\u6a21\u578b\u65f6\uff0c\u5c06\u8bf4\u8bdd\u4eba\u5d4c\u5165\u5411\u91cf\u6dfb\u52a0\u8fdb\u6b8b\u5dee\u6a21\u5757\uff0c \u4ec5\u7528\u4e8e\u8bad\u7ec3 \u3002\u8fd9\u91cc\u7684\u9690\u53d8\u91cf \\(z\\) \u53ef\u4ee5\u7406\u89e3\u4e3aTacotron / FastSpeech\u4e2d\u7684\u6885\u5c14\u9891\u8c31\u3002 \u89e3\u7801\u5668\u3002\u5982\u4e0a\u56fe\uff08a\uff09\u5de6\u4e0a\u90e8\u5206\u6240\u793a\uff0c\u89e3\u7801\u5668\u4ece\u63d0\u53d6\u7684\u9690\u53d8\u91cf \\(z\\) \u4e2d\u751f\u6210\u8bed\u97f3\u6ce2\u5f62\uff0c\u8fd9\u4e2a\u89e3\u7801\u5668\u5b9e\u9645\u5c31\u662f\u58f0\u7801\u5668HiFi-GAN V1\u7684\u751f\u6210\u5668\u3002\u5e94\u7528\u4e8e\u591a\u4eba\u6a21\u578b\u65f6\uff0c\u5728\u8bf4\u8bdd\u4eba\u5d4c\u5165\u5411\u91cf\u4e4b\u540e\u6dfb\u52a0\u4e00\u4e2a\u7ebf\u6027\u5c42\uff0c\u62fc\u63a5\u5230 \\(f_\\theta\\) \u7684\u8f93\u51fa\u9690\u53d8\u91cf \\(z\\) \u3002 \u5148\u9a8c\u7f16\u7801\u5668\u3002\u5982\u4e0a\u56fe\uff08a\uff09\u53f3\u4fa7\u90e8\u5206\u6240\u793a\uff0c\u5148\u9a8c\u7f16\u7801\u5668\u7ed3\u6784\u6bd4\u8f83\u590d\u6742\uff0c\u4f5c\u7528\u7c7b\u4f3c\u4e8eTacotron / FastSpeech\u7684\u58f0\u5b66\u6a21\u578b\uff0c\u53ea\u4e0d\u8fc7VITS\u662f\u5c06\u97f3\u7d20\u6620\u5c04\u4e3a\u4e2d\u95f4\u8868\u793a \\(z\\) \uff0c\u800c\u4e0d\u662f\u5c06\u97f3\u7d20\u6620\u5c04\u4e3a\u9891\u8c31\u3002\u5305\u62ec\u6587\u672c\u7f16\u7801\u5668\u548c\u63d0\u5347\u5148\u9a8c\u5206\u5e03\u590d\u6742\u5ea6\u7684\u6807\u51c6\u5316\u6d41 \\(f_\\theta\\) \u3002\u5e94\u7528\u4e8e\u591a\u4eba\u6a21\u578b\u65f6\uff0c\u5411\u6807\u51c6\u5316\u6d41\u7684\u6b8b\u5dee\u6a21\u5757\u4e2d\u6dfb\u52a0\u8bf4\u8bdd\u4eba\u5d4c\u5165\u5411\u91cf\u3002 \u968f\u673a\u65f6\u957f\u9884\u6d4b\u5668\u3002\u5982\u4e0a\u56fe\uff08a\uff09\u53f3\u4fa7\u4e2d\u95f4\u6a59\u8272\u90e8\u5206\u3002\u4ece\u6761\u4ef6\u8f93\u5165 \\(h_{text}\\) \u4f30\u7b97\u97f3\u7d20\u65f6\u957f\u7684\u5206\u5e03\u3002\u5e94\u7528\u4e8e\u591a\u4eba\u6a21\u578b\u65f6\uff0c\u5728\u8bf4\u8bdd\u4eba\u5d4c\u5165\u5411\u91cf\u4e4b\u540e\u6dfb\u52a0\u4e00\u4e2a\u7ebf\u6027\u5c42\uff0c\u5e76\u5c06\u5176\u62fc\u63a5\u5230\u6587\u672c\u7f16\u7801\u5668\u7684\u8f93\u51fa \\(h_{text}\\) \u3002 \u5224\u522b\u5668\u3002\u5b9e\u9645\u5c31\u662fHiFi-GAN\u7684\u591a\u5468\u671f\u5224\u522b\u5668\uff0c\u5728\u4e0a\u56fe\u4e2d\u672a\u753b\u51fa\uff0c \u4ec5\u7528\u4e8e\u8bad\u7ec3 \u3002\u76ee\u524d\u770b\u6765\uff0c\u5bf9\u4e8e\u4efb\u610f\u8bed\u97f3\u5408\u6210\u6a21\u578b\uff0c\u52a0\u5165\u5224\u522b\u5668\u8f85\u52a9\u90fd\u53ef\u4ee5\u663e\u8457\u63d0\u5347\u8868\u73b0\u3002 \u53d8\u5206\u63a8\u65ad VITS\u53ef\u4ee5\u770b\u4f5c\u662f\u4e00\u4e2a\u6700\u5927\u5316\u53d8\u5206\u4e0b\u754c\uff0c\u4e5f\u5373ELBO\uff08Evidence Lower Bound\uff09\u7684\u6761\u4ef6VAE\u3002 \u91cd\u5efa\u635f\u5931 VITS\u5728\u8bad\u7ec3\u65f6\u5b9e\u9645\u8fd8\u662f\u4f1a\u751f\u6210\u6885\u5c14\u9891\u8c31\u4ee5\u6307\u5bfc\u6a21\u578b\u7684\u8bad\u7ec3\uff0c\u91cd\u5efa\u635f\u5931\u4e2d\u7684\u76ee\u6807\u4f7f\u7528\u7684\u662f\u6885\u5c14\u9891\u8c31\u800c\u975e\u539f\u59cb\u6ce2\u5f62\uff1a \\[ {\\rm L}_{recon}=||x_{mel}-\\hat{x}_{mel}||_1 \\] \u4f46\u5728\u63a8\u65ad\u65f6\u5e76\u4e0d\u9700\u8981\u751f\u6210\u6885\u5c14\u9891\u8c31\u3002\u5728\u5b9e\u73b0\u4e0a\uff0c\u4e0d\u4e0a\u91c7\u6837\u6574\u4e2a\u9690\u53d8\u91cf \\(z\\) \uff0c\u800c\u53ea\u662f\u4f7f\u7528\u90e8\u5206\u5e8f\u5217\u4f5c\u4e3a\u89e3\u7801\u5668\u7684\u8f93\u5165\u3002 KL\u6563\u5ea6 \u5148\u9a8c\u7f16\u7801\u5668 \\(c\\) \u7684\u8f93\u5165\u5305\u62ec\u4ece\u6587\u672c\u751f\u6210\u7684\u97f3\u7d20 \\(c_{text}\\) \uff0c\u548c\u97f3\u7d20\u3001\u9690\u53d8\u91cf\u4e4b\u95f4\u7684\u5bf9\u9f50 \\(A\\) \u3002\u6240\u8c13\u7684\u5bf9\u9f50\u5c31\u662f \\(|c_{text}|\\times |z|\\) \u5927\u5c0f\u7684\u4e25\u683c\u5355\u8c03\u6ce8\u610f\u529b\u77e9\u9635\uff0c\u8868\u793a\u6bcf\u4e00\u4e2a\u97f3\u7d20\u7684\u53d1\u97f3\u65f6\u957f\u3002\u56e0\u6b64KL\u6563\u5ea6\u662f\uff1a \\[ {\\rm L}_{kl}={\\rm log}q_{\\phi}(z|x_{lin})-{\\rm log}p_\\theta (z|c_{text},A) \\] \u5176\u4e2d\uff0c \\(q_{\\phi}(z|x_{lin})\\) \u8868\u793a\u7ed9\u5b9a\u8f93\u5165 \\(x\\) \u7684\u540e\u9a8c\u5206\u5e03\uff0c \\(p_\\theta(z|c)\\) \u8868\u793a\u7ed9\u5b9a\u6761\u4ef6 \\(c\\) \u7684\u9690\u53d8\u91cf \\(z\\) \u7684\u5148\u9a8c\u5206\u5e03\u3002\u5176\u4e2d\u9690\u53d8\u91cf \\(z\\) \u4e3a\uff1a \\[ z\\sim q_\\phi(z|x_{lin})=\\mathbb{N}(z;\\mu_\\phi(x_{lin}),\\sigma_\\phi(x_{lin})) \\] \u4e3a\u4e86\u7ed9\u540e\u9a8c\u7f16\u7801\u5668\u63d0\u4f9b\u66f4\u9ad8\u5206\u8fa8\u7387\u7684\u4fe1\u606f\uff0c\u4f7f\u7528\u7ebf\u6027\u8c31\u800c\u975e\u6885\u5c14\u9891\u8c31\u4f5c\u4e3a\u540e\u9a8c\u7f16\u7801\u5668 \\(\\phi_\\theta\\) \u7684\u8f93\u5165\u3002\u540c\u65f6\uff0c\u4e3a\u4e86\u751f\u6210\u66f4\u52a0\u903c\u771f\u7684\u6837\u672c\uff0c\u63d0\u9ad8\u5148\u9a8c\u5206\u5e03\u7684\u8868\u8fbe\u80fd\u529b\u6bd4\u8f83\u91cd\u8981\uff0c\u56e0\u6b64\u5f15\u5165\u6807\u51c6\u5316\u6d41\uff0c\u5728\u6587\u672c\u7f16\u7801\u5668\u4ea7\u751f\u7684\u7b80\u5355\u5206\u5e03\u548c\u590d\u6742\u5206\u5e03\u95f4\u8fdb\u884c\u53ef\u9006\u53d8\u6362\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u7ecf\u8fc7\u4e0a\u91c7\u6837\u7684\u7f16\u7801\u5668\u8f93\u51fa\u4e4b\u540e\uff0c\u52a0\u5165\u4e00\u7cfb\u5217\u53ef\u9006\u53d8\u6362\uff1a \\[ p_\\theta(z|c)=\\mathbb{N}(f_\\theta(z);\\mu_\\theta(c),\\sigma_\\theta(c))|{\\rm det}\\frac{\\partial f_\\theta(z)}{\\partial z}| \\] \u5176\u4e2d\uff0c\u4e0a\u5f0f\u4e2d\u7684 \\(c\\) \u5c31\u662f\u4e0a\u91c7\u6837\u7684\u7f16\u7801\u5668\u8f93\u51fa\uff1a \\[ c=[c_{text},A] \\] \u5bf9\u9f50\u4f30\u8ba1 \u7531\u4e8e\u5728\u8bad\u7ec3\u65f6\u6ca1\u6709\u5bf9\u9f50\u7684\u771f\u5b9e\u6807\u7b7e\uff0c\u56e0\u6b64\u5728\u8bad\u7ec3\u7684\u6bcf\u4e00\u6b21\u8fed\u4ee3\u65f6\u90fd\u9700\u8981\u4f30\u8ba1\u5bf9\u9f50\u3002 \u5355\u8c03\u5bf9\u9f50\u641c\u7d22 \u4e3a\u4e86\u4f30\u8ba1\u6587\u672c\u548c\u8bed\u97f3\u4e4b\u95f4\u7684\u5bf9\u9f50 \\(A\\) \uff0cVITS\u91c7\u7528\u4e86\u7c7b\u4f3c\u4e8eGlow-TTS\u4e2d\u7684\u5355\u8c03\u5bf9\u9f50\u641c\u7d22\uff08Monotonic Alignment Search\uff0cMAS\uff09\u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u5bfb\u627e\u4e00\u4e2a\u6700\u4f18\u7684\u5bf9\u9f50\u8def\u5f84\u4ee5\u6700\u5927\u5316\u5229\u7528\u6807\u51c6\u5316\u6d41 \\(f\\) \u53c2\u6570\u5316\u6570\u636e\u7684\u5bf9\u6570\u4f3c\u7136\uff1a \\[ A=\\underset{\\hat{A}}{\\rm argmax}{\\rm log}p(x|c_{text},\\hat{A})=\\underset{\\hat{A}}{\\rm argmax}{\\rm log}\\mathbb{N}(f(x);\\mu(c_{text},\\hat{A}),\\sigma(c_{text},\\hat{A})) \\] MAS\u7ea6\u675f\u83b7\u5f97\u7684\u6700\u4f18\u5bf9\u9f50\u5fc5\u987b\u662f\u5355\u8c03\u4e14\u65e0\u8df3\u8fc7\u7684\u3002\u4f46\u662f\u65e0\u6cd5\u76f4\u63a5\u5c06MAS\u76f4\u63a5\u5e94\u7528\u5230VITS\uff0c\u56e0\u4e3aVITS\u4f18\u5316\u76ee\u6807\u662fELBO\u800c\u975e\u786e\u5b9a\u7684\u9690\u53d8\u91cf \\(z\\) \u7684\u5bf9\u6570\u4f3c\u7136\uff0c\u56e0\u6b64\u7a0d\u5fae\u6539\u53d8\u4e86\u4e00\u4e0bMAS\uff0c\u5bfb\u627e\u6700\u4f18\u7684\u5bf9\u9f50\u8def\u5f84\u4ee5\u6700\u5927\u5316ELBO\uff1a \\[ \\underset{\\hat{A}}{\\rm argmax}{\\rm log}p_\\theta (x_{mel}|z)-{\\rm log}\\frac{q_\\theta(z|x_{lin})}{p_\\theta (z|c_{text},\\hat{A})} \\] \u968f\u673a\u65f6\u957f\u9884\u6d4b\u5668 \u968f\u673a\u65f6\u957f\u9884\u6d4b\u5668\u662f\u4e00\u4e2a\u57fa\u4e8e\u6d41\u7684\u751f\u6210\u6a21\u578b\uff0c\u8bad\u7ec3\u76ee\u6807\u4e3a\u97f3\u7d20\u65f6\u957f\u5bf9\u6570\u4f3c\u7136\u7684\u53d8\u5206\u4e0b\u754c\uff1a \\[ {\\rm log}p_\\theta (d|c_{text}\\geq \\mathbb{E}_{q_\\theta (u,v|d,c_{text})}[{\\rm log}\\frac{p_\\theta (d-u,v|c_{text})}{q_\\phi (u,v|d,c_{text})}] \\] \u5728\u8bad\u7ec3\u65f6\uff0c\u65ad\u5f00\u968f\u673a\u65f6\u957f\u9884\u6d4b\u5668\u7684\u68af\u5ea6\u53cd\u4f20\uff0c\u4ee5\u9632\u6b62\u8be5\u90e8\u5206\u7684\u68af\u5ea6\u5f71\u54cd\u5230\u5176\u5b83\u6a21\u5757\u3002\u97f3\u7d20\u65f6\u957f\u901a\u8fc7\u968f\u673a\u65f6\u957f\u9884\u6d4b\u5668\u7684\u53ef\u9006\u53d8\u6362\u4ece\u968f\u673a\u566a\u97f3\u4e2d\u91c7\u6837\u83b7\u5f97\uff0c\u4e4b\u540e\u8f6c\u6362\u4e3a\u6574\u578b\u503c\u3002 \u5bf9\u6297\u8bad\u7ec3 \u5f15\u5165\u5224\u522b\u5668 \\(D\\) \u5224\u65ad\u8f93\u51fa\u662f\u89e3\u7801\u5668 \\(G\\) \u7684\u8f93\u51fa\uff0c\u8fd8\u662f\u771f\u5b9e\u7684\u6ce2\u5f62 \\(y\\) \u3002VITS\u7528\u4e8e\u5bf9\u6297\u8bad\u7ec3\u7684\u635f\u5931\u51fd\u6570\u5305\u62ec\u4e24\u4e2a\u90e8\u5206\uff0c\u7b2c\u4e00\u90e8\u5206\u662f\u7528\u4e8e\u5bf9\u6297\u8bad\u7ec3\u7684\u6700\u5c0f\u4e8c\u4e58\u635f\u5931\u51fd\u6570\uff08least-squares loss function\uff09\uff1a \\[ {\\rm L}_{adv}(D)=\\mathbb{E}_{(y,z)}[(D(y)-1)^2+(D(G(z)))^2] \\] \\[ {\\rm L}_{adv}(G)=\\mathbb{E}_z[(D(G(z))-1)^2] \\] \u7b2c\u4e8c\u90e8\u5206\u662f\u4ec5\u4f5c\u7528\u4e8e\u751f\u6210\u5668\u7684\u7279\u5f81\u5339\u914d\u635f\u5931\uff08feature-matching loss\uff09\uff1a \\[ {\\rm L}_{fm}(G)=\\mathbb{E}_{(y,c)}[\\sum_{l=1}^T\\frac{1}{N_l}||D^l(y)-D^l(G(z))||_1] \\] \u5176\u4e2d\uff0c \\(T\\) \u8868\u793a\u5224\u522b\u5668\u7684\u5c42\u6570\uff0c \\(D^l\\) \u8868\u793a\u7b2c \\(l\\) \u5c42\u5224\u522b\u5668\u7684\u7279\u5f81\u56fe\uff08feature map\uff09\uff0c \\(N_l\\) \u8868\u793a\u7279\u5f81\u56fe\u7684\u6570\u91cf\u3002\u7279\u5f81\u5339\u914d\u635f\u5931\u53ef\u4ee5\u770b\u4f5c\u662f\u91cd\u5efa\u635f\u5931\uff0c\u7528\u4e8e\u7ea6\u675f\u5224\u522b\u5668\u4e2d\u95f4\u5c42\u7684\u8f93\u51fa\u3002 \u603b\u4f53\u635f\u5931 VITS\u53ef\u4ee5\u770b\u4f5c\u662fVAE\u548cGAN\u7684\u8054\u5408\u8bad\u7ec3\uff0c\u56e0\u6b64\u603b\u4f53\u635f\u5931\u4e3a\uff1a \\[ {\\rm L}_{vae}={\\rm L}_{recon}+{\\rm L}_{kl}+{\\rm L}_{dur}+{\\rm L}_{adv}+{\\rm L}_{fm}(G) \\] \u603b\u7ed3 VITS\u662f\u4e00\u79cd\u7531\u5b57\u7b26\u6216\u97f3\u7d20\u76f4\u63a5\u6620\u5c04\u4e3a\u6ce2\u5f62\u7684\u7aef\u5230\u7aef\u8bed\u97f3\u5408\u6210\u6a21\u578b\uff0c\u8be5\u8bed\u97f3\u5408\u6210\u6a21\u578b\u91c7\u7528\u5bf9\u6297\u8bad\u7ec3\u7684\u6a21\u5f0f\uff0c\u751f\u6210\u5668\u591a\u4e2a\u6a21\u5757\u57fa\u4e8e\u6807\u51c6\u5316\u6d41\u3002\u6a21\u578b\u8f83\u5927\uff0c\u5408\u6210\u8d28\u91cf\u4f18\u5f02\u3002VITS\u7684\u60f3\u6cd5\u76f8\u5f53\u6709\u542f\u53d1\uff0c\u4f46\u662f\u7406\u89e3\u8d77\u6765\u786e\u5b9e\u6bd4\u8f83\u96be\uff0c\u7279\u522b\u662f\u6807\u51c6\u5316\u6d41\uff0c\u53ef\u53c2\u8003\uff1a Awesome Normalizing Flows \u3002","title":"\u58f0\u5b66\u6a21\u578b"},{"location":"tts/%E5%A3%B0%E5%AD%A6%E6%A8%A1%E5%9E%8B/#_1","text":"\u73b0\u4ee3\u5de5\u4e1a\u7ea7\u795e\u7ecf\u7f51\u7edc\u8bed\u97f3\u5408\u6210\u7cfb\u7edf\u4e3b\u8981\u5305\u62ec\u4e09\u4e2a\u90e8\u5206\uff1a\u6587\u672c\u524d\u7aef\u3001\u58f0\u5b66\u6a21\u578b\u548c\u58f0\u7801\u5668\uff0c\u6587\u672c\u8f93\u5165\u5230\u6587\u672c\u524d\u7aef\u4e2d\uff0c\u5c06\u6587\u672c\u8f6c\u6362\u4e3a\u97f3\u7d20\u3001\u97f5\u5f8b\u8fb9\u754c\u7b49\u6587\u672c\u7279\u5f81\u3002\u6587\u672c\u7279\u5f81\u8f93\u5165\u5230\u58f0\u5b66\u6a21\u578b\uff0c\u8f6c\u6362\u4e3a\u5bf9\u5e94\u7684\u58f0\u5b66\u7279\u5f81\u3002\u58f0\u5b66\u7279\u5f81\u8f93\u5165\u5230\u58f0\u7801\u5668\uff0c\u91cd\u5efa\u4e3a\u539f\u59cb\u6ce2\u5f62\u3002 \u4e3b\u8981\u91c7\u7528\u7684\u58f0\u5b66\u6a21\u578b\u5305\u62ecTacotron\u7cfb\u5217\u3001FastSpeech\u7cfb\u5217\u7b49\uff0c\u76ee\u524d\u540c\u6837\u51fa\u73b0\u4e86\u4e00\u4e9b\u5b8c\u5168\u7aef\u5230\u7aef\u7684\u8bed\u97f3\u5408\u6210\u6a21\u578b\uff0c\u4e5f\u5373\u662f\u76f4\u63a5\u7531\u5b57\u7b26/\u97f3\u7d20\u6620\u5c04\u4e3a\u6ce2\u5f62\u3002","title":"\u58f0\u5b66\u6a21\u578b"},{"location":"tts/%E5%A3%B0%E5%AD%A6%E6%A8%A1%E5%9E%8B/#tacotron","text":"","title":"Tacotron"},{"location":"tts/%E5%A3%B0%E5%AD%A6%E6%A8%A1%E5%9E%8B/#tacotron-2","text":"\u4ee5\u6700\u5e38\u4f7f\u7528\u7684Tacotron-2\u58f0\u5b66\u6a21\u578b\u4e3a\u4f8b\u3002\u539f\u59cb\u8bba\u6587\u53c2\u89c1\uff1a Tacotron: Towards End-to-End Speech Synthesis Natural TTS Synthesis by Conditioning WaveNet on Mel Spectrogram Predictions \u6b64\u5916\uff0c\u8c37\u6b4c\u5728\u8bed\u97f3\u5408\u6210\u9886\u57df\uff0c\u7279\u522b\u662f\u7aef\u5230\u7aef\u8bed\u97f3\u5408\u6210\u9886\u57df\u505a\u51fa\u4e86\u5f00\u521b\u6027\u7684\u5171\u4eab\uff0c\u8be5\u7ec4\u4f1a\u5c06\u6700\u65b0\u7684\u8bba\u6587\u6c47\u603b\u5728 Tacotron(/t\u00e4k\u014d\u02cctr\u00e4n/): An end-to-end speech synthesis system by Google .","title":"Tacotron-2\u7b80\u4ecb"},{"location":"tts/%E5%A3%B0%E5%AD%A6%E6%A8%A1%E5%9E%8B/#_2","text":"Tacotron-2\u7684\u58f0\u5b66\u6a21\u578b\u90e8\u5206\u91c7\u7528\u5178\u578b\u7684\u5e8f\u5217\u5230\u5e8f\u5217\u7ed3\u6784\u3002\u7f16\u7801\u5668\u662f3\u4e2a\u5377\u79ef\u5c42\u548c\u4e00\u4e2a\u53cc\u5411LSTM\u5c42\u7ec4\u6210\u7684\u6a21\u5757\uff0c\u5377\u79ef\u5c42\u7ed9\u4e88\u4e86\u6a21\u578b\u7c7b\u4f3c\u4e8eN-gram\u611f\u77e5\u4e0a\u4e0b\u6587\u7684\u80fd\u529b\uff0c\u5e76\u4e14\u5bf9\u4e0d\u53d1\u97f3\u5b57\u7b26\u66f4\u52a0\u9c81\u68d2\u3002\u7ecf\u8bcd\u5d4c\u5165\u7684\u6ce8\u97f3\u5e8f\u5217\u9996\u5148\u8fdb\u5165\u5377\u79ef\u5c42\u63d0\u53d6\u4e0a\u4e0b\u6587\u4fe1\u606f\uff0c\u7136\u540e\u9001\u5165\u53cc\u5411LSTM\u751f\u6210\u7f16\u7801\u5668\u9690\u72b6\u6001\u3002\u7f16\u7801\u5668\u9690\u72b6\u6001\u751f\u6210\u540e\uff0c\u5c31\u4f1a\u88ab\u9001\u5165\u6ce8\u610f\u529b\u673a\u5236\uff0c\u4ee5\u751f\u6210\u7f16\u7801\u5411\u91cf\u3002\u6211\u4eec\u5229\u7528\u4e86\u4e00\u79cd\u88ab\u79f0\u4e3a\u4f4d\u7f6e\u654f\u611f\u6ce8\u610f\u529b\uff08Location Sensitive Attention\uff0cLSA\uff09\uff0c\u8be5\u6ce8\u610f\u529b\u673a\u5236\u7684\u5bf9\u9f50\u51fd\u6570\u4e3a\uff1a \\[ score(s_{i-1},h_j)=v_a^T{\\rm tanh}(Ws_{i-1}+Vh_j+Uf_{i,j}+b) \\] \u5176\u4e2d\uff0c \\(v_a,W,V,U\\) \u4e3a\u5f85\u8bad\u7ec3\u53c2\u6570\uff0c \\(b\\) \u662f\u504f\u7f6e\u503c\uff0c \\(s_{i-1}\\) \u4e3a\u4e0a\u4e00\u65f6\u95f4\u6b65 \\(i-1\\) \u7684\u89e3\u7801\u5668\u9690\u72b6\u6001\uff0c \\(h_j\\) \u4e3a\u5f53\u524d\u65f6\u95f4\u6b65 \\(j\\) \u7684\u7f16\u7801\u5668\u9690\u72b6\u6001\uff0c \\(f_{i,j}\\) \u4e3a\u4e0a\u4e00\u4e2a\u89e3\u7801\u6b65\u7684\u6ce8\u610f\u529b\u6743\u91cd \\(\\alpha_{i-1}\\) \u7ecf\u5377\u79ef\u83b7\u5f97\u7684\u4f4d\u7f6e\u7279\u5f81\uff0c\u5982\u4e0b\u5f0f\uff1a \\[ f_{i,j}=F*\\alpha_{i-1} \\] \u5176\u4e2d\uff0c \\(\\alpha_{i-1}\\) \u662f\u7ecf\u8fc7softmax\u7684\u6ce8\u610f\u529b\u6743\u91cd\u7684\u7d2f\u52a0\u548c\u3002\u4f4d\u7f6e\u654f\u611f\u6ce8\u610f\u529b\u673a\u5236\u4e0d\u4f46\u7efc\u5408\u4e86\u5185\u5bb9\u65b9\u9762\u7684\u4fe1\u606f\uff0c\u800c\u4e14\u5173\u6ce8\u4e86\u4f4d\u7f6e\u7279\u5f81\u3002\u89e3\u7801\u8fc7\u7a0b\u4ece\u8f93\u5165\u4e0a\u4e00\u89e3\u7801\u6b65\u6216\u8005\u771f\u5b9e\u97f3\u9891\u7684\u9891\u8c31\u8fdb\u5165\u89e3\u7801\u5668\u9884\u5904\u7406\u7f51\u7edc\u5f00\u59cb\uff0c\u5230\u7ebf\u6027\u6620\u5c04\u8f93\u51fa\u8be5\u65f6\u95f4\u6b65\u4e0a\u7684\u9891\u8c31\u5e27\u7ed3\u675f\uff0c\u6a21\u578b\u7684\u89e3\u7801\u8fc7\u7a0b\u5982\u4e0b\u56fe\u6240\u793a\u3002 \u9891\u8c31\u751f\u6210\u7f51\u7edc\u7684\u89e3\u7801\u5668\u5c06\u9884\u5904\u7406\u7f51\u7edc\u7684\u8f93\u51fa\u548c\u6ce8\u610f\u529b\u673a\u5236\u7684\u7f16\u7801\u5411\u91cf\u505a\u62fc\u63a5\uff0c\u7136\u540e\u6574\u4f53\u9001\u5165LSTM\u4e2d\uff0cLSTM\u7684\u8f93\u51fa\u7528\u6765\u8ba1\u7b97\u65b0\u7684\u7f16\u7801\u5411\u91cf\uff0c\u6700\u540e\u65b0\u8ba1\u7b97\u51fa\u6765\u7684\u7f16\u7801\u5411\u91cf\u4e0eLSTM\u8f93\u51fa\u505a\u62fc\u63a5\uff0c\u9001\u5165\u6620\u5c04\u5c42\u4ee5\u8ba1\u7b97\u8f93\u51fa\u3002\u8f93\u51fa\u6709\u4e24\u79cd\u5f62\u5f0f\uff0c\u4e00\u79cd\u662f\u9891\u8c31\u5e27\uff0c\u53e6\u4e00\u79cd\u662f\u505c\u6b62\u7b26\u7684\u6982\u7387\uff0c\u540e\u8005\u662f\u4e00\u4e2a\u7b80\u5355\u4e8c\u5206\u7c7b\u95ee\u9898\uff0c\u51b3\u5b9a\u89e3\u7801\u8fc7\u7a0b\u662f\u5426\u7ed3\u675f\u3002\u4e3a\u4e86\u80fd\u591f\u6709\u6548\u52a0\u901f\u8ba1\u7b97\uff0c\u51cf\u5c0f\u5185\u5b58\u5360\u7528\uff0c\u5f15\u5165\u7f29\u51cf\u56e0\u5b50r\uff08Reduction Factor\uff09\uff0c\u5373\u6bcf\u4e00\u4e2a\u65f6\u95f4\u6b65\u5141\u8bb8\u89e3\u7801\u5668\u9884\u6d4br\u4e2a\u9891\u8c31\u5e27\u8fdb\u884c\u8f93\u51fa\u3002\u89e3\u7801\u5b8c\u6210\u540e\uff0c\u9001\u5165\u540e\u5904\u7406\u7f51\u7edc\u5904\u7406\u4ee5\u751f\u6210\u6700\u7ec8\u7684\u6885\u5c14\u9891\u8c31\uff0c\u5982\u4e0b\u5f0f\u6240\u793a\u3002 \\[ s_{final}=s_i+s_i' \\] \u5176\u4e2d\uff0c \\(s_i\\) \u662f\u89e3\u7801\u5668\u8f93\u51fa\uff0c \\(s_{final}\\) \u8868\u793a\u6700\u7ec8\u8f93\u51fa\u7684\u6885\u5c14\u9891\u8c31\uff0c \\(s_i'\\) \u662f\u540e\u5904\u7406\u7f51\u7edc\u7684\u8f93\u51fa\uff0c\u89e3\u7801\u5668\u7684\u8f93\u51fa\u7ecf\u8fc7\u540e\u5904\u7406\u7f51\u7edc\u4e4b\u540e\u83b7\u5f97 \\(s_i'\\) \u3002 \u5728Tacotron-2\u539f\u59cb\u8bba\u6587\u4e2d\uff0c\u76f4\u63a5\u5c06\u6885\u5c14\u9891\u8c31\u9001\u5165\u58f0\u7801\u5668WaveNet\u751f\u6210\u6700\u7ec8\u7684\u65f6\u57df\u6ce2\u5f62\u3002\u4f46\u662fWaveNet\u8ba1\u7b97\u590d\u6742\u5ea6\u8fc7\u9ad8\uff0c\u51e0\u4e4e\u65e0\u6cd5\u5b9e\u9645\u4f7f\u7528\uff0c\u56e0\u6b64\u53ef\u4ee5\u4f7f\u7528\u5176\u5b83\u58f0\u7801\u5668\uff0c\u6bd4\u5982Griffin-Lim\u3001HiFiGAN\u7b49\u3002","title":"\u58f0\u5b66\u7279\u5f81\u5efa\u6a21\u7f51\u7edc"},{"location":"tts/%E5%A3%B0%E5%AD%A6%E6%A8%A1%E5%9E%8B/#_3","text":"Tacotron2\u7684\u635f\u5931\u51fd\u6570\u4e3b\u8981\u5305\u62ec\u4ee5\u4e0b4\u4e2a\u65b9\u9762\uff1a \u8fdb\u5165\u540e\u5904\u7406\u7f51\u7edc\u524d\u540e\u7684\u5e73\u65b9\u635f\u5931\u3002 \\[ {\\rm MelLoss}=\\frac{1}{n}\\sum_{i=1}^n(y_{real,i}^{mel}-y_{before,i}^{mel})^2+\\frac{1}{n}\\sum_{i=1}^n(y_{real,i}^{mel}-y_{after,i}^{mel})^2 \\] \u5176\u4e2d\uff0c \\(y_{real,i}^{mel}\\) \u8868\u793a\u4ece\u97f3\u9891\u4e2d\u63d0\u53d6\u7684\u771f\u5b9e\u9891\u8c31\uff0c \\(y_{before,i}^{mel},y_{after,i}^{mel}\\) \u5206\u522b\u4e3a\u8fdb\u5165\u540e\u5904\u7406\u7f51\u7edc\u524d\u3001\u540e\u7684\u89e3\u7801\u5668\u8f93\u51fa\uff0c \\(n\\) \u4e3a\u6bcf\u6279\u7684\u6837\u672c\u6570\u3002 \u4eceCBHG\u6a21\u5757\u4e2d\u8f93\u51fa\u7ebf\u6027\u8c31\u7684\u5e73\u65b9\u635f\u5931\u3002 \\[ {\\rm LinearLoss}=\\frac{1}{n}\\sum_{i=1}^{n}(y_{real,i}^{linear}-y_{i}^{linear})^2 \\] \u5176\u4e2d\uff0c \\(y_{real,i}^{linear}\\) \u662f\u4ece\u771f\u5b9e\u8bed\u97f3\u4e2d\u8ba1\u7b97\u83b7\u5f97\u7684\u7ebf\u6027\u8c31\uff0c \\(y_{i}^{linear}\\) \u662f\u4eceCBHG\u6a21\u5757\u8f93\u51fa\u7684\u7ebf\u6027\u8c31\u3002 \u505c\u6b62\u7b26\u4ea4\u53c9\u71b5 \\[ {\\rm StopTokenLoss}=-[y\\cdot {\\rm log}(p)+(1-y)\\cdot {\\rm log}(1-p)] \\] \u5176\u4e2d\uff0c \\(y\\) \u4e3a\u505c\u6b62\u7b26\u771f\u5b9e\u6982\u7387\u5206\u5e03\uff0c \\(p\\) \u662f\u89e3\u7801\u5668\u7ebf\u6027\u6620\u5c04\u8f93\u51fa\u7684\u9884\u6d4b\u5206\u5e03\u3002 L2\u6b63\u5219\u5316 \\[ {\\rm RegulationLoss}=\\frac{1}{K}\\sum_{k=1}^K w_k^2 \\] \u5176\u4e2d\uff0c \\(K\\) \u4e3a\u53c2\u6570\u603b\u6570\uff0c \\(w_k\\) \u4e3a\u6a21\u578b\u4e2d\u7684\u53c2\u6570\uff0c\u8fd9\u91cc\u6392\u9664\u504f\u7f6e\u503c\u3001RNN\u4ee5\u53ca\u7ebf\u6027\u6620\u5c04\u4e2d\u7684\u53c2\u6570\u3002\u6700\u7ec8\u7684\u635f\u5931\u51fd\u6570\u4e3a\u4e0a\u8ff04\u4e2a\u90e8\u5206\u7684\u635f\u5931\u4e4b\u548c\uff0c\u5982\u4e0b\u5f0f\uff1a \\[ {\\rm Loss}={\\rm MelLoss}+{\\rm LinearLoss}+{\\rm StopTokenLoss}+{\\rm RegulationLoss} \\]","title":"\u635f\u5931\u51fd\u6570"},{"location":"tts/%E5%A3%B0%E5%AD%A6%E6%A8%A1%E5%9E%8B/#fastspeech","text":"FastSpeech\u662f\u57fa\u4e8eTransformer\u663e\u5f0f\u65f6\u957f\u5efa\u6a21\u7684\u58f0\u5b66\u6a21\u578b\uff0c\u7531\u5fae\u8f6f\u548c\u6d59\u5927\u63d0\u51fa\u3002\u539f\u59cb\u8bba\u6587\u53c2\u89c1\uff1a FastSpeech: Fast, Robust and Controllable Text to Speech FastSpeech 2: Fast and High-Quality End-to-End Text to Speech \u76f8\u5bf9\u5e94\u5730\uff0c\u5fae\u8f6f\u5728\u8bed\u97f3\u5408\u6210\u9886\u57df\u7684\u8bba\u6587\u5e38\u5e38\u53d1\u5e03\u5728 Microsoft-Speech Research \u3002","title":"FastSpeech"},{"location":"tts/%E5%A3%B0%E5%AD%A6%E6%A8%A1%E5%9E%8B/#_4","text":"FastSpeech 2\u548c\u4e0a\u4ee3FastSpeech\u7684\u7f16\u89e3\u7801\u5668\u5747\u662f\u91c7\u7528FFT\uff08feed-forward Transformer\uff0c\u524d\u9988Transformer\uff09\u5757\u3002\u7f16\u89e3\u7801\u5668\u7684\u8f93\u5165\u9996\u5148\u8fdb\u884c\u4f4d\u7f6e\u7f16\u7801\uff0c\u4e4b\u540e\u8fdb\u5165FFT\u5757\u3002FFT\u5757\u4e3b\u8981\u5305\u62ec\u591a\u5934\u6ce8\u610f\u529b\u6a21\u5757\u548c\u4f4d\u7f6e\u524d\u9988\u7f51\u7edc\uff0c\u4f4d\u7f6e\u524d\u9988\u7f51\u7edc\u53ef\u4ee5\u7531\u82e5\u5e72\u5c42Conv1d\u3001LayerNorm\u548cDropout\u7ec4\u6210\u3002 \u8bba\u6587\u4e2d\u63d0\u5230\u8bed\u97f3\u5408\u6210\u662f\u5178\u578b\u7684\u4e00\u5bf9\u591a\u95ee\u9898\uff0c\u540c\u6837\u7684\u6587\u672c\u53ef\u4ee5\u5408\u6210\u65e0\u6570\u79cd\u8bed\u97f3\u3002\u4e0a\u4e00\u4ee3FastSpeech\u4e3b\u8981\u901a\u8fc7\u76ee\u6807\u4fa7\u4f7f\u7528\u6559\u5e08\u6a21\u578b\u7684\u5408\u6210\u9891\u8c31\u800c\u975e\u771f\u5b9e\u9891\u8c31\uff0c\u4ee5\u7b80\u5316\u6570\u636e\u504f\u5dee\uff0c\u51cf\u5c11\u8bed\u97f3\u4e2d\u7684\u591a\u6837\u6027\uff0c\u4ece\u800c\u964d\u4f4e\u8bad\u7ec3\u96be\u5ea6\uff1b\u5411\u6a21\u578b\u63d0\u4f9b\u989d\u5916\u7684\u65f6\u957f\u4fe1\u606f\u4e24\u4e2a\u9014\u5f84\u89e3\u51b3\u4e00\u5bf9\u591a\u7684\u95ee\u9898\u3002\u5728\u8bed\u97f3\u4e2d\uff0c\u97f3\u7d20\u65f6\u957f\u81ea\u4e0d\u5fc5\u8bf4\uff0c\u76f4\u63a5\u5f71\u54cd\u53d1\u97f3\u957f\u5ea6\u548c\u6574\u4f53\u97f5\u5f8b\uff1b\u97f3\u8c03\u5219\u662f\u5f71\u54cd\u60c5\u611f\u548c\u97f5\u5f8b\u7684\u53e6\u4e00\u4e2a\u7279\u5f81\uff1b\u80fd\u91cf\u5219\u5f71\u54cd\u9891\u8c31\u7684\u5e45\u5ea6\uff0c\u76f4\u63a5\u5f71\u54cd\u97f3\u9891\u7684\u97f3\u91cf\u3002\u5728FastSpeech 2\u4e2d\u5bf9\u8fd9\u4e09\u4e2a\u6700\u91cd\u8981\u7684\u8bed\u97f3\u5c5e\u6027\u5355\u72ec\u5efa\u6a21\uff0c\u4ece\u800c\u7f13\u89e3\u4e00\u5bf9\u591a\u5e26\u6765\u7684\u6a21\u578b\u5b66\u4e60\u76ee\u6807\u4e0d\u786e\u5b9a\u7684\u95ee\u9898\u3002 \u5728\u5bf9\u65f6\u957f\u3001\u57fa\u9891\u548c\u80fd\u91cf\u5355\u72ec\u5efa\u6a21\u65f6\uff0c\u6240\u4f7f\u7528\u7684\u7f51\u7edc\u7ed3\u6784\u5b9e\u9645\u662f\u76f8\u4f3c\u7684\uff0c\u5728\u8bba\u6587\u4e2d\u79f0\u8fd9\u79cd\u8bed\u97f3\u5c5e\u6027\u5efa\u6a21\u7f51\u7edc\u4e3a\u53d8\u91cf\u9002\u914d\u5668\uff08Variance Adaptor\uff09\u3002\u65f6\u957f\u9884\u6d4b\u7684\u8f93\u51fa\u4e5f\u4f5c\u4e3a\u57fa\u9891\u548c\u80fd\u91cf\u9884\u6d4b\u7684\u8f93\u5165\u3002\u6700\u540e\uff0c\u57fa\u9891\u9884\u6d4b\u548c\u80fd\u91cf\u9884\u6d4b\u7684\u8f93\u51fa\uff0c\u4ee5\u53ca\u4f9d\u9760\u65f6\u957f\u4fe1\u606f\u5c55\u5f00\u7684\u7f16\u7801\u5668\u8f93\u5165\u5143\u7d20\u52a0\u8d77\u6765\uff0c\u4f5c\u4e3a\u4e0b\u6e38\u7f51\u7edc\u7684\u8f93\u5165\u3002\u53d8\u91cf\u9002\u914d\u5668\u4e3b\u8981\u662f\u75312\u5c42\u5377\u79ef\u548c1\u5c42\u7ebf\u6027\u6620\u5c04\u5c42\u7ec4\u6210\uff0c\u6bcf\u5c42\u5377\u79ef\u540e\u52a0ReLU\u6fc0\u6d3b\u3001LayerNorm\u548cDropout\u3002\u4ee3\u7801\u6458\u6284\u81ea FastSpeech2 \uff0c\u6dfb\u52a0\u4e86\u4e00\u4e9b\u6ce8\u91ca\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 class VariancePredictor ( nn . Module ): \"\"\" Duration, Pitch and Energy Predictor \"\"\" def __init__ ( self ): super ( VariancePredictor , self ) . __init__ () self . input_size = hp . encoder_hidden self . filter_size = hp . variance_predictor_filter_size self . kernel = hp . variance_predictor_kernel_size self . conv_output_size = hp . variance_predictor_filter_size self . dropout = hp . variance_predictor_dropout self . conv_layer = nn . Sequential ( OrderedDict ([ ( \"conv1d_1\" , Conv ( self . input_size , self . filter_size , kernel_size = self . kernel , padding = ( self . kernel - 1 ) // 2 )), ( \"relu_1\" , nn . ReLU ()), ( \"layer_norm_1\" , nn . LayerNorm ( self . filter_size )), ( \"dropout_1\" , nn . Dropout ( self . dropout )), ( \"conv1d_2\" , Conv ( self . filter_size , self . filter_size , kernel_size = self . kernel , padding = 1 )), ( \"relu_2\" , nn . ReLU ()), ( \"layer_norm_2\" , nn . LayerNorm ( self . filter_size )), ( \"dropout_2\" , nn . Dropout ( self . dropout )) ])) self . linear_layer = nn . Linear ( self . conv_output_size , 1 ) def forward ( self , encoder_output , mask ): ''' :param encoder_output: Output of encoder. [batch_size,seq_len,encoder_hidden] :param mask: Mask for encoder. [batch_size,seq_len] ''' out = self . conv_layer ( encoder_output ) out = self . linear_layer ( out ) out = out . squeeze ( - 1 ) if mask is not None : out = out . masked_fill ( mask , 0. ) return out \u5229\u7528\u8be5\u53d8\u91cf\u9002\u914d\u5668\u5bf9\u65f6\u957f\u3001\u57fa\u9891\u548c\u80fd\u91cf\u8fdb\u884c\u5efa\u6a21\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 class VarianceAdaptor ( nn . Module ): \"\"\" Variance Adaptor \"\"\" def __init__ ( self ): super ( VarianceAdaptor , self ) . __init__ () self . duration_predictor = VariancePredictor () self . length_regulator = LengthRegulator () self . pitch_predictor = VariancePredictor () self . energy_predictor = VariancePredictor () self . pitch_bins = nn . Parameter ( torch . exp ( torch . linspace ( np . log ( hp . f0_min ), np . log ( hp . f0_max ), hp . n_bins - 1 )), requires_grad = False ) self . energy_bins = nn . Parameter ( torch . linspace ( hp . energy_min , hp . energy_max , hp . n_bins - 1 ), requires_grad = False ) self . pitch_embedding = nn . Embedding ( hp . n_bins , hp . encoder_hidden ) self . energy_embedding = nn . Embedding ( hp . n_bins , hp . encoder_hidden ) def forward ( self , x , src_mask , mel_mask = None , duration_target = None , pitch_target = None , energy_target = None , max_len = None , d_control = 1.0 , p_control = 1.0 , e_control = 1.0 ): ''' :param x: Output of encoder. [batch_size,seq_len,encoder_hidden] :param src_mask: Mask of encoder, can get src_mask form input_lengths. [batch_size,seq_len] :param duration_target, pitch_target, energy_target: Ground-truth when training, None when synthesis. [batch_size,seq_len] ''' log_duration_prediction = self . duration_predictor ( x , src_mask ) if duration_target is not None : x , mel_len = self . length_regulator ( x , duration_target , max_len ) else : duration_rounded = torch . clamp ( ( torch . round ( torch . exp ( log_duration_prediction ) - hp . log_offset ) * d_control ), min = 0 ) x , mel_len = self . length_regulator ( x , duration_rounded , max_len ) mel_mask = utils . get_mask_from_lengths ( mel_len ) pitch_prediction = self . pitch_predictor ( x , mel_mask ) if pitch_target is not None : pitch_embedding = self . pitch_embedding ( torch . bucketize ( pitch_target , self . pitch_bins )) else : pitch_prediction = pitch_prediction * p_control pitch_embedding = self . pitch_embedding ( torch . bucketize ( pitch_prediction , self . pitch_bins )) energy_prediction = self . energy_predictor ( x , mel_mask ) if energy_target is not None : energy_embedding = self . energy_embedding ( torch . bucketize ( energy_target , self . energy_bins )) else : energy_prediction = energy_prediction * e_control energy_embedding = self . energy_embedding ( torch . bucketize ( energy_prediction , self . energy_bins )) x = x + pitch_embedding + energy_embedding return x , log_duration_prediction , pitch_prediction , energy_prediction , mel_len , mel_mask \u540c\u6837\u662f\u901a\u8fc7\u957f\u5ea6\u8c03\u8282\u5668\uff08Length Regulator\uff09\uff0c\u5229\u7528\u65f6\u957f\u4fe1\u606f\u5c06\u7f16\u7801\u5668\u8f93\u51fa\u957f\u5ea6\u6269\u5c55\u5230\u9891\u8c31\u957f\u5ea6\u3002\u5177\u4f53\u5b9e\u73b0\u5c31\u662f\u6839\u636eduration\u7684\u5177\u4f53\u503c\uff0c\u76f4\u63a5\u4e0a\u91c7\u6837\u3002\u4e00\u4e2a\u97f3\u7d20\u65f6\u957f\u4e3a2\uff0c\u5c31\u5c06\u7f16\u7801\u5668\u8f93\u51fa\u590d\u52362\u4efd\uff0c\u7ed93\u5c31\u76f4\u63a5\u590d\u52363\u4efd\uff0c\u62fc\u63a5\u4e4b\u540e\u4f5c\u4e3a\u6700\u7ec8\u7684\u8f93\u51fa\u3002\u5b9e\u73b0\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 class LengthRegulator ( nn . Module ): \"\"\" Length Regulator \"\"\" def __init__ ( self ): super ( LengthRegulator , self ) . __init__ () def LR ( self , x , duration , max_len ): ''' :param x: Output of encoder. [batch_size,phoneme_seq_len,encoder_hidden] :param duration: Duration for phonemes. [batch_size,phoneme_seq_len] :param max_len: Max length for mel-frames. scaler Return: output: Expanded output of encoder. [batch_size,mel_len,encoder_hidden] ''' output = list () mel_len = list () for batch , expand_target in zip ( x , duration ): # batch: [seq_len,encoder_hidden] # expand_target: [seq_len] expanded = self . expand ( batch , expand_target ) output . append ( expanded ) mel_len . append ( expanded . shape [ 0 ]) if max_len is not None : output = utils . pad ( output , max_len ) else : output = utils . pad ( output ) return output , torch . LongTensor ( mel_len ) . to ( device ) def expand ( self , batch , predicted ): out = list () for i , vec in enumerate ( batch ): # expand_size: scaler expand_size = predicted [ i ] . item () # Passing -1 as the size for a dimension means not changing the size of that dimension. out . append ( vec . expand ( int ( expand_size ), - 1 )) out = torch . cat ( out , 0 ) return out def forward ( self , x , duration , max_len ): output , mel_len = self . LR ( x , duration , max_len ) return output , mel_len \u5bf9\u4e8e\u97f3\u9ad8\u548c\u80fd\u91cf\u7684\u9884\u6d4b\uff0c\u6a21\u5757\u7684\u4e3b\u5e72\u7f51\u7edc\u76f8\u4f3c\uff0c\u4f46\u4f7f\u7528\u65b9\u6cd5\u6709\u6240\u4e0d\u540c\u3002\u4ee5\u97f3\u9ad8\u4e3a\u4f8b\uff0c\u80fd\u91cf\u7684\u4f7f\u7528\u65b9\u5f0f\u76f8\u4f3c\u3002\u9996\u5148\u5bf9\u9884\u6d4b\u51fa\u7684\u5b9e\u6570\u57df\u97f3\u9ad8\u503c\u8fdb\u884c\u5206\u6876\uff0c\u6620\u5c04\u4e3a\u4e00\u5b9a\u8303\u56f4\u5185\u7684\u81ea\u7136\u6570\u96c6\uff0c\u7136\u540e\u505a\u5d4c\u5165\u3002 1 2 3 4 5 6 7 8 pitch_prediction = self . pitch_predictor ( x , mel_mask ) if pitch_target is not None : pitch_embedding = self . pitch_embedding ( torch . bucketize ( pitch_target , self . pitch_bins )) else : pitch_prediction = pitch_prediction * p_control pitch_embedding = self . pitch_embedding ( torch . bucketize ( pitch_prediction , self . pitch_bins )) \u8fd9\u91cc\u7528\u5230\u4e86Pytorch\u4e2d\u4e00\u4e2a\u4e0d\u662f\u7279\u522b\u5e38\u89c1\u7684\u51fd\u6570 torch.bucketize \u3002\u8fd9\u662fPytorch\u4e2d\u7684\u5206\u6876\u51fd\u6570\uff0cboundaries\u786e\u5b9a\u4e86\u5404\u4e2a\u6876\u7684\u8fb9\u754c\uff0c\u662f\u4e00\u4e2a\u5355\u8c03\u9012\u589e\u5411\u91cf\uff0c\u7528\u4e8e\u5212\u5206input\uff0c\u5e76\u8fd4\u56deinput\u6240\u5c5e\u6876\u7684\u7d22\u5f15\uff0c\u6876\u7d22\u5f15\u4ece0\u5f00\u59cb\u3002 \u80fd\u91cf\u5d4c\u5165\u5411\u91cf\u7684\u8ba1\u7b97\u65b9\u6cd5\u4e0e\u4e4b\u7c7b\u4f3c\u3002\u81f3\u6b64\uff0c\u83b7\u5f97\u4e86\u5c55\u5f00\u4e4b\u540e\u7684\u7f16\u7801\u5668\u8f93\u51fax\uff0c\u57fa\u9891\u5d4c\u5165\u5411\u91cf pitch_embedding \u548c\u80fd\u91cf\u5d4c\u5165\u5411\u91cf energy_embedding \u4e4b\u540e\uff0c\u5143\u7d20\u52a0\u83b7\u5f97\u6700\u7ec8\u7f16\u89e3\u7801\u5668\u7684\u8f93\u5165\u3002","title":"\u6a21\u578b\u7ed3\u6784"},{"location":"tts/%E5%A3%B0%E5%AD%A6%E6%A8%A1%E5%9E%8B/#_5","text":"FastSpeech 2\u7684\u76ee\u6807\u51fd\u6570\u7531PostNet\u524d\u540e\u7684\u9891\u8c31\u5747\u65b9\u5dee\uff0c\u65f6\u957f\u3001\u97f3\u9ad8\u548c\u80fd\u91cf\u7684\u5747\u65b9\u5dee\u7ec4\u6210\u3002\u65f6\u957f\u6620\u5c04\u5230\u6307\u6570\u57df\uff08\u65f6\u957f\u9884\u6d4b\u5668\u8f93\u51fa\u7684\u6570\u503c \\(x\\) \u4f5c\u4e3a\u6307\u6570\uff0c\u6700\u7ec8\u7684\u9884\u6d4b\u65f6\u957f\u4e3a \\(e^x\\) \uff09\uff0c\u97f3\u9ad8\u6620\u5c04\u5230\u5bf9\u6570\u57df\uff08\u97f3\u9ad8\u9884\u6d4b\u5668\u8f93\u51fa\u7684\u6570\u503c \\(x\\) \u505a\u5bf9\u6570\uff0c\u4f5c\u4e3a\u6700\u7ec8\u7684\u97f3\u9ad8 \\({\\rm log} x\\) \uff09\uff0c\u800c\u80fd\u91cf\u76f4\u63a5\u91c7\u7528\u80fd\u91cf\u9884\u6d4b\u5668\u7684\u8f93\u51fa\u503c\u3002\u6574\u4f53\u7684\u635f\u5931\u51fd\u6570\u4e3a\uff1a \\[ {\\rm Loss}={\\rm Loss}_{mel}+{\\rm Loss}_{mel}^{post}+{\\rm Loss}_{duration}+{\\rm Loss}_{pitch}+{\\rm Loss}_{energy} \\] \u9891\u8c31\u7684\u635f\u5931\u51fd\u6570\u5f62\u5f0f\u91c7\u7528\u5747\u65b9\u5dee\uff08MSE\uff09\uff0c\u65f6\u957f\u3001\u57fa\u9891\u548c\u80fd\u91cf\u91c7\u7528\u5e73\u5747\u7edd\u5bf9\u8bef\u5dee\uff08MAE\uff09\uff0c\u5177\u4f53\u7684\u5b9e\u73b0\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 log_d_target . requires_grad = False p_target . requires_grad = False e_target . requires_grad = False mel_target . requires_grad = False log_d_predicted = log_d_predicted . masked_select ( src_mask ) log_d_target = log_d_target . masked_select ( src_mask ) p_predicted = p_predicted . masked_select ( mel_mask ) p_target = p_target . masked_select ( mel_mask ) e_predicted = e_predicted . masked_select ( mel_mask ) e_target = e_target . masked_select ( mel_mask ) mel = mel . masked_select ( mel_mask . unsqueeze ( - 1 )) mel_postnet = mel_postnet . masked_select ( mel_mask . unsqueeze ( - 1 )) mel_target = mel_target . masked_select ( mel_mask . unsqueeze ( - 1 )) mel_loss = self . mse_loss ( mel , mel_target ) mel_postnet_loss = self . mse_loss ( mel_postnet , mel_target ) d_loss = self . mae_loss ( log_d_predicted , log_d_target ) p_loss = self . mae_loss ( p_predicted , p_target ) e_loss = self . mae_loss ( e_predicted , e_target ) total_loss = mel_loss + mel_postnet_loss + d_loss + p_loss + e_loss","title":"\u635f\u5931\u51fd\u6570"},{"location":"tts/%E5%A3%B0%E5%AD%A6%E6%A8%A1%E5%9E%8B/#_6","text":"FastSpeech\u7cfb\u5217\u7684\u58f0\u5b66\u6a21\u578b\u5c06Transformer\u5f15\u5165\u8bed\u97f3\u5408\u6210\u9886\u57df\uff0c\u5e76\u4e14\u663e\u5f0f\u5efa\u6a21\u8bed\u97f3\u4e2d\u7684\u91cd\u8981\u7279\u5f81\uff0c\u6bd4\u5982\u65f6\u957f\u3001\u97f3\u9ad8\u548c\u80fd\u91cf\u7b49\u3002\u5b9e\u9645\u4e0a\uff0c\u5fae\u8f6f\u9996\u6b21\u5728 Neural Speech Synthesis with Transformer Network \u5c06Transformer\u4f5c\u4e3a\u4e3b\u5e72\u7f51\u7edc\uff0c\u5b9e\u73b0\u8bed\u97f3\u5408\u6210\u7684\u58f0\u5b66\u6a21\u578b\uff0c\u8fd9\u4e00\u601d\u60f3\u540c\u6837\u88ab FastPitch: Parallel Text-to-speech with Pitch Prediction \u91c7\u7528\uff0c\u76f8\u5173\u7684\u5f00\u6e90\u4ee3\u7801\uff1a as-ideas/TransformerTTS \u3002","title":"\u5c0f\u7ed3"},{"location":"tts/%E5%A3%B0%E5%AD%A6%E6%A8%A1%E5%9E%8B/#vits","text":"VITS\uff08Variational Inference with adversarial learning for end-to-end Text-to-Speech\uff09\u662f\u4e00\u79cd\u7ed3\u5408\u53d8\u5206\u63a8\u7406\uff08variational inference\uff09\u3001\u6807\u51c6\u5316\u6d41\uff08normalizing flows\uff09\u548c\u5bf9\u6297\u8bad\u7ec3\u7684\u9ad8\u8868\u73b0\u529b\u8bed\u97f3\u5408\u6210\u6a21\u578b\u3002\u548cTacotron\u548cFastSpeech\u4e0d\u540c\uff0cTacotron / FastSpeech\u5b9e\u9645\u662f\u5c06\u5b57\u7b26\u6216\u97f3\u7d20\u6620\u5c04\u4e3a\u4e2d\u95f4\u58f0\u5b66\u8868\u5f81\uff0c\u6bd4\u5982\u6885\u5c14\u9891\u8c31\uff0c\u7136\u540e\u901a\u8fc7\u58f0\u7801\u5668\u5c06\u6885\u5c14\u9891\u8c31\u8fd8\u539f\u4e3a\u6ce2\u5f62\uff0c\u800cVITS\u5219\u76f4\u63a5\u5c06\u5b57\u7b26\u6216\u97f3\u7d20\u6620\u5c04\u4e3a\u6ce2\u5f62\uff0c\u4e0d\u9700\u8981\u989d\u5916\u7684\u58f0\u7801\u5668\u91cd\u5efa\u6ce2\u5f62\uff0c\u771f\u6b63\u7684\u7aef\u5230\u7aef\u8bed\u97f3\u5408\u6210\u6a21\u578b\u3002VITS\u901a\u8fc7\u9690\u53d8\u91cf\u800c\u975e\u4e4b\u524d\u7684\u9891\u8c31\u4e32\u8054\u8bed\u97f3\u5408\u6210\u4e2d\u7684\u58f0\u5b66\u6a21\u578b\u548c\u58f0\u7801\u5668\uff0c\u5728\u9690\u53d8\u91cf\u4e0a\u8fdb\u884c\u5efa\u6a21\u5e76\u5229\u7528\u968f\u673a\u65f6\u957f\u9884\u6d4b\u5668\uff0c\u63d0\u9ad8\u4e86\u5408\u6210\u8bed\u97f3\u7684\u591a\u6837\u6027\uff0c\u8f93\u5165\u540c\u6837\u7684\u6587\u672c\uff0c\u80fd\u591f\u5408\u6210\u4e0d\u540c\u58f0\u8c03\u548c\u97f5\u5f8b\u7684\u8bed\u97f3\u3002VITS\u5408\u6210\u97f3\u8d28\u8f83\u9ad8\uff0c\u5e76\u4e14\u53ef\u4ee5\u501f\u9274\u4e4b\u524d\u7684FastSpeech\uff0c\u5355\u72ec\u5bf9\u97f3\u9ad8\u7b49\u7279\u5f81\u8fdb\u884c\u5efa\u6a21\uff0c\u4ee5\u8fdb\u4e00\u6b65\u63d0\u5347\u5408\u6210\u8bed\u97f3\u7684\u8d28\u91cf\uff0c\u662f\u4e00\u79cd\u975e\u5e38\u6709\u6f5c\u529b\u7684\u8bed\u97f3\u5408\u6210\u6a21\u578b\u3002","title":"VITS"},{"location":"tts/%E5%A3%B0%E5%AD%A6%E6%A8%A1%E5%9E%8B/#_7","text":"VITS\u5305\u62ec\u4e09\u4e2a\u90e8\u5206\uff1a \u540e\u9a8c\u7f16\u7801\u5668\u3002\u5982\u4e0a\u56fe\uff08a\uff09\u7684\u5de6\u4e0b\u90e8\u5206\u6240\u793a\uff0c\u5728\u8bad\u7ec3\u65f6\u8f93\u5165\u7ebf\u6027\u8c31\uff0c\u8f93\u51fa\u9690\u53d8\u91cf \\(z\\) \uff0c\u63a8\u65ad\u65f6\u9690\u53d8\u91cf \\(z\\) \u5219\u7531 \\(f_\\theta\\) \u4ea7\u751f\u3002VITS\u7684\u540e\u9a8c\u7f16\u7801\u5668\u91c7\u7528WaveGlow\u548cGlow-TTS\u4e2d\u7684\u975e\u56e0\u679cWaveNet\u6b8b\u5dee\u6a21\u5757\u3002\u5e94\u7528\u4e8e\u591a\u4eba\u6a21\u578b\u65f6\uff0c\u5c06\u8bf4\u8bdd\u4eba\u5d4c\u5165\u5411\u91cf\u6dfb\u52a0\u8fdb\u6b8b\u5dee\u6a21\u5757\uff0c \u4ec5\u7528\u4e8e\u8bad\u7ec3 \u3002\u8fd9\u91cc\u7684\u9690\u53d8\u91cf \\(z\\) \u53ef\u4ee5\u7406\u89e3\u4e3aTacotron / FastSpeech\u4e2d\u7684\u6885\u5c14\u9891\u8c31\u3002 \u89e3\u7801\u5668\u3002\u5982\u4e0a\u56fe\uff08a\uff09\u5de6\u4e0a\u90e8\u5206\u6240\u793a\uff0c\u89e3\u7801\u5668\u4ece\u63d0\u53d6\u7684\u9690\u53d8\u91cf \\(z\\) \u4e2d\u751f\u6210\u8bed\u97f3\u6ce2\u5f62\uff0c\u8fd9\u4e2a\u89e3\u7801\u5668\u5b9e\u9645\u5c31\u662f\u58f0\u7801\u5668HiFi-GAN V1\u7684\u751f\u6210\u5668\u3002\u5e94\u7528\u4e8e\u591a\u4eba\u6a21\u578b\u65f6\uff0c\u5728\u8bf4\u8bdd\u4eba\u5d4c\u5165\u5411\u91cf\u4e4b\u540e\u6dfb\u52a0\u4e00\u4e2a\u7ebf\u6027\u5c42\uff0c\u62fc\u63a5\u5230 \\(f_\\theta\\) \u7684\u8f93\u51fa\u9690\u53d8\u91cf \\(z\\) \u3002 \u5148\u9a8c\u7f16\u7801\u5668\u3002\u5982\u4e0a\u56fe\uff08a\uff09\u53f3\u4fa7\u90e8\u5206\u6240\u793a\uff0c\u5148\u9a8c\u7f16\u7801\u5668\u7ed3\u6784\u6bd4\u8f83\u590d\u6742\uff0c\u4f5c\u7528\u7c7b\u4f3c\u4e8eTacotron / FastSpeech\u7684\u58f0\u5b66\u6a21\u578b\uff0c\u53ea\u4e0d\u8fc7VITS\u662f\u5c06\u97f3\u7d20\u6620\u5c04\u4e3a\u4e2d\u95f4\u8868\u793a \\(z\\) \uff0c\u800c\u4e0d\u662f\u5c06\u97f3\u7d20\u6620\u5c04\u4e3a\u9891\u8c31\u3002\u5305\u62ec\u6587\u672c\u7f16\u7801\u5668\u548c\u63d0\u5347\u5148\u9a8c\u5206\u5e03\u590d\u6742\u5ea6\u7684\u6807\u51c6\u5316\u6d41 \\(f_\\theta\\) \u3002\u5e94\u7528\u4e8e\u591a\u4eba\u6a21\u578b\u65f6\uff0c\u5411\u6807\u51c6\u5316\u6d41\u7684\u6b8b\u5dee\u6a21\u5757\u4e2d\u6dfb\u52a0\u8bf4\u8bdd\u4eba\u5d4c\u5165\u5411\u91cf\u3002 \u968f\u673a\u65f6\u957f\u9884\u6d4b\u5668\u3002\u5982\u4e0a\u56fe\uff08a\uff09\u53f3\u4fa7\u4e2d\u95f4\u6a59\u8272\u90e8\u5206\u3002\u4ece\u6761\u4ef6\u8f93\u5165 \\(h_{text}\\) \u4f30\u7b97\u97f3\u7d20\u65f6\u957f\u7684\u5206\u5e03\u3002\u5e94\u7528\u4e8e\u591a\u4eba\u6a21\u578b\u65f6\uff0c\u5728\u8bf4\u8bdd\u4eba\u5d4c\u5165\u5411\u91cf\u4e4b\u540e\u6dfb\u52a0\u4e00\u4e2a\u7ebf\u6027\u5c42\uff0c\u5e76\u5c06\u5176\u62fc\u63a5\u5230\u6587\u672c\u7f16\u7801\u5668\u7684\u8f93\u51fa \\(h_{text}\\) \u3002 \u5224\u522b\u5668\u3002\u5b9e\u9645\u5c31\u662fHiFi-GAN\u7684\u591a\u5468\u671f\u5224\u522b\u5668\uff0c\u5728\u4e0a\u56fe\u4e2d\u672a\u753b\u51fa\uff0c \u4ec5\u7528\u4e8e\u8bad\u7ec3 \u3002\u76ee\u524d\u770b\u6765\uff0c\u5bf9\u4e8e\u4efb\u610f\u8bed\u97f3\u5408\u6210\u6a21\u578b\uff0c\u52a0\u5165\u5224\u522b\u5668\u8f85\u52a9\u90fd\u53ef\u4ee5\u663e\u8457\u63d0\u5347\u8868\u73b0\u3002","title":"\u6a21\u578b\u6574\u4f53\u7ed3\u6784"},{"location":"tts/%E5%A3%B0%E5%AD%A6%E6%A8%A1%E5%9E%8B/#_8","text":"VITS\u53ef\u4ee5\u770b\u4f5c\u662f\u4e00\u4e2a\u6700\u5927\u5316\u53d8\u5206\u4e0b\u754c\uff0c\u4e5f\u5373ELBO\uff08Evidence Lower Bound\uff09\u7684\u6761\u4ef6VAE\u3002 \u91cd\u5efa\u635f\u5931 VITS\u5728\u8bad\u7ec3\u65f6\u5b9e\u9645\u8fd8\u662f\u4f1a\u751f\u6210\u6885\u5c14\u9891\u8c31\u4ee5\u6307\u5bfc\u6a21\u578b\u7684\u8bad\u7ec3\uff0c\u91cd\u5efa\u635f\u5931\u4e2d\u7684\u76ee\u6807\u4f7f\u7528\u7684\u662f\u6885\u5c14\u9891\u8c31\u800c\u975e\u539f\u59cb\u6ce2\u5f62\uff1a \\[ {\\rm L}_{recon}=||x_{mel}-\\hat{x}_{mel}||_1 \\] \u4f46\u5728\u63a8\u65ad\u65f6\u5e76\u4e0d\u9700\u8981\u751f\u6210\u6885\u5c14\u9891\u8c31\u3002\u5728\u5b9e\u73b0\u4e0a\uff0c\u4e0d\u4e0a\u91c7\u6837\u6574\u4e2a\u9690\u53d8\u91cf \\(z\\) \uff0c\u800c\u53ea\u662f\u4f7f\u7528\u90e8\u5206\u5e8f\u5217\u4f5c\u4e3a\u89e3\u7801\u5668\u7684\u8f93\u5165\u3002 KL\u6563\u5ea6 \u5148\u9a8c\u7f16\u7801\u5668 \\(c\\) \u7684\u8f93\u5165\u5305\u62ec\u4ece\u6587\u672c\u751f\u6210\u7684\u97f3\u7d20 \\(c_{text}\\) \uff0c\u548c\u97f3\u7d20\u3001\u9690\u53d8\u91cf\u4e4b\u95f4\u7684\u5bf9\u9f50 \\(A\\) \u3002\u6240\u8c13\u7684\u5bf9\u9f50\u5c31\u662f \\(|c_{text}|\\times |z|\\) \u5927\u5c0f\u7684\u4e25\u683c\u5355\u8c03\u6ce8\u610f\u529b\u77e9\u9635\uff0c\u8868\u793a\u6bcf\u4e00\u4e2a\u97f3\u7d20\u7684\u53d1\u97f3\u65f6\u957f\u3002\u56e0\u6b64KL\u6563\u5ea6\u662f\uff1a \\[ {\\rm L}_{kl}={\\rm log}q_{\\phi}(z|x_{lin})-{\\rm log}p_\\theta (z|c_{text},A) \\] \u5176\u4e2d\uff0c \\(q_{\\phi}(z|x_{lin})\\) \u8868\u793a\u7ed9\u5b9a\u8f93\u5165 \\(x\\) \u7684\u540e\u9a8c\u5206\u5e03\uff0c \\(p_\\theta(z|c)\\) \u8868\u793a\u7ed9\u5b9a\u6761\u4ef6 \\(c\\) \u7684\u9690\u53d8\u91cf \\(z\\) \u7684\u5148\u9a8c\u5206\u5e03\u3002\u5176\u4e2d\u9690\u53d8\u91cf \\(z\\) \u4e3a\uff1a \\[ z\\sim q_\\phi(z|x_{lin})=\\mathbb{N}(z;\\mu_\\phi(x_{lin}),\\sigma_\\phi(x_{lin})) \\] \u4e3a\u4e86\u7ed9\u540e\u9a8c\u7f16\u7801\u5668\u63d0\u4f9b\u66f4\u9ad8\u5206\u8fa8\u7387\u7684\u4fe1\u606f\uff0c\u4f7f\u7528\u7ebf\u6027\u8c31\u800c\u975e\u6885\u5c14\u9891\u8c31\u4f5c\u4e3a\u540e\u9a8c\u7f16\u7801\u5668 \\(\\phi_\\theta\\) \u7684\u8f93\u5165\u3002\u540c\u65f6\uff0c\u4e3a\u4e86\u751f\u6210\u66f4\u52a0\u903c\u771f\u7684\u6837\u672c\uff0c\u63d0\u9ad8\u5148\u9a8c\u5206\u5e03\u7684\u8868\u8fbe\u80fd\u529b\u6bd4\u8f83\u91cd\u8981\uff0c\u56e0\u6b64\u5f15\u5165\u6807\u51c6\u5316\u6d41\uff0c\u5728\u6587\u672c\u7f16\u7801\u5668\u4ea7\u751f\u7684\u7b80\u5355\u5206\u5e03\u548c\u590d\u6742\u5206\u5e03\u95f4\u8fdb\u884c\u53ef\u9006\u53d8\u6362\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u7ecf\u8fc7\u4e0a\u91c7\u6837\u7684\u7f16\u7801\u5668\u8f93\u51fa\u4e4b\u540e\uff0c\u52a0\u5165\u4e00\u7cfb\u5217\u53ef\u9006\u53d8\u6362\uff1a \\[ p_\\theta(z|c)=\\mathbb{N}(f_\\theta(z);\\mu_\\theta(c),\\sigma_\\theta(c))|{\\rm det}\\frac{\\partial f_\\theta(z)}{\\partial z}| \\] \u5176\u4e2d\uff0c\u4e0a\u5f0f\u4e2d\u7684 \\(c\\) \u5c31\u662f\u4e0a\u91c7\u6837\u7684\u7f16\u7801\u5668\u8f93\u51fa\uff1a \\[ c=[c_{text},A] \\]","title":"\u53d8\u5206\u63a8\u65ad"},{"location":"tts/%E5%A3%B0%E5%AD%A6%E6%A8%A1%E5%9E%8B/#_9","text":"\u7531\u4e8e\u5728\u8bad\u7ec3\u65f6\u6ca1\u6709\u5bf9\u9f50\u7684\u771f\u5b9e\u6807\u7b7e\uff0c\u56e0\u6b64\u5728\u8bad\u7ec3\u7684\u6bcf\u4e00\u6b21\u8fed\u4ee3\u65f6\u90fd\u9700\u8981\u4f30\u8ba1\u5bf9\u9f50\u3002 \u5355\u8c03\u5bf9\u9f50\u641c\u7d22 \u4e3a\u4e86\u4f30\u8ba1\u6587\u672c\u548c\u8bed\u97f3\u4e4b\u95f4\u7684\u5bf9\u9f50 \\(A\\) \uff0cVITS\u91c7\u7528\u4e86\u7c7b\u4f3c\u4e8eGlow-TTS\u4e2d\u7684\u5355\u8c03\u5bf9\u9f50\u641c\u7d22\uff08Monotonic Alignment Search\uff0cMAS\uff09\u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u5bfb\u627e\u4e00\u4e2a\u6700\u4f18\u7684\u5bf9\u9f50\u8def\u5f84\u4ee5\u6700\u5927\u5316\u5229\u7528\u6807\u51c6\u5316\u6d41 \\(f\\) \u53c2\u6570\u5316\u6570\u636e\u7684\u5bf9\u6570\u4f3c\u7136\uff1a \\[ A=\\underset{\\hat{A}}{\\rm argmax}{\\rm log}p(x|c_{text},\\hat{A})=\\underset{\\hat{A}}{\\rm argmax}{\\rm log}\\mathbb{N}(f(x);\\mu(c_{text},\\hat{A}),\\sigma(c_{text},\\hat{A})) \\] MAS\u7ea6\u675f\u83b7\u5f97\u7684\u6700\u4f18\u5bf9\u9f50\u5fc5\u987b\u662f\u5355\u8c03\u4e14\u65e0\u8df3\u8fc7\u7684\u3002\u4f46\u662f\u65e0\u6cd5\u76f4\u63a5\u5c06MAS\u76f4\u63a5\u5e94\u7528\u5230VITS\uff0c\u56e0\u4e3aVITS\u4f18\u5316\u76ee\u6807\u662fELBO\u800c\u975e\u786e\u5b9a\u7684\u9690\u53d8\u91cf \\(z\\) \u7684\u5bf9\u6570\u4f3c\u7136\uff0c\u56e0\u6b64\u7a0d\u5fae\u6539\u53d8\u4e86\u4e00\u4e0bMAS\uff0c\u5bfb\u627e\u6700\u4f18\u7684\u5bf9\u9f50\u8def\u5f84\u4ee5\u6700\u5927\u5316ELBO\uff1a \\[ \\underset{\\hat{A}}{\\rm argmax}{\\rm log}p_\\theta (x_{mel}|z)-{\\rm log}\\frac{q_\\theta(z|x_{lin})}{p_\\theta (z|c_{text},\\hat{A})} \\] \u968f\u673a\u65f6\u957f\u9884\u6d4b\u5668 \u968f\u673a\u65f6\u957f\u9884\u6d4b\u5668\u662f\u4e00\u4e2a\u57fa\u4e8e\u6d41\u7684\u751f\u6210\u6a21\u578b\uff0c\u8bad\u7ec3\u76ee\u6807\u4e3a\u97f3\u7d20\u65f6\u957f\u5bf9\u6570\u4f3c\u7136\u7684\u53d8\u5206\u4e0b\u754c\uff1a \\[ {\\rm log}p_\\theta (d|c_{text}\\geq \\mathbb{E}_{q_\\theta (u,v|d,c_{text})}[{\\rm log}\\frac{p_\\theta (d-u,v|c_{text})}{q_\\phi (u,v|d,c_{text})}] \\] \u5728\u8bad\u7ec3\u65f6\uff0c\u65ad\u5f00\u968f\u673a\u65f6\u957f\u9884\u6d4b\u5668\u7684\u68af\u5ea6\u53cd\u4f20\uff0c\u4ee5\u9632\u6b62\u8be5\u90e8\u5206\u7684\u68af\u5ea6\u5f71\u54cd\u5230\u5176\u5b83\u6a21\u5757\u3002\u97f3\u7d20\u65f6\u957f\u901a\u8fc7\u968f\u673a\u65f6\u957f\u9884\u6d4b\u5668\u7684\u53ef\u9006\u53d8\u6362\u4ece\u968f\u673a\u566a\u97f3\u4e2d\u91c7\u6837\u83b7\u5f97\uff0c\u4e4b\u540e\u8f6c\u6362\u4e3a\u6574\u578b\u503c\u3002","title":"\u5bf9\u9f50\u4f30\u8ba1"},{"location":"tts/%E5%A3%B0%E5%AD%A6%E6%A8%A1%E5%9E%8B/#_10","text":"\u5f15\u5165\u5224\u522b\u5668 \\(D\\) \u5224\u65ad\u8f93\u51fa\u662f\u89e3\u7801\u5668 \\(G\\) \u7684\u8f93\u51fa\uff0c\u8fd8\u662f\u771f\u5b9e\u7684\u6ce2\u5f62 \\(y\\) \u3002VITS\u7528\u4e8e\u5bf9\u6297\u8bad\u7ec3\u7684\u635f\u5931\u51fd\u6570\u5305\u62ec\u4e24\u4e2a\u90e8\u5206\uff0c\u7b2c\u4e00\u90e8\u5206\u662f\u7528\u4e8e\u5bf9\u6297\u8bad\u7ec3\u7684\u6700\u5c0f\u4e8c\u4e58\u635f\u5931\u51fd\u6570\uff08least-squares loss function\uff09\uff1a \\[ {\\rm L}_{adv}(D)=\\mathbb{E}_{(y,z)}[(D(y)-1)^2+(D(G(z)))^2] \\] \\[ {\\rm L}_{adv}(G)=\\mathbb{E}_z[(D(G(z))-1)^2] \\] \u7b2c\u4e8c\u90e8\u5206\u662f\u4ec5\u4f5c\u7528\u4e8e\u751f\u6210\u5668\u7684\u7279\u5f81\u5339\u914d\u635f\u5931\uff08feature-matching loss\uff09\uff1a \\[ {\\rm L}_{fm}(G)=\\mathbb{E}_{(y,c)}[\\sum_{l=1}^T\\frac{1}{N_l}||D^l(y)-D^l(G(z))||_1] \\] \u5176\u4e2d\uff0c \\(T\\) \u8868\u793a\u5224\u522b\u5668\u7684\u5c42\u6570\uff0c \\(D^l\\) \u8868\u793a\u7b2c \\(l\\) \u5c42\u5224\u522b\u5668\u7684\u7279\u5f81\u56fe\uff08feature map\uff09\uff0c \\(N_l\\) \u8868\u793a\u7279\u5f81\u56fe\u7684\u6570\u91cf\u3002\u7279\u5f81\u5339\u914d\u635f\u5931\u53ef\u4ee5\u770b\u4f5c\u662f\u91cd\u5efa\u635f\u5931\uff0c\u7528\u4e8e\u7ea6\u675f\u5224\u522b\u5668\u4e2d\u95f4\u5c42\u7684\u8f93\u51fa\u3002","title":"\u5bf9\u6297\u8bad\u7ec3"},{"location":"tts/%E5%A3%B0%E5%AD%A6%E6%A8%A1%E5%9E%8B/#_11","text":"VITS\u53ef\u4ee5\u770b\u4f5c\u662fVAE\u548cGAN\u7684\u8054\u5408\u8bad\u7ec3\uff0c\u56e0\u6b64\u603b\u4f53\u635f\u5931\u4e3a\uff1a \\[ {\\rm L}_{vae}={\\rm L}_{recon}+{\\rm L}_{kl}+{\\rm L}_{dur}+{\\rm L}_{adv}+{\\rm L}_{fm}(G) \\]","title":"\u603b\u4f53\u635f\u5931"},{"location":"tts/%E5%A3%B0%E5%AD%A6%E6%A8%A1%E5%9E%8B/#_12","text":"VITS\u662f\u4e00\u79cd\u7531\u5b57\u7b26\u6216\u97f3\u7d20\u76f4\u63a5\u6620\u5c04\u4e3a\u6ce2\u5f62\u7684\u7aef\u5230\u7aef\u8bed\u97f3\u5408\u6210\u6a21\u578b\uff0c\u8be5\u8bed\u97f3\u5408\u6210\u6a21\u578b\u91c7\u7528\u5bf9\u6297\u8bad\u7ec3\u7684\u6a21\u5f0f\uff0c\u751f\u6210\u5668\u591a\u4e2a\u6a21\u5757\u57fa\u4e8e\u6807\u51c6\u5316\u6d41\u3002\u6a21\u578b\u8f83\u5927\uff0c\u5408\u6210\u8d28\u91cf\u4f18\u5f02\u3002VITS\u7684\u60f3\u6cd5\u76f8\u5f53\u6709\u542f\u53d1\uff0c\u4f46\u662f\u7406\u89e3\u8d77\u6765\u786e\u5b9e\u6bd4\u8f83\u96be\uff0c\u7279\u522b\u662f\u6807\u51c6\u5316\u6d41\uff0c\u53ef\u53c2\u8003\uff1a Awesome Normalizing Flows \u3002","title":"\u603b\u7ed3"},{"location":"tts/%E5%A3%B0%E7%A0%81%E5%99%A8/","text":"\u58f0\u7801\u5668 \u58f0\u7801\u5668\uff08Vocoder\uff09\uff0c\u53c8\u79f0\u8bed\u97f3\u4fe1\u53f7\u5206\u6790\u5408\u6210\u7cfb\u7edf\uff0c\u8d1f\u8d23\u5bf9\u58f0\u97f3\u8fdb\u884c\u5206\u6790\u548c\u5408\u6210\uff0c\u4e3b\u8981\u7528\u4e8e\u5408\u6210\u4eba\u7c7b\u7684\u8bed\u97f3\u3002\u58f0\u7801\u5668\u4e3b\u8981\u7531\u4ee5\u4e0b\u529f\u80fd\uff1a \u5206\u6790Analysis \u64cd\u7eb5Manipulation \u5408\u6210Synthesis \u5206\u6790\u8fc7\u7a0b\u4e3b\u8981\u662f\u4ece\u4e00\u6bb5\u539f\u59cb\u58f0\u97f3\u6ce2\u5f62\u4e2d\u63d0\u53d6\u58f0\u5b66\u7279\u5f81\uff0c\u6bd4\u5982\u7ebf\u6027\u8c31\u3001MFCC\uff1b\u64cd\u7eb5\u8fc7\u7a0b\u662f\u6307\u5bf9\u63d0\u53d6\u7684\u539f\u59cb\u58f0\u5b66\u7279\u5f81\u8fdb\u884c\u538b\u7f29\u7b49\u964d\u7ef4\u5904\u7406\uff0c\u4f7f\u5176\u8868\u5f81\u80fd\u529b\u8fdb\u4e00\u6b65\u63d0\u5347\uff1b\u5408\u6210\u8fc7\u7a0b\u662f\u6307\u5c06\u6b64\u58f0\u5b66\u7279\u5f81\u6062\u590d\u81f3\u539f\u59cb\u6ce2\u5f62\u3002\u4eba\u7c7b\u53d1\u58f0\u673a\u7406\u53ef\u4ee5\u7528\u7ecf\u5178\u7684\u6e90-\u6ee4\u6ce2\u5668\u6a21\u578b\u5efa\u6a21\uff0c\u4e5f\u5c31\u662f\u8f93\u5165\u7684\u6fc0\u52b1\u90e8\u5206\u901a\u8fc7\u7ebf\u6027\u65f6\u4e0d\u53d8\u8fdb\u884c\u64cd\u4f5c\uff0c\u8f93\u51fa\u7684\u58f0\u9053\u8c10\u632f\u90e8\u5206\u4f5c\u4e3a\u5408\u6210\u8bed\u97f3\u3002\u8f93\u5165\u90e8\u5206\u88ab\u79f0\u4e3a\u6fc0\u52b1\u90e8\u5206\uff08Source Excitation Part\uff09\uff0c\u6fc0\u52b1\u90e8\u5206\u5bf9\u5e94\u80ba\u90e8\u6c14\u6d41\u4e0e\u58f0\u5e26\u5171\u540c\u4f5c\u7528\u5f62\u6210\u7684\u6fc0\u52b1\uff0c\u8f93\u51fa\u7ed3\u679c\u88ab\u79f0\u4e3a\u58f0\u9053\u8c10\u632f\u90e8\u5206\uff08Vocal Tract Resonance Part\uff09\uff0c\u5bf9\u5e94\u4eba\u7c7b\u53d1\u97f3\u7ed3\u6784\uff0c\u800c\u58f0\u9053\u8c10\u632f\u90e8\u5206\u5bf9\u5e94\u4e8e\u58f0\u9053\u7684\u8c03\u97f3\u90e8\u5206\uff0c\u5bf9\u58f0\u97f3\u8fdb\u884c\u8c03\u5236\u3002 \u58f0\u7801\u5668\u7684\u53d1\u5c55\u53ef\u4ee5\u5206\u4e3a\u4e24\u4e2a\u9636\u6bb5\uff0c\u5305\u62ec\u7528\u4e8e\u7edf\u8ba1\u53c2\u6570\u8bed\u97f3\u5408\u6210\uff08Statistical Parameteric Speech Synthesis\uff0cSPSS\uff09\u57fa\u4e8e\u4fe1\u53f7\u5904\u7406\u7684\u58f0\u7801\u5668\uff0c\u548c\u57fa\u4e8e\u795e\u7ecf\u7f51\u7edc\u7684\u58f0\u7801\u5668\u3002\u5e38\u7528\u57fa\u4e8e\u4fe1\u53f7\u5904\u7406\u7684\u58f0\u7801\u5668\u5305\u62ecGriffin-Lim\uff0cSTRAIGHT\u548cWORLD\u3002\u65e9\u671f\u795e\u7ecf\u58f0\u7801\u5668\u5305\u62ecWaveNet\u3001WaveRNN\u7b49\uff0c\u8fd1\u5e74\u6765\u795e\u7ecf\u58f0\u7801\u5668\u53d1\u5c55\u8fc5\u901f\uff0c\u6d8c\u73b0\u51fa\u5305\u62ecMelGAN\u3001HiFiGAN\u3001LPCNet\u3001NHV\u7b49\u4f18\u79c0\u7684\u5de5\u4f5c\u3002 Griffin D. and Lim J. (1984). \"Signal Estimation from Modified Short-Time Fourier Transform\\\". IEEE Transactions on Acoustics, Speech and Signal Processing. 32 (2): 236--243. doi:10.1109/TASSP.1984.1164317 Kawahara H. Speech representation and transformation using adaptive interpolation of weighted spectrum: vocoder revisited[C]. 1997 IEEE International Conference on Acoustics, Speech, and Signal Processing. IEEE, 1997, 2: 1303-1306. Morise M, Yokomori F, Ozawa K. World: a vocoder-based high-quality speech synthesis system for real-time applications[J]. IEICE TRANSACTIONS on Information and Systems, 2016, 99(7): 1877-1884. Griffin-Lim\u58f0\u7801\u5668 \u5728\u65e9\u671f\u7684\u5f88\u591aTacotron\u5f00\u6e90\u8bed\u97f3\u5408\u6210\u6a21\u578b\u4e2d\u5747\u91c7\u7528Griffin-Lim\u58f0\u7801\u5668\uff0c\u540c\u65f6\u4e5f\u6709\u4e00\u4e9b\u4e13\u95e8\u7684\u5f00\u6e90\u5b9e\u73b0\uff0c\u6bd4\u5982 GriffinLim \u3002 \u7b97\u6cd5\u539f\u7406 \u539f\u59cb\u7684\u97f3\u9891\u5f88\u96be\u63d0\u53d6\u7279\u5f81\uff0c\u9700\u8981\u8fdb\u884c\u5085\u91cc\u53f6\u53d8\u6362\u5c06\u65f6\u57df\u4fe1\u53f7\u8f6c\u6362\u5230\u9891\u57df\u8fdb\u884c\u5206\u6790\u3002\u97f3\u9891\u8fdb\u884c\u5085\u91cc\u53f6\u53d8\u6362\u540e\uff0c\u7ed3\u679c\u4e3a\u590d\u6570\uff0c\u590d\u6570\u7684\u7edd\u5bf9\u503c\u5c31\u662f\u5e45\u5ea6\u8c31\uff0c\u800c\u590d\u6570\u7684\u5b9e\u90e8\u4e0e\u865a\u90e8\u4e4b\u95f4\u5f62\u6210\u7684\u89d2\u5ea6\u5c31\u662f\u76f8\u4f4d\u8c31\u3002\u7ecf\u8fc7\u5085\u91cc\u53f6\u53d8\u6362\u4e4b\u540e\u83b7\u5f97\u7684\u5e45\u5ea6\u8c31\u7279\u5f81\u660e\u663e\uff0c\u53ef\u4ee5\u6e05\u695a\u770b\u5230\u57fa\u9891\u548c\u5bf9\u5e94\u7684\u8c10\u6ce2\u3002\u57fa\u9891\u4e00\u822c\u662f\u58f0\u5e26\u7684\u9891\u7387\uff0c\u800c\u8c10\u6ce2\u5219\u662f\u58f0\u97f3\u7ecf\u8fc7\u58f0\u9053\u3001\u53e3\u8154\u3001\u9f3b\u8154\u7b49\u5668\u5b98\u540e\u4ea7\u751f\u7684\u5171\u632f\u9891\u7387\uff0c\u4e14\u9891\u7387\u662f\u57fa\u9891\u7684\u6574\u6570\u500d\u3002 Griffin-Lim\u5c06\u5e45\u5ea6\u8c31\u6062\u590d\u4e3a\u539f\u59cb\u6ce2\u5f62\uff0c\u4f46\u662f\u76f8\u6bd4\u539f\u59cb\u6ce2\u5f62\uff0c\u5e45\u5ea6\u8c31\u7f3a\u5931\u4e86\u539f\u59cb\u76f8\u4f4d\u8c31\u4fe1\u606f\u3002\u97f3\u9891\u4e00\u822c\u91c7\u7528\u7684\u662f\u77ed\u65f6\u5085\u91cc\u53f6\u53d8\u5316\uff0c\u56e0\u6b64\u9700\u8981\u5c06\u97f3\u9891\u5206\u5272\u6210\u5e27\uff08\u6bcf\u5e2720ms~50ms\uff09\uff0c\u518d\u8fdb\u884c\u5085\u91cc\u53f6\u53d8\u6362\uff0c\u5e27\u4e0e\u5e27\u4e4b\u95f4\u662f\u6709\u91cd\u53e0\u7684\u3002Griffin-Lim\u7b97\u6cd5\u5229\u7528\u4e24\u5e27\u4e4b\u95f4\u6709\u91cd\u53e0\u90e8\u5206\u7684\u8fd9\u4e2a\u7ea6\u675f\u91cd\u6784\u4fe1\u53f7\uff0c\u56e0\u6b64\u5982\u679c\u4f7f\u7528Griffin-Lim\u7b97\u6cd5\u8fd8\u539f\u97f3\u9891\u4fe1\u53f7\uff0c\u5c31\u9700\u8981\u5c3d\u91cf\u4fdd\u8bc1\u4e24\u5e27\u4e4b\u95f4\u91cd\u53e0\u8d8a\u591a\u8d8a\u597d\uff0c\u4e00\u822c\u5e27\u79fb\u4e3a\u6bcf\u4e00\u5e27\u957f\u5ea6\u768425%\u5de6\u53f3\uff0c\u4e5f\u5c31\u662f\u5e27\u4e4b\u95f4\u91cd\u53e075%\u4e3a\u5b9c\u3002 Griffin-Lim\u5728\u5df2\u77e5\u5e45\u5ea6\u8c31\uff0c\u4e0d\u77e5\u9053\u76f8\u4f4d\u8c31\u7684\u60c5\u51b5\u4e0b\u91cd\u5efa\u8bed\u97f3\uff0c\u7b97\u6cd5\u7684\u5b9e\u73b0\u8f83\u4e3a\u7b80\u5355\uff0c\u6574\u4f53\u662f\u4e00\u79cd\u8fed\u4ee3\u7b97\u6cd5\uff0c\u8fed\u4ee3\u8fc7\u7a0b\u5982\u4e0b\uff1a \u968f\u673a\u521d\u59cb\u5316\u4e00\u4e2a\u76f8\u4f4d\u8c31\uff1b \u7528\u76f8\u4f4d\u8c31\u548c\u5df2\u77e5\u7684\u5e45\u5ea6\u8c31\u7ecf\u8fc7\u9006\u77ed\u65f6\u5085\u91cc\u53f6\u53d8\u6362\uff08ISTFT\uff09\u5408\u6210\u65b0\u8bed\u97f3\uff1b \u5bf9\u5408\u6210\u7684\u8bed\u97f3\u505a\u77ed\u65f6\u5085\u91cc\u53f6\u53d8\u6362\uff0c\u5f97\u5230\u65b0\u7684\u5e45\u5ea6\u8c31\u548c\u76f8\u4f4d\u8c31\uff1b \u4e22\u5f03\u65b0\u7684\u5e45\u5ea6\u8c31\uff0c\u7528\u76f8\u4f4d\u8c31\u548c\u5df2\u77e5\u7684\u5e45\u5ea6\u8c31\u5408\u6210\u8bed\u97f3\uff0c\u5982\u6b64\u91cd\u590d\uff0c\u76f4\u81f3\u8fbe\u5230\u8bbe\u5b9a\u7684\u8fed\u4ee3\u8f6e\u6570\u3002 \u5728\u8fed\u4ee3\u8fc7\u7a0b\u4e2d\uff0c\u9884\u6d4b\u5e8f\u5217\u4e0e\u771f\u5b9e\u5e8f\u5217\u5e45\u5ea6\u8c31\u4e4b\u95f4\u7684\u8ddd\u79bb\u5728\u4e0d\u65ad\u7f29\u5c0f\uff0c\u7c7b\u4f3c\u4e8eEM\u7b97\u6cd5\u3002\u63a8\u5bfc\u8fc7\u7a0b\u53c2\u89c1\uff1a Griffin Lim\u7b97\u6cd5\u7684\u8fc7\u7a0b\u548c\u8bc1\u660e \u548c Griffin Lim\u58f0\u7801\u5668\u4ecb\u7ecd \u3002 \u4ee3\u7801\u5b9e\u73b0 \u6458\u6284\u81ea Build End-To-End TTS Tacotron: Griffin Lim \u4fe1\u53f7\u4f30\u8ba1\u7b97\u6cd5 \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 def griffin_lim ( stftm_matrix , shape , min_iter = 20 , max_iter = 50 , delta = 20 ): y = np . random . random ( shape ) y_iter = [] for i in range ( max_iter ): if i >= min_iter and ( i - min_iter ) % delta == 0 : y_iter . append (( y , i )) stft_matrix = librosa . core . stft ( y ) stft_matrix = stftm_matrix * stft_matrix / np . abs ( stft_matrix ) y = librosa . core . istft ( stft_matrix ) y_iter . append (( y , max_iter )) return y_iter \u5177\u4f53\u4f7f\u7528\uff1a 1 2 3 4 5 6 7 8 9 10 # assume 1 channel wav file sr , data = scipy . io . wavfile . read ( input_wav_path ) # \u7531 STFT -> STFT magnitude stftm_matrix = np . abs ( librosa . core . stft ( data )) # + random \u6a21\u62df modification stftm_matrix_modified = stftm_matrix + np . random . random ( stftm_matrix . shape ) # Griffin-Lim \u4f30\u8ba1\u97f3\u9891\u4fe1\u53f7 y_iters = griffin_lim ( stftm_matrix_modified , data . shape ) STRAIGHT\u58f0\u7801\u5668 \u6982\u8ff0 STARIGHT\uff08Speech Transformation and Representation using Adaptive Interpolation of weiGHTed spectrum\uff09\uff0c\u5373\u5229\u7528\u81ea\u9002\u5e94\u52a0\u6743\u8c31\u5185\u63d2\u8fdb\u884c\u8bed\u97f3\u8f6c\u6362\u548c\u8868\u5f81\u3002STRAIGHT\u5c06\u8bed\u97f3\u4fe1\u53f7\u89e3\u6790\u6210\u76f8\u4e92\u72ec\u7acb\u7684\u9891\u8c31\u53c2\u6570\uff08\u8c31\u5305\u7edc\uff09\u548c\u57fa\u9891\u53c2\u6570\uff08\u6fc0\u52b1\u90e8\u5206\uff09\uff0c\u80fd\u591f\u5bf9\u8bed\u97f3\u4fe1\u53f7\u7684\u57fa\u9891\u3001\u65f6\u957f\u3001\u589e\u76ca\u3001\u8bed\u901f\u7b49\u53c2\u6570\u8fdb\u884c\u7075\u6d3b\u7684\u8c03\u6574\uff0c\u8be5\u6a21\u578b\u5728\u5206\u6790\u9636\u6bb5\u4ec5\u9488\u5bf9\u8bed\u97f3\u57fa\u97f3\u3001\u5e73\u6ed1\u529f\u7387\u8c31\u548c\u975e\u5468\u671f\u6210\u52063\u4e2a\u58f0\u5b66\u53c2\u6570\u8fdb\u884c\u5206\u6790\u63d0\u53d6\uff0c\u5728\u5408\u6210\u9636\u6bb5\u5229\u7528\u4e0a\u8ff03\u4e2a\u58f0\u5b66\u53c2\u6570\u8fdb\u884c\u8bed\u97f3\u91cd\u6784\u3002 STRAIGHT\u91c7\u7528\u6e90-\u6ee4\u6ce2\u5668\u8868\u5f81\u8bed\u97f3\u4fe1\u53f7\uff0c\u53ef\u5c06\u8bed\u97f3\u4fe1\u53f7\u770b\u4f5c\u6fc0\u52b1\u4fe1\u53f7\u901a\u8fc7\u65f6\u53d8\u7ebf\u6027\u6ee4\u6ce2\u5668\u7684\u7ed3\u679c\u3002 \u5bf9\u4e8e\u80fd\u91cf\u4fe1\u53f7\u548c\u5468\u671f\u4fe1\u53f7\uff0c\u5176\u5085\u91cc\u53f6\u53d8\u6362\u6536\u655b\uff0c\u56e0\u6b64\u53ef\u4ee5\u7528\u9891\u8c31\uff08Spectrum\uff09\u6765\u63cf\u8ff0\uff1b\u5bf9\u4e8e\u968f\u673a\u4fe1\u53f7\uff0c\u5085\u91cc\u53f6\u53d8\u6362\u4e0d\u6536\u655b\uff0c\u56e0\u6b64\u4e0d\u80fd\u7528\u9891\u8c31\u8fdb\u884c\u63cf\u8ff0\uff0c\u800c\u5e94\u5f53\u4f7f\u7528\u529f\u7387\u8c31\uff08PSD\uff09\uff0c\u4e0d\u4e25\u8c28\u5730\u8bf4\uff0c\u529f\u7387\u8c31\u53ef\u4ee5\u770b\u4f5c\u662f\u968f\u673a\u4fe1\u53f7\u7684\u9891\u8c31\uff0c\u53c2\u89c1 \u529f\u7387\u8c31\u5bc6\u5ea6\uff08PSD\uff09 \u3002 \u7279\u5f81\u63d0\u53d6 \u5e73\u6ed1\u529f\u7387\u8c31\u7684\u63d0\u53d6\uff0c\u5305\u62ec\u4f4e\u9891\u5e26\u8865\u507f\u548c\u6e05\u97f3\u5e27\u5904\u7406\u7b49\u8fc7\u7a0b\u3002STRAIGHT\u5206\u6790\u9636\u6bb5\u7684\u4e00\u4e2a\u5173\u952e\u6b65\u9aa4\u662f\u8fdb\u884c\u81ea\u9002\u5e94\u9891\u8c31\u5206\u6790\uff0c\u83b7\u53d6\u65e0\u5e72\u6270\u4e14\u5e73\u6ed1\u7684\u529f\u7387\u8c31\u3002\u81ea\u9002\u5e94\u52a0\u6743\u8c31\u7684\u63d0\u53d6\u5173\u952e\u5728\u4e8e\u5bf9\u63d0\u53d6\u51fa\u6765\u7684\u529f\u7387\u8c31\u8fdb\u884c\u4e00\u7cfb\u5217\u7684\u5e73\u6ed1\u548c\u8865\u507f\u3002\u5bf9\u8f93\u5165\u4fe1\u53f7\u8fdb\u884c\uff1a\u8bed\u97f3\u4fe1\u53f7\u9884\u5904\u7406->\u529f\u7387\u8c31\u63d0\u53d6->\u4f4e\u9891\u566a\u58f0\u8865\u507f->\u8fc7\u5e73\u6ed1\u8865\u507f->\u9759\u97f3\u5e27\u8c31\u56fe\u7684\u5904\u7406\uff0c\u6700\u540e\u5f97\u5230\u81ea\u9002\u5e94\u529f\u7387\u8c31\u3002 \u975e\u5468\u671f\u6210\u5206\u63d0\u53d6\u3002 \u901a\u8fc7\u5c0f\u6ce2\u65f6\u9891\u5206\u6790\u7684\u65b9\u5f0f\uff0c\u63d0\u53d6\u57fa\u9891\u8f68\u8ff9\u3002\u9996\u5148\u901a\u8fc7\u5bf9\u8bed\u97f3\u4fe1\u53f7\u4e2d\u7684\u57fa\u9891\u4fe1\u606f\u8fdb\u884c\u89e3\u6790\uff0c\u7136\u540e\u8ba1\u7b97\u51fa\u76f8\u5e94\u7684\u77ac\u65f6\u57fa\u9891\u503c\uff0c\u6700\u540e\u5728\u9891\u57df\u8fdb\u884c\u8c10\u6ce2\u89e3\u6790\uff0c\u5e76\u5728\u9891\u7387\u8f74\u8fdb\u884c\u5e73\u6ed1\u5904\u7406\uff0c\u83b7\u5f97\u8bed\u97f3\u4fe1\u53f7\u7684\u5404\u4e2a\u57fa\u9891\u53c2\u6570\u3002 \u8bed\u97f3\u5408\u6210 STARIGHT\u91c7\u7528PSOLA\u6280\u672f\u548c\u6700\u5c0f\u76f8\u4f4d\u8109\u51b2\u54cd\u5e94\u76f8\u7ed3\u5408\u7684\u65b9\u5f0f\uff0c\u5728\u5408\u6210\u8bed\u97f3\u65f6\u8f93\u5165\u5f85\u5408\u6210\u8bed\u97f3\u7684\u57fa\u97f3\u9891\u7387\u8f68\u8ff9\u548c\u53bb\u9664\u4e86\u5468\u671f\u6027\u7684\u4e8c\u7ef4\u77ed\u65f6\u8c31\u5305\u7edc\u3002 \u5f00\u6e90\u7684STRAIGHT\u58f0\u7801\u5668\u5927\u591a\u662fMATLAB\u5b9e\u73b0\uff0c\u6bd4\u5982 Legacy STRAIGHT \uff0c StraightRepo \u3002\u5728\u5f00\u6e90\u8bed\u97f3\u5408\u6210\u7cfb\u7edf merlin \u4e2d\u5b58\u5728\u53ef\u7528\u7684STRAIGHT\u5de5\u5177\uff0c\u53c2\u89c1 StraightCopySynthesis \u3002 WORLD\u58f0\u7801\u5668 \u58f0\u5b66\u7279\u5f81 WORLD\u901a\u8fc7\u83b7\u53d6\u4e09\u4e2a\u58f0\u5b66\u7279\u5f81\u5408\u6210\u539f\u59cb\u8bed\u97f3\uff0c\u8fd9\u4e09\u4e2a\u58f0\u5b66\u7279\u5f81\u5206\u522b\u662f\uff1a\u57fa\u9891\uff08fundamental frequency\uff0cF0\uff09\uff0c\u9891\u8c31\u5305\u7edc\uff08Spectrum Envelop\uff0c\u4e5f\u79f0\u9891\u8c31\u53c2\u6570Spectrum Parameter\uff0cSP\uff09\u548c\u975e\u5468\u671f\u4fe1\u53f7\u53c2\u6570\uff08Aperiodic Parameter\uff0cAP\uff09\u3002 \u57fa\u9891F0 \u57fa\u9891F0\u51b3\u5b9a\u6d4a\u97f3\uff0c\u5bf9\u5e94\u6fc0\u52b1\u90e8\u5206\u7684\u5468\u671f\u8109\u51b2\u5e8f\u5217\uff0c\u5982\u679c\u5c06\u58f0\u5b66\u4fe1\u53f7\u5206\u4e3a\u5468\u671f\u548c\u975e\u5468\u671f\u4fe1\u53f7\uff0c\u57fa\u9891F0\u90e8\u5206\u5305\u542b\u4e86\u8bed\u97f3\u7684\u97f5\u5f8b\u4fe1\u606f\u548c\u7ed3\u6784\u4fe1\u606f\u3002\u5bf9\u4e8e\u4e00\u4e2a\u7531\u632f\u52a8\u800c\u53d1\u51fa\u7684\u58f0\u97f3\u4fe1\u53f7\uff0c\u8fd9\u4e2a\u4fe1\u53f7\u53ef\u4ee5\u770b\u4f5c\u662f\u82e5\u5e72\u7ec4\u9891\u7387\u4e0d\u540c\u7684\u6b63\u5f26\u6ce2\u53e0\u52a0\u800c\u6210\uff0c\u5176\u4e2d\u9891\u7387\u6700\u4f4e\u7684\u6b63\u5f26\u6ce2\u5373\u4e3a \u57fa\u9891 \uff0c\u5176\u5b83\u5219\u4e3a \u6cdb\u97f3 \u3002 WORLD\u63d0\u53d6\u57fa\u9891\u7684\u6d41\u7a0b\uff1a\u9996\u5148\uff0c\u5229\u7528\u4f4e\u901a\u6ee4\u6ce2\u5668\u5bf9\u539f\u59cb\u4fe1\u53f7\u8fdb\u884c\u6ee4\u6ce2\uff1b\u4e4b\u540e\uff0c\u5bf9\u6ee4\u6ce2\u4e4b\u540e\u7684\u4fe1\u53f7\u8fdb\u884c\u8bc4\u4f30\uff0c\u7531\u4e8e\u6ee4\u6ce2\u4e4b\u540e\u7684\u4fe1\u53f7\u5e94\u8be5\u6070\u597d\u662f\u4e00\u4e2a\u6b63\u5f26\u6ce2\uff0c\u6bcf\u4e2a\u6ce2\u6bb5\u7684\u957f\u5ea6\u5e94\u8be5\u6070\u597d\u90fd\u662f\u4e00\u4e2a\u5468\u671f\u957f\u5ea6\uff0c\u56e0\u6b64\u901a\u8fc7\u8ba1\u7b97\u8fd9\u56db\u4e2a\u5468\u671f\u7684\u6807\u51c6\u5dee\uff0c\u53ef\u4ee5\u8bc4\u4f30\u6b64\u6b63\u5f26\u6ce2\u6b63\u786e\u4e0e\u5426\uff1b\u6700\u540e\u9009\u53d6\u6807\u51c6\u5dee\u6700\u5c0f\u5468\u671f\u7684\u5012\u6570\u4f5c\u4e3a\u6700\u7ec8\u7684\u57fa\u9891\u3002 \u9891\u8c31\u5305\u7edcSP \u9891\u8c31\u5305\u7edcSP\u51b3\u5b9a\u97f3\u8272\uff0c\u5bf9\u5e94\u58f0\u9053\u8c10\u632f\u90e8\u5206\u65f6\u4e0d\u53d8\u7cfb\u7edf\u7684\u51b2\u6fc0\u54cd\u5e94\uff0c\u53ef\u4ee5\u770b\u4f5c\u901a\u8fc7\u6b64\u7ebf\u6027\u65f6\u4e0d\u53d8\u7cfb\u7edf\u4e4b\u540e\uff0c\u58f0\u7801\u5668\u4f1a\u5bf9\u6fc0\u52b1\u4e0e\u7cfb\u7edf\u54cd\u5e94\u8fdb\u884c\u5377\u79ef\u3002\u5c06\u4e0d\u540c\u9891\u7387\u7684\u632f\u5e45\u6700\u9ad8\u70b9\u901a\u8fc7\u5e73\u6ed1\u7684\u66f2\u7ebf\u8fde\u63a5\u8d77\u6765\uff0c\u5c31\u662f\u9891\u8c31\u5305\u7edc\uff0c\u6c42\u89e3\u65b9\u6cd5\u6709\u591a\u79cd\uff0c\u5728\u6c42\u89e3\u6885\u5c14\u5012\u8c31\u7cfb\u6570\u65f6\uff0c\u4f7f\u7528\u7684\u662f\u5012\u8c31\u6cd5\u3002 \u5012\u9891\u8c31\uff08Cepstrum\uff09\u4e5f\u79f0\u4e3a\u5012\u8c31\u3001\u4e8c\u6b21\u8c31\u548c\u5bf9\u6570\u529f\u7387\u8c31\u7b49\uff0c\u5012\u9891\u8c31\u7684\u5de5\u7a0b\u5b9a\u4e49\u4e3a\uff1a\u4fe1\u53f7\u529f\u7387\u8c31\u5bf9\u6570\u503c\u8fdb\u884c\u5085\u91cc\u53f6\u9006\u53d8\u6362\u7684\u7ed3\u679c\uff0c\u4e5f\u5c31\u662f\uff1a\u4fe1\u53f7->\u6c42\u529f\u7387\u8c31->\u6c42\u5bf9\u6570->\u6c42\u5085\u91cc\u53f6\u9006\u53d8\u6362\u3002\u53c2\u89c1 \u4fe1\u53f7\u9891\u57df\u5206\u6790\u65b9\u6cd5\u7684\u7406\u89e3\uff08\u9891\u8c31\u3001\u80fd\u91cf\u8c31\u3001\u529f\u7387\u8c31\u3001\u5012\u9891\u8c31\u3001\u5c0f\u6ce2\u5206\u6790\uff09 \u3002 \u975e\u5468\u671f\u4fe1\u53f7\u53c2\u6570AP \u975e\u5468\u671f\u4fe1\u53f7\u53c2\u6570AP\u51b3\u5b9a\u6e05\u97f3\uff0c\u5bf9\u5e94\u6df7\u5408\u6fc0\u52b1\u90e8\u5206\u7684\u975e\u5468\u671f\u8109\u51b2\u5e8f\u5217\uff0c\u4e00\u822c\u7684\u8bed\u97f3\u90fd\u662f\u7531\u5468\u671f\u548c\u975e\u5468\u671f\u4fe1\u53f7\u7ec4\u6210\uff0c\u56e0\u6b64\u9664\u4e86\u4e0a\u8ff0\u7684\u5468\u671f\u4fe1\u53f7\u7684\u58f0\u5b66\u53c2\u6570\uff0c\u8fd8\u9700\u8981\u975e\u5468\u671f\u4fe1\u53f7\u53c2\u6570\uff0c\u624d\u80fd\u591f\u6062\u590d\u51fa\u539f\u59cb\u4fe1\u53f7\u3002\u6df7\u5408\u6fc0\u52b1\u53ef\u4ee5\u901a\u8fc7AP\u6765\u63a7\u5236\u6d4a\u97f3\u6bb5\u4e2d\u5468\u671f\u6fc0\u52b1\u548c\u566a\u97f3\uff08\u975e\u5468\u671f\uff09\u6210\u5206\u7684\u76f8\u5bf9\u6bd4\u91cd\u3002 WORLD\u7684\u5206\u6790\u529f\u80fd WORLD\u5305\u542b3\u4e2a\u8bed\u97f3\u5206\u6790\u6a21\u5757\uff0c\u8bed\u97f3\u5206\u6790\u6a21\u578b\u5305\u62ecDIO\u6a21\u5757\u3001CheapTrick\u6a21\u5757\uff0cPLATINUM\u6a21\u5757\u3002 WORLD\u53ef\u4ee5\u63d0\u53d6\u539f\u59cb\u6ce2\u5f62\u4e2d\u7684\u57fa\u9891F0\uff0c\u57fa\u9891\u5305\u7edcSP\u548c\u975e\u5468\u671f\u4fe1\u53f7AP\uff0c\u8fd9\u4e09\u79cd\u58f0\u5b66\u7279\u5f81\u5bf9\u5e94\u4e09\u79cd\u63d0\u53d6\u7b97\u6cd5\uff1aDIO\u8f93\u5165\u6ce2\u5f62\u63d0\u53d6\u57fa\u9891\uff0cCheapTrick\u8f93\u5165\u57fa\u9891\u3001\u6ce2\u5f62\u63d0\u53d6\u9891\u8c31\u5305\u7edc\uff0cD4C\u8f93\u5165\u57fa\u9891\u3001\u9891\u8c31\u5305\u7edc\u548c\u6ce2\u5f62\u63d0\u53d6\u975e\u5468\u671f\u4fe1\u53f7\u3002\u6700\u7ec8\uff0c\u901a\u8fc7\u8fd9\u4e09\u79cd\u58f0\u5b66\u7279\u5f81\u901a\u8fc7\u6700\u5c0f\u76f8\u4f4d\u8c31\u4e0e\u6fc0\u52b1\u4fe1\u53f7\u5377\u79ef\u540e\uff0c\u8f93\u51fa\u6062\u590d\u7684\u539f\u59cb\u6ce2\u5f62\u3002 DIO\u7b97\u6cd5\u63d0\u53d6\u57fa\u9891F0 F0\u662f\u5468\u671f\u4fe1\u53f7\u6700\u957f\u6301\u7eed\u65f6\u95f4\u7684\u5012\u6570\uff0c\u53cd\u8fc7\u6765\uff0c\u5468\u671f\u662f\u57fa\u9891\u7684\u6574\u6570\u5206\u4e4b\u4e00\u3002\u57fa\u9891\u4f1a\u4ea7\u751f\u4e8c\u6b21\u8c10\u6ce2\u3001\u4e09\u6b21\u8c10\u6ce2\u7b49\uff0c\u6700\u957f\u7684\u5468\u671f\u7406\u8bba\u4e0a\u5bf9\u5e94\u7740\u9891\u7387\u6700\u4f4e\u7684\u90e8\u5206\uff0c\u4e5f\u5c31\u662f\u5728\u8bed\u8c31\u56fe\u4e0a\u5bf9\u5e94\u6700\u4e0b\u9762\u7684\u4eae\u7ebf\uff0c\u80fd\u91cf\u6700\u9ad8\u7684\u90e8\u5206\u3002 \u6709\u5f88\u591a\u7684\u7b97\u6cd5\u4f30\u8ba1\u57fa\u9891F0\uff0c\u53ef\u4ee5\u5206\u4e3a\u4e24\u7c7b\uff1a\u4e00\u4e2a\u662f\u5229\u7528\u65f6\u57df\u7279\u5f81\uff0c\u6bd4\u5982\u81ea\u76f8\u5173\uff1b\u4e00\u4e2a\u5229\u7528\u9891\u8c31\u7279\u5f81\uff0c\u6bd4\u5982\u5012\u8c31cepstrum\u3002WORLD\u4f7f\u7528DIO\u4f30\u8ba1\u57fa\u9891F0\uff0c\u6bd4YIN\u3001SWIPE\u8981\u5feb\uff0c\u6027\u80fd\u4f9d\u7136\u8f83\u597d\uff0cDIO\u5206\u4e3a\u4ee5\u4e0b\u4e09\u6b65\u3002 \u4f4e\u901a\u6ee4\u6ce2\u5668\u5bf9\u539f\u59cb\u4fe1\u53f7\u8fdb\u884c\u6ee4\u6ce2\u3002\u4f7f\u7528\u4e0d\u540c\u9891\u5e26\u7684\u4f4e\u901a\u6ee4\u6ce2\u5668\uff1a\u56e0\u4e3a\u4e0d\u77e5\u9053\u57fa\u9891\u7684\u4f4d\u7f6e\uff0c\u56e0\u6b64\u8fd9\u4e00\u6b65\u5305\u542b\u4e0d\u540c\u5468\u671f\u7684sin\u4f4e\u901a\u6ee4\u6ce2\u5668\u3002 \u53d64\u4e2a\u5468\u671f\u8ba1\u7b97\u7f6e\u4fe1\u5ea6\u3002\u8ba1\u7b97\u83b7\u5f97\u7684\u5404\u4e2a\u53ef\u80fd\u57fa\u9891F0\u7684\u7f6e\u4fe1\u5ea6\uff0c\u56e0\u4e3a\u7531\u57fa\u9891\u5206\u91cf\u7ec4\u6210\u7684sin\u4fe1\u53f7\u5305\u542b4\u4e2a\u95f4\u9694\uff082\u4e2a\u9876\u70b9\u30012\u4e2a\u8fc7\u96f6\u70b9\uff09\u3002\u5982\u679c\u6ee4\u6ce2\u5668\u5f97\u5230\u7684\u95f4\u9694\u957f\u5ea6\u4e00\u81f4\uff0c\u5219\u8bf4\u660e\u662f\u4e00\u4e2a\u57fa\u6ce2\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002 \u4ece\u67d0\u4e2a\u65f6\u95f4\u70b9\u7684\u6b63\u5f26\u6ce2\u4e2d\u63d0\u53d6\u51fa\u56db\u4e2a\u5468\u671f\u4fe1\u53f7\uff0c\u5e76\u8ba1\u7b97\u7f6e\u4fe1\u5ea6\uff0c\u4e5f\u5c31\u662f\u6807\u51c6\u5dee\u3002\u7136\u540e\u9009\u62e9\u6807\u51c6\u5dee\u6700\u4f4e\uff0c\u4e5f\u5c31\u662f\u7f6e\u4fe1\u5ea6\u6700\u9ad8\u7684\u57fa\u6ce2\u3002 CheapTrick\u7b97\u6cd5\u63d0\u53d6\u9891\u8c31\u5305\u7edcSP \u58f0\u97f3\u5305\u542b\u4e0d\u540c\u9891\u7387\u7684\u4fe1\u53f7\uff0c\u8986\u76d60\u523018000Hz\uff0c\u6bcf\u4e2a\u9891\u7387\u90fd\u6709\u5176\u632f\u5e45\uff0c\u5b9a\u4e49\u6bcf\u79cd\u9891\u7387\u4e2d\u6ce2\u7684\u632f\u5e45\u6700\u9ad8\u70b9\u8fde\u7ebf\u5f62\u6210\u7684\u56fe\u5f62\u4e3a \u5305\u7edc \u3002\u9891\u8c31\u5305\u7edc\u662f\u4e2a\u91cd\u8981\u7684\u53c2\u6570\uff0c\u5728\u9891\u7387-\u632f\u5e45\u56fe\u4e2d\uff0c\u7528\u5e73\u6ed1\u7684\u66f2\u7ebf\u5c06\u6240\u6709\u5171\u632f\u5cf0\u8fde\u63a5\u8d77\u6765\uff0c\u8fd9\u4e2a\u5e73\u6ed1\u7684\u66f2\u7ebf\u5c31\u662f\u9891\u8c31\u5305\u7edc\u3002 \u63d0\u53d6\u9891\u8c31\u5305\u7edcSP\u7684\u5178\u578b\u7b97\u6cd5\u6709\u7ebf\u6027\u9884\u6d4b\u7f16\u7801\uff08Linear Predictive Coding\uff0cLPC\uff09\u548cCepstrum\u3002\u7ebf\u6027\u9884\u6d4b\u7f16\u7801LPC\u7684\u539f\u7406\u662f\u7528\u82e5\u5e72\u4e2a\u5386\u53f2\u8bed\u97f3\u91c7\u6837\u70b9\u7684\u52a0\u6743\u7ebf\u6027\u6c42\u548c\u53bb\u4e0d\u65ad\u903c\u8fd1\u5f53\u524d\u7684\u8bed\u97f3\u91c7\u6837\u70b9\uff1bCepstrum\u5219\u662f\u57fa\u4e8e\u590d\u6570\u5012\u8c31\u62e5\u6709\u9891\u8c31\u5e45\u5ea6\u4e0e\u76f8\u4f4d\u4fe1\u606f\u7684\u539f\u7406\uff0c\u901a\u8fc7\u5bf9\u4e00\u4e2a\u4fe1\u53f7\u8fdb\u884c\u5feb\u901f\u5085\u91cc\u53f6\u53d8\u6362FFT->\u53d6\u7edd\u5bf9\u503c->\u53d6\u5bf9\u6570->\u76f8\u4f4d\u5c55\u5f00->\u9006\u5feb\u901f\u5085\u91cc\u53f6\u53d8\u6362IFFT\u7684\u53d8\u6362\u5904\u7406\uff0c\u4ece\u800c\u5f97\u5230\u5bf9\u5e94\u7684\u5012\u8c31\u56fe\u3002 WORLD\u91c7\u7528CheapTrick\u505a\u8c31\u5206\u6790\uff0c\u601d\u60f3\u6765\u81ea\u4e8e\u97f3\u9ad8\u540c\u6b65\u5206\u6790\uff08pitch synchronous analysis\uff09\uff0c\u5176\u8fc7\u7a0b\u662f\uff1a\u5148\u5c06\u4e0d\u540c\u57fa\u9891\u8fdb\u884c\u81ea\u9002\u5e94\u52a0\u7a97\u64cd\u4f5c\uff0c\u4ee5\u53ca\u529f\u7387\u8c31\u5e73\u6ed1\u64cd\u4f5c\uff0c\u968f\u540e\u5c06\u4fe1\u53f7\u5728\u9891\u57df\u4e0a\u8fdb\u884c\u540c\u6001\u6ee4\u6ce2\u3002 PLANTINUM\u63d0\u53d6\u975e\u5468\u671f\u4fe1\u53f7 \u6df7\u5408\u6fc0\u52b1\u548c\u975e\u5468\u671f\u4fe1\u53f7\u53c2\u6570AP\u7ecf\u5e38\u5e94\u7528\u5230\u5408\u6210\u4e2d\uff0c\u5728Legacy-STRAIGHT\u548cTANDEM-STRAIGHT\u7b97\u6cd5\u4e2d\uff0caperiodicity\u88ab\u7528\u4e8e\u5408\u6210\u5468\u671f\u548c\u975e\u5468\u671f\u7684\u4fe1\u53f7\u3002WORLD\u76f4\u63a5\u901a\u8fc7PLANTINUM\u4ece\u6ce2\u5f62\u3001F0\u548c\u8c31\u5305\u7edc\u4e2d\u5f97\u5230\u6df7\u5408\u6fc0\u52b1\u7684\u975e\u5468\u671f\u4fe1\u53f7\u3002 WORLD\u7684\u5408\u6210\u7b97\u6cd5 TANDEM-STRAIGHT\u76f4\u63a5\u4f7f\u7528\u5468\u671f\u54cd\u5e94\u8ba1\u7b97\u58f0\u5e26\u7684\u632f\u52a8\uff0c\u800cLegacy-STRAIGHT\u5219\u64cd\u7eb5\u7ec4\u5ef6\u8fdf\uff08group delay\uff09\u4ee5\u907f\u514d\u55e1\u55e1\u58f0\u3002\u5728WORLD\u4e2d\uff0c\u5229\u7528\u6700\u5c0f\u76f8\u4f4d\u54cd\u5e94\u548c\u6fc0\u52b1\u4fe1\u53f7\u7684\u5377\u79ef\u6765\u8ba1\u7b97\u58f0\u5e26\u7684\u632f\u52a8\uff0c\u4ece\u4e0b\u56fe\u6240\u793a\uff0c\u53ef\u4ee5\u770b\u5230\uff0cWORLD\u7684\u5377\u79ef\u6bd4STAIGHT\u8981\u5c11\uff0c\u56e0\u6b64\u8ba1\u7b97\u91cf\u66f4\u5c11\u3002 \u4f7f\u7528\u793a\u4f8b WORLD\u58f0\u7801\u5668\u6709\u8f83\u4e3a\u6210\u719f\u7684 \u5f00\u6e90\u5b9e\u73b0 \uff0c\u5e76\u4e14\u6709\u5bf9\u5e94\u7684Python\u5c01\u88c5\uff1a PyWORLD: A Python wrapper of WORLD Vocoder \uff0c\u53e6\u6709 \u5b98\u65b9\u5b9e\u73b0 \u3002\u4ee5\u4e0b\u793a\u4f8b\u5305\u62ec\u4e86\u901a\u8fc7 PyWorld \u63d0\u53d6\u58f0\u5b66\u53c2\u6570\uff0c\u5408\u6210\u539f\u59cb\u97f3\u9891\uff0c\u4fee\u6539\u90e8\u5206\u58f0\u5b66\u53c2\u6570\uff0c\u7f16\u8f91\u539f\u59cb\u97f3\u9891\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 import pyworld as pw from scipy.io import wavfile import matplotlib.pyplot as plt import numpy as np import os import soundfile as sf # \u63d0\u53d6\u8bed\u97f3\u7279\u5f81 x , fs = sf . read ( WAV_FILE_PATH ) # f0 : ndarray # F0 contour. \u57fa\u9891\u7b49\u9ad8\u7ebf # sp : ndarray # Spectral envelope. \u9891\u8c31\u5305\u7edc # ap : ndarray # Aperiodicity. \u975e\u5468\u671f\u6027 f0 , sp , ap = pw . wav2world ( x , fs ) # use default options # \u5206\u522b\u63d0\u53d6\u58f0\u5b66\u53c2\u6570 # \u4f7f\u7528DIO\u7b97\u6cd5\u8ba1\u7b97\u97f3\u9891\u7684\u57fa\u9891F0 _f0 , t = pw . dio ( x , fs , f0_floor = 50.0 , f0_ceil = 600.0 , channels_in_octave = 2 , frame_period = pw . default_frame_period ) # \u4f7f\u7528CheapTrick\u7b97\u6cd5\u8ba1\u7b97\u97f3\u9891\u7684\u9891\u8c31\u5305\u7edc _sp = pw . cheaptrick ( x , _f0 , t , fs ) # \u8ba1\u7b97aperiodic\u53c2\u6570 _ap = pw . d4c ( x , _f0 , t , fs ) # \u57fa\u4e8e\u4ee5\u4e0a\u53c2\u6570\u5408\u6210\u539f\u59cb\u97f3\u9891 _y = pw . synthesize ( _f0 , _sp , _ap , fs , pw . default_frame_period ) # 1.\u53d8\u9ad8\u9891-\u66f4\u7c7b\u4f3c\u5973\u6027 high_freq = pw . synthesize ( f0 * 2.0 , sp , ap , fs ) # 2.\u76f4\u63a5\u4fee\u6539\u57fa\u9891\uff0c\u53d8\u4e3a\u673a\u5668\u4eba\u53d1\u58f0 robot_like_f0 = np . ones_like ( f0 ) * 100 robot_like = pw . synthesize ( robot_like_f0 , sp , ap , fs ) # 3.\u63d0\u9ad8\u57fa\u9891\uff0c\u540c\u65f6\u9891\u8c31\u5305\u7edc\u540e\u79fb -> \u66f4\u6e29\u67d4\u7684\u5973\u6027\uff1f female_like_sp = np . zeros_like ( sp ) for f in range ( female_like_sp . shape [ 1 ]): female_like_sp [:, f ] = sp [:, int ( f / 1.2 )] female_like = pw . synthesize ( f0 * 2 , female_like_sp , ap , fs ) # 4.\u8f6c\u6362\u57fa\u9891\uff08\u4e0d\u80fd\u76f4\u63a5\u8f6c\u6362\uff09 x2 , fs2 = sf . read ( WAV_FILE_PATH2 ) f02 , sp2 , ap2 = pw . wav2world ( x2 , fs2 ) f02 = f02 [: len ( f0 )] print ( len ( f0 ), len ( f02 )) other_like = pw . synthesize ( f02 , sp , ap , fs ) NHV \u6e90\u6ee4\u6ce2\u5668\u5408\u6210\u539f\u7406 \u5982\u4e0b\u56fe\u6240\u793a\uff0c\u57fa\u4e8e\u6e90-\u6ee4\u6ce2\u5668\u7684\u53c2\u6570\u5408\u6210\u4e2d\uff0c\u5408\u6210\u5668\u7684\u5de5\u4f5c\u6d41\u7a0b\u4e3b\u8981\u53ef\u5206\u4e3a\u4e09\u6b65\u3002 \u6839\u636e\u5f85\u5408\u6210\u97f3\u8282\u7684\u58f0\u8c03\u7279\u6027\u6784\u9020\u76f8\u5e94\u7684\u58f0\u95e8\u6ce2\u6fc0\u52b1\u6e90\u3002 \u518d\u6839\u636e\u534f\u540c\u53d1\u97f3\u3001\u901f\u5ea6\u53d8\u6362\uff08\u65f6\u957f\u53c2\u6570\uff09\u7b49\u97f3\u53d8\u4fe1\u606f\u5728\u539f\u59cb\u58f0\u9053\u7684\u57fa\u7840\u4e0a\u6784\u9020\u51fa\u65b0\u7684\u58f0\u9053\u53c2\u6570\u6a21\u578b\u3002 \u6700\u540e\u5c06\u58f0\u95e8\u6ce2\u6fc0\u52b1\u6e90\u9001\u5165\u65b0\u7684\u58f0\u9053\u6a21\u578b\u4e2d\uff0c\u8f93\u51fa\u5c31\u662f\u7ed3\u5408\u7ed9\u5b9a\u97f5\u5f8b\u7279\u6027\u7684\u5408\u6210\u8bed\u97f3\u3002 \u5171\u632f\u5cf0\u5408\u6210\u548cLPC\uff08\u7ebf\u6027\u9884\u6d4b\u5206\u6790\uff09\u5408\u6210\u662f\u4e0a\u8ff0\u6e90-\u6ee4\u6ce2\u5668\u7ed3\u6784\u7684\u53c2\u6570\u5408\u6210\u4e2d\u6700\u5e38\u7528\u7684\u4e24\u79cd\u65b9\u6cd5\uff0c\u5b9e\u73b0\u539f\u7406\u7c7b\u4f3c\uff0c\u53ea\u662f\u4f7f\u7528\u7684\u58f0\u9053\u6a21\u578b\u4e0d\u540c\u3002\u540c\u65f6\u9488\u5bf9\u58f0\u9053\u6a21\u578b\u7684\u7279\u6027\uff0c\u5728\u6e90\u7684\u9009\u53d6\u4e0a\u4e5f\u7565\u6709\u533a\u522b\u3002 \u5171\u632f\u5cf0\u5408\u6210\u65b9\u6cd5 \u4e0e\u7ebf\u6027\u9884\u6d4b\u65b9\u6cd5\u7c7b\u4f3c\uff0c\u5171\u632f\u5cf0\u5408\u6210\u65b9\u6cd5\u4e5f\u662f\u5bf9\u58f0\u6e90-\u58f0\u9053\u6a21\u578b\u7684\u6a21\u62df\uff0c\u4f46\u5b83\u66f4\u4fa7\u91cd\u4e8e\u5bf9\u58f0\u9053\u8c10\u632f\u7279\u6027\u7684\u6a21\u62df\u3002\u5b83\u628a\u4eba\u7684\u58f0\u9053\u770b\u4f5c\u4e00\u4e2a\u8c10\u632f\u8154\uff0c\u8154\u4f53\u7684\u8c10\u632f\u7279\u6027\u51b3\u5b9a\u6240\u53d1\u51fa\u8bed\u97f3\u4fe1\u53f7\u7684\u9891\u8c31\u7279\u6027\uff0c\u4e5f\u5373\u5171\u632f\u5cf0\u7279\u6027\u3002\u97f3\u8272\u5404\u5f02\u7684\u8bed\u97f3\u6709\u4e0d\u540c\u7684\u5171\u632f\u5cf0\u6a21\u5f0f\uff0c\u7528\u6bcf\u4e2a\u5171\u632f\u5cf0\u4ee5\u53ca\u5176\u5e26\u5bbd\u4f5c\u4e3a\u53c2\u6570\u53ef\u4ee5\u6784\u6210\u4e00\u4e2a\u5171\u632f\u5cf0\u6ee4\u6ce2\u5668\uff0c\u5c06\u591a\u4e2a\u5171\u632f\u5cf0\u6ee4\u6ce2\u5668\u7ec4\u5408\u8d77\u6765\u6a21\u62df\u58f0\u9053\u7684\u4f20\u8f93\u7279\u6027\uff0c\u6839\u636e\u8fd9\u4e2a\u7279\u6027\u5bf9\u58f0\u6e90\u53d1\u751f\u5668\u4ea7\u751f\u7684\u6fc0\u52b1\u4fe1\u53f7\u8fdb\u884c\u8c03\u5236\uff0c\u7ecf\u8fc7\u8f90\u5c04\u6a21\u578b\u540e\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u5408\u6210\u8bed\u97f3\u3002 \u8bed\u97f3\u5b66\u7684\u7814\u7a76\u7ed3\u679c\u8868\u660e\uff0c\u51b3\u5b9a\u8bed\u97f3\u611f\u77e5\u7684\u58f0\u5b66\u7279\u5f81\u4e3b\u8981\u662f\u8bed\u97f3\u7684\u5171\u632f\u5cf0\uff0c\u56e0\u6b64\u5982\u679c\u5408\u6210\u5668\u7684\u7ed3\u6784\u548c\u53c2\u6570\u8bbe\u7f6e\u6b63\u786e\uff0c\u5219\u8fd9\u79cd\u65b9\u6cd5\u80fd\u591f\u5408\u6210\u9ad8\u97f3\u8d28\u3001\u9ad8\u53ef\u61c2\u5ea6\u7684\u8bed\u97f3\u3002 \u6fc0\u52b1\u6e90\u6a21\u578b \u4e00\u822c\u5171\u632f\u5cf0\u5408\u6210\u5668\u7684\u6fc0\u52b1\u6e90\u6709\u4e09\u79cd\u7c7b\u578b\uff1a\u5408\u6210\u6d4a\u97f3\u65f6\u7528\u5468\u671f\u6fc0\u52b1\u5e8f\u5217\uff1b\u5408\u6210\u6e05\u97f3\u65f6\u7528\u4f2a\u968f\u673a\u566a\u97f3\uff1b\u5408\u6210\u6d4a\u64e6\u97f3\u65f6\u7528\u5468\u671f\u6fc0\u52b1\u8c03\u5236\u7684\u566a\u97f3\u3002\u53d1\u6d4a\u97f3\u65f6\uff0c\u58f0\u5e26\u4e0d\u65ad\u5730\u5f20\u5f00\u548c\u5173\u95ed\uff0c\u4ea7\u751f\u95f4\u9699\u7684\u8109\u51b2\u6ce2\uff0c\u5f00\u59cb\u65f6\u58f0\u95e8\u95ed\u5408\u5e45\u5ea6\u4e3a\u96f6\uff0c\u63a5\u7740\u58f0\u95e8\u9010\u6e10\u6253\u5f00\uff0c\u5e45\u5ea6\u7f13\u6162\u4e0a\u5347\uff0c\u7136\u540e\u5feb\u901f\u4e0b\u964d\uff0c\u5f53\u518d\u6b21\u964d\u4f4e\u5230\u96f6\u4e4b\u540e\uff0c\u6709\u4e00\u4e2a\u5bfc\u6570\u4e0d\u8fde\u7eed\u70b9\uff0c\u76f8\u5f53\u4e8e\u58f0\u95e8\u7a81\u7136\u5173\u95ed\u3002\u56e0\u6b64\u6d4a\u97f3\u65f6\u6fc0\u52b1\u51fd\u6570\u5f62\u5f0f\u6709\u4e09\u89d2\u6ce2\u3001\u591a\u9879\u5f0f\u6ce2\u548c\u6ee4\u6ce2\u5668\u6fc0\u52b1\u54cd\u5e94\u6fc0\u52b1\u51fd\u6570\u3002 \u5171\u632f\u5cf0\u58f0\u9053\u6a21\u578b \u5bf9\u4e8e\u58f0\u9053\u6a21\u578b\uff0c\u58f0\u5b66\u7406\u8bba\u8868\u660e\uff0c\u8bed\u97f3\u4fe1\u53f7\u8c31\u4e2d\u7684\u8c10\u632f\u7279\u6027\uff08\u5bf9\u5e94\u58f0\u9053\u4f20\u9012\u51fd\u6570\u4e2d\u7684\u6781\u70b9\uff09\u5b8c\u5168\u7531\u58f0\u9053\u7684\u5f62\u72b6\u51b3\u5b9a\uff0c\u4e0e\u6fc0\u52b1\u6e90\u7684\u4f4d\u7f6e\u65e0\u5173\u3002 NHV\u6982\u8ff0 \u8bb8\u591a\u795e\u7ecf\u58f0\u7801\u5668\u65e8\u5728\u63d0\u5347\u6e90-\u6ee4\u6ce2\u5668\uff08source-filter\uff09\u6a21\u578b\u4e2d\u5bf9\u6e90\uff08source\uff09\u7684\u5efa\u6a21\u80fd\u529b\uff0c\u5305\u62ecLPCNet\u3001GELP\u548cGlotGAN\u901a\u8fc7\u795e\u7ecf\u7f51\u7edc\u4ec5\u5efa\u6a21\u6e90\uff08\u6bd4\u5982\u5efa\u6a21\u7ebf\u6027\u9884\u6d4b\u7684\u6b8b\u5dee\u4fe1\u53f7\uff09\uff0c\u800c\u901a\u8fc7\u65f6\u53d8\u6ee4\u6ce2\u5668\u76f4\u63a5\u751f\u6210\u8bed\u97f3\u3002\u4e0d\u540c\u4e8e\u4ec5\u5bf9\u6e90\u8fdb\u884c\u5efa\u6a21\uff0c\u795e\u7ecf\u6e90\u6ee4\u6ce2\u5668\uff08Neural Source-Filter\uff0cNSF\uff09\u6846\u67b6\u5c06\u7ecf\u5178\u6846\u67b6\u4e2d\u7684\u7ebf\u6027\u6ee4\u6ce2\u5668\u66ff\u6362\u4e3a\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\uff0c\u5176\u4e2dDDSP\u901a\u8fc7\u795e\u7ecf\u7f51\u7edc\u63a7\u5236\u8c10\u6ce2\u52a0\u6027\u566a\u58f0\uff08Harmonic plus Noise\uff09\u751f\u6210\u97f3\u9891\u3002 J. Engel, L. H. Hantrakul, C. Gu, and A. Roberts, \"DDSP: Differentiable digital signal processing,\" in Proc. ICLR, 2020. NHV\u8bba\u6587\u5730\u5740\uff1a Neural Homomorphic Vocoder \u3002\u795e\u7ecf\u540c\u6001\u58f0\u7801\u5668\uff08Neural Homomorphic Vocoder\uff0cNHV\uff09\u901a\u8fc7\u7ebf\u6027\u65f6\u53d8\u6ee4\u6ce2\u5668\u5bf9\u8109\u51b2\u4e32\u548c\u566a\u97f3\u8fdb\u884c\u6ee4\u6ce2\u540e\u751f\u6210\u8bed\u97f3\u3002\u7ed9\u5b9a\u58f0\u5b66\u7279\u5f81\uff0c\u795e\u7ecf\u7f51\u7edc\u901a\u8fc7\u4f30\u8ba1\u65f6\u53d8\u8109\u51b2\u54cd\u5e94\u7684\u590d\u6570\u8c31\u63a7\u5236\u7ebf\u6027\u65f6\u53d8\uff08Linear Time-Varying\uff0cLTV\uff09\u6ee4\u6ce2\u5668\uff0c\u5e76\u5229\u7528\u591a\u5c3a\u5ea6STFT\u548c\u5bf9\u6297\u635f\u5931\u51fd\u6570\u8fdb\u884c\u8bad\u7ec3\u3002 \u6574\u4f53\u7ed3\u6784 \u6e90-\u6ee4\u6ce2\u5668\u793a\u610f\u56fe\u5982\u4e0a\u56fe\u6240\u793a\uff0c \\({e[n]}\\) \u8868\u793a\u6e90\uff08source\uff09\uff0c \\(h[n]\\) \u4e3a\u6ee4\u6ce2\u5668\uff0c \\(s[n]\\) \u5219\u662f\u91cd\u5efa\u7684\u6837\u672c\u70b9\u3002\u5728NHV\u4e2d\uff0c\u795e\u7ecf\u7f51\u7edc\u8d1f\u8d23\u5efa\u6a21\u6e90-\u6ee4\u6ce2\u5668\u6a21\u578b\u4e2d\u7684\u7ebf\u6027\u65f6\u53d8\uff08Linear Time-Varying\uff0cLTV\uff09\u6ee4\u6ce2\u5668\u3002\u7c7b\u4f3c\u4e8e\u8c10\u6ce2\u566a\u97f3\u52a0\u6027\u6a21\u578b\uff08Harmonic plus Noise model\uff09\uff0cNHV\u5206\u522b\u751f\u6210\u8c10\u6ce2\u548c\u566a\u97f3\u6210\u5206\u3002\u8c10\u6ce2\u90e8\u5206\uff0c\u4e3b\u8981\u662f\u901a\u8fc7\u7ebf\u6027\u65f6\u53d8\u8109\u51b2\u4e32\uff08LTV filtered impulse trains\uff09\u5efa\u6a21\u53d1\u97f3\u90e8\u5206\u7684\u5468\u671f\u6027\u632f\u52a8\uff1b\u566a\u97f3\u90e8\u5206\uff0c\u5305\u62ec\u80cc\u666f\u566a\u97f3\u3001\u4e0d\u53d1\u97f3\u6210\u5206\u3001\u4ee5\u53ca\u53d1\u97f3\u90e8\u5206\u4e2d\u7684\u968f\u673a\u6210\u5206\uff0c\u901a\u8fc7\u7ebf\u6027\u65f6\u53d8\u6ee4\u6ce2\u566a\u97f3\u5efa\u6a21\u3002\u5c06\u539f\u59cb\u7684\u8bed\u97f3\u4fe1\u53f7 \\(x\\) \u548c\u91cd\u5efa\u4fe1\u53f7 \\(s\\) \u5207\u5206\u4e3a\u82e5\u5e72\u4e2a\u5e27\u957f \\(L\\) \u7684\u4e0d\u91cd\u53e0\u5e27\uff0c \\(m\\) \u4e3a\u5e27\u7d22\u5f15\uff0c \\(n\\) \u4e3a\u6837\u672c\u70b9\u7d22\u5f15\uff0c \\(c\\) \u4e3a\u7279\u5f81\u7d22\u5f15\uff0c\u56e0\u6b64\u603b\u5e27\u6570\u548c\u603b\u6837\u672c\u70b9\u6570\u6ee1\u8db3\uff1a \\[ N=M\\times L \\] \u4e0a\u5f0f\u4e2d\uff0c \\(N\\) \u8868\u793a\u6837\u672c\u70b9\u603b\u6570\uff0c \\(M\\) \u8868\u793a\u4e0d\u91cd\u53e0\u5e27\u5e27\u6570\uff0c \\(L\\) \u8868\u793a\u6bcf\u4e2a\u5e27\u4e2d\u7684\u6837\u672c\u70b9\u4e2a\u6570\u3002 \u8109\u51b2\u54cd\u5e94 \\(h\\) \u662f\u56e0\u679c\u7684\uff0c\u8c10\u6ce2\u8109\u51b2\u54cd\u5e94 \\(h_h\\) \u548c\u566a\u97f3\u8109\u51b2\u54cd\u5e94 \\(h_n\\) \u65e0\u9650\u957f\uff0c \\(n\\in \\mathbb{Z}\\) \u3002 NHV\u7684\u8bed\u97f3\u751f\u6210\u8fc7\u7a0b\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u9996\u5148\u901a\u8fc7\u5e27\u7ea7\u522b\u57fa\u9891 \\(f_0[m]\\) \u751f\u6210\u8109\u51b2\u4e32 \\(p[n]\\) \uff0c\u4ece\u9ad8\u65af\u5206\u5e03\u4e2d\u91c7\u6837\u5f97\u5230\u566a\u97f3\u4fe1\u53f7 \\(u[n]\\) \uff1b\u63a5\u7740\u795e\u7ecf\u7f51\u7edc\u5229\u7528\u5bf9\u6570\u57df\u6885\u5c14\u8c31 \\(S[m,c]\\) \u4f30\u8ba1\u51fa\u6bcf\u4e00\u5e27\u7684\u8c10\u6ce2\u8109\u51b2\u54cd\u5e94 \\(h_h[m,n]\\) \u548c\u566a\u97f3\u8109\u51b2\u54cd\u5e94 \\(h_n[m,n]\\) \uff1b\u63a5\u7740\u8109\u51b2\u4e32 \\(p[n]\\) \u548c\u566a\u97f3\u4fe1\u53f7 \\(u[n]\\) \u901a\u8fc7LTV\u7ebf\u6027\u65f6\u53d8\u6ee4\u6ce2\u5668\u83b7\u5f97\u8c10\u6ce2\u6210\u5206 \\(s_h[n]\\) \u548c\u566a\u97f3\u6210\u5206 \\(s_n[n]\\) \uff1b\u6700\u540e\uff0c \\(s_h[n]\\) \u548c \\(s_n[n]\\) \u52a0\u8d77\u6765\uff0c\u5e76\u901a\u8fc7\u53ef\u8bad\u7ec3\u7684\u56e0\u679c\u6709\u9650\u51b2\u6fc0\u54cd\u5e94\u6ee4\u6ce2\u5668 \\(h[n]\\) \u6ee4\u6ce2\uff0c\u83b7\u5f97\u6700\u7ec8\u7684\u8bed\u97f3\u6837\u672c\u70b9 \\(s[n]\\) \u3002 \u8109\u51b2\u4e32\u751f\u6210\u5668 \u5229\u7528\u4f4e\u901a\u6b63\u5f26\u6ce2\u7684\u548c\u751f\u6210\u8109\u51b2\u4e32\uff1a \\[ p(t)=\\left\\{\\begin{array}{l} \\sum_{k=1}^{2kf_0(t)<f_s}{\\rm cos}(\\int_{0}^{t}2\\pi k f_0(\\tau){\\rm d}\\tau),\\quad if\\ f_0(t)>0 \\\\ 0,\\quad if\\ f_0(t)=0 \\end{array}\\right. \\] \u5176\u4e2d\uff0c\u901a\u8fc7zero-order hold\u6216\u8005\u7ebf\u6027\u63d2\u503c\u4ece \\(f_0[m]\\) \u4e2d\u91cd\u5efa \\(f_0(t)\\) \uff0c\u4e14 \\(p[n]=p(n/f_s)\\) \uff0c \\(f_s\\) \u4e3a\u91c7\u6837\u7387\u3002 \u7531\u4e8e\u52a0\u6027\u751f\u6210\u65f6\uff0c\u6839\u636e\u91c7\u6837\u7387\u548c\u5e27\u79fb\u9700\u8981\u52a0\u548c200\u4e2a\u6b63\u5f26\u51fd\u6570\uff0c\u8ba1\u7b97\u91cf\u8f83\u5927\uff0c\u56e0\u6b64\u53ef\u4ee5\u91c7\u7528\u8fd1\u4f3c\u7b97\u6cd5\uff1a\u5c06\u57fa\u9891\u5468\u671f\u56db\u820d\u4e94\u5165\u5230\u91c7\u6837\u5468\u671f\u7684\u500d\u6570\uff0c\u6b64\u65f6\u79bb\u6563\u8109\u51b2\u5e8f\u5217\u662f\u7a00\u758f\u7684\uff0c\u7136\u540e\u53ef\u4ee5\u6309\u987a\u5e8f\u751f\u6210\uff0c\u4e00\u6b21\u751f\u6210\u4e00\u4e2a\u97f3\u9ad8\u3002 \u795e\u7ecf\u7f51\u7edc\u6ee4\u6ce2\u4f30\u8ba1\u5668\uff08Neural Network Filter Estimator\uff09 \u4f7f\u7528\u590d\u6570\u8c31 \\(\\hat{h}_h\\) \u548c \\(\\hat{h}_n\\) \u4f5c\u4e3a\u51b2\u6fc0\u54cd\u5e94 \\(h_h\\) \u548c \\(h_n\\) \u7684\u4e2d\u95f4\u8868\u793a\uff0c\u590d\u6570\u8c31\u540c\u65f6\u63cf\u8ff0\u4e86\u5e45\u5ea6\u54cd\u5e94\u548c\u6ee4\u6ce2\u5668\u7684\u7ec4\u5ef6\u8fdf\uff08group delay\uff09\uff0c\u6ee4\u6ce2\u5668\u7684\u7ec4\u5ef6\u8fdf\u4f1a\u5f71\u54cd\u8bed\u97f3\u7684\u97f3\u8272\u3002\u4e0d\u540c\u4e8e\u4f7f\u7528\u7ebf\u6027\u76f8\u4f4d\u6216\u6700\u5c0f\u76f8\u4f4d\u6ee4\u6ce2\u5668\uff0cNHV\u4f7f\u7528\u7b26\u5408\u76f8\u4f4d\u6ee4\u6ce2\u5668\uff0c\u4ece\u6570\u636e\u4e2d\u5b66\u4e60\u76f8\u4f4d\u7279\u6027\u3002\u9650\u5236\u590d\u5012\u8c31\u7684\u957f\u5ea6\u76f8\u5f53\u4e8e\u9650\u5236\u5e45\u5ea6\u548c\u76f8\u4f4d\u54cd\u5e94\u7684\u5206\u8fa8\u7387\uff0c\u8fd9\u63d0\u4f9b\u4e86\u63a7\u5236\u6ee4\u6ce2\u5668\u590d\u6742\u6027\u7684\u7b80\u5355\u65b9\u6cd5------\u795e\u7ecf\u7f51\u7edc\u53ea\u9884\u6d4b\u4f4e\u9891\u5e26\u7cfb\u6570\uff0c\u9ad8\u9891\u5e26\u8c31\u7cfb\u6570\u8bbe\u7f6e\u4e3a\u96f6\u3002\u5b9e\u9a8c\u4e2d\uff0c\u6bcf\u5e27\u9884\u6d4b\u4e24\u4e2a10ms\u590d\u6570\u8c31\u3002\u5b9e\u73b0\u4e0a\uff0c\u65e0\u9650\u51b2\u6fc0\u54cd\u5e94IIR\uff0c\u6bd4\u5982 \\(h_h[m,n]\\) \u548c \\(h_n[m,n]\\) \u901a\u8fc7\u6709\u9650\u51b2\u6fc0\u54cd\u5e94FIR\u8fd1\u4f3c\uff0c\u79bb\u6563\u5085\u91cc\u53f6\u53d8\u6362\u7684\u7a97\u957f\u5fc5\u987b\u8db3\u591f\u5927\uff0c\u4ee5\u907f\u514d\u6df7\u53e0\u73b0\u8c61\uff0c\u5b9e\u9a8c\u4e2d\u7a97\u957f\u8bbe\u7f6e\u4e3a \\(N=1024\\) \u3002 \u7ebf\u6027\u65f6\u53d8\uff08LTV\uff09\u6ee4\u6ce2\u5668\u548c\u53ef\u8bad\u7ec3\u7684\u6709\u9650\u51b2\u6fc0\u54cd\u5e94\uff08FIRs\uff09 FIR\uff08\u6709\u9650\u51b2\u6fc0\u54cd\u5e94\uff09\u5e38\u7528\u4e8e\u97f3\u9891\u4fe1\u53f7\u5904\u7406\uff0cFIR\u548cIIR\uff08\u65e0\u9650\u51b2\u6fc0\u54cd\u5e94\uff09\u6700\u76f4\u89c2\u7684\u533a\u522b\u5c31\u4f53\u73b0\u5728\u7ed3\u6784\u5f62\u5f0f\u4e0a\uff0cIIR\u7684\u65b9\u7a0b\u4e2d\uff0c\u5f53\u524d\u7684\u8f93\u51fa \\(y(n)\\) \u662f\u7531\u5f53\u524d\u8f93\u5165 \\(x(n)\\) \uff0c\u8fc7\u53bb\u8f93\u5165 \\(x(n-1),x(n-2)\\) \u548c\u8fc7\u53bb\u8f93\u51fa \\(y(n-2),y(n-1)\\) \u8fd9\u4e09\u7c7b\u503c\u51b3\u5b9a\u3002\u800c\u5728FIR\u65b9\u7a0b\u4e2d\uff0c\u5219\u6ca1\u6709\u8fc7\u53bb\u8f93\u51fa\u8fd9\u9879\u3002IIR\u7684\u5dee\u5206\u65b9\u7a0b\u5982\u4e0b\uff1a \\[ y(n)=\\sum_{k=1}^N a_ky(n-k)+\\sum_{k=0}^M b_kx(n-k) \\] \u800cFIR\u7684\u5dee\u5206\u65b9\u7a0b\u4e3a\uff1a \\[ y(n)=\\sum_{k=0}^M b_k x(n-k) \\] \u7531\u4e8eIIR\u7684\u5f53\u524d\u8f93\u51fa\u53d7\u5230\u4ee5\u524d\u8f93\u51fa\u503c\u7684\u5f71\u54cd\uff0c\u56e0\u6b64\u5b83\u662f\u6709\u53cd\u9988\u7684\uff0c\u6216\u8005\u8bf4\u8f93\u51fa\u503c\u662f\u9012\u5f52\u7684\uff1b\u800cFIR\u5c31\u662f\u65e0\u53cd\u9988\uff0c\u975e\u9012\u5f52\u7684\u3002 \u8c10\u6ce2\u90e8\u5206\u7684\u7ebf\u6027\u65f6\u53d8\u6ee4\u6ce2\u5668\u5b9a\u4e49\u5982\u4e0b\u5f0f\u6240\u793a\uff1a \\[ s_h[n]=\\sum_{m=0}^{M}(w_L[n-mL]\\cdot p[n])*h_h[m,n] \\] \u5377\u79ef\u53ef\u4ee5\u5728\u65f6\u57df\u548c\u9891\u57df\u4e0a\u5e94\u7528\uff0c\u53ef\u8bad\u7ec3\u7684FIR\u6ee4\u6ce2\u5668 \\(h[n]\\) \u53ef\u4ee5\u5e94\u7528\u5230\u8bed\u97f3\u751f\u6210\u7684\u6700\u540e\u4e00\u6b65\uff0c\u8c10\u6ce2\u90e8\u5206\u7684\u5377\u79ef\u8fc7\u7a0b\u5982\u4e0b\u56fe\u6240\u793a\u3002 \u795e\u7ecf\u7f51\u7edc\u7684\u8bad\u7ec3 \u591a\u5c3a\u5ea6STFT\u635f\u5931 \u56e0\u4e3a\u8981\u6c42\u539f\u59cb\u4fe1\u53f7 \\(x\\) \u548c\u91cd\u5efa\u4fe1\u53f7 \\(s\\) \u7684\u58f0\u95e8\u6fc0\u52b1\uff08Glottal Closure Instants\uff0cGCIs\uff09\u5b8c\u5168\u5bf9\u9f50\uff0c\u56e0\u6b64\u5728\u91cd\u5efa\u4fe1\u53f7 \\(x[n]\\) \u548c\u539f\u59cb\u4fe1\u53f7 \\(s[n]\\) \u4e4b\u95f4\u65e0\u6cd5\u65bd\u52a0\u70b9\u7ea7\u635f\u5931\uff0c\u800c\u591a\u5c3a\u5ea6STFT\u8ba1\u7b97\u635f\u5931\u65f6\u5141\u8bb8\u4fe1\u53f7\u95f4\u76f8\u4f4d\u9519\u4f4d\u3002\u7c7b\u4f3c\u4e8e\u591a\u5b50\u5e26MelGAN\uff0c\u591a\u5c3a\u5ea6STFT\u635f\u5931\u5b9a\u4e49\u4e3a\u4e0d\u540c\u53c2\u6570\u4e0b\u539f\u59cb\u548c\u91cd\u5efa\u5e45\u5ea6\u8c31\u4e4b\u95f4\u7684L1\u8ddd\u79bb\u4e4b\u548c\uff1a \\[ {\\rm L}_R=\\frac{1}{C}\\sum_{i=0}^{C-1}\\frac{1}{K_i}(||X_i-S_i||_1+||{\\rm log}X_i-{\\rm log}S_i||_1) \\] \u4e0a\u5f0f\u4e2d\uff0c \\(X_i\\) \u548c \\(S_i\\) \u5206\u522b\u4e3a\u539f\u59cb\u4fe1\u53f7 \\(x\\) \u548c\u91cd\u5efa\u4fe1\u53f7 \\(s\\) \u5728\u53c2\u6570 \\(i\\) \u8bbe\u7f6e\u4e0b\u8ba1\u7b97\u83b7\u5f97\u7684\u5e45\u5ea6\u8c31\uff0c\u6bcf\u4e2a\u5e45\u5ea6\u8c31\u5305\u62ec \\(K_i\\) \u4e2a\u503c\uff0c\u5171 \\(C\\) \u7ec4STFT\u53c2\u6570\u914d\u7f6e\uff0c\u7ec4\u6570\u8d8a\u591a\uff0c\u91cd\u5efa\u4fe1\u53f7\u7684\u6df7\u53e0\u95ee\u9898\u4e00\u822c\u8d8a\u5c11\u3002 Yang G, Yang S, Liu K, et al. Multi-band MelGAN: Faster waveform generation for high-quality text-to-speech[C]. 2021 IEEE Spoken Language Technology Workshop (SLT). IEEE, 2021: 492-498. \u5bf9\u6297\u635f\u5931\u51fd\u6570 NHV\u91c7\u53d6\u5408\u9875\u635f\u5931\u51fd\u6570\u5f62\u5f0f\uff1a \\[ {\\rm L}_D=\\mathbb{E}_{x,S}[{\\rm max}(0,1-D(x,S))]+\\mathbb{E}_{f_0,S}[{\\rm max}(0,1+D(G(f_0,S),S))] \\] \\[ {\\rm G}=\\mathbb{E}_{f_0,S}[-D(G(f_0,S),S)] \\] \u4e0a\u5f0f\u4e2d\uff0c \\(D(x,S)\\) \u8868\u793a\u5224\u522b\u5668\u7f51\u7edc\uff0c \\(D\\) \u8f93\u5165\u539f\u59cb\u4fe1\u53f7 \\(x\\) \u6216\u91cd\u5efa\u4fe1\u53f7 \\(s\\) \uff0c\u4ee5\u53ca\u771f\u5b9elog\u57df\u6885\u5c14\u9891\u8c31 \\(S\\) \uff0c \\(f_0\\) \u8868\u793a\u57fa\u9891\uff0c\u751f\u6210\u5668 \\(G(f_0,S)\\) \u8f93\u51fa\u91cd\u5efa\u4fe1\u53f7 \\(s\\) \u3002 \u5c0f\u7ed3 NHV\u662f\u57fa\u4e8e\u6e90-\u6ee4\u6ce2\u5668\u7684\u795e\u7ecf\u58f0\u7801\u5668\uff0c\u901a\u8fc7\u795e\u7ecf\u7f51\u7edc\u5efa\u6a21\u7ebf\u6027\u65f6\u53d8\u6ee4\u6ce2\u5668\uff08LTV\uff09\uff0c\u5bf9\u8109\u51b2\u4e32\u548c\u566a\u97f3\u8fdb\u884c\u6ee4\u6ce2\u540e\u751f\u6210\u8bed\u97f3\uff0c\u5e76\u7ed3\u5408\u591a\u5c3a\u5ea6STFT\u548c\u5bf9\u6297\u635f\u5931\u8fdb\u884c\u8bad\u7ec3\u3002 HiFiGAN HiFiGAN\u6982\u8ff0 HiFiGAN\u662f\u8fd1\u5e74\u6765\u5728\u5b66\u672f\u754c\u548c\u5de5\u4e1a\u754c\u90fd\u8f83\u4e3a\u5e38\u7528\u7684\u58f0\u7801\u5668\uff0c\u80fd\u591f\u5c06\u58f0\u5b66\u6a21\u578b\u4ea7\u751f\u7684\u9891\u8c31\u8f6c\u6362\u4e3a\u9ad8\u8d28\u91cf\u7684\u97f3\u9891\uff0c\u8fd9\u79cd\u58f0\u7801\u5668\u91c7\u7528\u751f\u6210\u5bf9\u6297\u7f51\u7edc\uff08Generative Adversial Networks\uff0cGAN\uff09\u4f5c\u4e3a\u57fa\u7840\u751f\u6210\u6a21\u578b\uff0c\u76f8\u6bd4\u4e8e\u4e4b\u524d\u76f8\u8fd1\u7684MelGAN\uff0c\u6539\u8fdb\u70b9\u5728\u4e8e\uff1a \u5f15\u5165\u4e86\u591a\u5468\u671f\u5224\u522b\u5668\uff08Multi-Period Discriminator\uff0cMPD\uff09\u3002HiFiGAN\u540c\u65f6\u62e5\u6709\u591a\u5c3a\u5ea6\u5224\u522b\u5668\uff08Multi-Scale Discriminator\uff0cMSD\uff09\u548c\u591a\u5468\u671f\u5224\u522b\u5668\uff0c\u5c3d\u53ef\u80fd\u589e\u5f3aGAN\u5224\u522b\u5668\u7504\u522b\u5408\u6210\u6216\u771f\u5b9e\u97f3\u9891\u7684\u80fd\u529b\uff0c\u4ece\u800c\u63d0\u5347\u5408\u6210\u97f3\u8d28\u3002 \u751f\u6210\u5668\u4e2d\u63d0\u51fa\u4e86\u591a\u611f\u53d7\u91ce\u878d\u5408\u6a21\u5757\u3002WaveNet\u4e3a\u4e86\u589e\u5927\u611f\u53d7\u91ce\uff0c\u53e0\u52a0\u5e26\u6d1e\u5377\u79ef\uff0c\u97f3\u8d28\u867d\u7136\u5f88\u597d\uff0c\u4f46\u662f\u4e5f\u4f7f\u5f97\u6a21\u578b\u8f83\u5927\uff0c\u63a8\u7406\u901f\u5ea6\u8f83\u6162\u3002HiFiGAN\u5219\u63d0\u51fa\u4e86\u4e00\u79cd\u6b8b\u5dee\u7ed3\u6784\uff0c\u4ea4\u66ff\u4f7f\u7528\u5e26\u6d1e\u5377\u79ef\u548c\u666e\u901a\u5377\u79ef\u589e\u5927\u611f\u53d7\u91ce\uff0c\u4fdd\u8bc1\u5408\u6210\u97f3\u8d28\u7684\u540c\u65f6\uff0c\u63d0\u9ad8\u63a8\u7406\u901f\u5ea6\u3002 HiFiGAN\u751f\u6210\u5668\u7b80\u4ecb HiFiGAN\u7684\u751f\u6210\u5668\u4e3b\u8981\u6709\u4e24\u5757\uff0c\u4e00\u4e2a\u662f\u4e0a\u91c7\u6837\u7ed3\u6784\uff0c\u5177\u4f53\u7531\u4e00\u7ef4\u8f6c\u7f6e\u5377\u79ef\u7ec4\u6210\uff1b\u4e8c\u662f\u6240\u8c13\u7684\u591a\u611f\u53d7\u91ce\u878d\u5408\uff08Multi-Receptive Field Fusion\uff0cMRF\uff09\u6a21\u5757\uff0c\u4e3b\u8981\u8d1f\u8d23\u5bf9\u4e0a\u91c7\u6837\u83b7\u5f97\u7684\u91c7\u6837\u70b9\u8fdb\u884c\u4f18\u5316\uff0c\u5177\u4f53\u7531\u6b8b\u5dee\u7f51\u7edc\u7ec4\u6210\u3002 \u4e0a\u91c7\u6837\u7ed3\u6784 \u4f5c\u4e3a\u58f0\u7801\u5668\u7684\u751f\u6210\u5668\uff0c\u4e0d\u4f46\u9700\u8981\u8d1f\u8d23\u5c06\u9891\u8c31\u4ece\u9891\u57df\u8f6c\u6362\u5230\u65f6\u57df\uff0c\u800c\u4e14\u8981\u8fdb\u884c\u4e0a\u91c7\u6837\uff08upsampling\uff09\u3002\u4ee580\u7ef4\u6885\u5c14\u9891\u8c31\u5408\u621016kHz\u7684\u8bed\u97f3\u4e3a\u4f8b\uff0c\u5047\u8bbe\u5e27\u79fb\u4e3a10ms\uff0c\u5219\u6bcf\u4e2a\u5e27\u79fb\u5185\u6709160\u4e2a\u8bed\u97f3\u6837\u672c\u70b9\uff0c\u9700\u8981\u901a\u8fc780\u4e2a\u6885\u5c14\u9891\u8c31\u503c\u83b7\u5f97\uff0c\u56e0\u6b64\uff0c\u9700\u8981\u5229\u7528\u5377\u79ef\u7f51\u7edc\u4e0d\u65ad\u589e\u52a0\u8f93\u51fa\"\u957f\u5ea6\"\uff0c\u964d\u4f4e\u8f93\u51fa\"\u901a\u9053\u6570\"\uff0c\u76f4\u5230\u4e0a\u91c7\u6837\u500d\u6570\u8fbe\u5230160\uff0c\u901a\u9053\u6570\u964d\u4f4e\u4e3a1\u5373\u53ef\u3002 \u5bf9\u4e8e\u4e0a\u91c7\u6837\u64cd\u4f5c\uff0c\u53ef\u4ee5\u4f7f\u7528\u63d2\u503c\u7b97\u6cd5\u8fdb\u884c\u5904\u7406\uff0c\u6bd4\u5982\u6700\u8fd1\u90bb\u63d2\u503c\uff08Nearest neighbor interpolation\uff09\u3001\u53cc\u7ebf\u6027\u63d2\u503c\uff08Bi-Linear interpolation\uff09\u3001\u53cc\u7acb\u65b9\u63d2\u503c\uff08Bi-Cubic interpolation\uff09\u7b49\uff0c\u4f46\u662f\u8fd9\u4e9b\u63d2\u503c\u7b97\u6cd5\u8bf4\u5230\u5e95\u662f\u4eba\u5de5\u89c4\u5219\uff0c\u800c\u795e\u7ecf\u7f51\u7edc\u53ef\u4ee5\u81ea\u52a8\u5b66\u4e60\u5408\u9002\u7684\u53d8\u6362\uff0c \u8f6c\u7f6e\u5377\u79ef\uff08ConvTransposed\uff09 \uff0c\u4e5f\u79f0\u53cd\u5377\u79efDeconvolution\u3001\u5fae\u6b65\u5377\u79efFractionally-strided Convolution\uff0c\u5219\u662f\u5408\u9002\u7684\u4e0a\u91c7\u6837\u7ed3\u6784\u3002\u4e00\u822c\u7684\u5377\u79ef\u4e2d\uff0c\u6bcf\u6b21\u5377\u79ef\u64cd\u4f5c\u90fd\u662f\u5bf9\u8f93\u5165\u5f20\u91cf\u548c\u5377\u79ef\u6838\u7684\u6bcf\u4e2a\u5143\u7d20\u8fdb\u884c\u76f8\u4e58\u518d\u52a0\u548c\uff0c\u5377\u79ef\u7684\u8f93\u5165\u548c\u8f93\u51fa\u662f \u591a\u5bf9\u4e00 \u7684\u6620\u5c04\u5173\u7cfb\uff0c\u800c\u8f6c\u7f6e\u5377\u79ef\u5219\u53cd\u8fc7\u6765\uff0c\u662f \u4e00\u5bf9\u591a \u7684\u6620\u5c04\u5173\u7cfb\u3002\u4ece\u8ba1\u7b97\u673a\u7684\u5185\u90e8\u5b9e\u73b0\u6765\u770b\uff0c\u5b9a\u4e49\uff1a \\(X\\) \u4e3a\u8f93\u5165\u5f20\u91cf\uff0c\u5927\u5c0f\u4e3a \\(X_{width}\\times X_{height}\\) \\(Y\\) \u4e3a\u8f93\u51fa\u5f20\u91cf\uff0c\u5927\u5c0f\u4e3a \\(Y_{width}\\times Y_{height}\\) \\(C\\) \u4e3a\u5377\u79ef\u6838\uff0c\u5927\u5c0f\u4e3a \\(C_{width}\\times C_{height}\\) \u7ecf\u8fc7\u666e\u901a\u7684\u5377\u79ef\u8fd0\u7b97\u4e4b\u540e\uff0c\u5c06\u5927\u5f20\u91cf \\(X\\) \"\u4e0b\u91c7\u6837\"\u5230\u5c0f\u5f20\u91cf \\(Y\\) \u3002\u5177\u4f53\u6765\u8bf4\uff0c\u9996\u5148\u5c06\u8f93\u5165\u5f20\u91cf\u5c55\u5e73\u4e3a\u5411\u91cf\uff0c\u4e5f\u5373\u662f \\([X_{width}\\times X_{height},1]\\) \uff0c\u540c\u65f6\u4e5f\u5c06\u5377\u79ef\u6838\u5c55\u5e73\u6210\u5411\u91cf\u5230\u8f93\u5165\u5f20\u91cf \\(X\\) \u7684\u5927\u5c0f\uff1a\u7531\u4e8e\u5377\u79ef\u6838\u5c0f\u4e8e\u8f93\u5165\u5f20\u91cf\uff0c\u5728\u884c\u548c\u5217\u4e0a\u90fd\u75280\u586b\u5145\u81f3\u8f93\u5165\u5f20\u91cf\u5927\u5c0f\uff0c\u7136\u540e\u5c55\u5e73\uff0c\u5219\u5377\u79ef\u6838\u5411\u91cf\u5927\u5c0f\u4e3a \\([1,X_{width}\\times X_{height}]\\) \uff1b\u540c\u65f6\u6309\u7167\u6b65\u957f\uff0c\u5de6\u4fa7\u586b\u51450\u504f\u79fb\u8be5\u5377\u79ef\u6838\u5411\u91cf\uff0c\u6700\u7ec8\uff0c\u5377\u79ef\u6838\u5411\u91cf\u7684\u4e2a\u6570\u4e3a\u8f93\u51fa\u5f20\u91cf\u5143\u7d20\u4e2a\u6570\uff0c\u5219\u6784\u6210\u7684\u5377\u79ef\u6838\u5f20\u91cf\u5927\u5c0f\u4e3a \\([Y_{width}\\times Y_{height},X_{width}\\times X_{height}]\\) \uff0c\u5377\u79ef\u6838\u5f20\u91cf\u548c\u8f93\u5165\u5f20\u91cf\u77e9\u9635\u4e58\uff0c\u83b7\u5f97\u8f93\u51fa\u5f20\u91cf \\([Y_{width}\\times Y_{height},1]\\) \uff0c\u91cd\u5851\u5927\u5c0f\u4e3a \\(C_{width},C_{height}\\) \u3002 \u6b64\u65f6\uff0c\u5982\u679c\u4f7f\u7528\u5377\u79ef\u6838\u5f20\u91cf\u7684\u8f6c\u7f6e \\([X_{width}\\times X_{height},Y_{width}\\times Y_{height}]\\) \u77e9\u9635\u4e58\u5c55\u5e73\u7684 \\([Y_{width}\\times Y_{height},1]\\) \uff0c\u5f97\u5230\u7684\u7ed3\u679c\u5c31\u662f \\([X_{width}\\times X_{height},1]\\) \uff0c\u548c\u521a\u521a\u7684\u8f93\u5165\u5f20\u91cf\u5927\u5c0f\u76f8\u540c\uff0c\u8fd9\u5c31\u5b8c\u6210\u4e86\u4e00\u6b21 \u8f6c\u7f6e\u5377\u79ef \u3002\u4f46\u5b9e\u9645\u4e0a\uff0c\u4e0a\u8ff0\u64cd\u4f5c\u5e76\u975e\u53ef\u9006\u5173\u7cfb\uff0c\u5377\u79ef\u5c06\u8f93\u5165\u5f20\u91cf\"\u4e0b\u91c7\u6837\"\u5230\u8f93\u51fa\u5f20\u91cf\uff0c\u672c\u8d28\u662f\u6709\u635f\u538b\u7f29\u7684\u8fc7\u7a0b\uff0c\u7531\u4e8e\u5728\u5377\u79ef\u4e2d\u4f7f\u7528\u7684 \u5377\u79ef\u6838\u5f20\u91cf \u5e76\u975e\u53ef\u9006\u77e9\u9635\uff0c\u8f6c\u7f6e\u5377\u79ef\u64cd\u4f5c\u4e4b\u540e\u5e76\u4e0d\u80fd\u6062\u590d\u5230\u539f\u59cb\u7684\u6570\u503c\uff0c\u4ec5\u4ec5\u662f\u6062\u590d\u5230\u539f\u59cb\u7684\u5f62\u72b6\u3002\u8fd9\u5176\u5b9e\u4e5f\u5c31\u662f\u7ebf\u6027\u8c31\u4e0e\u6885\u5c14\u9891\u8c31\u5173\u7cfb\uff0c\u52a0\u6743\u6c42\u548c\u5f97\u5230\u6885\u5c14\u9891\u8c31\u4e4b\u540e\u5c31\u56de\u4e0d\u6765\u4e86\uff0c\u9876\u591a\u6c42\u6885\u5c14\u6ee4\u6ce2\u5668\u7ec4\u7684\u4f2a\u9006\uff0c\u8fd1\u4f3c\u6062\u590d\u5230\u7ebf\u6027\u8c31\u3002 \u6b64\u5916\uff0c\u5728\u4f7f\u7528\u8f6c\u7f6e\u5377\u79ef\u65f6\u9700\u8981\u6ce8\u610f\u68cb\u76d8\u6548\u5e94\uff08Checkboard artifacts\uff09\u3002\u68cb\u76d8\u6548\u5e94\u4e3b\u8981\u662f\u7531\u4e8e\u8f6c\u7f6e\u5377\u79ef\u7684\"\u4e0d\u5747\u5300\u91cd\u53e0\"\uff08Uneven overlap\uff09\u9020\u6210\u7684\uff0c\u8f93\u51fa\u4e2d\u6bcf\u4e2a\u50cf\u7d20\u63a5\u53d7\u7684\u4fe1\u606f\u91cf\u4e0e\u76f8\u90bb\u50cf\u7d20\u4e0d\u540c\uff0c\u5728\u8f93\u51fa\u4e0a\u627e\u4e0d\u5230\u8fde\u7eed\u4e14\u5747\u5300\u91cd\u53e0\u7684\u533a\u57df\uff0c\u8868\u73b0\u662f\u56fe\u50cf\u4e2d\u4e00\u4e9b\u8272\u5757\u7684\u989c\u8272\u6bd4\u5468\u56f4\u8272\u5757\u8981\u6df1\uff0c\u50cf\u68cb\u76d8\u4e0a\u7684\u65b9\u683c\uff0c\u53c2\u89c1 Deconvolution and Checkerboard Artifacts \u3002\u907f\u514d\u68cb\u76d8\u6548\u5e94\u7684\u65b9\u6cd5\u4e3b\u8981\u6709\uff1akernel_size\u7684\u5927\u5c0f\u5c3d\u53ef\u80fd\u88abstride\u6574\u9664\uff0c\u5c3d\u53ef\u80fd\u4f7f\u7528stride=1\u7684\u8f6c\u7f6e\u5377\u79ef\uff1b\u5806\u53e0\u8f6c\u7f6e\u5377\u79ef\u51cf\u8f7b\u91cd\u53e0\uff1b\u7f51\u7edc\u672b\u5c3e\u4f7f\u7528 \\(1\\times 1\\) \u7684\u8f6c\u7f6e\u5377\u79ef\u7b49\u3002 \u901a\u8fc7\u4e0a\u8ff0\u7684\u539f\u7406\u90e8\u5206\uff0c\u53ef\u4ee5\u770b\u51fa\u5377\u79ef\u548c\u8f6c\u7f6e\u5377\u79ef\u662f\u5bf9\u5076\u8fd0\u7b97\uff0c\u8f93\u5165\u53d8\u8f93\u51fa\uff0c\u8f93\u51fa\u53d8\u8f93\u5165\uff0c\u5377\u79ef\u7684\u8f93\u5165\u8f93\u51fa\u5927\u5c0f\u5173\u7cfb\u4e3a\uff1a \\[ L_{out}=\\frac{L_{in}+2\\times padding-kernel\\_size}{stride}+1 \\] \u90a3\u4e48\u8f6c\u7f6e\u5377\u79ef\u7684\u8f93\u5165\u8f93\u51fa\u5927\u5c0f\u5219\u4e3a\uff1a \\[ L_{out}=(L_{in}-1)\\times stride+kernel\\_size-2\\times padding \\] \u5f53\u7136\uff0c\u52a0\u5165dilation\u4e4b\u540e\uff0c\u5927\u5c0f\u8ba1\u7b97\u7a0d\u590d\u6742\u4e9b\uff0c\u53c2\u89c1 Pytorch-ConvTranspose1d \uff0c Pytorch-Conv1d \u3002 \u8be5\u90e8\u5206\u53c2\u8003\u6587\u732e\uff1a \u600e\u6837\u901a\u4fd7\u6613\u61c2\u5730\u89e3\u91ca\u53cd\u5377\u79ef\uff1f \u4e00\u6587\u641e\u61c2\u53cd\u5377\u79ef\uff0c\u8f6c\u7f6e\u5377\u79ef Deconvolution and Checkerboard Artifacts \u5982\u4f55\u53bb\u9664\u751f\u6210\u56fe\u7247\u4ea7\u751f\u7684\u68cb\u76d8\u4f2a\u5f71\uff1f A guide to convolution arithmetic for deep learning Pytorch-ConvTranspose1d Pytorch-Conv1d \u8f6c\u7f6e\u5377\u79ef\u5b9e\u73b0\u7684\u4e0a\u91c7\u6837\u5c42\u5b9a\u4e49\u4e3a\uff1a 1 2 3 4 5 self . ups = nn . ModuleList () for i , ( u , k ) in enumerate ( zip ( h . upsample_rates , h . upsample_kernel_sizes )): self . ups . append ( weight_norm ( ConvTranspose1d ( h . upsample_initial_channel // ( 2 ** i ), h . upsample_initial_channel // ( 2 ** ( i + 1 )), kernel_size = k , stride = u , padding = ( k - u ) // 2 ))) \u5bf9\u4e8ehop_size=256\u6765\u8bf4\uff0ch.upsample_rates\u548ch.upsample_kernel_sizes\u5206\u522b\u4e3a\uff1a \"upsample_rates\": [8,8,2,2], \"upsample_kernel_sizes\": [16,16,4,4], \u6839\u636e\u8f6c\u7f6e\u5377\u79ef\u7684\u8f93\u5165\u8f93\u51fa\u5927\u5c0f\u5173\u7cfb\uff1a \\[ L_{out}=(L_{in}-1)\\times stride-2\\times padding+dilation\\times (kernel\\_size-1)+output\\_padding+1 \\] \u7528\u4e8e\u4e0a\u91c7\u6837\u7684\u8f6c\u7f6e\u5377\u79ef\uff0c\u901a\u8fc7\u8bbe\u7f6e\u5408\u9002\u7684padding\uff0c\u914d\u5408\u5377\u79ef\u6838\u5927\u5c0f\uff08kernel_size\uff09\u548c\u6b65\u8fdb\uff08stride\uff09\uff0c\u5c31\u53ef\u4ee5\u5b9e\u73b0\u8f93\u51fa\u4e0e\u8f93\u5165\u5927\u5c0f\u5448\"\u6b65\u8fdb\u500d\u6570\"\u7684\u5173\u7cfb\uff0c\u5728\u8fd9\u91cc\uff0c\u5377\u79ef\u6838\uff08upsample_kernel_sizes\uff09\u8bbe\u7f6e\u4e3a\u6b65\u8fdb\uff08upsample_rates\uff09\u76842\u500d\u3002\u8bbe\u7f6e\u53c2\u6570\u65f6\uff0c\u5fc5\u987b\u4fdd\u6301\u5e27\u79fb\u70b9\u6570\uff0c\u662f\u5404\u4e2a\u5377\u79ef\u5c42\u6b65\u8fdb\uff08\u6216\u8005\u4ee3\u7801\u4e2d\u6240\u8c13\u7684\u4e0a\u91c7\u6837\u7387update_rates\uff09\u7684\u4e58\u79ef\uff0c\u5728\u4e0a\u4f8b\u4e2d\uff0c\u4e5f\u5c31\u662f\uff1a \\[ hop\\_length=256=8\\times 8\\times 2\\times 2 \\] \u591a\u611f\u53d7\u91ce\u878d\u5408 \u8f6c\u7f6e\u5377\u79ef\u7684\u4e0a\u91c7\u6837\u5bb9\u6613\u5bfc\u81f4\u68cb\u76d8\u6548\u5e94\uff0c\u56e0\u6b64\u6bcf\u6b21\u8f6c\u7f6e\u5377\u79ef\u4e0a\u91c7\u6837\u4e4b\u540e\uff0c\u90fd\u4f1a\u8ddf\u7740\u4e00\u4e2a\u591a\u611f\u53d7\u91ce\u878d\u5408\uff08MRF\uff09\u7684\u6b8b\u5dee\u7f51\u7edc\uff0c\u4ee5\u8fdb\u4e00\u6b65\u63d0\u5347\u6837\u672c\u70b9\u7684\u751f\u6210\u8d28\u91cf\u3002\u591a\u611f\u53d7\u91ce\u878d\u5408\u6a21\u5757\u662f\u4e00\u79cd\u5229\u7528\u5e26\u6d1e\u5377\u79ef\u548c\u666e\u901a\u5377\u79ef\u63d0\u9ad8\u751f\u6210\u5668\u611f\u53d7\u91ce\u7684\u7ed3\u6784\uff0c\u5e26\u6d1e\u5377\u79ef\u7684\u6269\u5f20\u500d\u6570\u9010\u6b65\u9012\u589e\uff0c\u5982dilation=1,3,5\uff0c\u6bcf\u4e2a\u5e26\u6d1e\u5377\u79ef\u4e4b\u540e\uff0c\u8ddf\u7740\u5377\u79ef\u6838\u5927\u4e8e1\u7684\u666e\u901a\u5377\u79ef\uff0c\u4ece\u800c\u5b9e\u73b0\u5e26\u6d1e\u5377\u79ef\u548c\u666e\u901a\u5377\u79ef\u7684\u4ea4\u66ff\u4f7f\u7528\u3002\u5e26\u6d1e\u5377\u79ef\u548c\u666e\u901a\u5377\u79ef\u7684\u8f93\u5165\u8f93\u51fa\u5927\u5c0f\u4fdd\u6301\u4e0d\u53d8\uff0c\u5728\u4e00\u8f6e\u5e26\u6d1e\u548c\u666e\u901a\u5377\u79ef\u5b8c\u6210\u4e4b\u540e\uff0c\u539f\u59cb\u8f93\u5165\u8df3\u8fde\u5230\u5377\u79ef\u7684\u7ed3\u679c\uff0c\u4ece\u800c\u5b9e\u73b0\u4e00\u8f6e\"\u591a\u611f\u53d7\u91ce\u878d\u5408\"\u3002\u591a\u611f\u53d7\u91ce\u878d\u5408\u7684\u5177\u4f53\u5b9e\u73b0\u4e0a\uff0c\u8bba\u6587\u4e2d\u63d0\u51fa\u4e86\u4e24\u79cd\u53c2\u6570\u91cf\u4e0d\u540c\u7684\u6b8b\u5dee\u7f51\u7edc\u3002\u4e00\u79cd\u662f\u53c2\u6570\u91cf\u8f83\u591a\uff0c\u591a\u7ec4\u5e26\u6d1e\u5377\u79ef\uff08dilation=1,3,5\uff09\u548c\u666e\u901a\u5377\u79ef\u4ea4\u66ff\u4f7f\u7528\uff0cHiFiGAN v1 (config_v1.json)\u548cHiFiGAN v2 (config_v2.json)\u5747\u4f7f\u7528\u8be5\u79cd\u591a\u611f\u53d7\u91ce\u878d\u5408\uff08MRF\uff09\u6a21\u5757\u3002\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 class ResBlock1 ( torch . nn . Module ): def __init__ ( self , h , channels , kernel_size = 3 , dilation = ( 1 , 3 , 5 )): super ( ResBlock1 , self ) . __init__ () self . h = h self . convs1 = nn . ModuleList ([ weight_norm ( Conv1d ( channels , channels , kernel_size , 1 , dilation = dilation [ 0 ], padding = get_padding ( kernel_size , dilation [ 0 ]))), weight_norm ( Conv1d ( channels , channels , kernel_size , 1 , dilation = dilation [ 1 ], padding = get_padding ( kernel_size , dilation [ 1 ]))), weight_norm ( Conv1d ( channels , channels , kernel_size , 1 , dilation = dilation [ 2 ], padding = get_padding ( kernel_size , dilation [ 2 ]))), ]) self . convs1 . apply ( init_weights ) self . convs2 = nn . ModuleList ([ weight_norm ( Conv1d ( channels , channels , kernel_size , 1 , dilation = 1 , padding = get_padding ( kernel_size , 1 ))), weight_norm ( Conv1d ( channels , channels , kernel_size , 1 , dilation = 1 , padding = get_padding ( kernel_size , 1 ))), weight_norm ( Conv1d ( channels , channels , kernel_size , 1 , dilation = 1 , padding = get_padding ( kernel_size , 1 ))) ]) self . convs2 . apply ( init_weights ) def forward ( self , x ): for c1 , c2 in zip ( self . convs1 , self . convs2 ): xt = F . leaky_relu ( x , LRELU_SLOPE ) xt = c1 ( xt ) xt = F . leaky_relu ( xt , LRELU_SLOPE ) xt = c2 ( xt ) x = xt + x return x def remove_weight_norm ( self ): for l in self . convs1 : remove_weight_norm ( l ) for l in self . convs2 : remove_weight_norm ( l ) \u53e6\u5916\u4e00\u79cdMRF\u5927\u5927\u51cf\u5c11\u4e86\u53c2\u6570\u91cf\uff0c\u4ec5\u7531\u4e24\u5c42\u5e26\u6d1e\u5377\u79ef\uff08dilation=1,3\uff09\u7ec4\u6210\uff0c\u4f46\u4f9d\u7136\u4fdd\u6301\u4e86\u8df3\u8dc3\u8fde\u63a5\u7684\u7ed3\u6784: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class ResBlock2 ( torch . nn . Module ): def __init__ ( self , h , channels , kernel_size = 3 , dilation = ( 1 , 3 )): super ( ResBlock2 , self ) . __init__ () self . h = h self . convs = nn . ModuleList ([ weight_norm ( Conv1d ( channels , channels , kernel_size , 1 , dilation = dilation [ 0 ], padding = get_padding ( kernel_size , dilation [ 0 ]))), weight_norm ( Conv1d ( channels , channels , kernel_size , 1 , dilation = dilation [ 1 ], padding = get_padding ( kernel_size , dilation [ 1 ]))), ]) self . convs . apply ( init_weights ) def forward ( self , x ): for c in self . convs : xt = F . leaky_relu ( x , LRELU_SLOPE ) xt = c ( xt ) x = xt + x return x def remove_weight_norm ( self ): for l in self . convs : remove_weight_norm ( l ) \u6ce8\u610f\u5230\u4e24\u79cdMRF\u90fd\u4f7f\u7528\u4e86weight_norm\u5bf9\u795e\u7ecf\u7f51\u7edc\u7684\u6743\u91cd\u8fdb\u884c\u89c4\u8303\u5316\uff0c\u76f8\u6bd4\u4e8ebatch_norm\uff0cweight_norm\u4e0d\u4f9d\u8d56mini-batch\u7684\u6570\u636e\uff0c\u5bf9\u566a\u97f3\u6570\u636e\u66f4\u4e3a\u9c81\u68d2\uff1b\u5e76\u4e14\uff0c\u53ef\u4ee5\u5e94\u7528\u4e8eRNN\u7b49\u65f6\u5e8f\u7f51\u7edc\u4e0a\uff1b\u6b64\u5916\uff0cweight_norm\u76f4\u63a5\u5bf9\u795e\u7ecf\u7f51\u7edc\u7684\u6743\u91cd\u503c\u8fdb\u884c\u89c4\u8303\u5316\uff0c\u524d\u5411\u548c\u540e\u5411\u8ba1\u7b97\u65f6\uff0c\u5e26\u6765\u7684\u989d\u5916\u8ba1\u7b97\u548c\u5b58\u50a8\u5f00\u9500\u90fd\u8f83\u5c0f\u3002weight_norm\u672c\u8d28\u662f\u5229\u7528\u65b9\u5411 \\(v\\) \u548c\u5e45\u5ea6\u5f20\u91cf \\(g\\) \u66ff\u4ee3\u6743\u91cd\u5f20\u91cf \\(w\\) \uff1a \\[ w=g\\frac{v}{||v||} \\] \u65b9\u5411\u5f20\u91cf \\(v\\) \u548c \\(w\\) \u5927\u5c0f\u76f8\u540c\uff0c\u5e45\u5ea6\u5f20\u91cf \\(g\\) \u6bd4 \\(w\\) \u5c11\u4e00\u7ef4\uff0c\u4f7f\u5f97 \\(w\\) \u80fd\u591f\u6bd4\u8f83\u5bb9\u6613\u5730\u6574\u4f53\u7f29\u653e\u3002\u4e0d\u76f4\u63a5\u4f18\u5316 \\(w\\) \uff0c\u800c\u662f\u8bad\u7ec3 \\(v\\) \u548c \\(g\\) \u3002 \u540c\u65f6\u6ce8\u610f\u5230\uff0c\u5728\u63a8\u7406\u65f6\u9700\u8981remove_weight_norm\uff0c\u8fd9\u662f\u56e0\u4e3a\u8bad\u7ec3\u65f6\u9700\u8981\u8ba1\u7b97\u6743\u91cd\u77e9\u9635\u7684\u65b9\u5411\u548c\u5e45\u5ea6\u5f20\u91cf\uff0c\u800c\u5728\u63a8\u7406\u65f6\uff0c\u53c2\u6570\u5df2\u7ecf\u4f18\u5316\u5b8c\u6210\uff0c\u8981\u6062\u590d\u56de\u53bb\uff0c\u6240\u4ee5\u5728\u63a8\u7406\u65f6\u5c31\u76f4\u63a5\u79fb\u9664weight_norm\u673a\u5236\u3002 \u6bcf\u4e2a\u5377\u79ef\u6838\u76840\u586b\u5145\u4e2a\u6570\u90fd\u8c03\u7528\u4e86get_padding\u51fd\u6570\uff0c\u5229\u7528\u586b\u5145\u4fdd\u8bc1\u8f93\u5165\u8f93\u51fa\u7684\u957f\u5bbd\u5927\u5c0f\u4e00\u81f4\uff0c\u8be5\u586b\u5145\u5927\u5c0f\u7684\u8ba1\u7b97\u65b9\u6cd5\uff1a \\[ padding=(kernel\\_size-1)*padding//2 \\] HiFiGAN\u5224\u522b\u5668\u7b80\u4ecb HiFiGAN\u7684\u5224\u522b\u5668\u6709\u4e24\u4e2a\uff0c\u5206\u522b\u662f\u591a\u5c3a\u5ea6\u548c\u591a\u5468\u671f\u5224\u522b\u5668\uff0c\u4ece\u4e24\u4e2a\u4e0d\u540c\u89d2\u5ea6\u5206\u522b\u9274\u5b9a\u8bed\u97f3\u3002\u591a\u5c3a\u5ea6\u5224\u522b\u5668\u6e90\u81eaMelGAN\u58f0\u7801\u5668\u7684\u505a\u6cd5\uff0c\u4e0d\u65ad\u5e73\u5747\u6c60\u5316\u8bed\u97f3\u5e8f\u5217\uff0c\u9010\u6b21\u5c06\u8bed\u97f3\u5e8f\u5217\u7684\u957f\u5ea6\u51cf\u534a\uff0c\u7136\u540e\u5728\u8bed\u97f3\u7684\u4e0d\u540c\u5c3a\u5ea6\u4e0a\u65bd\u52a0\u82e5\u5e72\u5c42\u5377\u79ef\uff0c\u6700\u540e\u5c55\u5e73\uff0c\u4f5c\u4e3a\u591a\u5c3a\u5ea6\u5224\u522b\u5668\u7684\u8f93\u51fa\u3002\u591a\u5468\u671f\u5224\u522b\u5668\u5219\u662f\u4ee5\u4e0d\u540c\u7684\u5e8f\u5217\u957f\u5ea6\u5c06\u4e00\u7ef4\u7684\u97f3\u9891\u5e8f\u5217\u6298\u53e0\u4e3a\u4e8c\u7ef4\u5e73\u9762\uff0c\u5728\u4e8c\u7ef4\u5e73\u9762\u4e0a\u65bd\u52a0\u4e8c\u7ef4\u5377\u79ef\u3002 \u591a\u5c3a\u5ea6\u5224\u522b\u5668 \u591a\u5c3a\u5ea6\u5224\u522b\u5668\u7684\u6838\u5fc3\u662f\u591a\u6b21\u5e73\u5747\u6c60\u5316\uff0c\u7f29\u77ed\u5e8f\u5217\u957f\u5ea6\uff0c\u6bcf\u6b21\u5e8f\u5217\u957f\u5ea6\u6c60\u5316\u81f3\u539f\u6765\u7684\u4e00\u534a\uff0c\u7136\u540e\u8fdb\u884c\u5377\u79ef\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u591a\u5c3a\u5ea6\u5224\u522b\u5668\u9996\u5148\u5bf9\u539f\u6837\u672c\u70b9\u8fdb\u884c\u4e00\u6b21\"\u539f\u5c3a\u5bf8\u5224\u522b\"\uff0c\u5176\u4e2d\"\u539f\u5c3a\u5bf8\u5224\u522b\"\u6a21\u5757\u4e2d\u4e00\u7ef4\u5377\u79ef\u7684\u53c2\u6570\u89c4\u8303\u5316\u65b9\u6cd5\u4e3a\u8c31\u5f52\u4e00\u5316\uff08spectral_norm\uff09\uff1b\u63a5\u7740\u5bf9\u6837\u672c\u70b9\u5e8f\u5217\u8fdb\u884c\u5e73\u5747\u6c60\u5316\uff0c\u4f9d\u6b21\u5c06\u5e8f\u5217\u957f\u5ea6\u51cf\u534a\uff0c\u7136\u540e\u5bf9\"\u4e0b\u91c7\u6837\"\u7684\u6837\u672c\u70b9\u5e8f\u5217\u8fdb\u884c\u5224\u522b\uff0c\u8be5\u6a21\u5757\u4e2d\u4e00\u7ef4\u5377\u79ef\u7684\u53c2\u6570\u89c4\u8303\u5316\u65b9\u6cd5\u4e3a\u6743\u91cd\u5f52\u4e00\u5316\uff08weight_norm\uff09\u3002\u5728\u6bcf\u4e00\u4e2a\u7279\u5b9a\u5c3a\u5ea6\u7684\u5b50\u5224\u522b\u5668\u4e2d\uff0c\u9996\u5148\u8fdb\u884c\u82e5\u5e72\u5c42\u5206\u7ec4\u5377\u79ef\uff0c\u5e76\u5bf9\u5377\u79ef\u7684\u53c2\u6570\u8fdb\u884c\u89c4\u8303\u5316\uff1b\u63a5\u7740\u5229\u7528leaky_relu\u8fdb\u884c\u6fc0\u6d3b\uff1b\u5728\u7ecf\u8fc7\u591a\u4e2a\u5377\u79ef\u5c42\u4e4b\u540e\uff0c\u6700\u540e\u5229\u7528\u8f93\u51fa\u901a\u9053\u4e3a1\u7684\u5377\u79ef\u5c42\u8fdb\u884c\u540e\u5904\u7406\uff0c\u5c55\u5e73\u540e\u4f5c\u4e3a\u8f93\u51fa\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 class MultiScaleDiscriminator ( torch . nn . Module ): def __init__ ( self ): super ( MultiScaleDiscriminator , self ) . __init__ () self . discriminators = nn . ModuleList ([ DiscriminatorS ( use_spectral_norm = True ), DiscriminatorS (), DiscriminatorS (), ]) self . meanpools = nn . ModuleList ([ AvgPool1d ( 4 , 2 , padding = 2 ), AvgPool1d ( 4 , 2 , padding = 2 ) ]) def forward ( self , y , y_hat ): y_d_rs = [] y_d_gs = [] fmap_rs = [] fmap_gs = [] for i , d in enumerate ( self . discriminators ): if i != 0 : y = self . meanpools [ i - 1 ]( y ) y_hat = self . meanpools [ i - 1 ]( y_hat ) y_d_r , fmap_r = d ( y ) y_d_g , fmap_g = d ( y_hat ) y_d_rs . append ( y_d_r ) fmap_rs . append ( fmap_r ) y_d_gs . append ( y_d_g ) fmap_gs . append ( fmap_g ) return y_d_rs , y_d_gs , fmap_rs , fmap_gs \u4e0a\u8ff0\u4ee3\u7801\u4e2dy_d_rs\u548cy_d_gs\u5206\u522b\u662f\u771f\u5b9e\u548c\u751f\u6210\u6837\u672c\u7684\u591a\u5c3a\u5ea6\u5224\u522b\u5668\u5c55\u5e73\u540e\u7684\u6574\u4f53\u8f93\u51fa\uff0cfmap_rs\u548cy_d_gs\u5206\u522b\u662f\u771f\u5b9e\u548c\u751f\u6210\u6837\u672c\u7ecf\u8fc7\u6bcf\u4e00\u5c42\u5377\u79ef\u7684\u7279\u5f81\u56fe\uff08feature map\uff09\u3002\u5b50\u5224\u522b\u5668DiscriminatorS\u7531\u82e5\u5e72\u5c42\u5377\u79ef\u7ec4\u6210\uff0c\u6700\u540e\u4e00\u5c42\u8f93\u51fa\u901a\u9053\u4e3a1\uff0c\u4e4b\u540e\u5bf9\u8f93\u51fa\u8fdb\u884c\u5c55\u5e73\u3002\u6ce8\u610f\u5230\uff0c\u4e0eMelGAN\u4e0d\u540c\uff0c\u591a\u5c3a\u5ea6\u5224\u522b\u5668\u7684\u7b2c\u4e00\u4e2a\u5b50\u5224\u522b\u5668DiscriminatorS\u4f7f\u7528\u8c31\u5f52\u4e00\u5316spectral_norm\uff0c\u4e4b\u540e\u4e24\u4e2a\u5b50\u5224\u522b\u5668\u5219\u662f\u6b63\u5e38\u4f7f\u7528\u6743\u91cd\u5f52\u4e00\u5316weight_norm\u89c4\u6574\u53ef\u8bad\u7ec3\u53c2\u6570\u3002\u8c31\u5f52\u4e00\u5316\u5b9e\u9645\u662f\u5728\u6bcf\u6b21\u66f4\u65b0\u5b8c\u53ef\u8bad\u7ec3\u53c2\u6570 \\(W\\) \u4e4b\u540e\uff0c\u90fd\u9664\u4ee5 \\(W\\) \u7684\u5947\u5f02\u503c\uff0c\u4ee5\u4fdd\u8bc1\u6574\u4e2a\u7f51\u7edc\u6ee1\u8db3\u5229\u666e\u5e0c\u8328\u8fde\u7eed\u6027\uff0c\u4f7f\u5f97GAN\u7684\u8bad\u7ec3\u66f4\u7a33\u5b9a\u3002\u53c2\u89c1 GAN \u7684\u8c31\u5f52\u4e00\u5316(Spectral Norm)\u548c\u77e9\u9635\u7684\u5947\u5f02\u503c\u5206\u89e3(Singular Value Decompostion) \u3002DiscriminatorS\u7684\u5177\u4f53\u5b9e\u73b0\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class DiscriminatorS ( torch . nn . Module ): def __init__ ( self , use_spectral_norm = False ): super ( DiscriminatorS , self ) . __init__ () norm_f = weight_norm if use_spectral_norm == False else spectral_norm self . convs = nn . ModuleList ([ norm_f ( Conv1d ( 1 , 128 , 15 , 1 , padding = 7 )), norm_f ( Conv1d ( 128 , 128 , 41 , 2 , groups = 4 , padding = 20 )), norm_f ( Conv1d ( 128 , 256 , 41 , 2 , groups = 16 , padding = 20 )), norm_f ( Conv1d ( 256 , 512 , 41 , 4 , groups = 16 , padding = 20 )), norm_f ( Conv1d ( 512 , 1024 , 41 , 4 , groups = 16 , padding = 20 )), norm_f ( Conv1d ( 1024 , 1024 , 41 , 1 , groups = 16 , padding = 20 )), norm_f ( Conv1d ( 1024 , 1024 , 5 , 1 , padding = 2 )), ]) self . conv_post = norm_f ( Conv1d ( 1024 , 1 , 3 , 1 , padding = 1 )) def forward ( self , x ): fmap = [] for l in self . convs : x = l ( x ) x = F . leaky_relu ( x , LRELU_SLOPE ) fmap . append ( x ) x = self . conv_post ( x ) fmap . append ( x ) x = torch . flatten ( x , 1 , - 1 ) return x , fmap x\u662f\u5b50\u5224\u522b\u5668\u5c55\u5e73\u540e\u7684\u6574\u4f53\u8f93\u51fa\uff0c\u5927\u5c0f\u4e3a[B,l]\uff1bfmap\u662f\u7ecf\u8fc7\u5377\u79ef\u540e\u7684\u7279\u5f81\u56fe\uff08feature map\uff09\uff0c\u7c7b\u578b\u4e3alist\uff0c\u5143\u7d20\u4e2a\u6570\u4e3a\u5377\u79ef\u5c42\u6570\uff0c\u4e0a\u8ff0\u4ee3\u7801\u4e2d\u67098\u4e2a\u5377\u79ef\u5c42\uff0c\u5219fmap\u5143\u7d20\u4e2a\u6570\u4e3a8\uff0c\u6bcf\u4e2a\u5143\u7d20\u5747\u662f\u5927\u5c0f\u4e3a[B,C,l']\u7684\u5f20\u91cf\u3002 \u591a\u5468\u671f\u5224\u522b\u5668 \u591a\u5468\u671f\u5224\u522b\u5668\u7684\u91cd\u70b9\u662f\u5c06\u4e00\u7ef4\u6837\u672c\u70b9\u5e8f\u5217\u4ee5\u4e00\u5b9a\u5468\u671f\u6298\u53e0\u4e3a\u4e8c\u7ef4\u5e73\u9762\uff0c\u4f8b\u5982\u4e00\u7ef4\u6837\u672c\u70b9\u5e8f\u5217[1,2,3,4,5,6]\uff0c\u5982\u679c\u4ee53\u4e3a\u5468\u671f\uff0c\u6298\u53e0\u6210\u4e8c\u7ef4\u5e73\u9762\u5219\u662f[[1,2,3],[4,5,6]]\uff0c\u7136\u540e\u5bf9\u8fd9\u4e2a\u4e8c\u7ef4\u5e73\u9762\u65bd\u52a0\u4e8c\u7ef4\u5377\u79ef\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u6bcf\u4e2a\u7279\u5b9a\u5468\u671f\u7684\u5b50\u5224\u522b\u5668\u9996\u5148\u8fdb\u884c\u586b\u5145\uff0c\u4fdd\u8bc1\u6837\u672c\u70b9\u6570\u662f\u5468\u671f\u7684\u6574\u500d\u6570\uff0c\u4ee5\u65b9\u4fbf\"\u6298\u53e0\"\u4e3a\u4e8c\u7ef4\u5e73\u9762\uff1b\u63a5\u4e0b\u6765\u8fdb\u5165\u591a\u4e2a\u5377\u79ef\u5c42\uff0c\u8f93\u51fa\u901a\u9053\u6570\u5206\u522b\u4e3a[32,128,512,1024]\uff0c\u5377\u79ef\u4e4b\u540e\u5229\u7528leaky_relu\u6fc0\u6d3b\uff0c\u5377\u79ef\u5c42\u53c2\u6570\u89c4\u8303\u5316\u65b9\u6cd5\u5747\u4e3a\u6743\u91cd\u5f52\u4e00\u5316\uff08weight_norm\uff09\uff1b\u7136\u540e\u7ecf\u8fc7\u591a\u4e2a\u5377\u79ef\u5c42\u4e4b\u540e\uff0c\u5229\u7528\u4e00\u4e2a\u8f93\u5165\u901a\u9053\u6570\u4e3a1024\uff0c\u8f93\u51fa\u901a\u9053\u4e3a1\u7684\u5377\u79ef\u5c42\u8fdb\u884c\u540e\u5904\u7406\uff1b\u6700\u540e\u5c55\u5e73\uff0c\u4f5c\u4e3a\u591a\u5468\u671f\u5224\u522b\u5668\u7684\u6700\u7ec8\u8f93\u51fa\u3002\u591a\u5468\u671f\u5224\u522b\u5668\u5305\u542b\u591a\u4e2a\u5468\u671f\u4e0d\u540c\u7684\u5b50\u5224\u522b\u5668\uff0c\u5728\u8bba\u6587\u4ee3\u7801\u4e2d\u5468\u671f\u6570\u5206\u522b\u8bbe\u7f6e\u4e3a[2,3,5,7,11]\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class MultiPeriodDiscriminator ( torch . nn . Module ): def __init__ ( self ): super ( MultiPeriodDiscriminator , self ) . __init__ () self . discriminators = nn . ModuleList ([ DiscriminatorP ( 2 ), DiscriminatorP ( 3 ), DiscriminatorP ( 5 ), DiscriminatorP ( 7 ), DiscriminatorP ( 11 ), ]) def forward ( self , y , y_hat ): y_d_rs = [] y_d_gs = [] fmap_rs = [] fmap_gs = [] for i , d in enumerate ( self . discriminators ): y_d_r , fmap_r = d ( y ) y_d_g , fmap_g = d ( y_hat ) y_d_rs . append ( y_d_r ) fmap_rs . append ( fmap_r ) y_d_gs . append ( y_d_g ) fmap_gs . append ( fmap_g ) return y_d_rs , y_d_gs , fmap_rs , fmap_gs \u4e0a\u8ff0\u4ee3\u7801\u4e2dy_d_rs\u548cy_d_gs\u5206\u522b\u662f\u771f\u5b9e\u548c\u751f\u6210\u6837\u672c\u7684\u591a\u5468\u671f\u5224\u522b\u5668\u8f93\u51fa\uff0cfmap_rs\u548cfmap_gs\u5206\u522b\u662f\u771f\u5b9e\u548c\u751f\u6210\u6837\u672c\u7ecf\u8fc7\u6bcf\u4e00\u5c42\u5377\u79ef\u540e\u8f93\u51fa\u7684\u7279\u5f81\u56fe\uff08feature map\uff09\u3002\u5b50\u5224\u522b\u5668DiscriminatorP\u7531\u82e5\u5e72\u5c42\u4e8c\u7ef4\u5377\u79ef\u7ec4\u6210\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 class DiscriminatorP ( torch . nn . Module ): def __init__ ( self , period , kernel_size = 5 , stride = 3 , use_spectral_norm = False ): super ( DiscriminatorP , self ) . __init__ () self . period = period norm_f = weight_norm if use_spectral_norm == False else spectral_norm self . convs = nn . ModuleList ([ norm_f ( Conv2d ( 1 , 32 , ( kernel_size , 1 ), ( stride , 1 ), padding = ( get_padding ( 5 , 1 ), 0 ))), norm_f ( Conv2d ( 32 , 128 , ( kernel_size , 1 ), ( stride , 1 ), padding = ( get_padding ( 5 , 1 ), 0 ))), norm_f ( Conv2d ( 128 , 512 , ( kernel_size , 1 ), ( stride , 1 ), padding = ( get_padding ( 5 , 1 ), 0 ))), norm_f ( Conv2d ( 512 , 1024 , ( kernel_size , 1 ), ( stride , 1 ), padding = ( get_padding ( 5 , 1 ), 0 ))), norm_f ( Conv2d ( 1024 , 1024 , ( kernel_size , 1 ), 1 , padding = ( 2 , 0 ))), ]) self . conv_post = norm_f ( Conv2d ( 1024 , 1 , ( 3 , 1 ), 1 , padding = ( 1 , 0 ))) def forward ( self , x ): fmap = [] # 1d to 2d b , c , t = x . shape if t % self . period != 0 : # pad first n_pad = self . period - ( t % self . period ) x = F . pad ( x , ( 0 , n_pad ), \"reflect\" ) t = t + n_pad x = x . view ( b , c , t // self . period , self . period ) for l in self . convs : x = l ( x ) x = F . leaky_relu ( x , LRELU_SLOPE ) fmap . append ( x ) x = self . conv_post ( x ) fmap . append ( x ) x = torch . flatten ( x , 1 , - 1 ) return x , fmap x\u662f\u5b50\u5224\u522b\u5668\u5c55\u5e73\u540e\u7684\u6574\u4f53\u8f93\u51fa\uff0c\u5927\u5c0f\u4e3a[B,l]\uff1bfmap\u662f\u7ecf\u8fc7\u6bcf\u4e00\u5c42\u5377\u79ef\u540e\u7684\u7279\u5f81\u56fe\uff08feature map\uff09\uff0c\u7c7b\u578b\u4e3alist\uff0c\u5143\u7d20\u4e2a\u6570\u4e3a\u5377\u79ef\u5c42\u6570\uff0c\u4e0a\u8ff0\u4ee3\u7801\u4e2d\u67096\u4e2a\u5377\u79ef\u5c42\uff0c\u5219fmap\u5143\u7d20\u4e2a\u6570\u4e3a6\uff0c\u6bcf\u4e2a\u5143\u7d20\u662f\u5927\u5c0f\u4e3a[B,C,l',period]\u7684\u5f20\u91cf\u3002 \u635f\u5931\u51fd\u6570\u7b80\u4ecb HiFiGAN\u7684\u635f\u5931\u51fd\u6570\u4e3b\u8981\u5305\u62ec\u4e09\u5757\uff0c\u4e00\u4e2a\u662fGAN\u539f\u59cb\u7684\u751f\u6210\u5bf9\u6297\u635f\u5931\uff08GAN Loss\uff09\uff1b\u7b2c\u4e8c\u662f\u6885\u5c14\u9891\u8c31\u635f\u5931\uff08Mel-Spectrogram Loss\uff09\uff0c\u5c06\u751f\u6210\u97f3\u9891\u8f6c\u6362\u56de\u6885\u5c14\u9891\u8c31\u4e4b\u540e\uff0c\u8ba1\u7b97\u771f\u5b9e\u548c\u751f\u6210\u97f3\u9891\u5bf9\u5e94\u6885\u5c14\u9891\u8c31\u4e4b\u95f4\u7684L1\u8ddd\u79bb\uff1b\u7b2c\u4e09\u662f\u7279\u5f81\u5339\u914d\u635f\u5931\uff08Feature Match Loss\uff09\uff0c\u4e3b\u8981\u662f\u5bf9\u6bd4\u771f\u5b9e\u548c\u5408\u6210\u97f3\u9891\u5728\u4e2d\u95f4\u5377\u79ef\u5c42\u4e0a\u7684\u5dee\u5f02\u3002 \u751f\u6210\u5bf9\u6297\u635f\u5931 HiFiGAN\u4ecd\u7136\u662f\u4e00\u4e2a\u751f\u6210\u5bf9\u6297\u7f51\u7edc\uff0c\u5224\u522b\u5668\u8ba1\u7b97\u8f93\u5165\u662f\u771f\u5b9e\u6837\u672c\u7684\u6982\u7387\uff0c\u751f\u6210\u5668\u751f\u6210\u4ee5\u5047\u4e71\u771f\u7684\u6837\u672c\uff0c\u6700\u7ec8\u8fbe\u5230\u751f\u6210\u5668\u5408\u6210\u63a5\u8fd1\u771f\u5b9e\u7684\u6837\u672c\uff0c\u4ee5\u81f4\u4e8e\u5224\u522b\u5668\u65e0\u6cd5\u533a\u5206\u771f\u5b9e\u548c\u751f\u6210\u6837\u672c\u3002HiFiGAN\u4f7f\u7528 \u6700\u5c0f\u4e8c\u4e58GAN\uff08LS-GAN\uff09 \uff0c\u5c06\u539f\u59cbGAN\u4e2d\u7684\u4e8c\u5143\u4ea4\u53c9\u71b5\u66ff\u6362\u4e3a\u6700\u5c0f\u4e8c\u4e58\u635f\u5931\u51fd\u6570\u3002\u5224\u522b\u5668\u7684\u751f\u6210\u5bf9\u6297\u635f\u5931\u5b9a\u4e49\u4e3a\uff1a \\[ {\\rm L}_{Adv}(D;G)=\\mathbb{E}_{(x,s)}[(D(x)-1)^2+(D(G(s)))^2] \\] \u5bf9\u5e94\u7684\u4ee3\u7801\u5b9e\u73b0\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 def discriminator_loss ( disc_real_outputs , disc_generated_outputs ): loss = 0 r_losses = [] g_losses = [] for dr , dg in zip ( disc_real_outputs , disc_generated_outputs ): r_loss = torch . mean (( dr - 1 ) ** 2 ) g_loss = torch . mean ( dg ** 2 ) loss += ( r_loss + g_loss ) r_losses . append ( r_loss . item ()) g_losses . append ( g_loss . item ()) return loss , r_losses , g_losses \u751f\u6210\u5668\u7684\u751f\u6210\u5bf9\u6297\u635f\u5931\u5b9a\u4e49\u4e3a\uff1a \\[ {\\rm L}_{Adv}(G;D)=\\mathbb{E}_{s}[(D(G(s))-1)^2] \\] \u5176\u4e2d\uff0c \\(x\\) \u8868\u793a\u771f\u5b9e\u97f3\u9891\uff0c \\(s\\) \u8868\u793a\u6885\u5c14\u9891\u8c31\u3002 \u5bf9\u5e94\u7684\u751f\u6210\u5668\u4ee3\u7801\u5b9e\u73b0\uff1a 1 2 3 4 5 6 7 8 9 def generator_loss ( disc_outputs ): loss = 0 gen_losses = [] for dg in disc_outputs : l = torch . mean (( dg - 1 ) ** 2 ) gen_losses . append ( l ) loss += l return loss , gen_losses \u66f4\u8be6\u5c3d\u5173\u4e8eGAN\u7684\u7406\u8bba\u53c2\u89c1\uff1a GAN\u4e07\u5b57\u957f\u6587\u7efc\u8ff0 \u6885\u5c14\u9891\u8c31\u635f\u5931 \u501f\u9274Parallel WaveGAN\u7b49\u524d\u4eba\u5de5\u4f5c\uff0c\u5411GAN\u4e2d\u5f15\u5165\u91cd\u5efa\u635f\u5931\u548c\u6885\u5c14\u9891\u8c31\u635f\u5931\u53ef\u4ee5\u63d0\u9ad8\u6a21\u578b\u8bad\u7ec3\u521d\u671f\u7684\u7a33\u5b9a\u6027\u3001\u751f\u6210\u5668\u7684\u8bad\u7ec3\u6548\u7387\u548c\u5408\u6210\u8bed\u97f3\u7684\u81ea\u7136\u5ea6\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u6885\u5c14\u9891\u8c31\u635f\u5931\u5c31\u662f\u8ba1\u7b97\u5408\u6210\u548c\u771f\u5b9e\u8bed\u97f3\u5bf9\u5e94\u9891\u8c31\u4e4b\u95f4\u7684L1\u8ddd\u79bb\uff1a \\[ {\\rm L}_{Mel}(G)=E_{(x,s)}[||\\phi(x)-\\phi(G(s))||_1] \\] \u5176\u4e2d\uff0c \\(\\phi\\) \u8868\u793a\u5c06\u8bed\u97f3\u8f6c\u6362\u4e3a\u6885\u5c14\u9891\u8c31\u7684\u6620\u5c04\u51fd\u6570\u3002 \u5bf9\u5e94\u7684\u635f\u5931\u51fd\u6570\u5b9e\u73b0\uff1a 1 loss_mel = F . l1_loss ( y_mel , y_g_hat_mel ) \u4e0a\u8ff0\u4ee3\u7801\u4e2d\uff0cy_mel\u8868\u793a\u771f\u5b9e\u8bed\u97f3\u5bf9\u5e94\u7684\u6885\u5c14\u9891\u8c31\uff0cy_g_hat_mel\u8868\u793a\u6885\u5c14\u9891\u8c31\u5408\u6210\u8bed\u97f3\u4e4b\u540e\uff0c\u5408\u6210\u8bed\u97f3\u53c8\u8f6c\u6362\u56de\u6765\u5f97\u5230\u7684\u6885\u5c14\u9891\u8c31\u3002 \u7279\u5f81\u5339\u914d\u635f\u5931 \u7279\u5f81\u5339\u914d\u635f\u5931\u662f\u7528\u6765\u5ea6\u91cf\u795e\u7ecf\u7f51\u7edc\u4ece\u771f\u5b9e\u548c\u5408\u6210\u8bed\u97f3\u4e2d\u63d0\u53d6\u7684\u7279\u5f81\u5dee\u5f02\uff0c\u5177\u4f53\u6765\u8bf4\uff0c\u5c31\u662f\u8ba1\u7b97\u771f\u5b9e\u548c\u5408\u6210\u8bed\u97f3\u7ecf\u8fc7\u7279\u5f81\u63d0\u53d6\u5c42\u4e4b\u540e\u8f93\u51fa\u4e4b\u95f4\u7684L1\u8ddd\u79bb\uff1a \\[ {\\rm L}_{FM}(G;D)=\\mathbb{E}_{x,s}[\\sum_{i=1}^T\\frac{1}{N_i}||D^i(x)-D^i(G(s))||_1] \\] \u5176\u4e2d\uff0c \\(T\\) \u8868\u793a\u5224\u522b\u5668\u4e2d\u7279\u5f81\u63d0\u53d6\u5c42\u7684\u5c42\u6570\uff0c \\(D^i\\) \u8868\u793a\u63d0\u53d6\u7684\u7279\u5f81\uff0c \\(N_i\\) \u8868\u793a\u7b2c \\(i\\) \u5c42\u5224\u522b\u5668\u7f51\u7edc\u63d0\u53d6\u7684\u7279\u5f81\u6570\u91cf\u3002\u5bf9\u5e94\u7684\u4ee3\u7801\u4e3a\uff1a 1 2 3 4 5 6 7 def feature_loss ( fmap_r , fmap_g ): loss = 0 for dr , dg in zip ( fmap_r , fmap_g ): for rl , gl in zip ( dr , dg ): loss += torch . mean ( torch . abs ( rl - gl )) return loss \u6574\u4f53\u635f\u5931 \u751f\u6210\u5668\u7684\u6574\u4f53\u635f\u5931\u4e3a\uff1a \\[ {\\rm L}_G={\\rm L}_{Adv}(G;D)+\\lambda_{fm}{\\rm L}_{FM}(G;D)+\\lambda_{mel}{\\rm L}_{Mel}(G) \\] \u5176\u4e2d\uff0c \\(\\lambda_{fm}\\) \u548c \\(\\lambda_{mel}\\) \u5206\u522b\u4e3a\u7279\u5f81\u5339\u914d\u548c\u6885\u5c14\u9891\u8c31\u635f\u5931\u7684\u52a0\u6743\u7cfb\u6570\uff0c\u5b9e\u9a8c\u4e2d \\(\\lambda_{fm}=2,\\lambda_{mel}=45\\) \u3002 \u56e0\u4e3aHiFiGAN\u7684\u5224\u522b\u5668\u662f\u7531\u591a\u5c3a\u5ea6\u5224\u522b\u5668\u548c\u591a\u5468\u671f\u5224\u522b\u5668\u7ec4\u6210\uff0c\u56e0\u6b64\u751f\u6210\u5668\u7684\u603b\u4f53\u635f\u5931\u53c8\u53ef\u4ee5\u5199\u4f5c\uff1a \\[ {\\rm L}_G=\\sum_{k=1}^K[{\\rm L}_{Adv}(G;D_k)+\\lambda_{fm}{\\rm L}_{FM}(G;D_k)]+\\lambda_{mel}{\\rm L}_{Mel}(G) \\] \u5176\u4e2d\uff0c \\(K\\) \u4e3a\u591a\u5c3a\u5ea6\u5224\u522b\u5668\u548c\u591a\u5468\u671f\u5224\u522b\u5668\u7684\u4e2a\u6570\uff0c \\(D_k\\) \u8868\u793a\u7b2c \\(k\\) \u4e2aMPD\u548cMSD\u7684\u5b50\u5224\u522b\u5668\u3002 \u5bf9\u5e94\u7684\u4ee3\u7801\u4e3a\uff1a 1 2 3 4 5 6 7 8 9 10 # L1 Mel-Spectrogram Loss loss_mel = F . l1_loss ( y_mel , y_g_hat_mel ) * 45 y_df_hat_r , y_df_hat_g , fmap_f_r , fmap_f_g = mpd ( y , y_g_hat ) y_ds_hat_r , y_ds_hat_g , fmap_s_r , fmap_s_g = msd ( y , y_g_hat ) loss_fm_f = feature_loss ( fmap_f_r , fmap_f_g ) loss_fm_s = feature_loss ( fmap_s_r , fmap_s_g ) loss_gen_f , losses_gen_f = generator_loss ( y_df_hat_g ) loss_gen_s , losses_gen_s = generator_loss ( y_ds_hat_g ) loss_gen_all = loss_gen_s + loss_gen_f + loss_fm_s + loss_fm_f + loss_mel \u5224\u522b\u5668\u7684\u6574\u4f53\u635f\u5931\u4e3a\uff1a \\[ {\\rm L}_D={\\rm L}_{Adv}(D;G) \\] \u7c7b\u4f3c\u4e8e\u751f\u6210\u5668\uff0c\u7531\u4e8eHiFiGAN\u62e5\u6709\u591a\u4e2a\u5224\u522b\u5668\uff0c\u56e0\u6b64\u5224\u522b\u5668\u7684\u6574\u4f53\u635f\u5931\u53ef\u4ee5\u5199\u4f5c\uff1a \\[ {\\rm L}_D=\\sum_{k=1}^K{\\rm L}_{Adv}(D_k;G) \\] \u5176\u4e2d\uff0c \\(K\\) \u4e3a\u591a\u5c3a\u5ea6\u5224\u522b\u5668\u548c\u591a\u5468\u671f\u5224\u522b\u5668\u7684\u4e2a\u6570\uff0c \\(D_k\\) \u8868\u793a\u7b2c \\(k\\) \u4e2aMPD\u548cMSD\u7684\u5b50\u5224\u522b\u5668\u3002 \u5bf9\u5e94\u7684\u4ee3\u7801\u4e3a\uff1a 1 2 3 4 5 6 7 8 9 # MPD y_df_hat_r , y_df_hat_g , _ , _ = mpd ( y , y_g_hat . detach ()) loss_disc_f , losses_disc_f_r , losses_disc_f_g = discriminator_loss ( y_df_hat_r , y_df_hat_g ) # MSD y_ds_hat_r , y_ds_hat_g , _ , _ = msd ( y , y_g_hat . detach ()) loss_disc_s , losses_disc_s_r , losses_disc_s_g = discriminator_loss ( y_ds_hat_r , y_ds_hat_g ) loss_disc_all = loss_disc_s + loss_disc_f","title":"\u58f0\u7801\u5668"},{"location":"tts/%E5%A3%B0%E7%A0%81%E5%99%A8/#_1","text":"\u58f0\u7801\u5668\uff08Vocoder\uff09\uff0c\u53c8\u79f0\u8bed\u97f3\u4fe1\u53f7\u5206\u6790\u5408\u6210\u7cfb\u7edf\uff0c\u8d1f\u8d23\u5bf9\u58f0\u97f3\u8fdb\u884c\u5206\u6790\u548c\u5408\u6210\uff0c\u4e3b\u8981\u7528\u4e8e\u5408\u6210\u4eba\u7c7b\u7684\u8bed\u97f3\u3002\u58f0\u7801\u5668\u4e3b\u8981\u7531\u4ee5\u4e0b\u529f\u80fd\uff1a \u5206\u6790Analysis \u64cd\u7eb5Manipulation \u5408\u6210Synthesis \u5206\u6790\u8fc7\u7a0b\u4e3b\u8981\u662f\u4ece\u4e00\u6bb5\u539f\u59cb\u58f0\u97f3\u6ce2\u5f62\u4e2d\u63d0\u53d6\u58f0\u5b66\u7279\u5f81\uff0c\u6bd4\u5982\u7ebf\u6027\u8c31\u3001MFCC\uff1b\u64cd\u7eb5\u8fc7\u7a0b\u662f\u6307\u5bf9\u63d0\u53d6\u7684\u539f\u59cb\u58f0\u5b66\u7279\u5f81\u8fdb\u884c\u538b\u7f29\u7b49\u964d\u7ef4\u5904\u7406\uff0c\u4f7f\u5176\u8868\u5f81\u80fd\u529b\u8fdb\u4e00\u6b65\u63d0\u5347\uff1b\u5408\u6210\u8fc7\u7a0b\u662f\u6307\u5c06\u6b64\u58f0\u5b66\u7279\u5f81\u6062\u590d\u81f3\u539f\u59cb\u6ce2\u5f62\u3002\u4eba\u7c7b\u53d1\u58f0\u673a\u7406\u53ef\u4ee5\u7528\u7ecf\u5178\u7684\u6e90-\u6ee4\u6ce2\u5668\u6a21\u578b\u5efa\u6a21\uff0c\u4e5f\u5c31\u662f\u8f93\u5165\u7684\u6fc0\u52b1\u90e8\u5206\u901a\u8fc7\u7ebf\u6027\u65f6\u4e0d\u53d8\u8fdb\u884c\u64cd\u4f5c\uff0c\u8f93\u51fa\u7684\u58f0\u9053\u8c10\u632f\u90e8\u5206\u4f5c\u4e3a\u5408\u6210\u8bed\u97f3\u3002\u8f93\u5165\u90e8\u5206\u88ab\u79f0\u4e3a\u6fc0\u52b1\u90e8\u5206\uff08Source Excitation Part\uff09\uff0c\u6fc0\u52b1\u90e8\u5206\u5bf9\u5e94\u80ba\u90e8\u6c14\u6d41\u4e0e\u58f0\u5e26\u5171\u540c\u4f5c\u7528\u5f62\u6210\u7684\u6fc0\u52b1\uff0c\u8f93\u51fa\u7ed3\u679c\u88ab\u79f0\u4e3a\u58f0\u9053\u8c10\u632f\u90e8\u5206\uff08Vocal Tract Resonance Part\uff09\uff0c\u5bf9\u5e94\u4eba\u7c7b\u53d1\u97f3\u7ed3\u6784\uff0c\u800c\u58f0\u9053\u8c10\u632f\u90e8\u5206\u5bf9\u5e94\u4e8e\u58f0\u9053\u7684\u8c03\u97f3\u90e8\u5206\uff0c\u5bf9\u58f0\u97f3\u8fdb\u884c\u8c03\u5236\u3002 \u58f0\u7801\u5668\u7684\u53d1\u5c55\u53ef\u4ee5\u5206\u4e3a\u4e24\u4e2a\u9636\u6bb5\uff0c\u5305\u62ec\u7528\u4e8e\u7edf\u8ba1\u53c2\u6570\u8bed\u97f3\u5408\u6210\uff08Statistical Parameteric Speech Synthesis\uff0cSPSS\uff09\u57fa\u4e8e\u4fe1\u53f7\u5904\u7406\u7684\u58f0\u7801\u5668\uff0c\u548c\u57fa\u4e8e\u795e\u7ecf\u7f51\u7edc\u7684\u58f0\u7801\u5668\u3002\u5e38\u7528\u57fa\u4e8e\u4fe1\u53f7\u5904\u7406\u7684\u58f0\u7801\u5668\u5305\u62ecGriffin-Lim\uff0cSTRAIGHT\u548cWORLD\u3002\u65e9\u671f\u795e\u7ecf\u58f0\u7801\u5668\u5305\u62ecWaveNet\u3001WaveRNN\u7b49\uff0c\u8fd1\u5e74\u6765\u795e\u7ecf\u58f0\u7801\u5668\u53d1\u5c55\u8fc5\u901f\uff0c\u6d8c\u73b0\u51fa\u5305\u62ecMelGAN\u3001HiFiGAN\u3001LPCNet\u3001NHV\u7b49\u4f18\u79c0\u7684\u5de5\u4f5c\u3002 Griffin D. and Lim J. (1984). \"Signal Estimation from Modified Short-Time Fourier Transform\\\". IEEE Transactions on Acoustics, Speech and Signal Processing. 32 (2): 236--243. doi:10.1109/TASSP.1984.1164317 Kawahara H. Speech representation and transformation using adaptive interpolation of weighted spectrum: vocoder revisited[C]. 1997 IEEE International Conference on Acoustics, Speech, and Signal Processing. IEEE, 1997, 2: 1303-1306. Morise M, Yokomori F, Ozawa K. World: a vocoder-based high-quality speech synthesis system for real-time applications[J]. IEICE TRANSACTIONS on Information and Systems, 2016, 99(7): 1877-1884.","title":"\u58f0\u7801\u5668"},{"location":"tts/%E5%A3%B0%E7%A0%81%E5%99%A8/#griffin-lim","text":"\u5728\u65e9\u671f\u7684\u5f88\u591aTacotron\u5f00\u6e90\u8bed\u97f3\u5408\u6210\u6a21\u578b\u4e2d\u5747\u91c7\u7528Griffin-Lim\u58f0\u7801\u5668\uff0c\u540c\u65f6\u4e5f\u6709\u4e00\u4e9b\u4e13\u95e8\u7684\u5f00\u6e90\u5b9e\u73b0\uff0c\u6bd4\u5982 GriffinLim \u3002","title":"Griffin-Lim\u58f0\u7801\u5668"},{"location":"tts/%E5%A3%B0%E7%A0%81%E5%99%A8/#_2","text":"\u539f\u59cb\u7684\u97f3\u9891\u5f88\u96be\u63d0\u53d6\u7279\u5f81\uff0c\u9700\u8981\u8fdb\u884c\u5085\u91cc\u53f6\u53d8\u6362\u5c06\u65f6\u57df\u4fe1\u53f7\u8f6c\u6362\u5230\u9891\u57df\u8fdb\u884c\u5206\u6790\u3002\u97f3\u9891\u8fdb\u884c\u5085\u91cc\u53f6\u53d8\u6362\u540e\uff0c\u7ed3\u679c\u4e3a\u590d\u6570\uff0c\u590d\u6570\u7684\u7edd\u5bf9\u503c\u5c31\u662f\u5e45\u5ea6\u8c31\uff0c\u800c\u590d\u6570\u7684\u5b9e\u90e8\u4e0e\u865a\u90e8\u4e4b\u95f4\u5f62\u6210\u7684\u89d2\u5ea6\u5c31\u662f\u76f8\u4f4d\u8c31\u3002\u7ecf\u8fc7\u5085\u91cc\u53f6\u53d8\u6362\u4e4b\u540e\u83b7\u5f97\u7684\u5e45\u5ea6\u8c31\u7279\u5f81\u660e\u663e\uff0c\u53ef\u4ee5\u6e05\u695a\u770b\u5230\u57fa\u9891\u548c\u5bf9\u5e94\u7684\u8c10\u6ce2\u3002\u57fa\u9891\u4e00\u822c\u662f\u58f0\u5e26\u7684\u9891\u7387\uff0c\u800c\u8c10\u6ce2\u5219\u662f\u58f0\u97f3\u7ecf\u8fc7\u58f0\u9053\u3001\u53e3\u8154\u3001\u9f3b\u8154\u7b49\u5668\u5b98\u540e\u4ea7\u751f\u7684\u5171\u632f\u9891\u7387\uff0c\u4e14\u9891\u7387\u662f\u57fa\u9891\u7684\u6574\u6570\u500d\u3002 Griffin-Lim\u5c06\u5e45\u5ea6\u8c31\u6062\u590d\u4e3a\u539f\u59cb\u6ce2\u5f62\uff0c\u4f46\u662f\u76f8\u6bd4\u539f\u59cb\u6ce2\u5f62\uff0c\u5e45\u5ea6\u8c31\u7f3a\u5931\u4e86\u539f\u59cb\u76f8\u4f4d\u8c31\u4fe1\u606f\u3002\u97f3\u9891\u4e00\u822c\u91c7\u7528\u7684\u662f\u77ed\u65f6\u5085\u91cc\u53f6\u53d8\u5316\uff0c\u56e0\u6b64\u9700\u8981\u5c06\u97f3\u9891\u5206\u5272\u6210\u5e27\uff08\u6bcf\u5e2720ms~50ms\uff09\uff0c\u518d\u8fdb\u884c\u5085\u91cc\u53f6\u53d8\u6362\uff0c\u5e27\u4e0e\u5e27\u4e4b\u95f4\u662f\u6709\u91cd\u53e0\u7684\u3002Griffin-Lim\u7b97\u6cd5\u5229\u7528\u4e24\u5e27\u4e4b\u95f4\u6709\u91cd\u53e0\u90e8\u5206\u7684\u8fd9\u4e2a\u7ea6\u675f\u91cd\u6784\u4fe1\u53f7\uff0c\u56e0\u6b64\u5982\u679c\u4f7f\u7528Griffin-Lim\u7b97\u6cd5\u8fd8\u539f\u97f3\u9891\u4fe1\u53f7\uff0c\u5c31\u9700\u8981\u5c3d\u91cf\u4fdd\u8bc1\u4e24\u5e27\u4e4b\u95f4\u91cd\u53e0\u8d8a\u591a\u8d8a\u597d\uff0c\u4e00\u822c\u5e27\u79fb\u4e3a\u6bcf\u4e00\u5e27\u957f\u5ea6\u768425%\u5de6\u53f3\uff0c\u4e5f\u5c31\u662f\u5e27\u4e4b\u95f4\u91cd\u53e075%\u4e3a\u5b9c\u3002 Griffin-Lim\u5728\u5df2\u77e5\u5e45\u5ea6\u8c31\uff0c\u4e0d\u77e5\u9053\u76f8\u4f4d\u8c31\u7684\u60c5\u51b5\u4e0b\u91cd\u5efa\u8bed\u97f3\uff0c\u7b97\u6cd5\u7684\u5b9e\u73b0\u8f83\u4e3a\u7b80\u5355\uff0c\u6574\u4f53\u662f\u4e00\u79cd\u8fed\u4ee3\u7b97\u6cd5\uff0c\u8fed\u4ee3\u8fc7\u7a0b\u5982\u4e0b\uff1a \u968f\u673a\u521d\u59cb\u5316\u4e00\u4e2a\u76f8\u4f4d\u8c31\uff1b \u7528\u76f8\u4f4d\u8c31\u548c\u5df2\u77e5\u7684\u5e45\u5ea6\u8c31\u7ecf\u8fc7\u9006\u77ed\u65f6\u5085\u91cc\u53f6\u53d8\u6362\uff08ISTFT\uff09\u5408\u6210\u65b0\u8bed\u97f3\uff1b \u5bf9\u5408\u6210\u7684\u8bed\u97f3\u505a\u77ed\u65f6\u5085\u91cc\u53f6\u53d8\u6362\uff0c\u5f97\u5230\u65b0\u7684\u5e45\u5ea6\u8c31\u548c\u76f8\u4f4d\u8c31\uff1b \u4e22\u5f03\u65b0\u7684\u5e45\u5ea6\u8c31\uff0c\u7528\u76f8\u4f4d\u8c31\u548c\u5df2\u77e5\u7684\u5e45\u5ea6\u8c31\u5408\u6210\u8bed\u97f3\uff0c\u5982\u6b64\u91cd\u590d\uff0c\u76f4\u81f3\u8fbe\u5230\u8bbe\u5b9a\u7684\u8fed\u4ee3\u8f6e\u6570\u3002 \u5728\u8fed\u4ee3\u8fc7\u7a0b\u4e2d\uff0c\u9884\u6d4b\u5e8f\u5217\u4e0e\u771f\u5b9e\u5e8f\u5217\u5e45\u5ea6\u8c31\u4e4b\u95f4\u7684\u8ddd\u79bb\u5728\u4e0d\u65ad\u7f29\u5c0f\uff0c\u7c7b\u4f3c\u4e8eEM\u7b97\u6cd5\u3002\u63a8\u5bfc\u8fc7\u7a0b\u53c2\u89c1\uff1a Griffin Lim\u7b97\u6cd5\u7684\u8fc7\u7a0b\u548c\u8bc1\u660e \u548c Griffin Lim\u58f0\u7801\u5668\u4ecb\u7ecd \u3002","title":"\u7b97\u6cd5\u539f\u7406"},{"location":"tts/%E5%A3%B0%E7%A0%81%E5%99%A8/#_3","text":"\u6458\u6284\u81ea Build End-To-End TTS Tacotron: Griffin Lim \u4fe1\u53f7\u4f30\u8ba1\u7b97\u6cd5 \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 def griffin_lim ( stftm_matrix , shape , min_iter = 20 , max_iter = 50 , delta = 20 ): y = np . random . random ( shape ) y_iter = [] for i in range ( max_iter ): if i >= min_iter and ( i - min_iter ) % delta == 0 : y_iter . append (( y , i )) stft_matrix = librosa . core . stft ( y ) stft_matrix = stftm_matrix * stft_matrix / np . abs ( stft_matrix ) y = librosa . core . istft ( stft_matrix ) y_iter . append (( y , max_iter )) return y_iter \u5177\u4f53\u4f7f\u7528\uff1a 1 2 3 4 5 6 7 8 9 10 # assume 1 channel wav file sr , data = scipy . io . wavfile . read ( input_wav_path ) # \u7531 STFT -> STFT magnitude stftm_matrix = np . abs ( librosa . core . stft ( data )) # + random \u6a21\u62df modification stftm_matrix_modified = stftm_matrix + np . random . random ( stftm_matrix . shape ) # Griffin-Lim \u4f30\u8ba1\u97f3\u9891\u4fe1\u53f7 y_iters = griffin_lim ( stftm_matrix_modified , data . shape )","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"tts/%E5%A3%B0%E7%A0%81%E5%99%A8/#straight","text":"","title":"STRAIGHT\u58f0\u7801\u5668"},{"location":"tts/%E5%A3%B0%E7%A0%81%E5%99%A8/#_4","text":"STARIGHT\uff08Speech Transformation and Representation using Adaptive Interpolation of weiGHTed spectrum\uff09\uff0c\u5373\u5229\u7528\u81ea\u9002\u5e94\u52a0\u6743\u8c31\u5185\u63d2\u8fdb\u884c\u8bed\u97f3\u8f6c\u6362\u548c\u8868\u5f81\u3002STRAIGHT\u5c06\u8bed\u97f3\u4fe1\u53f7\u89e3\u6790\u6210\u76f8\u4e92\u72ec\u7acb\u7684\u9891\u8c31\u53c2\u6570\uff08\u8c31\u5305\u7edc\uff09\u548c\u57fa\u9891\u53c2\u6570\uff08\u6fc0\u52b1\u90e8\u5206\uff09\uff0c\u80fd\u591f\u5bf9\u8bed\u97f3\u4fe1\u53f7\u7684\u57fa\u9891\u3001\u65f6\u957f\u3001\u589e\u76ca\u3001\u8bed\u901f\u7b49\u53c2\u6570\u8fdb\u884c\u7075\u6d3b\u7684\u8c03\u6574\uff0c\u8be5\u6a21\u578b\u5728\u5206\u6790\u9636\u6bb5\u4ec5\u9488\u5bf9\u8bed\u97f3\u57fa\u97f3\u3001\u5e73\u6ed1\u529f\u7387\u8c31\u548c\u975e\u5468\u671f\u6210\u52063\u4e2a\u58f0\u5b66\u53c2\u6570\u8fdb\u884c\u5206\u6790\u63d0\u53d6\uff0c\u5728\u5408\u6210\u9636\u6bb5\u5229\u7528\u4e0a\u8ff03\u4e2a\u58f0\u5b66\u53c2\u6570\u8fdb\u884c\u8bed\u97f3\u91cd\u6784\u3002 STRAIGHT\u91c7\u7528\u6e90-\u6ee4\u6ce2\u5668\u8868\u5f81\u8bed\u97f3\u4fe1\u53f7\uff0c\u53ef\u5c06\u8bed\u97f3\u4fe1\u53f7\u770b\u4f5c\u6fc0\u52b1\u4fe1\u53f7\u901a\u8fc7\u65f6\u53d8\u7ebf\u6027\u6ee4\u6ce2\u5668\u7684\u7ed3\u679c\u3002 \u5bf9\u4e8e\u80fd\u91cf\u4fe1\u53f7\u548c\u5468\u671f\u4fe1\u53f7\uff0c\u5176\u5085\u91cc\u53f6\u53d8\u6362\u6536\u655b\uff0c\u56e0\u6b64\u53ef\u4ee5\u7528\u9891\u8c31\uff08Spectrum\uff09\u6765\u63cf\u8ff0\uff1b\u5bf9\u4e8e\u968f\u673a\u4fe1\u53f7\uff0c\u5085\u91cc\u53f6\u53d8\u6362\u4e0d\u6536\u655b\uff0c\u56e0\u6b64\u4e0d\u80fd\u7528\u9891\u8c31\u8fdb\u884c\u63cf\u8ff0\uff0c\u800c\u5e94\u5f53\u4f7f\u7528\u529f\u7387\u8c31\uff08PSD\uff09\uff0c\u4e0d\u4e25\u8c28\u5730\u8bf4\uff0c\u529f\u7387\u8c31\u53ef\u4ee5\u770b\u4f5c\u662f\u968f\u673a\u4fe1\u53f7\u7684\u9891\u8c31\uff0c\u53c2\u89c1 \u529f\u7387\u8c31\u5bc6\u5ea6\uff08PSD\uff09 \u3002","title":"\u6982\u8ff0"},{"location":"tts/%E5%A3%B0%E7%A0%81%E5%99%A8/#_5","text":"\u5e73\u6ed1\u529f\u7387\u8c31\u7684\u63d0\u53d6\uff0c\u5305\u62ec\u4f4e\u9891\u5e26\u8865\u507f\u548c\u6e05\u97f3\u5e27\u5904\u7406\u7b49\u8fc7\u7a0b\u3002STRAIGHT\u5206\u6790\u9636\u6bb5\u7684\u4e00\u4e2a\u5173\u952e\u6b65\u9aa4\u662f\u8fdb\u884c\u81ea\u9002\u5e94\u9891\u8c31\u5206\u6790\uff0c\u83b7\u53d6\u65e0\u5e72\u6270\u4e14\u5e73\u6ed1\u7684\u529f\u7387\u8c31\u3002\u81ea\u9002\u5e94\u52a0\u6743\u8c31\u7684\u63d0\u53d6\u5173\u952e\u5728\u4e8e\u5bf9\u63d0\u53d6\u51fa\u6765\u7684\u529f\u7387\u8c31\u8fdb\u884c\u4e00\u7cfb\u5217\u7684\u5e73\u6ed1\u548c\u8865\u507f\u3002\u5bf9\u8f93\u5165\u4fe1\u53f7\u8fdb\u884c\uff1a\u8bed\u97f3\u4fe1\u53f7\u9884\u5904\u7406->\u529f\u7387\u8c31\u63d0\u53d6->\u4f4e\u9891\u566a\u58f0\u8865\u507f->\u8fc7\u5e73\u6ed1\u8865\u507f->\u9759\u97f3\u5e27\u8c31\u56fe\u7684\u5904\u7406\uff0c\u6700\u540e\u5f97\u5230\u81ea\u9002\u5e94\u529f\u7387\u8c31\u3002 \u975e\u5468\u671f\u6210\u5206\u63d0\u53d6\u3002 \u901a\u8fc7\u5c0f\u6ce2\u65f6\u9891\u5206\u6790\u7684\u65b9\u5f0f\uff0c\u63d0\u53d6\u57fa\u9891\u8f68\u8ff9\u3002\u9996\u5148\u901a\u8fc7\u5bf9\u8bed\u97f3\u4fe1\u53f7\u4e2d\u7684\u57fa\u9891\u4fe1\u606f\u8fdb\u884c\u89e3\u6790\uff0c\u7136\u540e\u8ba1\u7b97\u51fa\u76f8\u5e94\u7684\u77ac\u65f6\u57fa\u9891\u503c\uff0c\u6700\u540e\u5728\u9891\u57df\u8fdb\u884c\u8c10\u6ce2\u89e3\u6790\uff0c\u5e76\u5728\u9891\u7387\u8f74\u8fdb\u884c\u5e73\u6ed1\u5904\u7406\uff0c\u83b7\u5f97\u8bed\u97f3\u4fe1\u53f7\u7684\u5404\u4e2a\u57fa\u9891\u53c2\u6570\u3002","title":"\u7279\u5f81\u63d0\u53d6"},{"location":"tts/%E5%A3%B0%E7%A0%81%E5%99%A8/#_6","text":"STARIGHT\u91c7\u7528PSOLA\u6280\u672f\u548c\u6700\u5c0f\u76f8\u4f4d\u8109\u51b2\u54cd\u5e94\u76f8\u7ed3\u5408\u7684\u65b9\u5f0f\uff0c\u5728\u5408\u6210\u8bed\u97f3\u65f6\u8f93\u5165\u5f85\u5408\u6210\u8bed\u97f3\u7684\u57fa\u97f3\u9891\u7387\u8f68\u8ff9\u548c\u53bb\u9664\u4e86\u5468\u671f\u6027\u7684\u4e8c\u7ef4\u77ed\u65f6\u8c31\u5305\u7edc\u3002 \u5f00\u6e90\u7684STRAIGHT\u58f0\u7801\u5668\u5927\u591a\u662fMATLAB\u5b9e\u73b0\uff0c\u6bd4\u5982 Legacy STRAIGHT \uff0c StraightRepo \u3002\u5728\u5f00\u6e90\u8bed\u97f3\u5408\u6210\u7cfb\u7edf merlin \u4e2d\u5b58\u5728\u53ef\u7528\u7684STRAIGHT\u5de5\u5177\uff0c\u53c2\u89c1 StraightCopySynthesis \u3002","title":"\u8bed\u97f3\u5408\u6210"},{"location":"tts/%E5%A3%B0%E7%A0%81%E5%99%A8/#world","text":"","title":"WORLD\u58f0\u7801\u5668"},{"location":"tts/%E5%A3%B0%E7%A0%81%E5%99%A8/#_7","text":"WORLD\u901a\u8fc7\u83b7\u53d6\u4e09\u4e2a\u58f0\u5b66\u7279\u5f81\u5408\u6210\u539f\u59cb\u8bed\u97f3\uff0c\u8fd9\u4e09\u4e2a\u58f0\u5b66\u7279\u5f81\u5206\u522b\u662f\uff1a\u57fa\u9891\uff08fundamental frequency\uff0cF0\uff09\uff0c\u9891\u8c31\u5305\u7edc\uff08Spectrum Envelop\uff0c\u4e5f\u79f0\u9891\u8c31\u53c2\u6570Spectrum Parameter\uff0cSP\uff09\u548c\u975e\u5468\u671f\u4fe1\u53f7\u53c2\u6570\uff08Aperiodic Parameter\uff0cAP\uff09\u3002 \u57fa\u9891F0 \u57fa\u9891F0\u51b3\u5b9a\u6d4a\u97f3\uff0c\u5bf9\u5e94\u6fc0\u52b1\u90e8\u5206\u7684\u5468\u671f\u8109\u51b2\u5e8f\u5217\uff0c\u5982\u679c\u5c06\u58f0\u5b66\u4fe1\u53f7\u5206\u4e3a\u5468\u671f\u548c\u975e\u5468\u671f\u4fe1\u53f7\uff0c\u57fa\u9891F0\u90e8\u5206\u5305\u542b\u4e86\u8bed\u97f3\u7684\u97f5\u5f8b\u4fe1\u606f\u548c\u7ed3\u6784\u4fe1\u606f\u3002\u5bf9\u4e8e\u4e00\u4e2a\u7531\u632f\u52a8\u800c\u53d1\u51fa\u7684\u58f0\u97f3\u4fe1\u53f7\uff0c\u8fd9\u4e2a\u4fe1\u53f7\u53ef\u4ee5\u770b\u4f5c\u662f\u82e5\u5e72\u7ec4\u9891\u7387\u4e0d\u540c\u7684\u6b63\u5f26\u6ce2\u53e0\u52a0\u800c\u6210\uff0c\u5176\u4e2d\u9891\u7387\u6700\u4f4e\u7684\u6b63\u5f26\u6ce2\u5373\u4e3a \u57fa\u9891 \uff0c\u5176\u5b83\u5219\u4e3a \u6cdb\u97f3 \u3002 WORLD\u63d0\u53d6\u57fa\u9891\u7684\u6d41\u7a0b\uff1a\u9996\u5148\uff0c\u5229\u7528\u4f4e\u901a\u6ee4\u6ce2\u5668\u5bf9\u539f\u59cb\u4fe1\u53f7\u8fdb\u884c\u6ee4\u6ce2\uff1b\u4e4b\u540e\uff0c\u5bf9\u6ee4\u6ce2\u4e4b\u540e\u7684\u4fe1\u53f7\u8fdb\u884c\u8bc4\u4f30\uff0c\u7531\u4e8e\u6ee4\u6ce2\u4e4b\u540e\u7684\u4fe1\u53f7\u5e94\u8be5\u6070\u597d\u662f\u4e00\u4e2a\u6b63\u5f26\u6ce2\uff0c\u6bcf\u4e2a\u6ce2\u6bb5\u7684\u957f\u5ea6\u5e94\u8be5\u6070\u597d\u90fd\u662f\u4e00\u4e2a\u5468\u671f\u957f\u5ea6\uff0c\u56e0\u6b64\u901a\u8fc7\u8ba1\u7b97\u8fd9\u56db\u4e2a\u5468\u671f\u7684\u6807\u51c6\u5dee\uff0c\u53ef\u4ee5\u8bc4\u4f30\u6b64\u6b63\u5f26\u6ce2\u6b63\u786e\u4e0e\u5426\uff1b\u6700\u540e\u9009\u53d6\u6807\u51c6\u5dee\u6700\u5c0f\u5468\u671f\u7684\u5012\u6570\u4f5c\u4e3a\u6700\u7ec8\u7684\u57fa\u9891\u3002 \u9891\u8c31\u5305\u7edcSP \u9891\u8c31\u5305\u7edcSP\u51b3\u5b9a\u97f3\u8272\uff0c\u5bf9\u5e94\u58f0\u9053\u8c10\u632f\u90e8\u5206\u65f6\u4e0d\u53d8\u7cfb\u7edf\u7684\u51b2\u6fc0\u54cd\u5e94\uff0c\u53ef\u4ee5\u770b\u4f5c\u901a\u8fc7\u6b64\u7ebf\u6027\u65f6\u4e0d\u53d8\u7cfb\u7edf\u4e4b\u540e\uff0c\u58f0\u7801\u5668\u4f1a\u5bf9\u6fc0\u52b1\u4e0e\u7cfb\u7edf\u54cd\u5e94\u8fdb\u884c\u5377\u79ef\u3002\u5c06\u4e0d\u540c\u9891\u7387\u7684\u632f\u5e45\u6700\u9ad8\u70b9\u901a\u8fc7\u5e73\u6ed1\u7684\u66f2\u7ebf\u8fde\u63a5\u8d77\u6765\uff0c\u5c31\u662f\u9891\u8c31\u5305\u7edc\uff0c\u6c42\u89e3\u65b9\u6cd5\u6709\u591a\u79cd\uff0c\u5728\u6c42\u89e3\u6885\u5c14\u5012\u8c31\u7cfb\u6570\u65f6\uff0c\u4f7f\u7528\u7684\u662f\u5012\u8c31\u6cd5\u3002 \u5012\u9891\u8c31\uff08Cepstrum\uff09\u4e5f\u79f0\u4e3a\u5012\u8c31\u3001\u4e8c\u6b21\u8c31\u548c\u5bf9\u6570\u529f\u7387\u8c31\u7b49\uff0c\u5012\u9891\u8c31\u7684\u5de5\u7a0b\u5b9a\u4e49\u4e3a\uff1a\u4fe1\u53f7\u529f\u7387\u8c31\u5bf9\u6570\u503c\u8fdb\u884c\u5085\u91cc\u53f6\u9006\u53d8\u6362\u7684\u7ed3\u679c\uff0c\u4e5f\u5c31\u662f\uff1a\u4fe1\u53f7->\u6c42\u529f\u7387\u8c31->\u6c42\u5bf9\u6570->\u6c42\u5085\u91cc\u53f6\u9006\u53d8\u6362\u3002\u53c2\u89c1 \u4fe1\u53f7\u9891\u57df\u5206\u6790\u65b9\u6cd5\u7684\u7406\u89e3\uff08\u9891\u8c31\u3001\u80fd\u91cf\u8c31\u3001\u529f\u7387\u8c31\u3001\u5012\u9891\u8c31\u3001\u5c0f\u6ce2\u5206\u6790\uff09 \u3002 \u975e\u5468\u671f\u4fe1\u53f7\u53c2\u6570AP \u975e\u5468\u671f\u4fe1\u53f7\u53c2\u6570AP\u51b3\u5b9a\u6e05\u97f3\uff0c\u5bf9\u5e94\u6df7\u5408\u6fc0\u52b1\u90e8\u5206\u7684\u975e\u5468\u671f\u8109\u51b2\u5e8f\u5217\uff0c\u4e00\u822c\u7684\u8bed\u97f3\u90fd\u662f\u7531\u5468\u671f\u548c\u975e\u5468\u671f\u4fe1\u53f7\u7ec4\u6210\uff0c\u56e0\u6b64\u9664\u4e86\u4e0a\u8ff0\u7684\u5468\u671f\u4fe1\u53f7\u7684\u58f0\u5b66\u53c2\u6570\uff0c\u8fd8\u9700\u8981\u975e\u5468\u671f\u4fe1\u53f7\u53c2\u6570\uff0c\u624d\u80fd\u591f\u6062\u590d\u51fa\u539f\u59cb\u4fe1\u53f7\u3002\u6df7\u5408\u6fc0\u52b1\u53ef\u4ee5\u901a\u8fc7AP\u6765\u63a7\u5236\u6d4a\u97f3\u6bb5\u4e2d\u5468\u671f\u6fc0\u52b1\u548c\u566a\u97f3\uff08\u975e\u5468\u671f\uff09\u6210\u5206\u7684\u76f8\u5bf9\u6bd4\u91cd\u3002","title":"\u58f0\u5b66\u7279\u5f81"},{"location":"tts/%E5%A3%B0%E7%A0%81%E5%99%A8/#world_1","text":"WORLD\u5305\u542b3\u4e2a\u8bed\u97f3\u5206\u6790\u6a21\u5757\uff0c\u8bed\u97f3\u5206\u6790\u6a21\u578b\u5305\u62ecDIO\u6a21\u5757\u3001CheapTrick\u6a21\u5757\uff0cPLATINUM\u6a21\u5757\u3002 WORLD\u53ef\u4ee5\u63d0\u53d6\u539f\u59cb\u6ce2\u5f62\u4e2d\u7684\u57fa\u9891F0\uff0c\u57fa\u9891\u5305\u7edcSP\u548c\u975e\u5468\u671f\u4fe1\u53f7AP\uff0c\u8fd9\u4e09\u79cd\u58f0\u5b66\u7279\u5f81\u5bf9\u5e94\u4e09\u79cd\u63d0\u53d6\u7b97\u6cd5\uff1aDIO\u8f93\u5165\u6ce2\u5f62\u63d0\u53d6\u57fa\u9891\uff0cCheapTrick\u8f93\u5165\u57fa\u9891\u3001\u6ce2\u5f62\u63d0\u53d6\u9891\u8c31\u5305\u7edc\uff0cD4C\u8f93\u5165\u57fa\u9891\u3001\u9891\u8c31\u5305\u7edc\u548c\u6ce2\u5f62\u63d0\u53d6\u975e\u5468\u671f\u4fe1\u53f7\u3002\u6700\u7ec8\uff0c\u901a\u8fc7\u8fd9\u4e09\u79cd\u58f0\u5b66\u7279\u5f81\u901a\u8fc7\u6700\u5c0f\u76f8\u4f4d\u8c31\u4e0e\u6fc0\u52b1\u4fe1\u53f7\u5377\u79ef\u540e\uff0c\u8f93\u51fa\u6062\u590d\u7684\u539f\u59cb\u6ce2\u5f62\u3002","title":"WORLD\u7684\u5206\u6790\u529f\u80fd"},{"location":"tts/%E5%A3%B0%E7%A0%81%E5%99%A8/#diof0","text":"F0\u662f\u5468\u671f\u4fe1\u53f7\u6700\u957f\u6301\u7eed\u65f6\u95f4\u7684\u5012\u6570\uff0c\u53cd\u8fc7\u6765\uff0c\u5468\u671f\u662f\u57fa\u9891\u7684\u6574\u6570\u5206\u4e4b\u4e00\u3002\u57fa\u9891\u4f1a\u4ea7\u751f\u4e8c\u6b21\u8c10\u6ce2\u3001\u4e09\u6b21\u8c10\u6ce2\u7b49\uff0c\u6700\u957f\u7684\u5468\u671f\u7406\u8bba\u4e0a\u5bf9\u5e94\u7740\u9891\u7387\u6700\u4f4e\u7684\u90e8\u5206\uff0c\u4e5f\u5c31\u662f\u5728\u8bed\u8c31\u56fe\u4e0a\u5bf9\u5e94\u6700\u4e0b\u9762\u7684\u4eae\u7ebf\uff0c\u80fd\u91cf\u6700\u9ad8\u7684\u90e8\u5206\u3002 \u6709\u5f88\u591a\u7684\u7b97\u6cd5\u4f30\u8ba1\u57fa\u9891F0\uff0c\u53ef\u4ee5\u5206\u4e3a\u4e24\u7c7b\uff1a\u4e00\u4e2a\u662f\u5229\u7528\u65f6\u57df\u7279\u5f81\uff0c\u6bd4\u5982\u81ea\u76f8\u5173\uff1b\u4e00\u4e2a\u5229\u7528\u9891\u8c31\u7279\u5f81\uff0c\u6bd4\u5982\u5012\u8c31cepstrum\u3002WORLD\u4f7f\u7528DIO\u4f30\u8ba1\u57fa\u9891F0\uff0c\u6bd4YIN\u3001SWIPE\u8981\u5feb\uff0c\u6027\u80fd\u4f9d\u7136\u8f83\u597d\uff0cDIO\u5206\u4e3a\u4ee5\u4e0b\u4e09\u6b65\u3002 \u4f4e\u901a\u6ee4\u6ce2\u5668\u5bf9\u539f\u59cb\u4fe1\u53f7\u8fdb\u884c\u6ee4\u6ce2\u3002\u4f7f\u7528\u4e0d\u540c\u9891\u5e26\u7684\u4f4e\u901a\u6ee4\u6ce2\u5668\uff1a\u56e0\u4e3a\u4e0d\u77e5\u9053\u57fa\u9891\u7684\u4f4d\u7f6e\uff0c\u56e0\u6b64\u8fd9\u4e00\u6b65\u5305\u542b\u4e0d\u540c\u5468\u671f\u7684sin\u4f4e\u901a\u6ee4\u6ce2\u5668\u3002 \u53d64\u4e2a\u5468\u671f\u8ba1\u7b97\u7f6e\u4fe1\u5ea6\u3002\u8ba1\u7b97\u83b7\u5f97\u7684\u5404\u4e2a\u53ef\u80fd\u57fa\u9891F0\u7684\u7f6e\u4fe1\u5ea6\uff0c\u56e0\u4e3a\u7531\u57fa\u9891\u5206\u91cf\u7ec4\u6210\u7684sin\u4fe1\u53f7\u5305\u542b4\u4e2a\u95f4\u9694\uff082\u4e2a\u9876\u70b9\u30012\u4e2a\u8fc7\u96f6\u70b9\uff09\u3002\u5982\u679c\u6ee4\u6ce2\u5668\u5f97\u5230\u7684\u95f4\u9694\u957f\u5ea6\u4e00\u81f4\uff0c\u5219\u8bf4\u660e\u662f\u4e00\u4e2a\u57fa\u6ce2\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002 \u4ece\u67d0\u4e2a\u65f6\u95f4\u70b9\u7684\u6b63\u5f26\u6ce2\u4e2d\u63d0\u53d6\u51fa\u56db\u4e2a\u5468\u671f\u4fe1\u53f7\uff0c\u5e76\u8ba1\u7b97\u7f6e\u4fe1\u5ea6\uff0c\u4e5f\u5c31\u662f\u6807\u51c6\u5dee\u3002\u7136\u540e\u9009\u62e9\u6807\u51c6\u5dee\u6700\u4f4e\uff0c\u4e5f\u5c31\u662f\u7f6e\u4fe1\u5ea6\u6700\u9ad8\u7684\u57fa\u6ce2\u3002","title":"DIO\u7b97\u6cd5\u63d0\u53d6\u57fa\u9891F0"},{"location":"tts/%E5%A3%B0%E7%A0%81%E5%99%A8/#cheaptricksp","text":"\u58f0\u97f3\u5305\u542b\u4e0d\u540c\u9891\u7387\u7684\u4fe1\u53f7\uff0c\u8986\u76d60\u523018000Hz\uff0c\u6bcf\u4e2a\u9891\u7387\u90fd\u6709\u5176\u632f\u5e45\uff0c\u5b9a\u4e49\u6bcf\u79cd\u9891\u7387\u4e2d\u6ce2\u7684\u632f\u5e45\u6700\u9ad8\u70b9\u8fde\u7ebf\u5f62\u6210\u7684\u56fe\u5f62\u4e3a \u5305\u7edc \u3002\u9891\u8c31\u5305\u7edc\u662f\u4e2a\u91cd\u8981\u7684\u53c2\u6570\uff0c\u5728\u9891\u7387-\u632f\u5e45\u56fe\u4e2d\uff0c\u7528\u5e73\u6ed1\u7684\u66f2\u7ebf\u5c06\u6240\u6709\u5171\u632f\u5cf0\u8fde\u63a5\u8d77\u6765\uff0c\u8fd9\u4e2a\u5e73\u6ed1\u7684\u66f2\u7ebf\u5c31\u662f\u9891\u8c31\u5305\u7edc\u3002 \u63d0\u53d6\u9891\u8c31\u5305\u7edcSP\u7684\u5178\u578b\u7b97\u6cd5\u6709\u7ebf\u6027\u9884\u6d4b\u7f16\u7801\uff08Linear Predictive Coding\uff0cLPC\uff09\u548cCepstrum\u3002\u7ebf\u6027\u9884\u6d4b\u7f16\u7801LPC\u7684\u539f\u7406\u662f\u7528\u82e5\u5e72\u4e2a\u5386\u53f2\u8bed\u97f3\u91c7\u6837\u70b9\u7684\u52a0\u6743\u7ebf\u6027\u6c42\u548c\u53bb\u4e0d\u65ad\u903c\u8fd1\u5f53\u524d\u7684\u8bed\u97f3\u91c7\u6837\u70b9\uff1bCepstrum\u5219\u662f\u57fa\u4e8e\u590d\u6570\u5012\u8c31\u62e5\u6709\u9891\u8c31\u5e45\u5ea6\u4e0e\u76f8\u4f4d\u4fe1\u606f\u7684\u539f\u7406\uff0c\u901a\u8fc7\u5bf9\u4e00\u4e2a\u4fe1\u53f7\u8fdb\u884c\u5feb\u901f\u5085\u91cc\u53f6\u53d8\u6362FFT->\u53d6\u7edd\u5bf9\u503c->\u53d6\u5bf9\u6570->\u76f8\u4f4d\u5c55\u5f00->\u9006\u5feb\u901f\u5085\u91cc\u53f6\u53d8\u6362IFFT\u7684\u53d8\u6362\u5904\u7406\uff0c\u4ece\u800c\u5f97\u5230\u5bf9\u5e94\u7684\u5012\u8c31\u56fe\u3002 WORLD\u91c7\u7528CheapTrick\u505a\u8c31\u5206\u6790\uff0c\u601d\u60f3\u6765\u81ea\u4e8e\u97f3\u9ad8\u540c\u6b65\u5206\u6790\uff08pitch synchronous analysis\uff09\uff0c\u5176\u8fc7\u7a0b\u662f\uff1a\u5148\u5c06\u4e0d\u540c\u57fa\u9891\u8fdb\u884c\u81ea\u9002\u5e94\u52a0\u7a97\u64cd\u4f5c\uff0c\u4ee5\u53ca\u529f\u7387\u8c31\u5e73\u6ed1\u64cd\u4f5c\uff0c\u968f\u540e\u5c06\u4fe1\u53f7\u5728\u9891\u57df\u4e0a\u8fdb\u884c\u540c\u6001\u6ee4\u6ce2\u3002","title":"CheapTrick\u7b97\u6cd5\u63d0\u53d6\u9891\u8c31\u5305\u7edcSP"},{"location":"tts/%E5%A3%B0%E7%A0%81%E5%99%A8/#plantinum","text":"\u6df7\u5408\u6fc0\u52b1\u548c\u975e\u5468\u671f\u4fe1\u53f7\u53c2\u6570AP\u7ecf\u5e38\u5e94\u7528\u5230\u5408\u6210\u4e2d\uff0c\u5728Legacy-STRAIGHT\u548cTANDEM-STRAIGHT\u7b97\u6cd5\u4e2d\uff0caperiodicity\u88ab\u7528\u4e8e\u5408\u6210\u5468\u671f\u548c\u975e\u5468\u671f\u7684\u4fe1\u53f7\u3002WORLD\u76f4\u63a5\u901a\u8fc7PLANTINUM\u4ece\u6ce2\u5f62\u3001F0\u548c\u8c31\u5305\u7edc\u4e2d\u5f97\u5230\u6df7\u5408\u6fc0\u52b1\u7684\u975e\u5468\u671f\u4fe1\u53f7\u3002","title":"PLANTINUM\u63d0\u53d6\u975e\u5468\u671f\u4fe1\u53f7"},{"location":"tts/%E5%A3%B0%E7%A0%81%E5%99%A8/#world_2","text":"TANDEM-STRAIGHT\u76f4\u63a5\u4f7f\u7528\u5468\u671f\u54cd\u5e94\u8ba1\u7b97\u58f0\u5e26\u7684\u632f\u52a8\uff0c\u800cLegacy-STRAIGHT\u5219\u64cd\u7eb5\u7ec4\u5ef6\u8fdf\uff08group delay\uff09\u4ee5\u907f\u514d\u55e1\u55e1\u58f0\u3002\u5728WORLD\u4e2d\uff0c\u5229\u7528\u6700\u5c0f\u76f8\u4f4d\u54cd\u5e94\u548c\u6fc0\u52b1\u4fe1\u53f7\u7684\u5377\u79ef\u6765\u8ba1\u7b97\u58f0\u5e26\u7684\u632f\u52a8\uff0c\u4ece\u4e0b\u56fe\u6240\u793a\uff0c\u53ef\u4ee5\u770b\u5230\uff0cWORLD\u7684\u5377\u79ef\u6bd4STAIGHT\u8981\u5c11\uff0c\u56e0\u6b64\u8ba1\u7b97\u91cf\u66f4\u5c11\u3002","title":"WORLD\u7684\u5408\u6210\u7b97\u6cd5"},{"location":"tts/%E5%A3%B0%E7%A0%81%E5%99%A8/#_8","text":"WORLD\u58f0\u7801\u5668\u6709\u8f83\u4e3a\u6210\u719f\u7684 \u5f00\u6e90\u5b9e\u73b0 \uff0c\u5e76\u4e14\u6709\u5bf9\u5e94\u7684Python\u5c01\u88c5\uff1a PyWORLD: A Python wrapper of WORLD Vocoder \uff0c\u53e6\u6709 \u5b98\u65b9\u5b9e\u73b0 \u3002\u4ee5\u4e0b\u793a\u4f8b\u5305\u62ec\u4e86\u901a\u8fc7 PyWorld \u63d0\u53d6\u58f0\u5b66\u53c2\u6570\uff0c\u5408\u6210\u539f\u59cb\u97f3\u9891\uff0c\u4fee\u6539\u90e8\u5206\u58f0\u5b66\u53c2\u6570\uff0c\u7f16\u8f91\u539f\u59cb\u97f3\u9891\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 import pyworld as pw from scipy.io import wavfile import matplotlib.pyplot as plt import numpy as np import os import soundfile as sf # \u63d0\u53d6\u8bed\u97f3\u7279\u5f81 x , fs = sf . read ( WAV_FILE_PATH ) # f0 : ndarray # F0 contour. \u57fa\u9891\u7b49\u9ad8\u7ebf # sp : ndarray # Spectral envelope. \u9891\u8c31\u5305\u7edc # ap : ndarray # Aperiodicity. \u975e\u5468\u671f\u6027 f0 , sp , ap = pw . wav2world ( x , fs ) # use default options # \u5206\u522b\u63d0\u53d6\u58f0\u5b66\u53c2\u6570 # \u4f7f\u7528DIO\u7b97\u6cd5\u8ba1\u7b97\u97f3\u9891\u7684\u57fa\u9891F0 _f0 , t = pw . dio ( x , fs , f0_floor = 50.0 , f0_ceil = 600.0 , channels_in_octave = 2 , frame_period = pw . default_frame_period ) # \u4f7f\u7528CheapTrick\u7b97\u6cd5\u8ba1\u7b97\u97f3\u9891\u7684\u9891\u8c31\u5305\u7edc _sp = pw . cheaptrick ( x , _f0 , t , fs ) # \u8ba1\u7b97aperiodic\u53c2\u6570 _ap = pw . d4c ( x , _f0 , t , fs ) # \u57fa\u4e8e\u4ee5\u4e0a\u53c2\u6570\u5408\u6210\u539f\u59cb\u97f3\u9891 _y = pw . synthesize ( _f0 , _sp , _ap , fs , pw . default_frame_period ) # 1.\u53d8\u9ad8\u9891-\u66f4\u7c7b\u4f3c\u5973\u6027 high_freq = pw . synthesize ( f0 * 2.0 , sp , ap , fs ) # 2.\u76f4\u63a5\u4fee\u6539\u57fa\u9891\uff0c\u53d8\u4e3a\u673a\u5668\u4eba\u53d1\u58f0 robot_like_f0 = np . ones_like ( f0 ) * 100 robot_like = pw . synthesize ( robot_like_f0 , sp , ap , fs ) # 3.\u63d0\u9ad8\u57fa\u9891\uff0c\u540c\u65f6\u9891\u8c31\u5305\u7edc\u540e\u79fb -> \u66f4\u6e29\u67d4\u7684\u5973\u6027\uff1f female_like_sp = np . zeros_like ( sp ) for f in range ( female_like_sp . shape [ 1 ]): female_like_sp [:, f ] = sp [:, int ( f / 1.2 )] female_like = pw . synthesize ( f0 * 2 , female_like_sp , ap , fs ) # 4.\u8f6c\u6362\u57fa\u9891\uff08\u4e0d\u80fd\u76f4\u63a5\u8f6c\u6362\uff09 x2 , fs2 = sf . read ( WAV_FILE_PATH2 ) f02 , sp2 , ap2 = pw . wav2world ( x2 , fs2 ) f02 = f02 [: len ( f0 )] print ( len ( f0 ), len ( f02 )) other_like = pw . synthesize ( f02 , sp , ap , fs )","title":"\u4f7f\u7528\u793a\u4f8b"},{"location":"tts/%E5%A3%B0%E7%A0%81%E5%99%A8/#nhv","text":"","title":"NHV"},{"location":"tts/%E5%A3%B0%E7%A0%81%E5%99%A8/#_9","text":"\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u57fa\u4e8e\u6e90-\u6ee4\u6ce2\u5668\u7684\u53c2\u6570\u5408\u6210\u4e2d\uff0c\u5408\u6210\u5668\u7684\u5de5\u4f5c\u6d41\u7a0b\u4e3b\u8981\u53ef\u5206\u4e3a\u4e09\u6b65\u3002 \u6839\u636e\u5f85\u5408\u6210\u97f3\u8282\u7684\u58f0\u8c03\u7279\u6027\u6784\u9020\u76f8\u5e94\u7684\u58f0\u95e8\u6ce2\u6fc0\u52b1\u6e90\u3002 \u518d\u6839\u636e\u534f\u540c\u53d1\u97f3\u3001\u901f\u5ea6\u53d8\u6362\uff08\u65f6\u957f\u53c2\u6570\uff09\u7b49\u97f3\u53d8\u4fe1\u606f\u5728\u539f\u59cb\u58f0\u9053\u7684\u57fa\u7840\u4e0a\u6784\u9020\u51fa\u65b0\u7684\u58f0\u9053\u53c2\u6570\u6a21\u578b\u3002 \u6700\u540e\u5c06\u58f0\u95e8\u6ce2\u6fc0\u52b1\u6e90\u9001\u5165\u65b0\u7684\u58f0\u9053\u6a21\u578b\u4e2d\uff0c\u8f93\u51fa\u5c31\u662f\u7ed3\u5408\u7ed9\u5b9a\u97f5\u5f8b\u7279\u6027\u7684\u5408\u6210\u8bed\u97f3\u3002 \u5171\u632f\u5cf0\u5408\u6210\u548cLPC\uff08\u7ebf\u6027\u9884\u6d4b\u5206\u6790\uff09\u5408\u6210\u662f\u4e0a\u8ff0\u6e90-\u6ee4\u6ce2\u5668\u7ed3\u6784\u7684\u53c2\u6570\u5408\u6210\u4e2d\u6700\u5e38\u7528\u7684\u4e24\u79cd\u65b9\u6cd5\uff0c\u5b9e\u73b0\u539f\u7406\u7c7b\u4f3c\uff0c\u53ea\u662f\u4f7f\u7528\u7684\u58f0\u9053\u6a21\u578b\u4e0d\u540c\u3002\u540c\u65f6\u9488\u5bf9\u58f0\u9053\u6a21\u578b\u7684\u7279\u6027\uff0c\u5728\u6e90\u7684\u9009\u53d6\u4e0a\u4e5f\u7565\u6709\u533a\u522b\u3002","title":"\u6e90\u6ee4\u6ce2\u5668\u5408\u6210\u539f\u7406"},{"location":"tts/%E5%A3%B0%E7%A0%81%E5%99%A8/#_10","text":"\u4e0e\u7ebf\u6027\u9884\u6d4b\u65b9\u6cd5\u7c7b\u4f3c\uff0c\u5171\u632f\u5cf0\u5408\u6210\u65b9\u6cd5\u4e5f\u662f\u5bf9\u58f0\u6e90-\u58f0\u9053\u6a21\u578b\u7684\u6a21\u62df\uff0c\u4f46\u5b83\u66f4\u4fa7\u91cd\u4e8e\u5bf9\u58f0\u9053\u8c10\u632f\u7279\u6027\u7684\u6a21\u62df\u3002\u5b83\u628a\u4eba\u7684\u58f0\u9053\u770b\u4f5c\u4e00\u4e2a\u8c10\u632f\u8154\uff0c\u8154\u4f53\u7684\u8c10\u632f\u7279\u6027\u51b3\u5b9a\u6240\u53d1\u51fa\u8bed\u97f3\u4fe1\u53f7\u7684\u9891\u8c31\u7279\u6027\uff0c\u4e5f\u5373\u5171\u632f\u5cf0\u7279\u6027\u3002\u97f3\u8272\u5404\u5f02\u7684\u8bed\u97f3\u6709\u4e0d\u540c\u7684\u5171\u632f\u5cf0\u6a21\u5f0f\uff0c\u7528\u6bcf\u4e2a\u5171\u632f\u5cf0\u4ee5\u53ca\u5176\u5e26\u5bbd\u4f5c\u4e3a\u53c2\u6570\u53ef\u4ee5\u6784\u6210\u4e00\u4e2a\u5171\u632f\u5cf0\u6ee4\u6ce2\u5668\uff0c\u5c06\u591a\u4e2a\u5171\u632f\u5cf0\u6ee4\u6ce2\u5668\u7ec4\u5408\u8d77\u6765\u6a21\u62df\u58f0\u9053\u7684\u4f20\u8f93\u7279\u6027\uff0c\u6839\u636e\u8fd9\u4e2a\u7279\u6027\u5bf9\u58f0\u6e90\u53d1\u751f\u5668\u4ea7\u751f\u7684\u6fc0\u52b1\u4fe1\u53f7\u8fdb\u884c\u8c03\u5236\uff0c\u7ecf\u8fc7\u8f90\u5c04\u6a21\u578b\u540e\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u5408\u6210\u8bed\u97f3\u3002 \u8bed\u97f3\u5b66\u7684\u7814\u7a76\u7ed3\u679c\u8868\u660e\uff0c\u51b3\u5b9a\u8bed\u97f3\u611f\u77e5\u7684\u58f0\u5b66\u7279\u5f81\u4e3b\u8981\u662f\u8bed\u97f3\u7684\u5171\u632f\u5cf0\uff0c\u56e0\u6b64\u5982\u679c\u5408\u6210\u5668\u7684\u7ed3\u6784\u548c\u53c2\u6570\u8bbe\u7f6e\u6b63\u786e\uff0c\u5219\u8fd9\u79cd\u65b9\u6cd5\u80fd\u591f\u5408\u6210\u9ad8\u97f3\u8d28\u3001\u9ad8\u53ef\u61c2\u5ea6\u7684\u8bed\u97f3\u3002 \u6fc0\u52b1\u6e90\u6a21\u578b \u4e00\u822c\u5171\u632f\u5cf0\u5408\u6210\u5668\u7684\u6fc0\u52b1\u6e90\u6709\u4e09\u79cd\u7c7b\u578b\uff1a\u5408\u6210\u6d4a\u97f3\u65f6\u7528\u5468\u671f\u6fc0\u52b1\u5e8f\u5217\uff1b\u5408\u6210\u6e05\u97f3\u65f6\u7528\u4f2a\u968f\u673a\u566a\u97f3\uff1b\u5408\u6210\u6d4a\u64e6\u97f3\u65f6\u7528\u5468\u671f\u6fc0\u52b1\u8c03\u5236\u7684\u566a\u97f3\u3002\u53d1\u6d4a\u97f3\u65f6\uff0c\u58f0\u5e26\u4e0d\u65ad\u5730\u5f20\u5f00\u548c\u5173\u95ed\uff0c\u4ea7\u751f\u95f4\u9699\u7684\u8109\u51b2\u6ce2\uff0c\u5f00\u59cb\u65f6\u58f0\u95e8\u95ed\u5408\u5e45\u5ea6\u4e3a\u96f6\uff0c\u63a5\u7740\u58f0\u95e8\u9010\u6e10\u6253\u5f00\uff0c\u5e45\u5ea6\u7f13\u6162\u4e0a\u5347\uff0c\u7136\u540e\u5feb\u901f\u4e0b\u964d\uff0c\u5f53\u518d\u6b21\u964d\u4f4e\u5230\u96f6\u4e4b\u540e\uff0c\u6709\u4e00\u4e2a\u5bfc\u6570\u4e0d\u8fde\u7eed\u70b9\uff0c\u76f8\u5f53\u4e8e\u58f0\u95e8\u7a81\u7136\u5173\u95ed\u3002\u56e0\u6b64\u6d4a\u97f3\u65f6\u6fc0\u52b1\u51fd\u6570\u5f62\u5f0f\u6709\u4e09\u89d2\u6ce2\u3001\u591a\u9879\u5f0f\u6ce2\u548c\u6ee4\u6ce2\u5668\u6fc0\u52b1\u54cd\u5e94\u6fc0\u52b1\u51fd\u6570\u3002 \u5171\u632f\u5cf0\u58f0\u9053\u6a21\u578b \u5bf9\u4e8e\u58f0\u9053\u6a21\u578b\uff0c\u58f0\u5b66\u7406\u8bba\u8868\u660e\uff0c\u8bed\u97f3\u4fe1\u53f7\u8c31\u4e2d\u7684\u8c10\u632f\u7279\u6027\uff08\u5bf9\u5e94\u58f0\u9053\u4f20\u9012\u51fd\u6570\u4e2d\u7684\u6781\u70b9\uff09\u5b8c\u5168\u7531\u58f0\u9053\u7684\u5f62\u72b6\u51b3\u5b9a\uff0c\u4e0e\u6fc0\u52b1\u6e90\u7684\u4f4d\u7f6e\u65e0\u5173\u3002","title":"\u5171\u632f\u5cf0\u5408\u6210\u65b9\u6cd5"},{"location":"tts/%E5%A3%B0%E7%A0%81%E5%99%A8/#nhv_1","text":"\u8bb8\u591a\u795e\u7ecf\u58f0\u7801\u5668\u65e8\u5728\u63d0\u5347\u6e90-\u6ee4\u6ce2\u5668\uff08source-filter\uff09\u6a21\u578b\u4e2d\u5bf9\u6e90\uff08source\uff09\u7684\u5efa\u6a21\u80fd\u529b\uff0c\u5305\u62ecLPCNet\u3001GELP\u548cGlotGAN\u901a\u8fc7\u795e\u7ecf\u7f51\u7edc\u4ec5\u5efa\u6a21\u6e90\uff08\u6bd4\u5982\u5efa\u6a21\u7ebf\u6027\u9884\u6d4b\u7684\u6b8b\u5dee\u4fe1\u53f7\uff09\uff0c\u800c\u901a\u8fc7\u65f6\u53d8\u6ee4\u6ce2\u5668\u76f4\u63a5\u751f\u6210\u8bed\u97f3\u3002\u4e0d\u540c\u4e8e\u4ec5\u5bf9\u6e90\u8fdb\u884c\u5efa\u6a21\uff0c\u795e\u7ecf\u6e90\u6ee4\u6ce2\u5668\uff08Neural Source-Filter\uff0cNSF\uff09\u6846\u67b6\u5c06\u7ecf\u5178\u6846\u67b6\u4e2d\u7684\u7ebf\u6027\u6ee4\u6ce2\u5668\u66ff\u6362\u4e3a\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\uff0c\u5176\u4e2dDDSP\u901a\u8fc7\u795e\u7ecf\u7f51\u7edc\u63a7\u5236\u8c10\u6ce2\u52a0\u6027\u566a\u58f0\uff08Harmonic plus Noise\uff09\u751f\u6210\u97f3\u9891\u3002 J. Engel, L. H. Hantrakul, C. Gu, and A. Roberts, \"DDSP: Differentiable digital signal processing,\" in Proc. ICLR, 2020. NHV\u8bba\u6587\u5730\u5740\uff1a Neural Homomorphic Vocoder \u3002\u795e\u7ecf\u540c\u6001\u58f0\u7801\u5668\uff08Neural Homomorphic Vocoder\uff0cNHV\uff09\u901a\u8fc7\u7ebf\u6027\u65f6\u53d8\u6ee4\u6ce2\u5668\u5bf9\u8109\u51b2\u4e32\u548c\u566a\u97f3\u8fdb\u884c\u6ee4\u6ce2\u540e\u751f\u6210\u8bed\u97f3\u3002\u7ed9\u5b9a\u58f0\u5b66\u7279\u5f81\uff0c\u795e\u7ecf\u7f51\u7edc\u901a\u8fc7\u4f30\u8ba1\u65f6\u53d8\u8109\u51b2\u54cd\u5e94\u7684\u590d\u6570\u8c31\u63a7\u5236\u7ebf\u6027\u65f6\u53d8\uff08Linear Time-Varying\uff0cLTV\uff09\u6ee4\u6ce2\u5668\uff0c\u5e76\u5229\u7528\u591a\u5c3a\u5ea6STFT\u548c\u5bf9\u6297\u635f\u5931\u51fd\u6570\u8fdb\u884c\u8bad\u7ec3\u3002","title":"NHV\u6982\u8ff0"},{"location":"tts/%E5%A3%B0%E7%A0%81%E5%99%A8/#_11","text":"\u6e90-\u6ee4\u6ce2\u5668\u793a\u610f\u56fe\u5982\u4e0a\u56fe\u6240\u793a\uff0c \\({e[n]}\\) \u8868\u793a\u6e90\uff08source\uff09\uff0c \\(h[n]\\) \u4e3a\u6ee4\u6ce2\u5668\uff0c \\(s[n]\\) \u5219\u662f\u91cd\u5efa\u7684\u6837\u672c\u70b9\u3002\u5728NHV\u4e2d\uff0c\u795e\u7ecf\u7f51\u7edc\u8d1f\u8d23\u5efa\u6a21\u6e90-\u6ee4\u6ce2\u5668\u6a21\u578b\u4e2d\u7684\u7ebf\u6027\u65f6\u53d8\uff08Linear Time-Varying\uff0cLTV\uff09\u6ee4\u6ce2\u5668\u3002\u7c7b\u4f3c\u4e8e\u8c10\u6ce2\u566a\u97f3\u52a0\u6027\u6a21\u578b\uff08Harmonic plus Noise model\uff09\uff0cNHV\u5206\u522b\u751f\u6210\u8c10\u6ce2\u548c\u566a\u97f3\u6210\u5206\u3002\u8c10\u6ce2\u90e8\u5206\uff0c\u4e3b\u8981\u662f\u901a\u8fc7\u7ebf\u6027\u65f6\u53d8\u8109\u51b2\u4e32\uff08LTV filtered impulse trains\uff09\u5efa\u6a21\u53d1\u97f3\u90e8\u5206\u7684\u5468\u671f\u6027\u632f\u52a8\uff1b\u566a\u97f3\u90e8\u5206\uff0c\u5305\u62ec\u80cc\u666f\u566a\u97f3\u3001\u4e0d\u53d1\u97f3\u6210\u5206\u3001\u4ee5\u53ca\u53d1\u97f3\u90e8\u5206\u4e2d\u7684\u968f\u673a\u6210\u5206\uff0c\u901a\u8fc7\u7ebf\u6027\u65f6\u53d8\u6ee4\u6ce2\u566a\u97f3\u5efa\u6a21\u3002\u5c06\u539f\u59cb\u7684\u8bed\u97f3\u4fe1\u53f7 \\(x\\) \u548c\u91cd\u5efa\u4fe1\u53f7 \\(s\\) \u5207\u5206\u4e3a\u82e5\u5e72\u4e2a\u5e27\u957f \\(L\\) \u7684\u4e0d\u91cd\u53e0\u5e27\uff0c \\(m\\) \u4e3a\u5e27\u7d22\u5f15\uff0c \\(n\\) \u4e3a\u6837\u672c\u70b9\u7d22\u5f15\uff0c \\(c\\) \u4e3a\u7279\u5f81\u7d22\u5f15\uff0c\u56e0\u6b64\u603b\u5e27\u6570\u548c\u603b\u6837\u672c\u70b9\u6570\u6ee1\u8db3\uff1a \\[ N=M\\times L \\] \u4e0a\u5f0f\u4e2d\uff0c \\(N\\) \u8868\u793a\u6837\u672c\u70b9\u603b\u6570\uff0c \\(M\\) \u8868\u793a\u4e0d\u91cd\u53e0\u5e27\u5e27\u6570\uff0c \\(L\\) \u8868\u793a\u6bcf\u4e2a\u5e27\u4e2d\u7684\u6837\u672c\u70b9\u4e2a\u6570\u3002 \u8109\u51b2\u54cd\u5e94 \\(h\\) \u662f\u56e0\u679c\u7684\uff0c\u8c10\u6ce2\u8109\u51b2\u54cd\u5e94 \\(h_h\\) \u548c\u566a\u97f3\u8109\u51b2\u54cd\u5e94 \\(h_n\\) \u65e0\u9650\u957f\uff0c \\(n\\in \\mathbb{Z}\\) \u3002 NHV\u7684\u8bed\u97f3\u751f\u6210\u8fc7\u7a0b\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u9996\u5148\u901a\u8fc7\u5e27\u7ea7\u522b\u57fa\u9891 \\(f_0[m]\\) \u751f\u6210\u8109\u51b2\u4e32 \\(p[n]\\) \uff0c\u4ece\u9ad8\u65af\u5206\u5e03\u4e2d\u91c7\u6837\u5f97\u5230\u566a\u97f3\u4fe1\u53f7 \\(u[n]\\) \uff1b\u63a5\u7740\u795e\u7ecf\u7f51\u7edc\u5229\u7528\u5bf9\u6570\u57df\u6885\u5c14\u8c31 \\(S[m,c]\\) \u4f30\u8ba1\u51fa\u6bcf\u4e00\u5e27\u7684\u8c10\u6ce2\u8109\u51b2\u54cd\u5e94 \\(h_h[m,n]\\) \u548c\u566a\u97f3\u8109\u51b2\u54cd\u5e94 \\(h_n[m,n]\\) \uff1b\u63a5\u7740\u8109\u51b2\u4e32 \\(p[n]\\) \u548c\u566a\u97f3\u4fe1\u53f7 \\(u[n]\\) \u901a\u8fc7LTV\u7ebf\u6027\u65f6\u53d8\u6ee4\u6ce2\u5668\u83b7\u5f97\u8c10\u6ce2\u6210\u5206 \\(s_h[n]\\) \u548c\u566a\u97f3\u6210\u5206 \\(s_n[n]\\) \uff1b\u6700\u540e\uff0c \\(s_h[n]\\) \u548c \\(s_n[n]\\) \u52a0\u8d77\u6765\uff0c\u5e76\u901a\u8fc7\u53ef\u8bad\u7ec3\u7684\u56e0\u679c\u6709\u9650\u51b2\u6fc0\u54cd\u5e94\u6ee4\u6ce2\u5668 \\(h[n]\\) \u6ee4\u6ce2\uff0c\u83b7\u5f97\u6700\u7ec8\u7684\u8bed\u97f3\u6837\u672c\u70b9 \\(s[n]\\) \u3002","title":"\u6574\u4f53\u7ed3\u6784"},{"location":"tts/%E5%A3%B0%E7%A0%81%E5%99%A8/#_12","text":"\u5229\u7528\u4f4e\u901a\u6b63\u5f26\u6ce2\u7684\u548c\u751f\u6210\u8109\u51b2\u4e32\uff1a \\[ p(t)=\\left\\{\\begin{array}{l} \\sum_{k=1}^{2kf_0(t)<f_s}{\\rm cos}(\\int_{0}^{t}2\\pi k f_0(\\tau){\\rm d}\\tau),\\quad if\\ f_0(t)>0 \\\\ 0,\\quad if\\ f_0(t)=0 \\end{array}\\right. \\] \u5176\u4e2d\uff0c\u901a\u8fc7zero-order hold\u6216\u8005\u7ebf\u6027\u63d2\u503c\u4ece \\(f_0[m]\\) \u4e2d\u91cd\u5efa \\(f_0(t)\\) \uff0c\u4e14 \\(p[n]=p(n/f_s)\\) \uff0c \\(f_s\\) \u4e3a\u91c7\u6837\u7387\u3002 \u7531\u4e8e\u52a0\u6027\u751f\u6210\u65f6\uff0c\u6839\u636e\u91c7\u6837\u7387\u548c\u5e27\u79fb\u9700\u8981\u52a0\u548c200\u4e2a\u6b63\u5f26\u51fd\u6570\uff0c\u8ba1\u7b97\u91cf\u8f83\u5927\uff0c\u56e0\u6b64\u53ef\u4ee5\u91c7\u7528\u8fd1\u4f3c\u7b97\u6cd5\uff1a\u5c06\u57fa\u9891\u5468\u671f\u56db\u820d\u4e94\u5165\u5230\u91c7\u6837\u5468\u671f\u7684\u500d\u6570\uff0c\u6b64\u65f6\u79bb\u6563\u8109\u51b2\u5e8f\u5217\u662f\u7a00\u758f\u7684\uff0c\u7136\u540e\u53ef\u4ee5\u6309\u987a\u5e8f\u751f\u6210\uff0c\u4e00\u6b21\u751f\u6210\u4e00\u4e2a\u97f3\u9ad8\u3002","title":"\u8109\u51b2\u4e32\u751f\u6210\u5668"},{"location":"tts/%E5%A3%B0%E7%A0%81%E5%99%A8/#neural-network-filter-estimator","text":"\u4f7f\u7528\u590d\u6570\u8c31 \\(\\hat{h}_h\\) \u548c \\(\\hat{h}_n\\) \u4f5c\u4e3a\u51b2\u6fc0\u54cd\u5e94 \\(h_h\\) \u548c \\(h_n\\) \u7684\u4e2d\u95f4\u8868\u793a\uff0c\u590d\u6570\u8c31\u540c\u65f6\u63cf\u8ff0\u4e86\u5e45\u5ea6\u54cd\u5e94\u548c\u6ee4\u6ce2\u5668\u7684\u7ec4\u5ef6\u8fdf\uff08group delay\uff09\uff0c\u6ee4\u6ce2\u5668\u7684\u7ec4\u5ef6\u8fdf\u4f1a\u5f71\u54cd\u8bed\u97f3\u7684\u97f3\u8272\u3002\u4e0d\u540c\u4e8e\u4f7f\u7528\u7ebf\u6027\u76f8\u4f4d\u6216\u6700\u5c0f\u76f8\u4f4d\u6ee4\u6ce2\u5668\uff0cNHV\u4f7f\u7528\u7b26\u5408\u76f8\u4f4d\u6ee4\u6ce2\u5668\uff0c\u4ece\u6570\u636e\u4e2d\u5b66\u4e60\u76f8\u4f4d\u7279\u6027\u3002\u9650\u5236\u590d\u5012\u8c31\u7684\u957f\u5ea6\u76f8\u5f53\u4e8e\u9650\u5236\u5e45\u5ea6\u548c\u76f8\u4f4d\u54cd\u5e94\u7684\u5206\u8fa8\u7387\uff0c\u8fd9\u63d0\u4f9b\u4e86\u63a7\u5236\u6ee4\u6ce2\u5668\u590d\u6742\u6027\u7684\u7b80\u5355\u65b9\u6cd5------\u795e\u7ecf\u7f51\u7edc\u53ea\u9884\u6d4b\u4f4e\u9891\u5e26\u7cfb\u6570\uff0c\u9ad8\u9891\u5e26\u8c31\u7cfb\u6570\u8bbe\u7f6e\u4e3a\u96f6\u3002\u5b9e\u9a8c\u4e2d\uff0c\u6bcf\u5e27\u9884\u6d4b\u4e24\u4e2a10ms\u590d\u6570\u8c31\u3002\u5b9e\u73b0\u4e0a\uff0c\u65e0\u9650\u51b2\u6fc0\u54cd\u5e94IIR\uff0c\u6bd4\u5982 \\(h_h[m,n]\\) \u548c \\(h_n[m,n]\\) \u901a\u8fc7\u6709\u9650\u51b2\u6fc0\u54cd\u5e94FIR\u8fd1\u4f3c\uff0c\u79bb\u6563\u5085\u91cc\u53f6\u53d8\u6362\u7684\u7a97\u957f\u5fc5\u987b\u8db3\u591f\u5927\uff0c\u4ee5\u907f\u514d\u6df7\u53e0\u73b0\u8c61\uff0c\u5b9e\u9a8c\u4e2d\u7a97\u957f\u8bbe\u7f6e\u4e3a \\(N=1024\\) \u3002","title":"\u795e\u7ecf\u7f51\u7edc\u6ee4\u6ce2\u4f30\u8ba1\u5668\uff08Neural Network Filter Estimator\uff09"},{"location":"tts/%E5%A3%B0%E7%A0%81%E5%99%A8/#ltvfirs","text":"FIR\uff08\u6709\u9650\u51b2\u6fc0\u54cd\u5e94\uff09\u5e38\u7528\u4e8e\u97f3\u9891\u4fe1\u53f7\u5904\u7406\uff0cFIR\u548cIIR\uff08\u65e0\u9650\u51b2\u6fc0\u54cd\u5e94\uff09\u6700\u76f4\u89c2\u7684\u533a\u522b\u5c31\u4f53\u73b0\u5728\u7ed3\u6784\u5f62\u5f0f\u4e0a\uff0cIIR\u7684\u65b9\u7a0b\u4e2d\uff0c\u5f53\u524d\u7684\u8f93\u51fa \\(y(n)\\) \u662f\u7531\u5f53\u524d\u8f93\u5165 \\(x(n)\\) \uff0c\u8fc7\u53bb\u8f93\u5165 \\(x(n-1),x(n-2)\\) \u548c\u8fc7\u53bb\u8f93\u51fa \\(y(n-2),y(n-1)\\) \u8fd9\u4e09\u7c7b\u503c\u51b3\u5b9a\u3002\u800c\u5728FIR\u65b9\u7a0b\u4e2d\uff0c\u5219\u6ca1\u6709\u8fc7\u53bb\u8f93\u51fa\u8fd9\u9879\u3002IIR\u7684\u5dee\u5206\u65b9\u7a0b\u5982\u4e0b\uff1a \\[ y(n)=\\sum_{k=1}^N a_ky(n-k)+\\sum_{k=0}^M b_kx(n-k) \\] \u800cFIR\u7684\u5dee\u5206\u65b9\u7a0b\u4e3a\uff1a \\[ y(n)=\\sum_{k=0}^M b_k x(n-k) \\] \u7531\u4e8eIIR\u7684\u5f53\u524d\u8f93\u51fa\u53d7\u5230\u4ee5\u524d\u8f93\u51fa\u503c\u7684\u5f71\u54cd\uff0c\u56e0\u6b64\u5b83\u662f\u6709\u53cd\u9988\u7684\uff0c\u6216\u8005\u8bf4\u8f93\u51fa\u503c\u662f\u9012\u5f52\u7684\uff1b\u800cFIR\u5c31\u662f\u65e0\u53cd\u9988\uff0c\u975e\u9012\u5f52\u7684\u3002 \u8c10\u6ce2\u90e8\u5206\u7684\u7ebf\u6027\u65f6\u53d8\u6ee4\u6ce2\u5668\u5b9a\u4e49\u5982\u4e0b\u5f0f\u6240\u793a\uff1a \\[ s_h[n]=\\sum_{m=0}^{M}(w_L[n-mL]\\cdot p[n])*h_h[m,n] \\] \u5377\u79ef\u53ef\u4ee5\u5728\u65f6\u57df\u548c\u9891\u57df\u4e0a\u5e94\u7528\uff0c\u53ef\u8bad\u7ec3\u7684FIR\u6ee4\u6ce2\u5668 \\(h[n]\\) \u53ef\u4ee5\u5e94\u7528\u5230\u8bed\u97f3\u751f\u6210\u7684\u6700\u540e\u4e00\u6b65\uff0c\u8c10\u6ce2\u90e8\u5206\u7684\u5377\u79ef\u8fc7\u7a0b\u5982\u4e0b\u56fe\u6240\u793a\u3002","title":"\u7ebf\u6027\u65f6\u53d8\uff08LTV\uff09\u6ee4\u6ce2\u5668\u548c\u53ef\u8bad\u7ec3\u7684\u6709\u9650\u51b2\u6fc0\u54cd\u5e94\uff08FIRs\uff09"},{"location":"tts/%E5%A3%B0%E7%A0%81%E5%99%A8/#_13","text":"\u591a\u5c3a\u5ea6STFT\u635f\u5931 \u56e0\u4e3a\u8981\u6c42\u539f\u59cb\u4fe1\u53f7 \\(x\\) \u548c\u91cd\u5efa\u4fe1\u53f7 \\(s\\) \u7684\u58f0\u95e8\u6fc0\u52b1\uff08Glottal Closure Instants\uff0cGCIs\uff09\u5b8c\u5168\u5bf9\u9f50\uff0c\u56e0\u6b64\u5728\u91cd\u5efa\u4fe1\u53f7 \\(x[n]\\) \u548c\u539f\u59cb\u4fe1\u53f7 \\(s[n]\\) \u4e4b\u95f4\u65e0\u6cd5\u65bd\u52a0\u70b9\u7ea7\u635f\u5931\uff0c\u800c\u591a\u5c3a\u5ea6STFT\u8ba1\u7b97\u635f\u5931\u65f6\u5141\u8bb8\u4fe1\u53f7\u95f4\u76f8\u4f4d\u9519\u4f4d\u3002\u7c7b\u4f3c\u4e8e\u591a\u5b50\u5e26MelGAN\uff0c\u591a\u5c3a\u5ea6STFT\u635f\u5931\u5b9a\u4e49\u4e3a\u4e0d\u540c\u53c2\u6570\u4e0b\u539f\u59cb\u548c\u91cd\u5efa\u5e45\u5ea6\u8c31\u4e4b\u95f4\u7684L1\u8ddd\u79bb\u4e4b\u548c\uff1a \\[ {\\rm L}_R=\\frac{1}{C}\\sum_{i=0}^{C-1}\\frac{1}{K_i}(||X_i-S_i||_1+||{\\rm log}X_i-{\\rm log}S_i||_1) \\] \u4e0a\u5f0f\u4e2d\uff0c \\(X_i\\) \u548c \\(S_i\\) \u5206\u522b\u4e3a\u539f\u59cb\u4fe1\u53f7 \\(x\\) \u548c\u91cd\u5efa\u4fe1\u53f7 \\(s\\) \u5728\u53c2\u6570 \\(i\\) \u8bbe\u7f6e\u4e0b\u8ba1\u7b97\u83b7\u5f97\u7684\u5e45\u5ea6\u8c31\uff0c\u6bcf\u4e2a\u5e45\u5ea6\u8c31\u5305\u62ec \\(K_i\\) \u4e2a\u503c\uff0c\u5171 \\(C\\) \u7ec4STFT\u53c2\u6570\u914d\u7f6e\uff0c\u7ec4\u6570\u8d8a\u591a\uff0c\u91cd\u5efa\u4fe1\u53f7\u7684\u6df7\u53e0\u95ee\u9898\u4e00\u822c\u8d8a\u5c11\u3002 Yang G, Yang S, Liu K, et al. Multi-band MelGAN: Faster waveform generation for high-quality text-to-speech[C]. 2021 IEEE Spoken Language Technology Workshop (SLT). IEEE, 2021: 492-498. \u5bf9\u6297\u635f\u5931\u51fd\u6570 NHV\u91c7\u53d6\u5408\u9875\u635f\u5931\u51fd\u6570\u5f62\u5f0f\uff1a \\[ {\\rm L}_D=\\mathbb{E}_{x,S}[{\\rm max}(0,1-D(x,S))]+\\mathbb{E}_{f_0,S}[{\\rm max}(0,1+D(G(f_0,S),S))] \\] \\[ {\\rm G}=\\mathbb{E}_{f_0,S}[-D(G(f_0,S),S)] \\] \u4e0a\u5f0f\u4e2d\uff0c \\(D(x,S)\\) \u8868\u793a\u5224\u522b\u5668\u7f51\u7edc\uff0c \\(D\\) \u8f93\u5165\u539f\u59cb\u4fe1\u53f7 \\(x\\) \u6216\u91cd\u5efa\u4fe1\u53f7 \\(s\\) \uff0c\u4ee5\u53ca\u771f\u5b9elog\u57df\u6885\u5c14\u9891\u8c31 \\(S\\) \uff0c \\(f_0\\) \u8868\u793a\u57fa\u9891\uff0c\u751f\u6210\u5668 \\(G(f_0,S)\\) \u8f93\u51fa\u91cd\u5efa\u4fe1\u53f7 \\(s\\) \u3002","title":"\u795e\u7ecf\u7f51\u7edc\u7684\u8bad\u7ec3"},{"location":"tts/%E5%A3%B0%E7%A0%81%E5%99%A8/#_14","text":"NHV\u662f\u57fa\u4e8e\u6e90-\u6ee4\u6ce2\u5668\u7684\u795e\u7ecf\u58f0\u7801\u5668\uff0c\u901a\u8fc7\u795e\u7ecf\u7f51\u7edc\u5efa\u6a21\u7ebf\u6027\u65f6\u53d8\u6ee4\u6ce2\u5668\uff08LTV\uff09\uff0c\u5bf9\u8109\u51b2\u4e32\u548c\u566a\u97f3\u8fdb\u884c\u6ee4\u6ce2\u540e\u751f\u6210\u8bed\u97f3\uff0c\u5e76\u7ed3\u5408\u591a\u5c3a\u5ea6STFT\u548c\u5bf9\u6297\u635f\u5931\u8fdb\u884c\u8bad\u7ec3\u3002","title":"\u5c0f\u7ed3"},{"location":"tts/%E5%A3%B0%E7%A0%81%E5%99%A8/#hifigan","text":"","title":"HiFiGAN"},{"location":"tts/%E5%A3%B0%E7%A0%81%E5%99%A8/#hifigan_1","text":"HiFiGAN\u662f\u8fd1\u5e74\u6765\u5728\u5b66\u672f\u754c\u548c\u5de5\u4e1a\u754c\u90fd\u8f83\u4e3a\u5e38\u7528\u7684\u58f0\u7801\u5668\uff0c\u80fd\u591f\u5c06\u58f0\u5b66\u6a21\u578b\u4ea7\u751f\u7684\u9891\u8c31\u8f6c\u6362\u4e3a\u9ad8\u8d28\u91cf\u7684\u97f3\u9891\uff0c\u8fd9\u79cd\u58f0\u7801\u5668\u91c7\u7528\u751f\u6210\u5bf9\u6297\u7f51\u7edc\uff08Generative Adversial Networks\uff0cGAN\uff09\u4f5c\u4e3a\u57fa\u7840\u751f\u6210\u6a21\u578b\uff0c\u76f8\u6bd4\u4e8e\u4e4b\u524d\u76f8\u8fd1\u7684MelGAN\uff0c\u6539\u8fdb\u70b9\u5728\u4e8e\uff1a \u5f15\u5165\u4e86\u591a\u5468\u671f\u5224\u522b\u5668\uff08Multi-Period Discriminator\uff0cMPD\uff09\u3002HiFiGAN\u540c\u65f6\u62e5\u6709\u591a\u5c3a\u5ea6\u5224\u522b\u5668\uff08Multi-Scale Discriminator\uff0cMSD\uff09\u548c\u591a\u5468\u671f\u5224\u522b\u5668\uff0c\u5c3d\u53ef\u80fd\u589e\u5f3aGAN\u5224\u522b\u5668\u7504\u522b\u5408\u6210\u6216\u771f\u5b9e\u97f3\u9891\u7684\u80fd\u529b\uff0c\u4ece\u800c\u63d0\u5347\u5408\u6210\u97f3\u8d28\u3002 \u751f\u6210\u5668\u4e2d\u63d0\u51fa\u4e86\u591a\u611f\u53d7\u91ce\u878d\u5408\u6a21\u5757\u3002WaveNet\u4e3a\u4e86\u589e\u5927\u611f\u53d7\u91ce\uff0c\u53e0\u52a0\u5e26\u6d1e\u5377\u79ef\uff0c\u97f3\u8d28\u867d\u7136\u5f88\u597d\uff0c\u4f46\u662f\u4e5f\u4f7f\u5f97\u6a21\u578b\u8f83\u5927\uff0c\u63a8\u7406\u901f\u5ea6\u8f83\u6162\u3002HiFiGAN\u5219\u63d0\u51fa\u4e86\u4e00\u79cd\u6b8b\u5dee\u7ed3\u6784\uff0c\u4ea4\u66ff\u4f7f\u7528\u5e26\u6d1e\u5377\u79ef\u548c\u666e\u901a\u5377\u79ef\u589e\u5927\u611f\u53d7\u91ce\uff0c\u4fdd\u8bc1\u5408\u6210\u97f3\u8d28\u7684\u540c\u65f6\uff0c\u63d0\u9ad8\u63a8\u7406\u901f\u5ea6\u3002","title":"HiFiGAN\u6982\u8ff0"},{"location":"tts/%E5%A3%B0%E7%A0%81%E5%99%A8/#hifigan_2","text":"HiFiGAN\u7684\u751f\u6210\u5668\u4e3b\u8981\u6709\u4e24\u5757\uff0c\u4e00\u4e2a\u662f\u4e0a\u91c7\u6837\u7ed3\u6784\uff0c\u5177\u4f53\u7531\u4e00\u7ef4\u8f6c\u7f6e\u5377\u79ef\u7ec4\u6210\uff1b\u4e8c\u662f\u6240\u8c13\u7684\u591a\u611f\u53d7\u91ce\u878d\u5408\uff08Multi-Receptive Field Fusion\uff0cMRF\uff09\u6a21\u5757\uff0c\u4e3b\u8981\u8d1f\u8d23\u5bf9\u4e0a\u91c7\u6837\u83b7\u5f97\u7684\u91c7\u6837\u70b9\u8fdb\u884c\u4f18\u5316\uff0c\u5177\u4f53\u7531\u6b8b\u5dee\u7f51\u7edc\u7ec4\u6210\u3002","title":"HiFiGAN\u751f\u6210\u5668\u7b80\u4ecb"},{"location":"tts/%E5%A3%B0%E7%A0%81%E5%99%A8/#_15","text":"\u4f5c\u4e3a\u58f0\u7801\u5668\u7684\u751f\u6210\u5668\uff0c\u4e0d\u4f46\u9700\u8981\u8d1f\u8d23\u5c06\u9891\u8c31\u4ece\u9891\u57df\u8f6c\u6362\u5230\u65f6\u57df\uff0c\u800c\u4e14\u8981\u8fdb\u884c\u4e0a\u91c7\u6837\uff08upsampling\uff09\u3002\u4ee580\u7ef4\u6885\u5c14\u9891\u8c31\u5408\u621016kHz\u7684\u8bed\u97f3\u4e3a\u4f8b\uff0c\u5047\u8bbe\u5e27\u79fb\u4e3a10ms\uff0c\u5219\u6bcf\u4e2a\u5e27\u79fb\u5185\u6709160\u4e2a\u8bed\u97f3\u6837\u672c\u70b9\uff0c\u9700\u8981\u901a\u8fc780\u4e2a\u6885\u5c14\u9891\u8c31\u503c\u83b7\u5f97\uff0c\u56e0\u6b64\uff0c\u9700\u8981\u5229\u7528\u5377\u79ef\u7f51\u7edc\u4e0d\u65ad\u589e\u52a0\u8f93\u51fa\"\u957f\u5ea6\"\uff0c\u964d\u4f4e\u8f93\u51fa\"\u901a\u9053\u6570\"\uff0c\u76f4\u5230\u4e0a\u91c7\u6837\u500d\u6570\u8fbe\u5230160\uff0c\u901a\u9053\u6570\u964d\u4f4e\u4e3a1\u5373\u53ef\u3002 \u5bf9\u4e8e\u4e0a\u91c7\u6837\u64cd\u4f5c\uff0c\u53ef\u4ee5\u4f7f\u7528\u63d2\u503c\u7b97\u6cd5\u8fdb\u884c\u5904\u7406\uff0c\u6bd4\u5982\u6700\u8fd1\u90bb\u63d2\u503c\uff08Nearest neighbor interpolation\uff09\u3001\u53cc\u7ebf\u6027\u63d2\u503c\uff08Bi-Linear interpolation\uff09\u3001\u53cc\u7acb\u65b9\u63d2\u503c\uff08Bi-Cubic interpolation\uff09\u7b49\uff0c\u4f46\u662f\u8fd9\u4e9b\u63d2\u503c\u7b97\u6cd5\u8bf4\u5230\u5e95\u662f\u4eba\u5de5\u89c4\u5219\uff0c\u800c\u795e\u7ecf\u7f51\u7edc\u53ef\u4ee5\u81ea\u52a8\u5b66\u4e60\u5408\u9002\u7684\u53d8\u6362\uff0c \u8f6c\u7f6e\u5377\u79ef\uff08ConvTransposed\uff09 \uff0c\u4e5f\u79f0\u53cd\u5377\u79efDeconvolution\u3001\u5fae\u6b65\u5377\u79efFractionally-strided Convolution\uff0c\u5219\u662f\u5408\u9002\u7684\u4e0a\u91c7\u6837\u7ed3\u6784\u3002\u4e00\u822c\u7684\u5377\u79ef\u4e2d\uff0c\u6bcf\u6b21\u5377\u79ef\u64cd\u4f5c\u90fd\u662f\u5bf9\u8f93\u5165\u5f20\u91cf\u548c\u5377\u79ef\u6838\u7684\u6bcf\u4e2a\u5143\u7d20\u8fdb\u884c\u76f8\u4e58\u518d\u52a0\u548c\uff0c\u5377\u79ef\u7684\u8f93\u5165\u548c\u8f93\u51fa\u662f \u591a\u5bf9\u4e00 \u7684\u6620\u5c04\u5173\u7cfb\uff0c\u800c\u8f6c\u7f6e\u5377\u79ef\u5219\u53cd\u8fc7\u6765\uff0c\u662f \u4e00\u5bf9\u591a \u7684\u6620\u5c04\u5173\u7cfb\u3002\u4ece\u8ba1\u7b97\u673a\u7684\u5185\u90e8\u5b9e\u73b0\u6765\u770b\uff0c\u5b9a\u4e49\uff1a \\(X\\) \u4e3a\u8f93\u5165\u5f20\u91cf\uff0c\u5927\u5c0f\u4e3a \\(X_{width}\\times X_{height}\\) \\(Y\\) \u4e3a\u8f93\u51fa\u5f20\u91cf\uff0c\u5927\u5c0f\u4e3a \\(Y_{width}\\times Y_{height}\\) \\(C\\) \u4e3a\u5377\u79ef\u6838\uff0c\u5927\u5c0f\u4e3a \\(C_{width}\\times C_{height}\\) \u7ecf\u8fc7\u666e\u901a\u7684\u5377\u79ef\u8fd0\u7b97\u4e4b\u540e\uff0c\u5c06\u5927\u5f20\u91cf \\(X\\) \"\u4e0b\u91c7\u6837\"\u5230\u5c0f\u5f20\u91cf \\(Y\\) \u3002\u5177\u4f53\u6765\u8bf4\uff0c\u9996\u5148\u5c06\u8f93\u5165\u5f20\u91cf\u5c55\u5e73\u4e3a\u5411\u91cf\uff0c\u4e5f\u5373\u662f \\([X_{width}\\times X_{height},1]\\) \uff0c\u540c\u65f6\u4e5f\u5c06\u5377\u79ef\u6838\u5c55\u5e73\u6210\u5411\u91cf\u5230\u8f93\u5165\u5f20\u91cf \\(X\\) \u7684\u5927\u5c0f\uff1a\u7531\u4e8e\u5377\u79ef\u6838\u5c0f\u4e8e\u8f93\u5165\u5f20\u91cf\uff0c\u5728\u884c\u548c\u5217\u4e0a\u90fd\u75280\u586b\u5145\u81f3\u8f93\u5165\u5f20\u91cf\u5927\u5c0f\uff0c\u7136\u540e\u5c55\u5e73\uff0c\u5219\u5377\u79ef\u6838\u5411\u91cf\u5927\u5c0f\u4e3a \\([1,X_{width}\\times X_{height}]\\) \uff1b\u540c\u65f6\u6309\u7167\u6b65\u957f\uff0c\u5de6\u4fa7\u586b\u51450\u504f\u79fb\u8be5\u5377\u79ef\u6838\u5411\u91cf\uff0c\u6700\u7ec8\uff0c\u5377\u79ef\u6838\u5411\u91cf\u7684\u4e2a\u6570\u4e3a\u8f93\u51fa\u5f20\u91cf\u5143\u7d20\u4e2a\u6570\uff0c\u5219\u6784\u6210\u7684\u5377\u79ef\u6838\u5f20\u91cf\u5927\u5c0f\u4e3a \\([Y_{width}\\times Y_{height},X_{width}\\times X_{height}]\\) \uff0c\u5377\u79ef\u6838\u5f20\u91cf\u548c\u8f93\u5165\u5f20\u91cf\u77e9\u9635\u4e58\uff0c\u83b7\u5f97\u8f93\u51fa\u5f20\u91cf \\([Y_{width}\\times Y_{height},1]\\) \uff0c\u91cd\u5851\u5927\u5c0f\u4e3a \\(C_{width},C_{height}\\) \u3002 \u6b64\u65f6\uff0c\u5982\u679c\u4f7f\u7528\u5377\u79ef\u6838\u5f20\u91cf\u7684\u8f6c\u7f6e \\([X_{width}\\times X_{height},Y_{width}\\times Y_{height}]\\) \u77e9\u9635\u4e58\u5c55\u5e73\u7684 \\([Y_{width}\\times Y_{height},1]\\) \uff0c\u5f97\u5230\u7684\u7ed3\u679c\u5c31\u662f \\([X_{width}\\times X_{height},1]\\) \uff0c\u548c\u521a\u521a\u7684\u8f93\u5165\u5f20\u91cf\u5927\u5c0f\u76f8\u540c\uff0c\u8fd9\u5c31\u5b8c\u6210\u4e86\u4e00\u6b21 \u8f6c\u7f6e\u5377\u79ef \u3002\u4f46\u5b9e\u9645\u4e0a\uff0c\u4e0a\u8ff0\u64cd\u4f5c\u5e76\u975e\u53ef\u9006\u5173\u7cfb\uff0c\u5377\u79ef\u5c06\u8f93\u5165\u5f20\u91cf\"\u4e0b\u91c7\u6837\"\u5230\u8f93\u51fa\u5f20\u91cf\uff0c\u672c\u8d28\u662f\u6709\u635f\u538b\u7f29\u7684\u8fc7\u7a0b\uff0c\u7531\u4e8e\u5728\u5377\u79ef\u4e2d\u4f7f\u7528\u7684 \u5377\u79ef\u6838\u5f20\u91cf \u5e76\u975e\u53ef\u9006\u77e9\u9635\uff0c\u8f6c\u7f6e\u5377\u79ef\u64cd\u4f5c\u4e4b\u540e\u5e76\u4e0d\u80fd\u6062\u590d\u5230\u539f\u59cb\u7684\u6570\u503c\uff0c\u4ec5\u4ec5\u662f\u6062\u590d\u5230\u539f\u59cb\u7684\u5f62\u72b6\u3002\u8fd9\u5176\u5b9e\u4e5f\u5c31\u662f\u7ebf\u6027\u8c31\u4e0e\u6885\u5c14\u9891\u8c31\u5173\u7cfb\uff0c\u52a0\u6743\u6c42\u548c\u5f97\u5230\u6885\u5c14\u9891\u8c31\u4e4b\u540e\u5c31\u56de\u4e0d\u6765\u4e86\uff0c\u9876\u591a\u6c42\u6885\u5c14\u6ee4\u6ce2\u5668\u7ec4\u7684\u4f2a\u9006\uff0c\u8fd1\u4f3c\u6062\u590d\u5230\u7ebf\u6027\u8c31\u3002 \u6b64\u5916\uff0c\u5728\u4f7f\u7528\u8f6c\u7f6e\u5377\u79ef\u65f6\u9700\u8981\u6ce8\u610f\u68cb\u76d8\u6548\u5e94\uff08Checkboard artifacts\uff09\u3002\u68cb\u76d8\u6548\u5e94\u4e3b\u8981\u662f\u7531\u4e8e\u8f6c\u7f6e\u5377\u79ef\u7684\"\u4e0d\u5747\u5300\u91cd\u53e0\"\uff08Uneven overlap\uff09\u9020\u6210\u7684\uff0c\u8f93\u51fa\u4e2d\u6bcf\u4e2a\u50cf\u7d20\u63a5\u53d7\u7684\u4fe1\u606f\u91cf\u4e0e\u76f8\u90bb\u50cf\u7d20\u4e0d\u540c\uff0c\u5728\u8f93\u51fa\u4e0a\u627e\u4e0d\u5230\u8fde\u7eed\u4e14\u5747\u5300\u91cd\u53e0\u7684\u533a\u57df\uff0c\u8868\u73b0\u662f\u56fe\u50cf\u4e2d\u4e00\u4e9b\u8272\u5757\u7684\u989c\u8272\u6bd4\u5468\u56f4\u8272\u5757\u8981\u6df1\uff0c\u50cf\u68cb\u76d8\u4e0a\u7684\u65b9\u683c\uff0c\u53c2\u89c1 Deconvolution and Checkerboard Artifacts \u3002\u907f\u514d\u68cb\u76d8\u6548\u5e94\u7684\u65b9\u6cd5\u4e3b\u8981\u6709\uff1akernel_size\u7684\u5927\u5c0f\u5c3d\u53ef\u80fd\u88abstride\u6574\u9664\uff0c\u5c3d\u53ef\u80fd\u4f7f\u7528stride=1\u7684\u8f6c\u7f6e\u5377\u79ef\uff1b\u5806\u53e0\u8f6c\u7f6e\u5377\u79ef\u51cf\u8f7b\u91cd\u53e0\uff1b\u7f51\u7edc\u672b\u5c3e\u4f7f\u7528 \\(1\\times 1\\) \u7684\u8f6c\u7f6e\u5377\u79ef\u7b49\u3002 \u901a\u8fc7\u4e0a\u8ff0\u7684\u539f\u7406\u90e8\u5206\uff0c\u53ef\u4ee5\u770b\u51fa\u5377\u79ef\u548c\u8f6c\u7f6e\u5377\u79ef\u662f\u5bf9\u5076\u8fd0\u7b97\uff0c\u8f93\u5165\u53d8\u8f93\u51fa\uff0c\u8f93\u51fa\u53d8\u8f93\u5165\uff0c\u5377\u79ef\u7684\u8f93\u5165\u8f93\u51fa\u5927\u5c0f\u5173\u7cfb\u4e3a\uff1a \\[ L_{out}=\\frac{L_{in}+2\\times padding-kernel\\_size}{stride}+1 \\] \u90a3\u4e48\u8f6c\u7f6e\u5377\u79ef\u7684\u8f93\u5165\u8f93\u51fa\u5927\u5c0f\u5219\u4e3a\uff1a \\[ L_{out}=(L_{in}-1)\\times stride+kernel\\_size-2\\times padding \\] \u5f53\u7136\uff0c\u52a0\u5165dilation\u4e4b\u540e\uff0c\u5927\u5c0f\u8ba1\u7b97\u7a0d\u590d\u6742\u4e9b\uff0c\u53c2\u89c1 Pytorch-ConvTranspose1d \uff0c Pytorch-Conv1d \u3002 \u8be5\u90e8\u5206\u53c2\u8003\u6587\u732e\uff1a \u600e\u6837\u901a\u4fd7\u6613\u61c2\u5730\u89e3\u91ca\u53cd\u5377\u79ef\uff1f \u4e00\u6587\u641e\u61c2\u53cd\u5377\u79ef\uff0c\u8f6c\u7f6e\u5377\u79ef Deconvolution and Checkerboard Artifacts \u5982\u4f55\u53bb\u9664\u751f\u6210\u56fe\u7247\u4ea7\u751f\u7684\u68cb\u76d8\u4f2a\u5f71\uff1f A guide to convolution arithmetic for deep learning Pytorch-ConvTranspose1d Pytorch-Conv1d \u8f6c\u7f6e\u5377\u79ef\u5b9e\u73b0\u7684\u4e0a\u91c7\u6837\u5c42\u5b9a\u4e49\u4e3a\uff1a 1 2 3 4 5 self . ups = nn . ModuleList () for i , ( u , k ) in enumerate ( zip ( h . upsample_rates , h . upsample_kernel_sizes )): self . ups . append ( weight_norm ( ConvTranspose1d ( h . upsample_initial_channel // ( 2 ** i ), h . upsample_initial_channel // ( 2 ** ( i + 1 )), kernel_size = k , stride = u , padding = ( k - u ) // 2 ))) \u5bf9\u4e8ehop_size=256\u6765\u8bf4\uff0ch.upsample_rates\u548ch.upsample_kernel_sizes\u5206\u522b\u4e3a\uff1a \"upsample_rates\": [8,8,2,2], \"upsample_kernel_sizes\": [16,16,4,4], \u6839\u636e\u8f6c\u7f6e\u5377\u79ef\u7684\u8f93\u5165\u8f93\u51fa\u5927\u5c0f\u5173\u7cfb\uff1a \\[ L_{out}=(L_{in}-1)\\times stride-2\\times padding+dilation\\times (kernel\\_size-1)+output\\_padding+1 \\] \u7528\u4e8e\u4e0a\u91c7\u6837\u7684\u8f6c\u7f6e\u5377\u79ef\uff0c\u901a\u8fc7\u8bbe\u7f6e\u5408\u9002\u7684padding\uff0c\u914d\u5408\u5377\u79ef\u6838\u5927\u5c0f\uff08kernel_size\uff09\u548c\u6b65\u8fdb\uff08stride\uff09\uff0c\u5c31\u53ef\u4ee5\u5b9e\u73b0\u8f93\u51fa\u4e0e\u8f93\u5165\u5927\u5c0f\u5448\"\u6b65\u8fdb\u500d\u6570\"\u7684\u5173\u7cfb\uff0c\u5728\u8fd9\u91cc\uff0c\u5377\u79ef\u6838\uff08upsample_kernel_sizes\uff09\u8bbe\u7f6e\u4e3a\u6b65\u8fdb\uff08upsample_rates\uff09\u76842\u500d\u3002\u8bbe\u7f6e\u53c2\u6570\u65f6\uff0c\u5fc5\u987b\u4fdd\u6301\u5e27\u79fb\u70b9\u6570\uff0c\u662f\u5404\u4e2a\u5377\u79ef\u5c42\u6b65\u8fdb\uff08\u6216\u8005\u4ee3\u7801\u4e2d\u6240\u8c13\u7684\u4e0a\u91c7\u6837\u7387update_rates\uff09\u7684\u4e58\u79ef\uff0c\u5728\u4e0a\u4f8b\u4e2d\uff0c\u4e5f\u5c31\u662f\uff1a \\[ hop\\_length=256=8\\times 8\\times 2\\times 2 \\]","title":"\u4e0a\u91c7\u6837\u7ed3\u6784"},{"location":"tts/%E5%A3%B0%E7%A0%81%E5%99%A8/#_16","text":"\u8f6c\u7f6e\u5377\u79ef\u7684\u4e0a\u91c7\u6837\u5bb9\u6613\u5bfc\u81f4\u68cb\u76d8\u6548\u5e94\uff0c\u56e0\u6b64\u6bcf\u6b21\u8f6c\u7f6e\u5377\u79ef\u4e0a\u91c7\u6837\u4e4b\u540e\uff0c\u90fd\u4f1a\u8ddf\u7740\u4e00\u4e2a\u591a\u611f\u53d7\u91ce\u878d\u5408\uff08MRF\uff09\u7684\u6b8b\u5dee\u7f51\u7edc\uff0c\u4ee5\u8fdb\u4e00\u6b65\u63d0\u5347\u6837\u672c\u70b9\u7684\u751f\u6210\u8d28\u91cf\u3002\u591a\u611f\u53d7\u91ce\u878d\u5408\u6a21\u5757\u662f\u4e00\u79cd\u5229\u7528\u5e26\u6d1e\u5377\u79ef\u548c\u666e\u901a\u5377\u79ef\u63d0\u9ad8\u751f\u6210\u5668\u611f\u53d7\u91ce\u7684\u7ed3\u6784\uff0c\u5e26\u6d1e\u5377\u79ef\u7684\u6269\u5f20\u500d\u6570\u9010\u6b65\u9012\u589e\uff0c\u5982dilation=1,3,5\uff0c\u6bcf\u4e2a\u5e26\u6d1e\u5377\u79ef\u4e4b\u540e\uff0c\u8ddf\u7740\u5377\u79ef\u6838\u5927\u4e8e1\u7684\u666e\u901a\u5377\u79ef\uff0c\u4ece\u800c\u5b9e\u73b0\u5e26\u6d1e\u5377\u79ef\u548c\u666e\u901a\u5377\u79ef\u7684\u4ea4\u66ff\u4f7f\u7528\u3002\u5e26\u6d1e\u5377\u79ef\u548c\u666e\u901a\u5377\u79ef\u7684\u8f93\u5165\u8f93\u51fa\u5927\u5c0f\u4fdd\u6301\u4e0d\u53d8\uff0c\u5728\u4e00\u8f6e\u5e26\u6d1e\u548c\u666e\u901a\u5377\u79ef\u5b8c\u6210\u4e4b\u540e\uff0c\u539f\u59cb\u8f93\u5165\u8df3\u8fde\u5230\u5377\u79ef\u7684\u7ed3\u679c\uff0c\u4ece\u800c\u5b9e\u73b0\u4e00\u8f6e\"\u591a\u611f\u53d7\u91ce\u878d\u5408\"\u3002\u591a\u611f\u53d7\u91ce\u878d\u5408\u7684\u5177\u4f53\u5b9e\u73b0\u4e0a\uff0c\u8bba\u6587\u4e2d\u63d0\u51fa\u4e86\u4e24\u79cd\u53c2\u6570\u91cf\u4e0d\u540c\u7684\u6b8b\u5dee\u7f51\u7edc\u3002\u4e00\u79cd\u662f\u53c2\u6570\u91cf\u8f83\u591a\uff0c\u591a\u7ec4\u5e26\u6d1e\u5377\u79ef\uff08dilation=1,3,5\uff09\u548c\u666e\u901a\u5377\u79ef\u4ea4\u66ff\u4f7f\u7528\uff0cHiFiGAN v1 (config_v1.json)\u548cHiFiGAN v2 (config_v2.json)\u5747\u4f7f\u7528\u8be5\u79cd\u591a\u611f\u53d7\u91ce\u878d\u5408\uff08MRF\uff09\u6a21\u5757\u3002\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 class ResBlock1 ( torch . nn . Module ): def __init__ ( self , h , channels , kernel_size = 3 , dilation = ( 1 , 3 , 5 )): super ( ResBlock1 , self ) . __init__ () self . h = h self . convs1 = nn . ModuleList ([ weight_norm ( Conv1d ( channels , channels , kernel_size , 1 , dilation = dilation [ 0 ], padding = get_padding ( kernel_size , dilation [ 0 ]))), weight_norm ( Conv1d ( channels , channels , kernel_size , 1 , dilation = dilation [ 1 ], padding = get_padding ( kernel_size , dilation [ 1 ]))), weight_norm ( Conv1d ( channels , channels , kernel_size , 1 , dilation = dilation [ 2 ], padding = get_padding ( kernel_size , dilation [ 2 ]))), ]) self . convs1 . apply ( init_weights ) self . convs2 = nn . ModuleList ([ weight_norm ( Conv1d ( channels , channels , kernel_size , 1 , dilation = 1 , padding = get_padding ( kernel_size , 1 ))), weight_norm ( Conv1d ( channels , channels , kernel_size , 1 , dilation = 1 , padding = get_padding ( kernel_size , 1 ))), weight_norm ( Conv1d ( channels , channels , kernel_size , 1 , dilation = 1 , padding = get_padding ( kernel_size , 1 ))) ]) self . convs2 . apply ( init_weights ) def forward ( self , x ): for c1 , c2 in zip ( self . convs1 , self . convs2 ): xt = F . leaky_relu ( x , LRELU_SLOPE ) xt = c1 ( xt ) xt = F . leaky_relu ( xt , LRELU_SLOPE ) xt = c2 ( xt ) x = xt + x return x def remove_weight_norm ( self ): for l in self . convs1 : remove_weight_norm ( l ) for l in self . convs2 : remove_weight_norm ( l ) \u53e6\u5916\u4e00\u79cdMRF\u5927\u5927\u51cf\u5c11\u4e86\u53c2\u6570\u91cf\uff0c\u4ec5\u7531\u4e24\u5c42\u5e26\u6d1e\u5377\u79ef\uff08dilation=1,3\uff09\u7ec4\u6210\uff0c\u4f46\u4f9d\u7136\u4fdd\u6301\u4e86\u8df3\u8dc3\u8fde\u63a5\u7684\u7ed3\u6784: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class ResBlock2 ( torch . nn . Module ): def __init__ ( self , h , channels , kernel_size = 3 , dilation = ( 1 , 3 )): super ( ResBlock2 , self ) . __init__ () self . h = h self . convs = nn . ModuleList ([ weight_norm ( Conv1d ( channels , channels , kernel_size , 1 , dilation = dilation [ 0 ], padding = get_padding ( kernel_size , dilation [ 0 ]))), weight_norm ( Conv1d ( channels , channels , kernel_size , 1 , dilation = dilation [ 1 ], padding = get_padding ( kernel_size , dilation [ 1 ]))), ]) self . convs . apply ( init_weights ) def forward ( self , x ): for c in self . convs : xt = F . leaky_relu ( x , LRELU_SLOPE ) xt = c ( xt ) x = xt + x return x def remove_weight_norm ( self ): for l in self . convs : remove_weight_norm ( l ) \u6ce8\u610f\u5230\u4e24\u79cdMRF\u90fd\u4f7f\u7528\u4e86weight_norm\u5bf9\u795e\u7ecf\u7f51\u7edc\u7684\u6743\u91cd\u8fdb\u884c\u89c4\u8303\u5316\uff0c\u76f8\u6bd4\u4e8ebatch_norm\uff0cweight_norm\u4e0d\u4f9d\u8d56mini-batch\u7684\u6570\u636e\uff0c\u5bf9\u566a\u97f3\u6570\u636e\u66f4\u4e3a\u9c81\u68d2\uff1b\u5e76\u4e14\uff0c\u53ef\u4ee5\u5e94\u7528\u4e8eRNN\u7b49\u65f6\u5e8f\u7f51\u7edc\u4e0a\uff1b\u6b64\u5916\uff0cweight_norm\u76f4\u63a5\u5bf9\u795e\u7ecf\u7f51\u7edc\u7684\u6743\u91cd\u503c\u8fdb\u884c\u89c4\u8303\u5316\uff0c\u524d\u5411\u548c\u540e\u5411\u8ba1\u7b97\u65f6\uff0c\u5e26\u6765\u7684\u989d\u5916\u8ba1\u7b97\u548c\u5b58\u50a8\u5f00\u9500\u90fd\u8f83\u5c0f\u3002weight_norm\u672c\u8d28\u662f\u5229\u7528\u65b9\u5411 \\(v\\) \u548c\u5e45\u5ea6\u5f20\u91cf \\(g\\) \u66ff\u4ee3\u6743\u91cd\u5f20\u91cf \\(w\\) \uff1a \\[ w=g\\frac{v}{||v||} \\] \u65b9\u5411\u5f20\u91cf \\(v\\) \u548c \\(w\\) \u5927\u5c0f\u76f8\u540c\uff0c\u5e45\u5ea6\u5f20\u91cf \\(g\\) \u6bd4 \\(w\\) \u5c11\u4e00\u7ef4\uff0c\u4f7f\u5f97 \\(w\\) \u80fd\u591f\u6bd4\u8f83\u5bb9\u6613\u5730\u6574\u4f53\u7f29\u653e\u3002\u4e0d\u76f4\u63a5\u4f18\u5316 \\(w\\) \uff0c\u800c\u662f\u8bad\u7ec3 \\(v\\) \u548c \\(g\\) \u3002 \u540c\u65f6\u6ce8\u610f\u5230\uff0c\u5728\u63a8\u7406\u65f6\u9700\u8981remove_weight_norm\uff0c\u8fd9\u662f\u56e0\u4e3a\u8bad\u7ec3\u65f6\u9700\u8981\u8ba1\u7b97\u6743\u91cd\u77e9\u9635\u7684\u65b9\u5411\u548c\u5e45\u5ea6\u5f20\u91cf\uff0c\u800c\u5728\u63a8\u7406\u65f6\uff0c\u53c2\u6570\u5df2\u7ecf\u4f18\u5316\u5b8c\u6210\uff0c\u8981\u6062\u590d\u56de\u53bb\uff0c\u6240\u4ee5\u5728\u63a8\u7406\u65f6\u5c31\u76f4\u63a5\u79fb\u9664weight_norm\u673a\u5236\u3002 \u6bcf\u4e2a\u5377\u79ef\u6838\u76840\u586b\u5145\u4e2a\u6570\u90fd\u8c03\u7528\u4e86get_padding\u51fd\u6570\uff0c\u5229\u7528\u586b\u5145\u4fdd\u8bc1\u8f93\u5165\u8f93\u51fa\u7684\u957f\u5bbd\u5927\u5c0f\u4e00\u81f4\uff0c\u8be5\u586b\u5145\u5927\u5c0f\u7684\u8ba1\u7b97\u65b9\u6cd5\uff1a \\[ padding=(kernel\\_size-1)*padding//2 \\]","title":"\u591a\u611f\u53d7\u91ce\u878d\u5408"},{"location":"tts/%E5%A3%B0%E7%A0%81%E5%99%A8/#hifigan_3","text":"HiFiGAN\u7684\u5224\u522b\u5668\u6709\u4e24\u4e2a\uff0c\u5206\u522b\u662f\u591a\u5c3a\u5ea6\u548c\u591a\u5468\u671f\u5224\u522b\u5668\uff0c\u4ece\u4e24\u4e2a\u4e0d\u540c\u89d2\u5ea6\u5206\u522b\u9274\u5b9a\u8bed\u97f3\u3002\u591a\u5c3a\u5ea6\u5224\u522b\u5668\u6e90\u81eaMelGAN\u58f0\u7801\u5668\u7684\u505a\u6cd5\uff0c\u4e0d\u65ad\u5e73\u5747\u6c60\u5316\u8bed\u97f3\u5e8f\u5217\uff0c\u9010\u6b21\u5c06\u8bed\u97f3\u5e8f\u5217\u7684\u957f\u5ea6\u51cf\u534a\uff0c\u7136\u540e\u5728\u8bed\u97f3\u7684\u4e0d\u540c\u5c3a\u5ea6\u4e0a\u65bd\u52a0\u82e5\u5e72\u5c42\u5377\u79ef\uff0c\u6700\u540e\u5c55\u5e73\uff0c\u4f5c\u4e3a\u591a\u5c3a\u5ea6\u5224\u522b\u5668\u7684\u8f93\u51fa\u3002\u591a\u5468\u671f\u5224\u522b\u5668\u5219\u662f\u4ee5\u4e0d\u540c\u7684\u5e8f\u5217\u957f\u5ea6\u5c06\u4e00\u7ef4\u7684\u97f3\u9891\u5e8f\u5217\u6298\u53e0\u4e3a\u4e8c\u7ef4\u5e73\u9762\uff0c\u5728\u4e8c\u7ef4\u5e73\u9762\u4e0a\u65bd\u52a0\u4e8c\u7ef4\u5377\u79ef\u3002","title":"HiFiGAN\u5224\u522b\u5668\u7b80\u4ecb"},{"location":"tts/%E5%A3%B0%E7%A0%81%E5%99%A8/#_17","text":"\u591a\u5c3a\u5ea6\u5224\u522b\u5668\u7684\u6838\u5fc3\u662f\u591a\u6b21\u5e73\u5747\u6c60\u5316\uff0c\u7f29\u77ed\u5e8f\u5217\u957f\u5ea6\uff0c\u6bcf\u6b21\u5e8f\u5217\u957f\u5ea6\u6c60\u5316\u81f3\u539f\u6765\u7684\u4e00\u534a\uff0c\u7136\u540e\u8fdb\u884c\u5377\u79ef\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u591a\u5c3a\u5ea6\u5224\u522b\u5668\u9996\u5148\u5bf9\u539f\u6837\u672c\u70b9\u8fdb\u884c\u4e00\u6b21\"\u539f\u5c3a\u5bf8\u5224\u522b\"\uff0c\u5176\u4e2d\"\u539f\u5c3a\u5bf8\u5224\u522b\"\u6a21\u5757\u4e2d\u4e00\u7ef4\u5377\u79ef\u7684\u53c2\u6570\u89c4\u8303\u5316\u65b9\u6cd5\u4e3a\u8c31\u5f52\u4e00\u5316\uff08spectral_norm\uff09\uff1b\u63a5\u7740\u5bf9\u6837\u672c\u70b9\u5e8f\u5217\u8fdb\u884c\u5e73\u5747\u6c60\u5316\uff0c\u4f9d\u6b21\u5c06\u5e8f\u5217\u957f\u5ea6\u51cf\u534a\uff0c\u7136\u540e\u5bf9\"\u4e0b\u91c7\u6837\"\u7684\u6837\u672c\u70b9\u5e8f\u5217\u8fdb\u884c\u5224\u522b\uff0c\u8be5\u6a21\u5757\u4e2d\u4e00\u7ef4\u5377\u79ef\u7684\u53c2\u6570\u89c4\u8303\u5316\u65b9\u6cd5\u4e3a\u6743\u91cd\u5f52\u4e00\u5316\uff08weight_norm\uff09\u3002\u5728\u6bcf\u4e00\u4e2a\u7279\u5b9a\u5c3a\u5ea6\u7684\u5b50\u5224\u522b\u5668\u4e2d\uff0c\u9996\u5148\u8fdb\u884c\u82e5\u5e72\u5c42\u5206\u7ec4\u5377\u79ef\uff0c\u5e76\u5bf9\u5377\u79ef\u7684\u53c2\u6570\u8fdb\u884c\u89c4\u8303\u5316\uff1b\u63a5\u7740\u5229\u7528leaky_relu\u8fdb\u884c\u6fc0\u6d3b\uff1b\u5728\u7ecf\u8fc7\u591a\u4e2a\u5377\u79ef\u5c42\u4e4b\u540e\uff0c\u6700\u540e\u5229\u7528\u8f93\u51fa\u901a\u9053\u4e3a1\u7684\u5377\u79ef\u5c42\u8fdb\u884c\u540e\u5904\u7406\uff0c\u5c55\u5e73\u540e\u4f5c\u4e3a\u8f93\u51fa\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 class MultiScaleDiscriminator ( torch . nn . Module ): def __init__ ( self ): super ( MultiScaleDiscriminator , self ) . __init__ () self . discriminators = nn . ModuleList ([ DiscriminatorS ( use_spectral_norm = True ), DiscriminatorS (), DiscriminatorS (), ]) self . meanpools = nn . ModuleList ([ AvgPool1d ( 4 , 2 , padding = 2 ), AvgPool1d ( 4 , 2 , padding = 2 ) ]) def forward ( self , y , y_hat ): y_d_rs = [] y_d_gs = [] fmap_rs = [] fmap_gs = [] for i , d in enumerate ( self . discriminators ): if i != 0 : y = self . meanpools [ i - 1 ]( y ) y_hat = self . meanpools [ i - 1 ]( y_hat ) y_d_r , fmap_r = d ( y ) y_d_g , fmap_g = d ( y_hat ) y_d_rs . append ( y_d_r ) fmap_rs . append ( fmap_r ) y_d_gs . append ( y_d_g ) fmap_gs . append ( fmap_g ) return y_d_rs , y_d_gs , fmap_rs , fmap_gs \u4e0a\u8ff0\u4ee3\u7801\u4e2dy_d_rs\u548cy_d_gs\u5206\u522b\u662f\u771f\u5b9e\u548c\u751f\u6210\u6837\u672c\u7684\u591a\u5c3a\u5ea6\u5224\u522b\u5668\u5c55\u5e73\u540e\u7684\u6574\u4f53\u8f93\u51fa\uff0cfmap_rs\u548cy_d_gs\u5206\u522b\u662f\u771f\u5b9e\u548c\u751f\u6210\u6837\u672c\u7ecf\u8fc7\u6bcf\u4e00\u5c42\u5377\u79ef\u7684\u7279\u5f81\u56fe\uff08feature map\uff09\u3002\u5b50\u5224\u522b\u5668DiscriminatorS\u7531\u82e5\u5e72\u5c42\u5377\u79ef\u7ec4\u6210\uff0c\u6700\u540e\u4e00\u5c42\u8f93\u51fa\u901a\u9053\u4e3a1\uff0c\u4e4b\u540e\u5bf9\u8f93\u51fa\u8fdb\u884c\u5c55\u5e73\u3002\u6ce8\u610f\u5230\uff0c\u4e0eMelGAN\u4e0d\u540c\uff0c\u591a\u5c3a\u5ea6\u5224\u522b\u5668\u7684\u7b2c\u4e00\u4e2a\u5b50\u5224\u522b\u5668DiscriminatorS\u4f7f\u7528\u8c31\u5f52\u4e00\u5316spectral_norm\uff0c\u4e4b\u540e\u4e24\u4e2a\u5b50\u5224\u522b\u5668\u5219\u662f\u6b63\u5e38\u4f7f\u7528\u6743\u91cd\u5f52\u4e00\u5316weight_norm\u89c4\u6574\u53ef\u8bad\u7ec3\u53c2\u6570\u3002\u8c31\u5f52\u4e00\u5316\u5b9e\u9645\u662f\u5728\u6bcf\u6b21\u66f4\u65b0\u5b8c\u53ef\u8bad\u7ec3\u53c2\u6570 \\(W\\) \u4e4b\u540e\uff0c\u90fd\u9664\u4ee5 \\(W\\) \u7684\u5947\u5f02\u503c\uff0c\u4ee5\u4fdd\u8bc1\u6574\u4e2a\u7f51\u7edc\u6ee1\u8db3\u5229\u666e\u5e0c\u8328\u8fde\u7eed\u6027\uff0c\u4f7f\u5f97GAN\u7684\u8bad\u7ec3\u66f4\u7a33\u5b9a\u3002\u53c2\u89c1 GAN \u7684\u8c31\u5f52\u4e00\u5316(Spectral Norm)\u548c\u77e9\u9635\u7684\u5947\u5f02\u503c\u5206\u89e3(Singular Value Decompostion) \u3002DiscriminatorS\u7684\u5177\u4f53\u5b9e\u73b0\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class DiscriminatorS ( torch . nn . Module ): def __init__ ( self , use_spectral_norm = False ): super ( DiscriminatorS , self ) . __init__ () norm_f = weight_norm if use_spectral_norm == False else spectral_norm self . convs = nn . ModuleList ([ norm_f ( Conv1d ( 1 , 128 , 15 , 1 , padding = 7 )), norm_f ( Conv1d ( 128 , 128 , 41 , 2 , groups = 4 , padding = 20 )), norm_f ( Conv1d ( 128 , 256 , 41 , 2 , groups = 16 , padding = 20 )), norm_f ( Conv1d ( 256 , 512 , 41 , 4 , groups = 16 , padding = 20 )), norm_f ( Conv1d ( 512 , 1024 , 41 , 4 , groups = 16 , padding = 20 )), norm_f ( Conv1d ( 1024 , 1024 , 41 , 1 , groups = 16 , padding = 20 )), norm_f ( Conv1d ( 1024 , 1024 , 5 , 1 , padding = 2 )), ]) self . conv_post = norm_f ( Conv1d ( 1024 , 1 , 3 , 1 , padding = 1 )) def forward ( self , x ): fmap = [] for l in self . convs : x = l ( x ) x = F . leaky_relu ( x , LRELU_SLOPE ) fmap . append ( x ) x = self . conv_post ( x ) fmap . append ( x ) x = torch . flatten ( x , 1 , - 1 ) return x , fmap x\u662f\u5b50\u5224\u522b\u5668\u5c55\u5e73\u540e\u7684\u6574\u4f53\u8f93\u51fa\uff0c\u5927\u5c0f\u4e3a[B,l]\uff1bfmap\u662f\u7ecf\u8fc7\u5377\u79ef\u540e\u7684\u7279\u5f81\u56fe\uff08feature map\uff09\uff0c\u7c7b\u578b\u4e3alist\uff0c\u5143\u7d20\u4e2a\u6570\u4e3a\u5377\u79ef\u5c42\u6570\uff0c\u4e0a\u8ff0\u4ee3\u7801\u4e2d\u67098\u4e2a\u5377\u79ef\u5c42\uff0c\u5219fmap\u5143\u7d20\u4e2a\u6570\u4e3a8\uff0c\u6bcf\u4e2a\u5143\u7d20\u5747\u662f\u5927\u5c0f\u4e3a[B,C,l']\u7684\u5f20\u91cf\u3002","title":"\u591a\u5c3a\u5ea6\u5224\u522b\u5668"},{"location":"tts/%E5%A3%B0%E7%A0%81%E5%99%A8/#_18","text":"\u591a\u5468\u671f\u5224\u522b\u5668\u7684\u91cd\u70b9\u662f\u5c06\u4e00\u7ef4\u6837\u672c\u70b9\u5e8f\u5217\u4ee5\u4e00\u5b9a\u5468\u671f\u6298\u53e0\u4e3a\u4e8c\u7ef4\u5e73\u9762\uff0c\u4f8b\u5982\u4e00\u7ef4\u6837\u672c\u70b9\u5e8f\u5217[1,2,3,4,5,6]\uff0c\u5982\u679c\u4ee53\u4e3a\u5468\u671f\uff0c\u6298\u53e0\u6210\u4e8c\u7ef4\u5e73\u9762\u5219\u662f[[1,2,3],[4,5,6]]\uff0c\u7136\u540e\u5bf9\u8fd9\u4e2a\u4e8c\u7ef4\u5e73\u9762\u65bd\u52a0\u4e8c\u7ef4\u5377\u79ef\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u6bcf\u4e2a\u7279\u5b9a\u5468\u671f\u7684\u5b50\u5224\u522b\u5668\u9996\u5148\u8fdb\u884c\u586b\u5145\uff0c\u4fdd\u8bc1\u6837\u672c\u70b9\u6570\u662f\u5468\u671f\u7684\u6574\u500d\u6570\uff0c\u4ee5\u65b9\u4fbf\"\u6298\u53e0\"\u4e3a\u4e8c\u7ef4\u5e73\u9762\uff1b\u63a5\u4e0b\u6765\u8fdb\u5165\u591a\u4e2a\u5377\u79ef\u5c42\uff0c\u8f93\u51fa\u901a\u9053\u6570\u5206\u522b\u4e3a[32,128,512,1024]\uff0c\u5377\u79ef\u4e4b\u540e\u5229\u7528leaky_relu\u6fc0\u6d3b\uff0c\u5377\u79ef\u5c42\u53c2\u6570\u89c4\u8303\u5316\u65b9\u6cd5\u5747\u4e3a\u6743\u91cd\u5f52\u4e00\u5316\uff08weight_norm\uff09\uff1b\u7136\u540e\u7ecf\u8fc7\u591a\u4e2a\u5377\u79ef\u5c42\u4e4b\u540e\uff0c\u5229\u7528\u4e00\u4e2a\u8f93\u5165\u901a\u9053\u6570\u4e3a1024\uff0c\u8f93\u51fa\u901a\u9053\u4e3a1\u7684\u5377\u79ef\u5c42\u8fdb\u884c\u540e\u5904\u7406\uff1b\u6700\u540e\u5c55\u5e73\uff0c\u4f5c\u4e3a\u591a\u5468\u671f\u5224\u522b\u5668\u7684\u6700\u7ec8\u8f93\u51fa\u3002\u591a\u5468\u671f\u5224\u522b\u5668\u5305\u542b\u591a\u4e2a\u5468\u671f\u4e0d\u540c\u7684\u5b50\u5224\u522b\u5668\uff0c\u5728\u8bba\u6587\u4ee3\u7801\u4e2d\u5468\u671f\u6570\u5206\u522b\u8bbe\u7f6e\u4e3a[2,3,5,7,11]\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class MultiPeriodDiscriminator ( torch . nn . Module ): def __init__ ( self ): super ( MultiPeriodDiscriminator , self ) . __init__ () self . discriminators = nn . ModuleList ([ DiscriminatorP ( 2 ), DiscriminatorP ( 3 ), DiscriminatorP ( 5 ), DiscriminatorP ( 7 ), DiscriminatorP ( 11 ), ]) def forward ( self , y , y_hat ): y_d_rs = [] y_d_gs = [] fmap_rs = [] fmap_gs = [] for i , d in enumerate ( self . discriminators ): y_d_r , fmap_r = d ( y ) y_d_g , fmap_g = d ( y_hat ) y_d_rs . append ( y_d_r ) fmap_rs . append ( fmap_r ) y_d_gs . append ( y_d_g ) fmap_gs . append ( fmap_g ) return y_d_rs , y_d_gs , fmap_rs , fmap_gs \u4e0a\u8ff0\u4ee3\u7801\u4e2dy_d_rs\u548cy_d_gs\u5206\u522b\u662f\u771f\u5b9e\u548c\u751f\u6210\u6837\u672c\u7684\u591a\u5468\u671f\u5224\u522b\u5668\u8f93\u51fa\uff0cfmap_rs\u548cfmap_gs\u5206\u522b\u662f\u771f\u5b9e\u548c\u751f\u6210\u6837\u672c\u7ecf\u8fc7\u6bcf\u4e00\u5c42\u5377\u79ef\u540e\u8f93\u51fa\u7684\u7279\u5f81\u56fe\uff08feature map\uff09\u3002\u5b50\u5224\u522b\u5668DiscriminatorP\u7531\u82e5\u5e72\u5c42\u4e8c\u7ef4\u5377\u79ef\u7ec4\u6210\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 class DiscriminatorP ( torch . nn . Module ): def __init__ ( self , period , kernel_size = 5 , stride = 3 , use_spectral_norm = False ): super ( DiscriminatorP , self ) . __init__ () self . period = period norm_f = weight_norm if use_spectral_norm == False else spectral_norm self . convs = nn . ModuleList ([ norm_f ( Conv2d ( 1 , 32 , ( kernel_size , 1 ), ( stride , 1 ), padding = ( get_padding ( 5 , 1 ), 0 ))), norm_f ( Conv2d ( 32 , 128 , ( kernel_size , 1 ), ( stride , 1 ), padding = ( get_padding ( 5 , 1 ), 0 ))), norm_f ( Conv2d ( 128 , 512 , ( kernel_size , 1 ), ( stride , 1 ), padding = ( get_padding ( 5 , 1 ), 0 ))), norm_f ( Conv2d ( 512 , 1024 , ( kernel_size , 1 ), ( stride , 1 ), padding = ( get_padding ( 5 , 1 ), 0 ))), norm_f ( Conv2d ( 1024 , 1024 , ( kernel_size , 1 ), 1 , padding = ( 2 , 0 ))), ]) self . conv_post = norm_f ( Conv2d ( 1024 , 1 , ( 3 , 1 ), 1 , padding = ( 1 , 0 ))) def forward ( self , x ): fmap = [] # 1d to 2d b , c , t = x . shape if t % self . period != 0 : # pad first n_pad = self . period - ( t % self . period ) x = F . pad ( x , ( 0 , n_pad ), \"reflect\" ) t = t + n_pad x = x . view ( b , c , t // self . period , self . period ) for l in self . convs : x = l ( x ) x = F . leaky_relu ( x , LRELU_SLOPE ) fmap . append ( x ) x = self . conv_post ( x ) fmap . append ( x ) x = torch . flatten ( x , 1 , - 1 ) return x , fmap x\u662f\u5b50\u5224\u522b\u5668\u5c55\u5e73\u540e\u7684\u6574\u4f53\u8f93\u51fa\uff0c\u5927\u5c0f\u4e3a[B,l]\uff1bfmap\u662f\u7ecf\u8fc7\u6bcf\u4e00\u5c42\u5377\u79ef\u540e\u7684\u7279\u5f81\u56fe\uff08feature map\uff09\uff0c\u7c7b\u578b\u4e3alist\uff0c\u5143\u7d20\u4e2a\u6570\u4e3a\u5377\u79ef\u5c42\u6570\uff0c\u4e0a\u8ff0\u4ee3\u7801\u4e2d\u67096\u4e2a\u5377\u79ef\u5c42\uff0c\u5219fmap\u5143\u7d20\u4e2a\u6570\u4e3a6\uff0c\u6bcf\u4e2a\u5143\u7d20\u662f\u5927\u5c0f\u4e3a[B,C,l',period]\u7684\u5f20\u91cf\u3002","title":"\u591a\u5468\u671f\u5224\u522b\u5668"},{"location":"tts/%E5%A3%B0%E7%A0%81%E5%99%A8/#_19","text":"HiFiGAN\u7684\u635f\u5931\u51fd\u6570\u4e3b\u8981\u5305\u62ec\u4e09\u5757\uff0c\u4e00\u4e2a\u662fGAN\u539f\u59cb\u7684\u751f\u6210\u5bf9\u6297\u635f\u5931\uff08GAN Loss\uff09\uff1b\u7b2c\u4e8c\u662f\u6885\u5c14\u9891\u8c31\u635f\u5931\uff08Mel-Spectrogram Loss\uff09\uff0c\u5c06\u751f\u6210\u97f3\u9891\u8f6c\u6362\u56de\u6885\u5c14\u9891\u8c31\u4e4b\u540e\uff0c\u8ba1\u7b97\u771f\u5b9e\u548c\u751f\u6210\u97f3\u9891\u5bf9\u5e94\u6885\u5c14\u9891\u8c31\u4e4b\u95f4\u7684L1\u8ddd\u79bb\uff1b\u7b2c\u4e09\u662f\u7279\u5f81\u5339\u914d\u635f\u5931\uff08Feature Match Loss\uff09\uff0c\u4e3b\u8981\u662f\u5bf9\u6bd4\u771f\u5b9e\u548c\u5408\u6210\u97f3\u9891\u5728\u4e2d\u95f4\u5377\u79ef\u5c42\u4e0a\u7684\u5dee\u5f02\u3002","title":"\u635f\u5931\u51fd\u6570\u7b80\u4ecb"},{"location":"tts/%E5%A3%B0%E7%A0%81%E5%99%A8/#_20","text":"HiFiGAN\u4ecd\u7136\u662f\u4e00\u4e2a\u751f\u6210\u5bf9\u6297\u7f51\u7edc\uff0c\u5224\u522b\u5668\u8ba1\u7b97\u8f93\u5165\u662f\u771f\u5b9e\u6837\u672c\u7684\u6982\u7387\uff0c\u751f\u6210\u5668\u751f\u6210\u4ee5\u5047\u4e71\u771f\u7684\u6837\u672c\uff0c\u6700\u7ec8\u8fbe\u5230\u751f\u6210\u5668\u5408\u6210\u63a5\u8fd1\u771f\u5b9e\u7684\u6837\u672c\uff0c\u4ee5\u81f4\u4e8e\u5224\u522b\u5668\u65e0\u6cd5\u533a\u5206\u771f\u5b9e\u548c\u751f\u6210\u6837\u672c\u3002HiFiGAN\u4f7f\u7528 \u6700\u5c0f\u4e8c\u4e58GAN\uff08LS-GAN\uff09 \uff0c\u5c06\u539f\u59cbGAN\u4e2d\u7684\u4e8c\u5143\u4ea4\u53c9\u71b5\u66ff\u6362\u4e3a\u6700\u5c0f\u4e8c\u4e58\u635f\u5931\u51fd\u6570\u3002\u5224\u522b\u5668\u7684\u751f\u6210\u5bf9\u6297\u635f\u5931\u5b9a\u4e49\u4e3a\uff1a \\[ {\\rm L}_{Adv}(D;G)=\\mathbb{E}_{(x,s)}[(D(x)-1)^2+(D(G(s)))^2] \\] \u5bf9\u5e94\u7684\u4ee3\u7801\u5b9e\u73b0\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 def discriminator_loss ( disc_real_outputs , disc_generated_outputs ): loss = 0 r_losses = [] g_losses = [] for dr , dg in zip ( disc_real_outputs , disc_generated_outputs ): r_loss = torch . mean (( dr - 1 ) ** 2 ) g_loss = torch . mean ( dg ** 2 ) loss += ( r_loss + g_loss ) r_losses . append ( r_loss . item ()) g_losses . append ( g_loss . item ()) return loss , r_losses , g_losses \u751f\u6210\u5668\u7684\u751f\u6210\u5bf9\u6297\u635f\u5931\u5b9a\u4e49\u4e3a\uff1a \\[ {\\rm L}_{Adv}(G;D)=\\mathbb{E}_{s}[(D(G(s))-1)^2] \\] \u5176\u4e2d\uff0c \\(x\\) \u8868\u793a\u771f\u5b9e\u97f3\u9891\uff0c \\(s\\) \u8868\u793a\u6885\u5c14\u9891\u8c31\u3002 \u5bf9\u5e94\u7684\u751f\u6210\u5668\u4ee3\u7801\u5b9e\u73b0\uff1a 1 2 3 4 5 6 7 8 9 def generator_loss ( disc_outputs ): loss = 0 gen_losses = [] for dg in disc_outputs : l = torch . mean (( dg - 1 ) ** 2 ) gen_losses . append ( l ) loss += l return loss , gen_losses \u66f4\u8be6\u5c3d\u5173\u4e8eGAN\u7684\u7406\u8bba\u53c2\u89c1\uff1a GAN\u4e07\u5b57\u957f\u6587\u7efc\u8ff0","title":"\u751f\u6210\u5bf9\u6297\u635f\u5931"},{"location":"tts/%E5%A3%B0%E7%A0%81%E5%99%A8/#_21","text":"\u501f\u9274Parallel WaveGAN\u7b49\u524d\u4eba\u5de5\u4f5c\uff0c\u5411GAN\u4e2d\u5f15\u5165\u91cd\u5efa\u635f\u5931\u548c\u6885\u5c14\u9891\u8c31\u635f\u5931\u53ef\u4ee5\u63d0\u9ad8\u6a21\u578b\u8bad\u7ec3\u521d\u671f\u7684\u7a33\u5b9a\u6027\u3001\u751f\u6210\u5668\u7684\u8bad\u7ec3\u6548\u7387\u548c\u5408\u6210\u8bed\u97f3\u7684\u81ea\u7136\u5ea6\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u6885\u5c14\u9891\u8c31\u635f\u5931\u5c31\u662f\u8ba1\u7b97\u5408\u6210\u548c\u771f\u5b9e\u8bed\u97f3\u5bf9\u5e94\u9891\u8c31\u4e4b\u95f4\u7684L1\u8ddd\u79bb\uff1a \\[ {\\rm L}_{Mel}(G)=E_{(x,s)}[||\\phi(x)-\\phi(G(s))||_1] \\] \u5176\u4e2d\uff0c \\(\\phi\\) \u8868\u793a\u5c06\u8bed\u97f3\u8f6c\u6362\u4e3a\u6885\u5c14\u9891\u8c31\u7684\u6620\u5c04\u51fd\u6570\u3002 \u5bf9\u5e94\u7684\u635f\u5931\u51fd\u6570\u5b9e\u73b0\uff1a 1 loss_mel = F . l1_loss ( y_mel , y_g_hat_mel ) \u4e0a\u8ff0\u4ee3\u7801\u4e2d\uff0cy_mel\u8868\u793a\u771f\u5b9e\u8bed\u97f3\u5bf9\u5e94\u7684\u6885\u5c14\u9891\u8c31\uff0cy_g_hat_mel\u8868\u793a\u6885\u5c14\u9891\u8c31\u5408\u6210\u8bed\u97f3\u4e4b\u540e\uff0c\u5408\u6210\u8bed\u97f3\u53c8\u8f6c\u6362\u56de\u6765\u5f97\u5230\u7684\u6885\u5c14\u9891\u8c31\u3002","title":"\u6885\u5c14\u9891\u8c31\u635f\u5931"},{"location":"tts/%E5%A3%B0%E7%A0%81%E5%99%A8/#_22","text":"\u7279\u5f81\u5339\u914d\u635f\u5931\u662f\u7528\u6765\u5ea6\u91cf\u795e\u7ecf\u7f51\u7edc\u4ece\u771f\u5b9e\u548c\u5408\u6210\u8bed\u97f3\u4e2d\u63d0\u53d6\u7684\u7279\u5f81\u5dee\u5f02\uff0c\u5177\u4f53\u6765\u8bf4\uff0c\u5c31\u662f\u8ba1\u7b97\u771f\u5b9e\u548c\u5408\u6210\u8bed\u97f3\u7ecf\u8fc7\u7279\u5f81\u63d0\u53d6\u5c42\u4e4b\u540e\u8f93\u51fa\u4e4b\u95f4\u7684L1\u8ddd\u79bb\uff1a \\[ {\\rm L}_{FM}(G;D)=\\mathbb{E}_{x,s}[\\sum_{i=1}^T\\frac{1}{N_i}||D^i(x)-D^i(G(s))||_1] \\] \u5176\u4e2d\uff0c \\(T\\) \u8868\u793a\u5224\u522b\u5668\u4e2d\u7279\u5f81\u63d0\u53d6\u5c42\u7684\u5c42\u6570\uff0c \\(D^i\\) \u8868\u793a\u63d0\u53d6\u7684\u7279\u5f81\uff0c \\(N_i\\) \u8868\u793a\u7b2c \\(i\\) \u5c42\u5224\u522b\u5668\u7f51\u7edc\u63d0\u53d6\u7684\u7279\u5f81\u6570\u91cf\u3002\u5bf9\u5e94\u7684\u4ee3\u7801\u4e3a\uff1a 1 2 3 4 5 6 7 def feature_loss ( fmap_r , fmap_g ): loss = 0 for dr , dg in zip ( fmap_r , fmap_g ): for rl , gl in zip ( dr , dg ): loss += torch . mean ( torch . abs ( rl - gl )) return loss","title":"\u7279\u5f81\u5339\u914d\u635f\u5931"},{"location":"tts/%E5%A3%B0%E7%A0%81%E5%99%A8/#_23","text":"\u751f\u6210\u5668\u7684\u6574\u4f53\u635f\u5931\u4e3a\uff1a \\[ {\\rm L}_G={\\rm L}_{Adv}(G;D)+\\lambda_{fm}{\\rm L}_{FM}(G;D)+\\lambda_{mel}{\\rm L}_{Mel}(G) \\] \u5176\u4e2d\uff0c \\(\\lambda_{fm}\\) \u548c \\(\\lambda_{mel}\\) \u5206\u522b\u4e3a\u7279\u5f81\u5339\u914d\u548c\u6885\u5c14\u9891\u8c31\u635f\u5931\u7684\u52a0\u6743\u7cfb\u6570\uff0c\u5b9e\u9a8c\u4e2d \\(\\lambda_{fm}=2,\\lambda_{mel}=45\\) \u3002 \u56e0\u4e3aHiFiGAN\u7684\u5224\u522b\u5668\u662f\u7531\u591a\u5c3a\u5ea6\u5224\u522b\u5668\u548c\u591a\u5468\u671f\u5224\u522b\u5668\u7ec4\u6210\uff0c\u56e0\u6b64\u751f\u6210\u5668\u7684\u603b\u4f53\u635f\u5931\u53c8\u53ef\u4ee5\u5199\u4f5c\uff1a \\[ {\\rm L}_G=\\sum_{k=1}^K[{\\rm L}_{Adv}(G;D_k)+\\lambda_{fm}{\\rm L}_{FM}(G;D_k)]+\\lambda_{mel}{\\rm L}_{Mel}(G) \\] \u5176\u4e2d\uff0c \\(K\\) \u4e3a\u591a\u5c3a\u5ea6\u5224\u522b\u5668\u548c\u591a\u5468\u671f\u5224\u522b\u5668\u7684\u4e2a\u6570\uff0c \\(D_k\\) \u8868\u793a\u7b2c \\(k\\) \u4e2aMPD\u548cMSD\u7684\u5b50\u5224\u522b\u5668\u3002 \u5bf9\u5e94\u7684\u4ee3\u7801\u4e3a\uff1a 1 2 3 4 5 6 7 8 9 10 # L1 Mel-Spectrogram Loss loss_mel = F . l1_loss ( y_mel , y_g_hat_mel ) * 45 y_df_hat_r , y_df_hat_g , fmap_f_r , fmap_f_g = mpd ( y , y_g_hat ) y_ds_hat_r , y_ds_hat_g , fmap_s_r , fmap_s_g = msd ( y , y_g_hat ) loss_fm_f = feature_loss ( fmap_f_r , fmap_f_g ) loss_fm_s = feature_loss ( fmap_s_r , fmap_s_g ) loss_gen_f , losses_gen_f = generator_loss ( y_df_hat_g ) loss_gen_s , losses_gen_s = generator_loss ( y_ds_hat_g ) loss_gen_all = loss_gen_s + loss_gen_f + loss_fm_s + loss_fm_f + loss_mel \u5224\u522b\u5668\u7684\u6574\u4f53\u635f\u5931\u4e3a\uff1a \\[ {\\rm L}_D={\\rm L}_{Adv}(D;G) \\] \u7c7b\u4f3c\u4e8e\u751f\u6210\u5668\uff0c\u7531\u4e8eHiFiGAN\u62e5\u6709\u591a\u4e2a\u5224\u522b\u5668\uff0c\u56e0\u6b64\u5224\u522b\u5668\u7684\u6574\u4f53\u635f\u5931\u53ef\u4ee5\u5199\u4f5c\uff1a \\[ {\\rm L}_D=\\sum_{k=1}^K{\\rm L}_{Adv}(D_k;G) \\] \u5176\u4e2d\uff0c \\(K\\) \u4e3a\u591a\u5c3a\u5ea6\u5224\u522b\u5668\u548c\u591a\u5468\u671f\u5224\u522b\u5668\u7684\u4e2a\u6570\uff0c \\(D_k\\) \u8868\u793a\u7b2c \\(k\\) \u4e2aMPD\u548cMSD\u7684\u5b50\u5224\u522b\u5668\u3002 \u5bf9\u5e94\u7684\u4ee3\u7801\u4e3a\uff1a 1 2 3 4 5 6 7 8 9 # MPD y_df_hat_r , y_df_hat_g , _ , _ = mpd ( y , y_g_hat . detach ()) loss_disc_f , losses_disc_f_r , losses_disc_f_g = discriminator_loss ( y_df_hat_r , y_df_hat_g ) # MSD y_ds_hat_r , y_ds_hat_g , _ , _ = msd ( y , y_g_hat . detach ()) loss_disc_s , losses_disc_s_r , losses_disc_s_g = discriminator_loss ( y_ds_hat_r , y_ds_hat_g ) loss_disc_all = loss_disc_s + loss_disc_f","title":"\u6574\u4f53\u635f\u5931"},{"location":"tts/%E8%AF%AD%E8%A8%80%E5%AD%A6/","text":"\u8bed\u8a00\u5b66 \u8bed\u8a00\u5b66\u7814\u7a76\u4eba\u7c7b\u7684\u8bed\u8a00\uff0c\u8ba1\u7b97\u8bed\u8a00\u5b66\u5219\u662f\u4e00\u95e8\u8de8\u5b66\u79d1\u7684\u7814\u7a76\u9886\u57df\uff0c\u8bd5\u56fe\u627e\u51fa\u81ea\u7136\u8bed\u8a00\u7684\u89c4\u5f8b\uff0c\u5efa\u7acb\u8fd0\u7b97\u6a21\u578b\uff0c\u8bed\u97f3\u5408\u6210\u5176\u5b9e\u5c31\u662f\u8ba1\u7b97\u8bed\u8a00\u5b66\u7684\u5b50\u9886\u57df\u4e4b\u4e00\u3002\u5728\u8bed\u97f3\u5408\u6210\u4e2d\uff0c\u4e00\u822c\u9700\u8981\u5c06\u6587\u672c\u8f6c\u6362\u4e3a\u5bf9\u5e94\u7684\u97f3\u7d20\uff0c\u7136\u540e\u518d\u5c06\u97f3\u7d20\u8f93\u5165\u5230\u540e\u7aef\u6a21\u578b\u4e2d\uff0c\u56e0\u6b64\u9700\u8981\u4e3a\u6bcf\u4e2a\u8bed\u79cd\u751a\u81f3\u65b9\u8a00\u6784\u5efa\u6070\u5f53\u5408\u7406\u7684\u97f3\u7d20\u4f53\u7cfb\u3002\u76f8\u5173\u6982\u5ff5\u5982\u4e0b\u3002 \u97f3\u7d20\uff08phoneme\uff09\uff1a\u4e5f\u79f0\u97f3\u4f4d\uff0c\u662f\u80fd\u591f\u533a\u522b\u610f\u4e49\u7684\u6700\u5c0f\u8bed\u97f3\u5355\u4f4d\uff0c\u540c\u4e00\u97f3\u7d20\u7531\u4e0d\u540c\u4eba/\u73af\u5883\u9605\u8bfb\uff0c\u53ef\u4ee5\u5f62\u6210\u4e0d\u540c\u7684\u53d1\u97f3\u3002 \u5b57\u7d20\uff08grapheme\uff09\uff1a\u97f3\u7d20\u5bf9\u5e94\u7684\u6587\u672c\u3002\u5177\u4f53\u7684\u533a\u522b\u53c2\u89c1\uff1a Phonemes, Graphemes, and Morphemes! \u53d1\u97f3\uff08phone\uff09\uff1a\u67d0\u4e2a\u97f3\u7d20\u7684\u5177\u4f53\u53d1\u97f3\u3002\u5b9e\u9645\u4e0a\uff0cphoneme\u548cphone\u90fd\u662f\u6307\u7684\u662f\u97f3\u7d20\uff0c\u97f3\u7d20\u53ef\u5177\u5316\u4e3a\u5b9e\u9645\u7684\u97f3\uff0c\u8be5\u8fc7\u7a0b\u79f0\u4e3a\u97f3\u7d20\u7684\u8bed\u97f3\u4f53\u73b0\u3002\u4e00\u4e2a\u97f3\u7d20\u53ef\u80fd\u5305\u542b\u7740\u51e0\u4e2a\u4e0d\u540c\u97f3\u503c\u7684\u97f3\uff0c\u56e0\u800c\u53ef\u4ee5\u4f53\u73b0\u4e3a\u4e00\u4e2a\u97f3\u3001\u4e24\u4e2a\u97f3\u6216\u66f4\u591a\u7684\u540c\u4f4d\u97f3\u3002\u4f46\u662f\u5728\u4e00\u4e9b\u8bba\u8ff0\u4e2d\uff0cphoneme\u504f\u5411\u4e8e\u8868\u793a\u53d1\u97f3\u7684\u7b26\u53f7\uff0cphone\u66f4\u504f\u5411\u4e8e\u7b26\u53f7\u5bf9\u5e94\u7684\u5b9e\u9645\u53d1\u97f3\uff0c\u56e0\u6b64phoneme\u53ef\u5bf9\u5e94\u65e0\u6570\u4e2aphone\u3002 \u97f3\u8282\uff08syllable\uff09\uff1a\u97f3\u8282\u7531\u97f3\u7d20\u7ec4\u6210\u3002\u5728\u6c49\u8bed\u4e2d\uff0c\u9664\u513f\u5316\u97f3\u5916\uff0c\u4e00\u4e2a\u6c49\u5b57\u5c31\u662f\u4e00\u4e2a\u97f3\u8282\u3002\u5982wo3\uff08\u6211\uff09\u662f\u4e00\u4e2a\u97f3\u8282\uff0czhong1\uff08\u4e2d\uff09\u4e5f\u662f\u4e00\u4e2a\u97f3\u8282\u3002 \u53c2\u8003\u8d44\u6599 \u5341\u5206\u8bed\u8a00\u5b66\uff08\u89c6\u9891\u626b\u76f2\u8bfe\u7a0b\uff09 \u8bed\u8a00\u5b66\u6982\u8bba \u300a\u8bed\u97f3\u6a21\u5f0f\u300b\u7b14\u8bb0\uff08\u4e0a\uff09\uff1a\u80ba\u90e8\u6c14\u6d41\u8f85\u97f3 \u300a\u8bed\u97f3\u6a21\u5f0f\u300b\u7b14\u8bb0\uff08\u4e0b\uff09\uff1a\u975e\u80ba\u90e8\u8f85\u97f3\u3001\u5143\u97f3\u3001\u4e00\u4e9b\u6742\u8c08 \u8bed\u6797\u5bd2\u820d-Huisje in het Taalbos \u56fd\u9645\u97f3\u6807 \u56fd\u9645\u97f3\u6807\uff08International Phonetic Alphabet\uff0cIPA\uff09\u662f\u4e00\u79cd\u901a\u7528\u7684\u6ce8\u97f3\u7cfb\u7edf\uff0c\u4e00\u5957\u6ce8\u97f3\u4f53\u7cfb\u53ef\u4ee5\u6807\u6ce8\u591a\u79cd\u8bed\u8a00\u3002\u5bf9\u4e8e\u6c49\u8bed\u6765\u8bf4\uff0c\u4f7f\u7528\u56fd\u9645\u97f3\u6807\u548c\u4f7f\u7528\u62fc\u97f3\u6807\u6ce8\u53d1\u97f3\u6548\u679c\u662f\u76f8\u540c\u7684\uff1b\u4f46\u662f\u5982\u679c\u5e0c\u671b\u5b9e\u73b0\u591a\u8bed\u8a00\u7684\u6ce8\u97f3\uff0c\u5c31\u5fc5\u987b\u91c7\u7528\u7edf\u4e00\u7684\u6ce8\u97f3\uff0cIPA\u5c31\u662f\u8fd9\u6837\u4e00\u79cd\u6bd4\u8f83\u597d\u7684\u53d1\u97f3\u6807\u6ce8\u5f62\u5f0f\u3002 \u56e0\u4e3a\u4eba\u7c7b\u8bed\u97f3\u5dee\u5f02\u5f88\u5927\uff0c\u6709\u9650\u7684\u62c9\u4e01\u5b57\u6bcd\u8fdc\u4e0d\u591f\u7528\uff0c\u4e8e\u662f\u5c31\u9700\u8981\u6539\u53d8\u5b57\u5f62\u548c\u501f\u7528\u5176\u5b83\u8bed\u8a00\u7684\u5b57\u6bcd\u6765\u8865\u5145\u3002\u4e5f\u5c31\u662f\u8bf4\uff0cIPA\u4ee5\u62c9\u4e01\u5b57\u6bcd\uff08\u7f57\u9a6c\u5b57\u6bcd\uff09\u7684\u5c0f\u5199\u5370\u5237\u4f53\u4e3a\u4e3b\uff0c\u5982[a]\u3001[b]\u3001[c]\u3001[d]\u3001[f]\u3001[g]\u3001[h]\u3001[i]\u3001[j]\u3001[k]\u3001[p]\u7b49\u3002\u5728\u4e0d\u591f\u7528\u65f6\uff0c\u4f7f\u7528\u4ee5\u4e0b\u51e0\u79cd\u65b9\u6cd5\u6765\u8865\u5145\uff0c\u5305\u62ec\uff1a \u4f7f\u7528\u62c9\u4e01\u5b57\u6bcd\u5927\u5199\u5370\u5237\u4f53\u6216\u4e66\u5199\u4f53\uff08\u8349\u4f53\uff09\uff0c\u5982\uff1a\u5927\u5199\u5370\u5237\u4f53[\u0274]\u3001[\u0280]\u3001[\u0262]\u3001[\u0299]\u3001[\u029c]\u3001a\u7684\u624b\u5199\u4f53[\u0251]\u3001v\u7684\u8349\u4f53[\u028b]\u7b49\uff1b \u98a0\u5012\u6216\u8005\u6539\u53d8\u62c9\u4e01\u5b57\u6bcd\u7684\u5b57\u5f62\uff0c\u5982\uff1a[\u0259]\uff08\u5012\u7f6ee\uff09\u3001[\u0255]\uff08\u5377\u5c3ec\uff09\u3001[\u0256]\uff08\u53f3\u5f2f\u5c3ed\uff09\u3001[\u014b]\uff08\u957f\u53f3\u817fn\uff09\u7b49\uff1b \u501f\u7528\u5176\u5b83\u8bed\u8a00\u5b57\u6bcd\uff0c\u5982\uff1a[\u03b5]\uff08\u5e0c\u814a\u8bed\uff09\u3001[\u03b8]\uff08\u5e0c\u814a\u8bed)\u3001[\u0142]\uff08\u6ce2\u5170\u8bed\uff09\u3001[\u00f8]\uff08\u4e39\u9ea6\u8bed\uff09\u3001[\u00e7]\uff08\u52a0\u6cf0\u7f57\u5c3c\u4e9a\u8bed\uff09\u7b49\uff1b \u65b0\u5236\u5b57\u6bcd\uff0c\u5982\uff1a[\u0283]\u3001[\u0264]\u7b49\uff1b \u5728\u5b57\u6bcd\u4e0a\u52a0\u7b26\u53f7\uff0c\u5982\uff1a[\u0289]\uff08\u52a0\u6a2a\u7ebf\u7684u\uff09\u7b49\u3002 IPA\u7684\u5b57\u6bcd\u548c\u53d1\u97f3 \u8bfb\u97f3\u4e0a\uff0c\u4e3a\u7167\u987e\u4e60\u60ef\uff0c\u5927\u591a\u6570\u7b26\u53f7\u4ecd\u8bfb\u62c9\u4e01\u8bed\u6216\u5176\u5b83\u8bed\u8a00\u7684\u539f\u97f3\u3002IPA\u8ffd\u6c42\u4e00\u4e2a\u5b57\u7b26\u8868\u793a\u4e00\u4e2a\u53d1\u97f3\uff0c\u4e0d\u4f1a\u51fa\u73b0\u5728\u4e00\u4e9b\u8bed\u8a00\u4e2d\uff0c\u5982\u82f1\u8bed\u7528\"th\"\u3001\"sh\"\u8868\u793a\u4e00\u4e2a\u53d1\u97f3\u7684\u60c5\u51b5\u3002IPA\u5b57\u6bcd\u7684\u53d1\u97f3\uff0c\u6709\u4e9b\u548c\u539f\u59cb\u7684\u5e0c\u814a\u5b57\u6bcd\u53d1\u97f3\u76f8\u540c\uff0c\u4f46\u6709\u4e9b\u53c8\u548c\u82f1\u8bed\u7b49\u8bed\u8a00\u53d1\u97f3\u76f8\u540c\uff0c\u5176\u5927\u81f4\u7684\u89c4\u5219\u5305\u62ec\uff1a \u5143\u97f3\u5b57\u6bcd\uff1a\u5982[a]\u3001[o]\u3001[i]\u7b49\u53d1\u97f3\u548c\u610f\u5927\u5229\u8bed\u3001\u897f\u73ed\u7259\u8bed\u65e0\u8f83\u5927\u5dee\u522b\uff1b \u8f85\u97f3\u5b57\u6bcd\uff1a\u5982[m]\u3001[n]\u3001[z]\u3001[p]\u3001[b]\u7684\u53d1\u97f3\u63a5\u8fd1\u4e8e\u82f1\u8bed\uff1b \u5176\u4ed6\u5b57\u6bcd\uff1a\u5982[y]\u548c\u5fb7\u8bed\u6216\u82ac\u5170\u8bed\u4e2d\u7684y\u7c7b\u4f3c\uff0c\u800c[j]\u4e0e\u82f1\u8bed\u7684y\u53d1\u97f3\u63a5\u8fd1\u3002 IPA\u7684\u5b57\u6bcd\u6784\u6210\u4f1a\u968f\u7740\u89c4\u8303\u7684\u4fee\u6539\u800c\u53d8\u52a8\uff0c2018\u5e74\u53d1\u5e03\u7684\u6807\u51c6\u4e2d\uff0cIPA\u7684\u5b57\u6bcd\u6709107\u4e2a\uff0c\u5305\u62ec\u4e8659\u4e2a\u80ba\u90e8\u6c14\u6d41\u8f85\u97f3\uff0c10\u4e2a\u975e\u80ba\u90e8\u6c14\u6d41\u8f85\u97f3\uff0c28\u4e2a\u5143\u97f3\u548c10\u4e2a\u5176\u4ed6\u5b57\u6bcd\uff0c\u5982\u4e0b\u8868\u6240\u793a\uff1a \u5728\u56fd\u9645\u97f3\u6807\u8868\u4e2d\uff0c\u540c\u4e00\u5217\u3001\u6216\u540c\u4e00\u884c\u7684\u97f3\u6807\uff0c\u5728\u53d1\u97f3\u65b9\u6cd5\u4e0a\u6709\u76f8\u540c\u4e4b\u5904\uff0c\u56e0\u6b64\u4e5f\u5c31\u5177\u6709\u76f8\u4f3c\u7684\u6027\u8d28\uff0c\u8fd9\u4e3a\u8bed\u97f3\u7684\u7814\u7a76\u63d0\u4f9b\u4e86\u8f83\u5927\u7684\u4fbf\u5229\u3002\"\u56fd\u9645\u97f3\u6807\u8868\"\u662f\u8bed\u97f3\u5b66\u7684\u57fa\u7840\uff0c\u5c31\u5982\u540c\"\u5143\u7d20\u5468\u671f\u8868\"\u662f\u5316\u5b66\u7684\u57fa\u7840\u3002\u4e00\u4e9b\u5f00\u6e90\u5de5\u5177\uff0c\u6bd4\u5982 eSpeak NG Text-to-Speech \u3001 Epitran \u5b9e\u73b0\u4e86\u5404\u8bed\u79cd\u7684\u5b57\u7d20\u8f6c\u56fd\u9645\u97f3\u6807\u3002\u4f46\u662f\uff0c\u8fd9\u4e9b\u56fd\u9645\u97f3\u6807\u5f00\u6e90\u5de5\u5177\u5e76\u6ca1\u6709\u63d0\u4f9b\u5bf9\u65b9\u8a00\u7684\u652f\u6301\uff0c\u6bd4\u5982\u4e0a\u6d77\u8bdd\u3001\u95fd\u5357\u8bed\u7684\u5b57\u7d20\u8f6c\u97f3\u7d20\uff1b\u56fd\u9645\u97f3\u6807\u672c\u8eab\u8bc6\u8bb0\u8f83\u4e3a\u590d\u6742\uff0c\u5b66\u4e60\u6210\u672c\u6bd4\u8f83\u9ad8\uff0c\u5e76\u4e14\u4e3a\u4e86\u7167\u987e\u4e16\u754c\u6240\u6709\u8bed\u79cd\uff0c\u97f3\u7d20\u7684\u5212\u5206\u4e0a\u8f83\u4e3a\u7cbe\u7ec6\uff0c\u56e0\u6b64\u56fd\u9645\u97f3\u6807\u662f\u8bed\u97f3\u5408\u6210\u4e2d\u97f3\u7d20\u4f53\u7cfb\u7684\u91cd\u8981\u53c2\u8003\u65b9\u6848\uff0c\u4f46\u975e\u6700\u4f73\u65b9\u6848\u3002 \u97f3\u7cfb\u5b66 \u5bf9\u4e8e\u8bed\u97f3\u5408\u6210\u6765\u8bf4\uff0c\u9700\u8981\u4e86\u89e3\u8bed\u8a00\u5b66\u7684\u5206\u652f\u4e4b\u4e00\uff1a\u97f3\u7cfb\u5b66\uff0c\u4ee5\u4fbf\u66f4\u597d\u5730\u5236\u5b9a\u9002\u7528\u4e8e\u4e00\u4e2a\u8bed\u79cd\u8bed\u97f3\u5408\u6210\u7cfb\u7edf\u7684\u97f3\u7d20\u4f53\u7cfb\u3002\u8fd9\u91cc\u9700\u8981\u63a2\u8ba8\u4e09\u4e2a\u95ee\u9898\uff1a\u97f3\u4f4d\u6570\u91cf\uff0c\u8fd9\u91cc\u7684\u97f3\u4f4d\u548c\u97f3\u7d20\u6982\u5ff5\u533a\u522b\u4e0d\u5927\uff0c\u97f3\u7d20\u4e0d\u9488\u5bf9\u4e00\u4e2a\u8bed\u79cd\uff0c\u662f\u4e00\u4e2a\u6700\u5c0f\u7684\u8bed\u97f3\u5355\u4f4d\uff0c\u97f3\u4f4d\u662f\u9488\u5bf9\u4e00\u4e2a\u7279\u5b9a\u8bed\u8a00\u7684\uff0c\u5177\u6709\u533a\u522b\u610f\u4e49\u7684\u6700\u5c0f\u8bed\u97f3\u5355\u4f4d\uff0c\u53c2\u89c1 \u97f3\u7d20\u548c\u97f3\u4f4d\u7684\u533a\u522b\u4e0e\u8054\u7cfb\u662f\u4ec0\u4e48\uff1f \uff1b\u8bed\u97f3\u914d\u5217\uff0c\u4e5f\u5c31\u662f\u8bed\u97f3\u7b26\u53f7\u7684\u7ec4\u5408\u89c4\u5f8b\uff0c\u54ea\u4e9b\u97f3\u6bb5\u7684\u7ec4\u5408\u662f\u4e0d\u88ab\u5141\u8bb8\u7684\uff0c\u97f3\u6bb5\u51fa\u73b0\u7684\u4f4d\u7f6e\u6709\u54ea\u4e9b\u9650\u5236\uff1b\u97f3\u7cfb\u4ea4\u66ff\uff0c\u97f3\u4e0e\u97f3\u540c\u65f6\u51fa\u73b0\u65f6\uff0c\u5f7c\u6b64\u53d7\u5f71\u54cd\u4f1a\u5bfc\u81f4\u54ea\u4e9b\u5f62\u5f0f\u7684\u53d8\u5316\uff0c\u8fd9\u6d89\u53ca\u5230\u97f3\u7cfb\u8fc7\u7a0b\u3002\u97f3\u7cfb\u8fc7\u7a0b\u53ef\u4ee5\u7406\u89e3\u4e3a\u4e00\u4e2a\u97f3\u6bb5\u53d7\u6240\u5904\u8bed\u97f3\u73af\u5883\u6216\u8bed\u6cd5\u73af\u5883\u7684\u5f71\u54cd\u800c\u4ea7\u751f\u53d8\u5316\u7684\u8fc7\u7a0b\uff0c\u97f3\u7cfb\u8fc7\u7a0b\u7684\u79cd\u7c7b\u6709\u5f88\u591a\uff0c\u6bd4\u5982\u540c\u5316\u548c\u5f02\u5316\u4e24\u79cd\u8fc7\u7a0b\u3002 \u97f3\u4f4d\u6570\u91cf\u7684\u786e\u5b9a\u7275\u626f\u5230\u5bf9\u6bd4\u5206\u5e03\u548c\u4e92\u8865\u5206\u5e03\u4e24\u4e2a\u6982\u5ff5\u3002\u5982\u679cA\u548cB\u5904\u4e8e\u5bf9\u6bd4\u5206\u5e03\u65f6\uff0c\u90a3\u4e48\u7532\u548c\u4e59\u5904\u4e8e\u540c\u6837\u7684\u8bed\u8a00\u73af\u5883\u4e2d\u65f6\uff0c\u5c31\u4f1a\u5f15\u8d77\u610f\u4e49\u7684\u4e0d\u540c\u3002\u6bd4\u5982\u82f1\u8bed\u4e2d\u7684[p]\u548c[b]\u5c31\u5904\u4e8e\u5bf9\u6bd4\u5206\u5e03\uff0c\u5f53\u5b83\u4eec\u5904\u4e8e\u76f8\u540c\u7684\u8bed\u8a00\u73af\u5883\u4e2d\u65f6\uff0c\u6bd4\u5982pin[ p in]\u548cbin[ b in]\uff0c\u4f46\u662f\u4e24\u4e2a\u5355\u8bcd\u7684\u610f\u4e49\u5b8c\u5168\u4e0d\u540c\uff0c\u56e0\u6b64[p]\u548c[b]\u5c31\u5206\u5c5e\u4e24\u4e2a\u4e0d\u540c\u7684\u97f3\u4f4d\u3002\u800c\u5047\u5982A\u548cB\u5904\u4e8e\u4e92\u8865\u5206\u5e03\u65f6\uff0c\u90a3\u4e48\u7532\u548c\u4e59\u4e0d\u53ef\u80fd\u51fa\u73b0\u5728\u540c\u6837\u7684\u8bed\u97f3\u73af\u5883\u4e2d\uff0c\u4f8b\u5982\u82f1\u8bed\u4e2d\u7684[p]\u5904\u4e8e\u91cd\u8bfb\u97f3\u8282\u9996\u65f6pig[ p ig]\uff0c\u5f80\u5f80\u8868\u73b0\u4e3a\u9001\u6c14\u7684[ \\(p^h\\) ]\uff0c\u800c\u5728[s]\u540e\u9762\u65f6spit[s p it]\uff0c\u5f80\u5f80\u8868\u73b0\u4e3a\u4e0d\u9001\u6c14\u7684[p]\uff0c\u9001\u6c14\u7684[ \\(p^h\\) ]\u548c\u4e0d\u9001\u6c14\u7684[p]\u4e0d\u4f1a\u51fa\u73b0\u5728\u540c\u4e00\u8bed\u97f3\u73af\u5883\u4e2d\uff0c\u53ef\u4ee5\u8bf4\uff0c\u5b83\u4eec\u662f\u540c\u4e00\u4e2a\u97f3\u4f4d\u5728\u4e0d\u540c\u8bed\u97f3\u73af\u5883\u4e2d\u7684\u97f3\u4f4d\u53d8\u4f53\u3002\u56e0\u6b64\uff0c \u97f3\u4f4d\u5904\u4e8e\u5bf9\u6bd4\u5206\u5e03\uff0c\u800c\u97f3\u4f4d\u53d8\u4f53\u5904\u4e8e\u4e92\u8865\u5206\u5e03 \u3002\u786e\u7acb\u97f3\u4f4d\u7684\u505a\u6cd5\u4fbf\u662f\u5bfb\u627e\u6700\u5c0f\u5bf9\u6bd4\u5bf9\uff0c\u4e5f\u5c31\u662f\u8bf4\u5bfb\u627e\u97f3\u4f4d\u65f6\u8981\u6ee1\u8db3\uff1a \u5728\u76f8\u540c\u7684\u8bed\u97f3\u73af\u5883\u3002 \u5355\u8bcd\u7684\u610f\u601d\u4e0d\u540c\u3002\u6700\u76f4\u63a5\u7684\u505a\u6cd5\u5c31\u662f\u627e\u4e24\u4e2a\u610f\u4e49\u4e0d\u540c\u7684\u7684\u5355\u8bcd\uff0c\u5e76\u4e14\u53ea\u6709\u5728\u4e00\u4e2a\u4f4d\u7f6e\u4e0a\u6709\u4e0d\u540c\u7684\u97f3\u6bb5\uff0c\u5728\u5176\u5b83\u4f4d\u7f6e\u4e0a\u7684\u97f3\u6bb5\u90fd\u76f8\u540c\uff0c\u8fd9\u4e00\u5bf9\u5355\u8bcd\u5c31\u662f\u6700\u5c0f\u5bf9\u6bd4\u5bf9\u3002\u6bd4\u5982ban[ b an]\u548cman[ m an]\u8fd9\u5bf9\u6700\u5c0f\u5bf9\u6bd4\u5bf9\u4e2d\uff0c\u9664\u4e86[b]\u548c[m]\u4e4b\u5916\uff0c\u5176\u5b83\u97f3\u6bb5\u90fd\u76f8\u540c\uff0c\u6b63\u56e0\u4e3a[b]\u548c[m]\uff0c\u8fd9\u4e24\u4e2a\u5355\u8bcd\u7684\u610f\u4e49\u4e5f\u4e0d\u540c\u3002\u56e0\u6b64\u5f52\u7eb3\u97f3\u4f4d\u7684\u539f\u5219\u6709\uff1a\u5bf9\u7acb\u4e92\u8865\u539f\u5219\u548c\u8bed\u97f3\u76f8\u4f3c\u539f\u5219\u3002 \u8bed\u97f3\u914d\u5217\u662f\u4e00\u4e2a\u8bed\u79cd\u4e2d\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u5355\u8bcd\u3001\u8bed\u7d20\u6216\u97f3\u8282\u4e2d\u53ef\u80fd\u51fa\u73b0\u7684\u5143\u97f3\u548c\u8f85\u97f3\u5e8f\u5217\u5236\u7ea6\u6761\u4ef6\u7684\u96c6\u5408\u3002\u6bd4\u5982\u82f1\u8bed\u5355\u8bcd\"wtist\"\u662f\u4e0d\u53ef\u80fd\u5b58\u5728\u7684\uff0c\u56e0\u4e3a[w]\u662f\u6ed1\u97f3\uff08glide\uff09\uff0c\u800c[t]\u5219\u662f\u585e\u64e6\u97f3\uff08plosive\uff09\uff0c\u5728\u82f1\u8bed\u4e2d\u5982\u679c\u6ed1\u97f3\u548c\u585e\u64e6\u97f3\u540c\u65f6\u51fa\u73b0\u5728\u8bcd\u9996\uff0c\u5219\u585e\u64e6\u97f3\u4e00\u5b9a\u5728\u6ed1\u97f3\u7684\u524d\u9762\uff0c\u6bd4\u5982twin\uff0c\u56e0\u6b64\"wtist\"\u4e00\u5b9a\u662f\u975e\u6cd5\u82f1\u8bed\u5355\u8bcd\u3002 \u540c\u5316\u662f\u6307\u4e00\u4e2a\u97f3\u6bb5\u53d8\u5f97\u548c\u53e6\u4e00\u4e2a\u97f3\u6bb5\u76f8\u4f3c\u7684\u97f3\u7cfb\u5b66\u8fc7\u7a0b\uff0c\u6839\u636e\u540c\u5316\u7684\u65b9\u5411\uff0c\u8fd9\u4e00\u8fc7\u7a0b\u53c8\u53ef\u4ee5\u5206\u4e3a\u987a\u540c\u5316\u548c\u9006\u540c\u5316\u3002\u987a\u540c\u5316\u53c8\u79f0\u9057\u7559\u540c\u5316\uff0c\u662f\u6307\u540e\u9762\u7684\u97f3\u6bb5\u88ab\u524d\u9762\u7684\u97f3\u6bb5\u540c\u5316\u4e86\uff0c\u6bd4\u5982\u82f1\u8bed\u4e2d\u7684\u590d\u6570\u548c\u52a8\u8bcd\u7684\u8fc7\u53bb\u5f0f\u3002\u82f1\u8bed\u5355\u8bcd\"cup\"\u8bcd\u7f00\u8f85\u97f3\u548c\u524d\u9762\u8bcd\u5e72\u5c3e\u7684\u8f85\u97f3\u5728\u6e05\u6d4a\u4e0a\u662f\u4e00\u81f4\u7684\uff0c\u97f3\u7cfb\u5b66\u4e0a\u8ba4\u4e3a\u590d\u6570\u5f62\u5f0f\u672c\u6765\u7684\u5f62\u5f0f\u662f[z]\uff0c\u662f\u4e00\u4e2a\u6d4a\u97f3\uff0c\u4f46\u5f53\u8bcd\u5e72\u5c3e\u7684\u8f85\u97f3\u662f\u6e05\u97f3\u6bd4\u5982[t]\u3001[k]\u3001[p]\uff0c\u8fd9\u4e2a\u6d4a\u8f85\u97f3\u5c31\u4f1a\u88ab\u524d\u9762\u7684\u6e05\u97f3\u540c\u5316\u4e3a\u6e05\u8f85\u97f3[s]\uff0c\u56e0\u6b64\"cup\"\u7684\u590d\u6570\u5f62\u5f0f\"cups\"\u8bfb\u97f3\u5c31\u662f[kaps]\u800c\u4e0d\u662f[kapz]\u3002\u987a\u540c\u5316\u662f\u4ece\u5de6\u5230\u53f3\u7684\u540c\u5316\uff0c\u9006\u540c\u5316\u5c31\u662f\u4ece\u53f3\u5230\u5de6\u7684\u540c\u5316\u3002\u9006\u540c\u5316\u53c8\u79f0\u4e3a\u5148\u884c\u540c\u5316\uff0c\u662f\u524d\u9762\u7684\u97f3\u6bb5\u88ab\u540e\u9762\u97f3\u6bb5\u540c\u5316\u7684\u8fc7\u7a0b\u3002\u6bd4\u5982\u6c49\u8bed\u666e\u901a\u8bdd\u4e2d\uff0c\u5f53\u4e24\u4e2a\u7b2c\u4e09\u58f0\u7684\u5b57\u653e\u5728\u4e00\u8d77\uff0c\u7b2c\u4e00\u4e2a\u5c31\u4f1a\u53d8\u6210\u7b2c\u4e8c\u58f0\uff0c\u5982\u6c38\uff08yong3\uff09\u3001\u8fdc\uff08yuan3\uff09\uff0c\u7ec4\u6210\u5355\u8bcd\"\u6c38\u8fdc\"\u65f6\uff0c\u8bfb\u97f3\u4e3a\"yong2 yuan3\"\u3002 \u5bf9\u4e8e\u76ee\u524d\u7c7b\u4f3c\u4e8eTacotron\u8fd9\u6837\u7684\u7aef\u5230\u7aef\u58f0\u5b66\u6a21\u578b\u6765\u8bf4\uff0c\u7ed9\u5b9a\u7684\u97f3\u7d20\u4f53\u7cfb\u4e00\u822c \u53ea\u9700\u786e\u5b9a\u97f3\u4f4d\uff0c\u5bf9\u4e8e\u5404\u79cd\u534f\u540c\u53d1\u97f3\u5bfc\u81f4\u7684\u97f3\u4f4d\u53d8\u4f53\uff0c\u5219\u53ef\u4ee5\u4e0d\u52a0\u533a\u5206\u3002 \u4f8b\u5982\u5bf9\u4e8e\u6cd5\u8bed\u8fd9\u6837\u5b58\u5728\u540c\u4e00\u4e2a\u97f3\u7d20\u5728\u4e0d\u540c\u5355\u8bcd\u4e2d\u53d1\u97f3\u4e0d\u540c\u7684\u8bed\u79cd\uff0c\u6587\u672c\u524d\u7aef\u7684\u97f3\u7d20\u4f53\u7cfb\u53ef\u4ee5\u53ea\u5173\u6ce8\u97f3\u4f4d\uff0c\u97f3\u4f4d\u53d8\u4f53\u7531\u540e\u7aef\u6a21\u578b\u81ea\u884c\u5b66\u4e60\u3002\u4e3a\u4e86\u6a21\u578b\u589e\u5f3a\u53ef\u63a7\u6027\uff0c\u4e5f\u53ef\u4ee5\u5c1d\u8bd5\u7ed3\u5408\u8bcd\u9762\u4fe1\u606f\uff0c\u6839\u636e\u4e0a\u4e0b\u6587\u7ed9\u51fa\u97f3\u4f4d\u4e0d\u540c\u7684\u7b26\u53f7\u8868\u793a\u3002\u6bd4\u5982s[s]\u8fd9\u4e2a\u5b57\u6bcd\uff0c\u5728\u4e0d\u540c\u8bed\u5883\u4e2d\u53ef\u80fd\u5b58\u5728\u4e0d\u540c\u7684\u97f3\u4f4d\u53d8\u4f53\uff0c\u540e\u9762\u7ed3\u5408\u5b57\u6bcda\u662f\u4e00\u4e2a\u97f3\u4f4d\u53d8\u4f53\uff0c\u56e0\u6b64\u5c06\u6b64\u65f6\u5b57\u6bcds\u7684\u97f3\u4f4d\u53d8\u4f53\u6807\u8bb0\u4e3a[sa]\uff1b\u540e\u9762\u7ed3\u5408\u5b57\u6bcdb\u53ef\u80fd\u53c8\u662f\u4e00\u4e2a\u97f3\u4f4d\u53d8\u4f53\uff0c\u8fd9\u65f6\u5219\u5c06\u8be5s\u7684\u97f3\u4f4d\u53d8\u4f53\u6807\u8bb0\u4e3a[sb]\u3002","title":"\u8bed\u8a00\u5b66"},{"location":"tts/%E8%AF%AD%E8%A8%80%E5%AD%A6/#_1","text":"\u8bed\u8a00\u5b66\u7814\u7a76\u4eba\u7c7b\u7684\u8bed\u8a00\uff0c\u8ba1\u7b97\u8bed\u8a00\u5b66\u5219\u662f\u4e00\u95e8\u8de8\u5b66\u79d1\u7684\u7814\u7a76\u9886\u57df\uff0c\u8bd5\u56fe\u627e\u51fa\u81ea\u7136\u8bed\u8a00\u7684\u89c4\u5f8b\uff0c\u5efa\u7acb\u8fd0\u7b97\u6a21\u578b\uff0c\u8bed\u97f3\u5408\u6210\u5176\u5b9e\u5c31\u662f\u8ba1\u7b97\u8bed\u8a00\u5b66\u7684\u5b50\u9886\u57df\u4e4b\u4e00\u3002\u5728\u8bed\u97f3\u5408\u6210\u4e2d\uff0c\u4e00\u822c\u9700\u8981\u5c06\u6587\u672c\u8f6c\u6362\u4e3a\u5bf9\u5e94\u7684\u97f3\u7d20\uff0c\u7136\u540e\u518d\u5c06\u97f3\u7d20\u8f93\u5165\u5230\u540e\u7aef\u6a21\u578b\u4e2d\uff0c\u56e0\u6b64\u9700\u8981\u4e3a\u6bcf\u4e2a\u8bed\u79cd\u751a\u81f3\u65b9\u8a00\u6784\u5efa\u6070\u5f53\u5408\u7406\u7684\u97f3\u7d20\u4f53\u7cfb\u3002\u76f8\u5173\u6982\u5ff5\u5982\u4e0b\u3002 \u97f3\u7d20\uff08phoneme\uff09\uff1a\u4e5f\u79f0\u97f3\u4f4d\uff0c\u662f\u80fd\u591f\u533a\u522b\u610f\u4e49\u7684\u6700\u5c0f\u8bed\u97f3\u5355\u4f4d\uff0c\u540c\u4e00\u97f3\u7d20\u7531\u4e0d\u540c\u4eba/\u73af\u5883\u9605\u8bfb\uff0c\u53ef\u4ee5\u5f62\u6210\u4e0d\u540c\u7684\u53d1\u97f3\u3002 \u5b57\u7d20\uff08grapheme\uff09\uff1a\u97f3\u7d20\u5bf9\u5e94\u7684\u6587\u672c\u3002\u5177\u4f53\u7684\u533a\u522b\u53c2\u89c1\uff1a Phonemes, Graphemes, and Morphemes! \u53d1\u97f3\uff08phone\uff09\uff1a\u67d0\u4e2a\u97f3\u7d20\u7684\u5177\u4f53\u53d1\u97f3\u3002\u5b9e\u9645\u4e0a\uff0cphoneme\u548cphone\u90fd\u662f\u6307\u7684\u662f\u97f3\u7d20\uff0c\u97f3\u7d20\u53ef\u5177\u5316\u4e3a\u5b9e\u9645\u7684\u97f3\uff0c\u8be5\u8fc7\u7a0b\u79f0\u4e3a\u97f3\u7d20\u7684\u8bed\u97f3\u4f53\u73b0\u3002\u4e00\u4e2a\u97f3\u7d20\u53ef\u80fd\u5305\u542b\u7740\u51e0\u4e2a\u4e0d\u540c\u97f3\u503c\u7684\u97f3\uff0c\u56e0\u800c\u53ef\u4ee5\u4f53\u73b0\u4e3a\u4e00\u4e2a\u97f3\u3001\u4e24\u4e2a\u97f3\u6216\u66f4\u591a\u7684\u540c\u4f4d\u97f3\u3002\u4f46\u662f\u5728\u4e00\u4e9b\u8bba\u8ff0\u4e2d\uff0cphoneme\u504f\u5411\u4e8e\u8868\u793a\u53d1\u97f3\u7684\u7b26\u53f7\uff0cphone\u66f4\u504f\u5411\u4e8e\u7b26\u53f7\u5bf9\u5e94\u7684\u5b9e\u9645\u53d1\u97f3\uff0c\u56e0\u6b64phoneme\u53ef\u5bf9\u5e94\u65e0\u6570\u4e2aphone\u3002 \u97f3\u8282\uff08syllable\uff09\uff1a\u97f3\u8282\u7531\u97f3\u7d20\u7ec4\u6210\u3002\u5728\u6c49\u8bed\u4e2d\uff0c\u9664\u513f\u5316\u97f3\u5916\uff0c\u4e00\u4e2a\u6c49\u5b57\u5c31\u662f\u4e00\u4e2a\u97f3\u8282\u3002\u5982wo3\uff08\u6211\uff09\u662f\u4e00\u4e2a\u97f3\u8282\uff0czhong1\uff08\u4e2d\uff09\u4e5f\u662f\u4e00\u4e2a\u97f3\u8282\u3002","title":"\u8bed\u8a00\u5b66"},{"location":"tts/%E8%AF%AD%E8%A8%80%E5%AD%A6/#_2","text":"\u5341\u5206\u8bed\u8a00\u5b66\uff08\u89c6\u9891\u626b\u76f2\u8bfe\u7a0b\uff09 \u8bed\u8a00\u5b66\u6982\u8bba \u300a\u8bed\u97f3\u6a21\u5f0f\u300b\u7b14\u8bb0\uff08\u4e0a\uff09\uff1a\u80ba\u90e8\u6c14\u6d41\u8f85\u97f3 \u300a\u8bed\u97f3\u6a21\u5f0f\u300b\u7b14\u8bb0\uff08\u4e0b\uff09\uff1a\u975e\u80ba\u90e8\u8f85\u97f3\u3001\u5143\u97f3\u3001\u4e00\u4e9b\u6742\u8c08 \u8bed\u6797\u5bd2\u820d-Huisje in het Taalbos","title":"\u53c2\u8003\u8d44\u6599"},{"location":"tts/%E8%AF%AD%E8%A8%80%E5%AD%A6/#_3","text":"\u56fd\u9645\u97f3\u6807\uff08International Phonetic Alphabet\uff0cIPA\uff09\u662f\u4e00\u79cd\u901a\u7528\u7684\u6ce8\u97f3\u7cfb\u7edf\uff0c\u4e00\u5957\u6ce8\u97f3\u4f53\u7cfb\u53ef\u4ee5\u6807\u6ce8\u591a\u79cd\u8bed\u8a00\u3002\u5bf9\u4e8e\u6c49\u8bed\u6765\u8bf4\uff0c\u4f7f\u7528\u56fd\u9645\u97f3\u6807\u548c\u4f7f\u7528\u62fc\u97f3\u6807\u6ce8\u53d1\u97f3\u6548\u679c\u662f\u76f8\u540c\u7684\uff1b\u4f46\u662f\u5982\u679c\u5e0c\u671b\u5b9e\u73b0\u591a\u8bed\u8a00\u7684\u6ce8\u97f3\uff0c\u5c31\u5fc5\u987b\u91c7\u7528\u7edf\u4e00\u7684\u6ce8\u97f3\uff0cIPA\u5c31\u662f\u8fd9\u6837\u4e00\u79cd\u6bd4\u8f83\u597d\u7684\u53d1\u97f3\u6807\u6ce8\u5f62\u5f0f\u3002 \u56e0\u4e3a\u4eba\u7c7b\u8bed\u97f3\u5dee\u5f02\u5f88\u5927\uff0c\u6709\u9650\u7684\u62c9\u4e01\u5b57\u6bcd\u8fdc\u4e0d\u591f\u7528\uff0c\u4e8e\u662f\u5c31\u9700\u8981\u6539\u53d8\u5b57\u5f62\u548c\u501f\u7528\u5176\u5b83\u8bed\u8a00\u7684\u5b57\u6bcd\u6765\u8865\u5145\u3002\u4e5f\u5c31\u662f\u8bf4\uff0cIPA\u4ee5\u62c9\u4e01\u5b57\u6bcd\uff08\u7f57\u9a6c\u5b57\u6bcd\uff09\u7684\u5c0f\u5199\u5370\u5237\u4f53\u4e3a\u4e3b\uff0c\u5982[a]\u3001[b]\u3001[c]\u3001[d]\u3001[f]\u3001[g]\u3001[h]\u3001[i]\u3001[j]\u3001[k]\u3001[p]\u7b49\u3002\u5728\u4e0d\u591f\u7528\u65f6\uff0c\u4f7f\u7528\u4ee5\u4e0b\u51e0\u79cd\u65b9\u6cd5\u6765\u8865\u5145\uff0c\u5305\u62ec\uff1a \u4f7f\u7528\u62c9\u4e01\u5b57\u6bcd\u5927\u5199\u5370\u5237\u4f53\u6216\u4e66\u5199\u4f53\uff08\u8349\u4f53\uff09\uff0c\u5982\uff1a\u5927\u5199\u5370\u5237\u4f53[\u0274]\u3001[\u0280]\u3001[\u0262]\u3001[\u0299]\u3001[\u029c]\u3001a\u7684\u624b\u5199\u4f53[\u0251]\u3001v\u7684\u8349\u4f53[\u028b]\u7b49\uff1b \u98a0\u5012\u6216\u8005\u6539\u53d8\u62c9\u4e01\u5b57\u6bcd\u7684\u5b57\u5f62\uff0c\u5982\uff1a[\u0259]\uff08\u5012\u7f6ee\uff09\u3001[\u0255]\uff08\u5377\u5c3ec\uff09\u3001[\u0256]\uff08\u53f3\u5f2f\u5c3ed\uff09\u3001[\u014b]\uff08\u957f\u53f3\u817fn\uff09\u7b49\uff1b \u501f\u7528\u5176\u5b83\u8bed\u8a00\u5b57\u6bcd\uff0c\u5982\uff1a[\u03b5]\uff08\u5e0c\u814a\u8bed\uff09\u3001[\u03b8]\uff08\u5e0c\u814a\u8bed)\u3001[\u0142]\uff08\u6ce2\u5170\u8bed\uff09\u3001[\u00f8]\uff08\u4e39\u9ea6\u8bed\uff09\u3001[\u00e7]\uff08\u52a0\u6cf0\u7f57\u5c3c\u4e9a\u8bed\uff09\u7b49\uff1b \u65b0\u5236\u5b57\u6bcd\uff0c\u5982\uff1a[\u0283]\u3001[\u0264]\u7b49\uff1b \u5728\u5b57\u6bcd\u4e0a\u52a0\u7b26\u53f7\uff0c\u5982\uff1a[\u0289]\uff08\u52a0\u6a2a\u7ebf\u7684u\uff09\u7b49\u3002","title":"\u56fd\u9645\u97f3\u6807"},{"location":"tts/%E8%AF%AD%E8%A8%80%E5%AD%A6/#ipa","text":"\u8bfb\u97f3\u4e0a\uff0c\u4e3a\u7167\u987e\u4e60\u60ef\uff0c\u5927\u591a\u6570\u7b26\u53f7\u4ecd\u8bfb\u62c9\u4e01\u8bed\u6216\u5176\u5b83\u8bed\u8a00\u7684\u539f\u97f3\u3002IPA\u8ffd\u6c42\u4e00\u4e2a\u5b57\u7b26\u8868\u793a\u4e00\u4e2a\u53d1\u97f3\uff0c\u4e0d\u4f1a\u51fa\u73b0\u5728\u4e00\u4e9b\u8bed\u8a00\u4e2d\uff0c\u5982\u82f1\u8bed\u7528\"th\"\u3001\"sh\"\u8868\u793a\u4e00\u4e2a\u53d1\u97f3\u7684\u60c5\u51b5\u3002IPA\u5b57\u6bcd\u7684\u53d1\u97f3\uff0c\u6709\u4e9b\u548c\u539f\u59cb\u7684\u5e0c\u814a\u5b57\u6bcd\u53d1\u97f3\u76f8\u540c\uff0c\u4f46\u6709\u4e9b\u53c8\u548c\u82f1\u8bed\u7b49\u8bed\u8a00\u53d1\u97f3\u76f8\u540c\uff0c\u5176\u5927\u81f4\u7684\u89c4\u5219\u5305\u62ec\uff1a \u5143\u97f3\u5b57\u6bcd\uff1a\u5982[a]\u3001[o]\u3001[i]\u7b49\u53d1\u97f3\u548c\u610f\u5927\u5229\u8bed\u3001\u897f\u73ed\u7259\u8bed\u65e0\u8f83\u5927\u5dee\u522b\uff1b \u8f85\u97f3\u5b57\u6bcd\uff1a\u5982[m]\u3001[n]\u3001[z]\u3001[p]\u3001[b]\u7684\u53d1\u97f3\u63a5\u8fd1\u4e8e\u82f1\u8bed\uff1b \u5176\u4ed6\u5b57\u6bcd\uff1a\u5982[y]\u548c\u5fb7\u8bed\u6216\u82ac\u5170\u8bed\u4e2d\u7684y\u7c7b\u4f3c\uff0c\u800c[j]\u4e0e\u82f1\u8bed\u7684y\u53d1\u97f3\u63a5\u8fd1\u3002 IPA\u7684\u5b57\u6bcd\u6784\u6210\u4f1a\u968f\u7740\u89c4\u8303\u7684\u4fee\u6539\u800c\u53d8\u52a8\uff0c2018\u5e74\u53d1\u5e03\u7684\u6807\u51c6\u4e2d\uff0cIPA\u7684\u5b57\u6bcd\u6709107\u4e2a\uff0c\u5305\u62ec\u4e8659\u4e2a\u80ba\u90e8\u6c14\u6d41\u8f85\u97f3\uff0c10\u4e2a\u975e\u80ba\u90e8\u6c14\u6d41\u8f85\u97f3\uff0c28\u4e2a\u5143\u97f3\u548c10\u4e2a\u5176\u4ed6\u5b57\u6bcd\uff0c\u5982\u4e0b\u8868\u6240\u793a\uff1a \u5728\u56fd\u9645\u97f3\u6807\u8868\u4e2d\uff0c\u540c\u4e00\u5217\u3001\u6216\u540c\u4e00\u884c\u7684\u97f3\u6807\uff0c\u5728\u53d1\u97f3\u65b9\u6cd5\u4e0a\u6709\u76f8\u540c\u4e4b\u5904\uff0c\u56e0\u6b64\u4e5f\u5c31\u5177\u6709\u76f8\u4f3c\u7684\u6027\u8d28\uff0c\u8fd9\u4e3a\u8bed\u97f3\u7684\u7814\u7a76\u63d0\u4f9b\u4e86\u8f83\u5927\u7684\u4fbf\u5229\u3002\"\u56fd\u9645\u97f3\u6807\u8868\"\u662f\u8bed\u97f3\u5b66\u7684\u57fa\u7840\uff0c\u5c31\u5982\u540c\"\u5143\u7d20\u5468\u671f\u8868\"\u662f\u5316\u5b66\u7684\u57fa\u7840\u3002\u4e00\u4e9b\u5f00\u6e90\u5de5\u5177\uff0c\u6bd4\u5982 eSpeak NG Text-to-Speech \u3001 Epitran \u5b9e\u73b0\u4e86\u5404\u8bed\u79cd\u7684\u5b57\u7d20\u8f6c\u56fd\u9645\u97f3\u6807\u3002\u4f46\u662f\uff0c\u8fd9\u4e9b\u56fd\u9645\u97f3\u6807\u5f00\u6e90\u5de5\u5177\u5e76\u6ca1\u6709\u63d0\u4f9b\u5bf9\u65b9\u8a00\u7684\u652f\u6301\uff0c\u6bd4\u5982\u4e0a\u6d77\u8bdd\u3001\u95fd\u5357\u8bed\u7684\u5b57\u7d20\u8f6c\u97f3\u7d20\uff1b\u56fd\u9645\u97f3\u6807\u672c\u8eab\u8bc6\u8bb0\u8f83\u4e3a\u590d\u6742\uff0c\u5b66\u4e60\u6210\u672c\u6bd4\u8f83\u9ad8\uff0c\u5e76\u4e14\u4e3a\u4e86\u7167\u987e\u4e16\u754c\u6240\u6709\u8bed\u79cd\uff0c\u97f3\u7d20\u7684\u5212\u5206\u4e0a\u8f83\u4e3a\u7cbe\u7ec6\uff0c\u56e0\u6b64\u56fd\u9645\u97f3\u6807\u662f\u8bed\u97f3\u5408\u6210\u4e2d\u97f3\u7d20\u4f53\u7cfb\u7684\u91cd\u8981\u53c2\u8003\u65b9\u6848\uff0c\u4f46\u975e\u6700\u4f73\u65b9\u6848\u3002","title":"IPA\u7684\u5b57\u6bcd\u548c\u53d1\u97f3"},{"location":"tts/%E8%AF%AD%E8%A8%80%E5%AD%A6/#_4","text":"\u5bf9\u4e8e\u8bed\u97f3\u5408\u6210\u6765\u8bf4\uff0c\u9700\u8981\u4e86\u89e3\u8bed\u8a00\u5b66\u7684\u5206\u652f\u4e4b\u4e00\uff1a\u97f3\u7cfb\u5b66\uff0c\u4ee5\u4fbf\u66f4\u597d\u5730\u5236\u5b9a\u9002\u7528\u4e8e\u4e00\u4e2a\u8bed\u79cd\u8bed\u97f3\u5408\u6210\u7cfb\u7edf\u7684\u97f3\u7d20\u4f53\u7cfb\u3002\u8fd9\u91cc\u9700\u8981\u63a2\u8ba8\u4e09\u4e2a\u95ee\u9898\uff1a\u97f3\u4f4d\u6570\u91cf\uff0c\u8fd9\u91cc\u7684\u97f3\u4f4d\u548c\u97f3\u7d20\u6982\u5ff5\u533a\u522b\u4e0d\u5927\uff0c\u97f3\u7d20\u4e0d\u9488\u5bf9\u4e00\u4e2a\u8bed\u79cd\uff0c\u662f\u4e00\u4e2a\u6700\u5c0f\u7684\u8bed\u97f3\u5355\u4f4d\uff0c\u97f3\u4f4d\u662f\u9488\u5bf9\u4e00\u4e2a\u7279\u5b9a\u8bed\u8a00\u7684\uff0c\u5177\u6709\u533a\u522b\u610f\u4e49\u7684\u6700\u5c0f\u8bed\u97f3\u5355\u4f4d\uff0c\u53c2\u89c1 \u97f3\u7d20\u548c\u97f3\u4f4d\u7684\u533a\u522b\u4e0e\u8054\u7cfb\u662f\u4ec0\u4e48\uff1f \uff1b\u8bed\u97f3\u914d\u5217\uff0c\u4e5f\u5c31\u662f\u8bed\u97f3\u7b26\u53f7\u7684\u7ec4\u5408\u89c4\u5f8b\uff0c\u54ea\u4e9b\u97f3\u6bb5\u7684\u7ec4\u5408\u662f\u4e0d\u88ab\u5141\u8bb8\u7684\uff0c\u97f3\u6bb5\u51fa\u73b0\u7684\u4f4d\u7f6e\u6709\u54ea\u4e9b\u9650\u5236\uff1b\u97f3\u7cfb\u4ea4\u66ff\uff0c\u97f3\u4e0e\u97f3\u540c\u65f6\u51fa\u73b0\u65f6\uff0c\u5f7c\u6b64\u53d7\u5f71\u54cd\u4f1a\u5bfc\u81f4\u54ea\u4e9b\u5f62\u5f0f\u7684\u53d8\u5316\uff0c\u8fd9\u6d89\u53ca\u5230\u97f3\u7cfb\u8fc7\u7a0b\u3002\u97f3\u7cfb\u8fc7\u7a0b\u53ef\u4ee5\u7406\u89e3\u4e3a\u4e00\u4e2a\u97f3\u6bb5\u53d7\u6240\u5904\u8bed\u97f3\u73af\u5883\u6216\u8bed\u6cd5\u73af\u5883\u7684\u5f71\u54cd\u800c\u4ea7\u751f\u53d8\u5316\u7684\u8fc7\u7a0b\uff0c\u97f3\u7cfb\u8fc7\u7a0b\u7684\u79cd\u7c7b\u6709\u5f88\u591a\uff0c\u6bd4\u5982\u540c\u5316\u548c\u5f02\u5316\u4e24\u79cd\u8fc7\u7a0b\u3002 \u97f3\u4f4d\u6570\u91cf\u7684\u786e\u5b9a\u7275\u626f\u5230\u5bf9\u6bd4\u5206\u5e03\u548c\u4e92\u8865\u5206\u5e03\u4e24\u4e2a\u6982\u5ff5\u3002\u5982\u679cA\u548cB\u5904\u4e8e\u5bf9\u6bd4\u5206\u5e03\u65f6\uff0c\u90a3\u4e48\u7532\u548c\u4e59\u5904\u4e8e\u540c\u6837\u7684\u8bed\u8a00\u73af\u5883\u4e2d\u65f6\uff0c\u5c31\u4f1a\u5f15\u8d77\u610f\u4e49\u7684\u4e0d\u540c\u3002\u6bd4\u5982\u82f1\u8bed\u4e2d\u7684[p]\u548c[b]\u5c31\u5904\u4e8e\u5bf9\u6bd4\u5206\u5e03\uff0c\u5f53\u5b83\u4eec\u5904\u4e8e\u76f8\u540c\u7684\u8bed\u8a00\u73af\u5883\u4e2d\u65f6\uff0c\u6bd4\u5982pin[ p in]\u548cbin[ b in]\uff0c\u4f46\u662f\u4e24\u4e2a\u5355\u8bcd\u7684\u610f\u4e49\u5b8c\u5168\u4e0d\u540c\uff0c\u56e0\u6b64[p]\u548c[b]\u5c31\u5206\u5c5e\u4e24\u4e2a\u4e0d\u540c\u7684\u97f3\u4f4d\u3002\u800c\u5047\u5982A\u548cB\u5904\u4e8e\u4e92\u8865\u5206\u5e03\u65f6\uff0c\u90a3\u4e48\u7532\u548c\u4e59\u4e0d\u53ef\u80fd\u51fa\u73b0\u5728\u540c\u6837\u7684\u8bed\u97f3\u73af\u5883\u4e2d\uff0c\u4f8b\u5982\u82f1\u8bed\u4e2d\u7684[p]\u5904\u4e8e\u91cd\u8bfb\u97f3\u8282\u9996\u65f6pig[ p ig]\uff0c\u5f80\u5f80\u8868\u73b0\u4e3a\u9001\u6c14\u7684[ \\(p^h\\) ]\uff0c\u800c\u5728[s]\u540e\u9762\u65f6spit[s p it]\uff0c\u5f80\u5f80\u8868\u73b0\u4e3a\u4e0d\u9001\u6c14\u7684[p]\uff0c\u9001\u6c14\u7684[ \\(p^h\\) ]\u548c\u4e0d\u9001\u6c14\u7684[p]\u4e0d\u4f1a\u51fa\u73b0\u5728\u540c\u4e00\u8bed\u97f3\u73af\u5883\u4e2d\uff0c\u53ef\u4ee5\u8bf4\uff0c\u5b83\u4eec\u662f\u540c\u4e00\u4e2a\u97f3\u4f4d\u5728\u4e0d\u540c\u8bed\u97f3\u73af\u5883\u4e2d\u7684\u97f3\u4f4d\u53d8\u4f53\u3002\u56e0\u6b64\uff0c \u97f3\u4f4d\u5904\u4e8e\u5bf9\u6bd4\u5206\u5e03\uff0c\u800c\u97f3\u4f4d\u53d8\u4f53\u5904\u4e8e\u4e92\u8865\u5206\u5e03 \u3002\u786e\u7acb\u97f3\u4f4d\u7684\u505a\u6cd5\u4fbf\u662f\u5bfb\u627e\u6700\u5c0f\u5bf9\u6bd4\u5bf9\uff0c\u4e5f\u5c31\u662f\u8bf4\u5bfb\u627e\u97f3\u4f4d\u65f6\u8981\u6ee1\u8db3\uff1a \u5728\u76f8\u540c\u7684\u8bed\u97f3\u73af\u5883\u3002 \u5355\u8bcd\u7684\u610f\u601d\u4e0d\u540c\u3002\u6700\u76f4\u63a5\u7684\u505a\u6cd5\u5c31\u662f\u627e\u4e24\u4e2a\u610f\u4e49\u4e0d\u540c\u7684\u7684\u5355\u8bcd\uff0c\u5e76\u4e14\u53ea\u6709\u5728\u4e00\u4e2a\u4f4d\u7f6e\u4e0a\u6709\u4e0d\u540c\u7684\u97f3\u6bb5\uff0c\u5728\u5176\u5b83\u4f4d\u7f6e\u4e0a\u7684\u97f3\u6bb5\u90fd\u76f8\u540c\uff0c\u8fd9\u4e00\u5bf9\u5355\u8bcd\u5c31\u662f\u6700\u5c0f\u5bf9\u6bd4\u5bf9\u3002\u6bd4\u5982ban[ b an]\u548cman[ m an]\u8fd9\u5bf9\u6700\u5c0f\u5bf9\u6bd4\u5bf9\u4e2d\uff0c\u9664\u4e86[b]\u548c[m]\u4e4b\u5916\uff0c\u5176\u5b83\u97f3\u6bb5\u90fd\u76f8\u540c\uff0c\u6b63\u56e0\u4e3a[b]\u548c[m]\uff0c\u8fd9\u4e24\u4e2a\u5355\u8bcd\u7684\u610f\u4e49\u4e5f\u4e0d\u540c\u3002\u56e0\u6b64\u5f52\u7eb3\u97f3\u4f4d\u7684\u539f\u5219\u6709\uff1a\u5bf9\u7acb\u4e92\u8865\u539f\u5219\u548c\u8bed\u97f3\u76f8\u4f3c\u539f\u5219\u3002 \u8bed\u97f3\u914d\u5217\u662f\u4e00\u4e2a\u8bed\u79cd\u4e2d\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u5355\u8bcd\u3001\u8bed\u7d20\u6216\u97f3\u8282\u4e2d\u53ef\u80fd\u51fa\u73b0\u7684\u5143\u97f3\u548c\u8f85\u97f3\u5e8f\u5217\u5236\u7ea6\u6761\u4ef6\u7684\u96c6\u5408\u3002\u6bd4\u5982\u82f1\u8bed\u5355\u8bcd\"wtist\"\u662f\u4e0d\u53ef\u80fd\u5b58\u5728\u7684\uff0c\u56e0\u4e3a[w]\u662f\u6ed1\u97f3\uff08glide\uff09\uff0c\u800c[t]\u5219\u662f\u585e\u64e6\u97f3\uff08plosive\uff09\uff0c\u5728\u82f1\u8bed\u4e2d\u5982\u679c\u6ed1\u97f3\u548c\u585e\u64e6\u97f3\u540c\u65f6\u51fa\u73b0\u5728\u8bcd\u9996\uff0c\u5219\u585e\u64e6\u97f3\u4e00\u5b9a\u5728\u6ed1\u97f3\u7684\u524d\u9762\uff0c\u6bd4\u5982twin\uff0c\u56e0\u6b64\"wtist\"\u4e00\u5b9a\u662f\u975e\u6cd5\u82f1\u8bed\u5355\u8bcd\u3002 \u540c\u5316\u662f\u6307\u4e00\u4e2a\u97f3\u6bb5\u53d8\u5f97\u548c\u53e6\u4e00\u4e2a\u97f3\u6bb5\u76f8\u4f3c\u7684\u97f3\u7cfb\u5b66\u8fc7\u7a0b\uff0c\u6839\u636e\u540c\u5316\u7684\u65b9\u5411\uff0c\u8fd9\u4e00\u8fc7\u7a0b\u53c8\u53ef\u4ee5\u5206\u4e3a\u987a\u540c\u5316\u548c\u9006\u540c\u5316\u3002\u987a\u540c\u5316\u53c8\u79f0\u9057\u7559\u540c\u5316\uff0c\u662f\u6307\u540e\u9762\u7684\u97f3\u6bb5\u88ab\u524d\u9762\u7684\u97f3\u6bb5\u540c\u5316\u4e86\uff0c\u6bd4\u5982\u82f1\u8bed\u4e2d\u7684\u590d\u6570\u548c\u52a8\u8bcd\u7684\u8fc7\u53bb\u5f0f\u3002\u82f1\u8bed\u5355\u8bcd\"cup\"\u8bcd\u7f00\u8f85\u97f3\u548c\u524d\u9762\u8bcd\u5e72\u5c3e\u7684\u8f85\u97f3\u5728\u6e05\u6d4a\u4e0a\u662f\u4e00\u81f4\u7684\uff0c\u97f3\u7cfb\u5b66\u4e0a\u8ba4\u4e3a\u590d\u6570\u5f62\u5f0f\u672c\u6765\u7684\u5f62\u5f0f\u662f[z]\uff0c\u662f\u4e00\u4e2a\u6d4a\u97f3\uff0c\u4f46\u5f53\u8bcd\u5e72\u5c3e\u7684\u8f85\u97f3\u662f\u6e05\u97f3\u6bd4\u5982[t]\u3001[k]\u3001[p]\uff0c\u8fd9\u4e2a\u6d4a\u8f85\u97f3\u5c31\u4f1a\u88ab\u524d\u9762\u7684\u6e05\u97f3\u540c\u5316\u4e3a\u6e05\u8f85\u97f3[s]\uff0c\u56e0\u6b64\"cup\"\u7684\u590d\u6570\u5f62\u5f0f\"cups\"\u8bfb\u97f3\u5c31\u662f[kaps]\u800c\u4e0d\u662f[kapz]\u3002\u987a\u540c\u5316\u662f\u4ece\u5de6\u5230\u53f3\u7684\u540c\u5316\uff0c\u9006\u540c\u5316\u5c31\u662f\u4ece\u53f3\u5230\u5de6\u7684\u540c\u5316\u3002\u9006\u540c\u5316\u53c8\u79f0\u4e3a\u5148\u884c\u540c\u5316\uff0c\u662f\u524d\u9762\u7684\u97f3\u6bb5\u88ab\u540e\u9762\u97f3\u6bb5\u540c\u5316\u7684\u8fc7\u7a0b\u3002\u6bd4\u5982\u6c49\u8bed\u666e\u901a\u8bdd\u4e2d\uff0c\u5f53\u4e24\u4e2a\u7b2c\u4e09\u58f0\u7684\u5b57\u653e\u5728\u4e00\u8d77\uff0c\u7b2c\u4e00\u4e2a\u5c31\u4f1a\u53d8\u6210\u7b2c\u4e8c\u58f0\uff0c\u5982\u6c38\uff08yong3\uff09\u3001\u8fdc\uff08yuan3\uff09\uff0c\u7ec4\u6210\u5355\u8bcd\"\u6c38\u8fdc\"\u65f6\uff0c\u8bfb\u97f3\u4e3a\"yong2 yuan3\"\u3002 \u5bf9\u4e8e\u76ee\u524d\u7c7b\u4f3c\u4e8eTacotron\u8fd9\u6837\u7684\u7aef\u5230\u7aef\u58f0\u5b66\u6a21\u578b\u6765\u8bf4\uff0c\u7ed9\u5b9a\u7684\u97f3\u7d20\u4f53\u7cfb\u4e00\u822c \u53ea\u9700\u786e\u5b9a\u97f3\u4f4d\uff0c\u5bf9\u4e8e\u5404\u79cd\u534f\u540c\u53d1\u97f3\u5bfc\u81f4\u7684\u97f3\u4f4d\u53d8\u4f53\uff0c\u5219\u53ef\u4ee5\u4e0d\u52a0\u533a\u5206\u3002 \u4f8b\u5982\u5bf9\u4e8e\u6cd5\u8bed\u8fd9\u6837\u5b58\u5728\u540c\u4e00\u4e2a\u97f3\u7d20\u5728\u4e0d\u540c\u5355\u8bcd\u4e2d\u53d1\u97f3\u4e0d\u540c\u7684\u8bed\u79cd\uff0c\u6587\u672c\u524d\u7aef\u7684\u97f3\u7d20\u4f53\u7cfb\u53ef\u4ee5\u53ea\u5173\u6ce8\u97f3\u4f4d\uff0c\u97f3\u4f4d\u53d8\u4f53\u7531\u540e\u7aef\u6a21\u578b\u81ea\u884c\u5b66\u4e60\u3002\u4e3a\u4e86\u6a21\u578b\u589e\u5f3a\u53ef\u63a7\u6027\uff0c\u4e5f\u53ef\u4ee5\u5c1d\u8bd5\u7ed3\u5408\u8bcd\u9762\u4fe1\u606f\uff0c\u6839\u636e\u4e0a\u4e0b\u6587\u7ed9\u51fa\u97f3\u4f4d\u4e0d\u540c\u7684\u7b26\u53f7\u8868\u793a\u3002\u6bd4\u5982s[s]\u8fd9\u4e2a\u5b57\u6bcd\uff0c\u5728\u4e0d\u540c\u8bed\u5883\u4e2d\u53ef\u80fd\u5b58\u5728\u4e0d\u540c\u7684\u97f3\u4f4d\u53d8\u4f53\uff0c\u540e\u9762\u7ed3\u5408\u5b57\u6bcda\u662f\u4e00\u4e2a\u97f3\u4f4d\u53d8\u4f53\uff0c\u56e0\u6b64\u5c06\u6b64\u65f6\u5b57\u6bcds\u7684\u97f3\u4f4d\u53d8\u4f53\u6807\u8bb0\u4e3a[sa]\uff1b\u540e\u9762\u7ed3\u5408\u5b57\u6bcdb\u53ef\u80fd\u53c8\u662f\u4e00\u4e2a\u97f3\u4f4d\u53d8\u4f53\uff0c\u8fd9\u65f6\u5219\u5c06\u8be5s\u7684\u97f3\u4f4d\u53d8\u4f53\u6807\u8bb0\u4e3a[sb]\u3002","title":"\u97f3\u7cfb\u5b66"},{"location":"tts/%E8%AF%AD%E9%9F%B3%E5%90%88%E6%88%90%E6%A6%82%E8%BF%B0/","text":"\u8bed\u97f3\u5408\u6210\u6982\u8ff0 \u80cc\u666f\u548c\u6982\u8ff0 \u8bed\u97f3\u5408\u6210\uff08Speech Synthesis\uff09\uff0c\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u4e0e\u6587\u8bed\u8f6c\u6362\uff08Text-to-Speech\uff0cTTS\uff09\u540c\u4e49\uff0c\u662f\u4e00\u79cd\u5c06\u6587\u672c\u8f6c\u6362\u4e3a\u8bed\u97f3\u7684\u6280\u672f\uff0c\u662f\u4eba\u5de5\u667a\u80fd\u7684\u5b50\u9886\u57df\u4e4b\u4e00\uff0c\u8d4b\u4e88\u673a\u5668\u50cf\u4eba\u4e00\u6837\u81ea\u5982\u8bf4\u8bdd\u80fd\u529b\u7684\u6280\u672f\uff0c\u662f\u4eba\u673a\u8bed\u97f3\u4ea4\u4e92\u4e2d\u91cd\u8981\u7684\u4e00\u73af\u3002\u8bed\u97f3\u5408\u6210\u7684\u7814\u7a76\u5386\u53f2\u53ef\u8ffd\u6eaf\u81f318\u81f319\u4e16\u7eaa\uff0c\u4ece\u65e9\u671f\u7684\u57fa\u4e8e\u89c4\u5219\u7684\u673a\u68b0\u5f0f\u3001\u7535\u5b50\u5f0f\u8bed\u97f3\u5408\u6210\u5668\uff0c\u5230\u57fa\u4e8e\u6ce2\u5f62\u62fc\u63a5\u3001\u7edf\u8ba1\u53c2\u6570\u7684\u8bed\u97f3\u5408\u6210\u3002\u8fd1\u5e74\u6765\uff0c\u57fa\u4e8e\u6df1\u5ea6\u5b66\u4e60\uff08Deep Learning\uff09\u548c\u795e\u7ecf\u7f51\u7edc\uff08Neural Network\uff09\u7684\u5efa\u6a21\u65b9\u6cd5\u5728\u673a\u5668\u5b66\u4e60\u9886\u57df\u5404\u4e2a\u4efb\u52a1\u4e0a\u90fd\u53d6\u5f97\u4e86\u5feb\u901f\u7684\u53d1\u5c55\uff0c\u8bed\u97f3\u5408\u6210\u6280\u672f\u4e5f\u5728\u6b64\u57fa\u7840\u4e0a\u5f97\u5230\u4e86\u663e\u8457\u7684\u63d0\u5347\u3002\u968f\u7740\u4fe1\u606f\u6280\u672f\u53ca\u4eba\u5de5\u667a\u80fd\u6280\u672f\u7684\u53d1\u5c55\uff0c\u5404\u79cd\u5e94\u7528\u573a\u666f\u5bf9\u8bed\u97f3\u5408\u6210\u7684\u6548\u679c\u6709\u4e86\u8d8a\u6765\u8d8a\u9ad8\u7684\u8981\u6c42\u3002 \u80cc\u666f\u4ecb\u7ecd \u8bed\u97f3\u662f\u6700\u65b9\u4fbf\u6700\u81ea\u7136\u7684\u4eba\u673a\u4ea4\u4e92\u65b9\u5f0f\u4e4b\u4e00\uff0c\u968f\u7740\u8fd1\u5e74\u6765\u667a\u80fd\u624b\u673a\u7b49\u667a\u80fd\u7ec8\u7aef\u7684\u8fc5\u901f\u53d1\u5c55\uff0c\u4eba\u673a\u8bed\u97f3\u4ea4\u4e92\u6536\u5230\u4e86\u8d8a\u6765\u8d8a\u591a\u7684\u5173\u6ce8\u3002\u4eba\u673a\u8bed\u97f3\u4ea4\u4e92\u662f\u57fa\u4e8e\u8bed\u97f3\u8bc6\u522b\u3001\u81ea\u7136\u8bed\u8a00\u7406\u89e3\u53ca\u8bed\u97f3\u5408\u6210\u7684\u4eba\u673a\u8bed\u97f3\u5bf9\u8bdd\u6280\u672f\uff0c\u4f5c\u4e3a\u4eba\u673a\u4ea4\u4e92\u7684\u6838\u5fc3\u6280\u672f\u4e4b\u4e00\uff0c\u8bed\u97f3\u5408\u6210\u5c31\u662f\u8d4b\u4e88\u8ba1\u7b97\u673a\u53ca\u5404\u79cd\u7ec8\u7aef\u8bbe\u5907\u50cf\u4eba\u4e00\u6837\u81ea\u5982\u8bf4\u8bdd\u7684\u80fd\u529b\u3002\u8bed\u97f3\u5408\u6210\u662f\u4e00\u95e8\u4ea4\u53c9\u5b66\u79d1\uff0c\u5b83\u6d89\u53ca\u5230\u8bed\u8a00\u5b66\u3001\u8bed\u97f3\u5b66\u3001\u81ea\u7136\u8bed\u8a00\u5904\u7406\u3001\u4fe1\u53f7\u5904\u7406\u3001\u7edf\u8ba1\u5b66\u4e60\u3001\u6a21\u5f0f\u8bc6\u522b\u7b49\u4f17\u591a\u5b66\u79d1\u7684\u7406\u8bba\u4e0e\u6280\u672f\u3002 \u968f\u7740\u4fe1\u606f\u6280\u672f\u548c\u4eba\u5de5\u667a\u80fd\u6280\u672f\u7684\u53d1\u5c55\uff0c\u4ee5\u53ca\u5bf9\u8bed\u97f3\u4fe1\u53f7\u548c\u7edf\u8ba1\u5efa\u6a21\u6280\u672f\u672c\u8eab\u4e0d\u65ad\u7684\u6df1\u5165\u7406\u89e3\uff0c\u8bed\u97f3\u5408\u6210\u7cfb\u7edf\u7684\u6548\u679c\u9010\u6e10\u63d0\u9ad8\uff0c\u88ab\u5e7f\u6cdb\u5e94\u7528\u4e8e\u5404\u4e2a\u573a\u666f\uff0c\u5305\u62ec\u8bed\u97f3\u5bf9\u8bdd\u7cfb\u7edf\uff1b\u667a\u80fd\u8bed\u97f3\u52a9\u624b\uff0c\u5982Siri\uff1b\u7535\u8bdd\u4fe1\u606f\u67e5\u8be2\u7cfb\u7edf\uff1b\u8f66\u8f7d\u5bfc\u822a\uff0c\u6709\u58f0\u7535\u5b50\u4e66\u7b49\u8f85\u52a9\u5e94\u7528\uff1b\u8bed\u8a00\u5b66\u4e60\uff1b\u673a\u573a\uff0c\u8f66\u7ad9\u7b49\u5b9e\u65f6\u4fe1\u606f\u5e7f\u64ad\u7cfb\u7edf\uff1b\u89c6\u529b\u6216\u8bed\u97f3\u969c\u788d\u8005\u7684\u4fe1\u606f\u83b7\u53d6\u4e0e\u4ea4\u6d41\u7b49\u3002\u540c\u65f6\uff0c\u4e0d\u540c\u5e94\u7528\u573a\u666f\u5bf9\u4e8e\u5408\u6210\u8bed\u97f3\u7684\u5404\u9879\u6307\u6807\uff0c\u5305\u62ec\u81ea\u7136\u5ea6\u3001\u53ef\u61c2\u5ea6\u3001\u97f3\u8d28\u3001\u60c5\u611f\u98ce\u683c\u3001\u63a7\u5236\u529b\u4e5f\u90fd\u63d0\u51fa\u4e86\u66f4\u9ad8\u7684\u8981\u6c42\u3002 \u8bed\u97f3\u5408\u6210\u6982\u8ff0 \u8bed\u97f3\u4fe1\u53f7\u7684\u4ea7\u751f\u5206\u4e3a\u4e24\u4e2a\u9636\u6bb5\uff0c\u4fe1\u606f\u7f16\u7801\u548c\u751f\u7406\u63a7\u5236\u3002\u9996\u5148\u5728\u5927\u8111\u4e2d\u51fa\u73b0\u67d0\u79cd\u60f3\u8981\u8868\u8fbe\u7684\u60f3\u6cd5\uff0c\u7136\u540e\u7531\u5927\u8111\u5c06\u5176\u7f16\u7801\u4e3a\u5177\u4f53\u7684\u8bed\u8a00\u6587\u5b57\u5e8f\u5217\uff0c\u53ca\u8bed\u97f3\u4e2d\u53ef\u80fd\u5b58\u5728\u7684\u5f3a\u8c03\u3001\u91cd\u8bfb\u7b49\u97f5\u5f8b\u4fe1\u606f\u3002\u7ecf\u8fc7\u8bed\u8a00\u7684\u7ec4\u7ec7\uff0c\u5927\u8111\u901a\u8fc7\u63a7\u5236\u53d1\u97f3\u5668\u5b98\u808c\u8089\u7684\u8fd0\u52a8\uff0c\u4ea7\u751f\u51fa\u76f8\u5e94\u7684\u8bed\u97f3\u4fe1\u53f7\u3002\u5176\u4e2d\u7b2c\u4e00\u9636\u6bb5\u4e3b\u8981\u6d89\u53ca\u4eba\u8111\u8bed\u8a00\u5904\u7406\u65b9\u9762\uff0c\u7b2c\u4e8c\u9636\u6bb5\u6d89\u53ca\u8bed\u97f3\u4fe1\u53f7\u4ea7\u751f\u7684\u751f\u7406\u673a\u5236\u3002 \u4ece\u6ee4\u6ce2\u7684\u89d2\u5ea6\uff0c\u4eba\u4f53\u6d89\u53ca\u53d1\u97f3\u7684\u5668\u5b98\u53ef\u4ee5\u5206\u4e3a\u4e24\u90e8\u5206\uff1a\u6fc0\u52b1\u7cfb\u7edf\u548c\u58f0\u9053\u7cfb\u7edf\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002\u6fc0\u52b1\u7cfb\u7edf\u4e2d\uff0c\u50a8\u5b58\u4e8e\u80ba\u90e8\u7684\u7a7a\u6c14\u6e90\uff0c\u7ecf\u8fc7\u80f8\u8154\u7684\u538b\u7f29\u6392\u51fa\uff0c\u7ecf\u8fc7\u6c14\u7ba1\u8fdb\u5165\u58f0\u5e26\uff0c\u6839\u636e\u53d1\u97f3\u5355\u5143\u51b3\u5b9a\u662f\u5426\u4ea7\u751f\u632f\u52a8\uff0c\u5f62\u6210\u51c6\u5468\u671f\u7684\u8109\u51b2\u7a7a\u6c14\u6fc0\u52b1\u6d41\u6216\u566a\u58f0\u7a7a\u6c14\u6fc0\u52b1\u6d41\u3002\u8fd9\u4e9b\u7a7a\u6c14\u6d41\u4f5c\u4e3a\u6fc0\u52b1\uff0c\u8fdb\u5165\u58f0\u9053\u7cfb\u7edf\uff0c\u88ab\u9891\u7387\u6574\u5f62\uff0c\u5f62\u6210\u4e0d\u540c\u7684\u58f0\u97f3\u3002\u58f0\u9053\u7cfb\u7edf\u5305\u62ec\u54bd\u5589\u3001\u53e3\u8154\uff08\u820c\u3001\u5507\u3001\u988c\u548c\u53e3\uff09\u7ec4\u6210\uff0c\u53ef\u80fd\u8fd8\u5305\u62ec\u9f3b\u9053\u3002\u4e0d\u540c\u5468\u671f\u7684\u8109\u51b2\u7a7a\u6c14\u6d41\u6216\u8005\u566a\u58f0\u7a7a\u6c14\u6d41\uff0c\u4ee5\u53ca\u4e0d\u540c\u58f0\u9053\u5668\u5b98\u7684\u4f4d\u7f6e\u51b3\u5b9a\u4e86\u4ea7\u751f\u7684\u58f0\u97f3\u3002\u56e0\u6b64\uff0c\u8bed\u97f3\u5408\u6210\u4e2d\u901a\u5e38\u5c06\u8bed\u97f3\u7684\u5efa\u6a21\u5206\u89e3\u4e3a\u6fc0\u52b1\u5efa\u6a21\u548c\u58f0\u9053\u5efa\u6a21\u3002 \u8bed\u97f3\u5408\u6210\u7684\u5386\u53f2 \u8bed\u97f3\u5408\u6210\u7cfb\u7edf\u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u5206\u522b\u79f0\u4e3a\u6587\u672c\u524d\u7aef\u548c\u540e\u7aef\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002 \u6587\u672c\u524d\u7aef\u4e3b\u8981\u8d1f\u8d23\u5728\u8bed\u8a00\u5c42\u3001\u8bed\u6cd5\u5c42\u3001\u8bed\u4e49\u5c42\u5bf9\u8f93\u5165\u6587\u672c\u8fdb\u884c\u6587\u672c\u5206\u6790\uff1b\u540e\u7aef\u4e3b\u8981\u662f\u4ece\u4fe1\u53f7\u5904\u7406\u3001\u6a21\u5f0f\u8bc6\u522b\u3001\u673a\u5668\u5b66\u4e60\u7b49\u89d2\u5ea6\uff0c\u5728\u8bed\u97f3\u5c42\u9762\u4e0a\u8fdb\u884c\u97f5\u5f8b\u7279\u5f81\u5efa\u6a21\uff0c\u58f0\u5b66\u7279\u5f81\u5efa\u6a21\uff0c\u7136\u540e\u8fdb\u884c\u58f0\u5b66\u9884\u6d4b\u6216\u8005\u5728\u97f3\u5e93\u4e2d\u8fdb\u884c\u5355\u5143\u6311\u9009\uff0c\u6700\u7ec8\u7ecf\u8fc7\u5408\u6210\u5668\u6216\u8005\u6ce2\u5f62\u62fc\u63a5\u7b49\u65b9\u6cd5\u5408\u6210\u8bed\u97f3\u3002 \u6839\u636e\u8bed\u97f3\u5408\u6210\u7814\u7a76\u7684\u5386\u53f2\uff0c\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u8bed\u97f3\u5408\u6210\u7814\u7a76\u65b9\u6cd5\u53ef\u4ee5\u5206\u4e3a\uff1a\u673a\u68b0\u5f0f\u8bed\u97f3\u5408\u6210\u5668\u3001\u7535\u5b50\u5f0f\u8bed\u97f3\u5408\u6210\u5668\u3001\u5171\u632f\u5cf0\u53c2\u6570\u5408\u6210\u5668\u3001\u57fa\u4e8e\u6ce2\u5f62\u62fc\u63a5\u7684\u8bed\u97f3\u5408\u6210\u3001\u7edf\u8ba1\u53c2\u6570\u8bed\u97f3\u5408\u6210\u3001\u4ee5\u53ca\u795e\u7ecf\u7f51\u7edc\u8bed\u97f3\u5408\u6210\u3002 \u8bed\u97f3\u5408\u6210\u7684\u65e9\u671f\u5de5\u4f5c\u4e3b\u8981\u662f\u901a\u8fc7\u6e90-\u6ee4\u6ce2\u5668\u6a21\u578b\u5bf9\u8bed\u97f3\u4ea7\u751f\u7684\u8fc7\u7a0b\u8fdb\u884c\u6a21\u62df\u3002\u6700\u5f00\u59cb\u7684\u673a\u68b0\u5f0f\u8bed\u97f3\u5408\u6210\u5668\uff0c\u4f7f\u7528\u98ce\u7bb1\u6a21\u62df\u4eba\u7684\u80ba\u90e8\u8fd0\u52a8\uff0c\u4ea7\u751f\u6fc0\u52b1\u7a7a\u6c14\u6d41\uff0c\u91c7\u7528\u632f\u52a8\u5f39\u7c27\u7247\u548c\u76ae\u9769\u6a21\u62df\u58f0\u9053\u7cfb\u7edf\uff0c\u901a\u8fc7\u624b\u52a8\u534f\u8c03\u5404\u90e8\u5206\u8fd0\u52a8\uff0c\u80fd\u591f\u5408\u6210\u51fa\u4e94\u4e2a\u957f\u5143\u97f3\u3002\u673a\u68b0\u5f0f\u7684\u8bed\u97f3\u5408\u6210\u5668\u96be\u4ee5\u5b9e\u7528\uff0c\u968f\u7740\u65f6\u4ee3\u7684\u53d1\u5c55\uff0c\u8d1d\u5c14\u5b9e\u9a8c\u5ba4\u63d0\u51fa\u4e86\u7535\u5b50\u5f0f\u7684\u8bed\u97f3\u5408\u6210\u5668\u3002\u4e0d\u518d\u6a21\u62df\u5177\u4f53\u7684\u751f\u7406\u5668\u5b98\uff0c\u7535\u5b50\u5f0f\u8bed\u97f3\u5408\u6210\u5668\u901a\u8fc7\u8109\u51b2\u53d1\u5c04\u5668\u548c\u566a\u58f0\u53d1\u5c04\u5668\u6765\u5206\u522b\u4ea7\u751f\u6a21\u62df\u6d4a\u97f3\u548c\u6e05\u97f3\u7684\u6fc0\u52b1\u7cfb\u7edf\uff0c\u901a\u8fc7\u64cd\u4f5c\u4eba\u5458\u624b\u52a8\u63a7\u5236\u591a\u4e2a\u5e26\u901a\u6ee4\u6ce2\u5668\u6765\u6a21\u62df\u58f0\u9053\u7cfb\u7edf\uff0c\u6700\u540e\u901a\u8fc7\u653e\u5927\u5668\u8f93\u51fa\u8bed\u97f3\u4fe1\u53f7\u3002\u7531\u4e8e\u7535\u5b50\u5f0f\u8bed\u97f3\u5408\u6210\u5668\u4f7f\u7528\u6709\u9650\u4e2a\u5e26\u901a\u6ee4\u6ce2\u5668\u6a21\u62df\u58f0\u9053\u7cfb\u7edf\uff0c\u5bf9\u81ea\u7136\u8bed\u97f3\u7684\u9891\u8c31\u7279\u5f81\u7684\u523b\u753b\u7cbe\u5ea6\u6709\u9650\u3002\u4e3a\u4e86\u66f4\u597d\u5730\u523b\u753b\u58f0\u9053\u7cfb\u7edf\uff0c\u5171\u632f\u5cf0\u53c2\u6570\u5408\u6210\u5668\u88ab\u63d0\u51fa\u3002\u5171\u632f\u5cf0\u53c2\u6570\u5408\u6210\u5668\u5c06\u58f0\u9053\u7cfb\u7edf\u770b\u6210\u4e00\u4e2a\u8c10\u632f\u8154\uff0c\u5229\u7528\u5171\u632f\u5cf0\u9891\u7387\u548c\u5bbd\u5ea6\u7b49\u58f0\u9053\u7684\u8c10\u632f\u7279\u6027\uff0c\u6784\u5efa\u58f0\u9053\u6ee4\u6ce2\u5668\uff0c\u4ee5\u66f4\u597d\u5730\u523b\u753b\u8bed\u97f3\u7684\u58f0\u9053\u7279\u6027\u3002\u7136\u800c\u7531\u4e8e\u5171\u632f\u5cf0\u53c2\u6570\u5408\u6210\u5668\u7ed3\u6784\u590d\u6742\uff0c\u9700\u8981\u5927\u91cf\u4eba\u5de5\u5206\u6790\u8c03\u6574\u53c2\u6570\uff0c\u96be\u4ee5\u5b9e\u7528\u3002 \u65e9\u671f\u7684\u8bed\u97f3\u5408\u6210\u65b9\u6cd5\u7531\u4e8e\u6a21\u578b\u7b80\u5355\uff0c\u7cfb\u7edf\u590d\u6742\u7b49\u539f\u56e0\uff0c\u96be\u4ee5\u5728\u5b9e\u9645\u573a\u666f\u5e94\u7528\u3002\u968f\u7740\u8ba1\u7b97\u673a\u6280\u672f\u7684\u53d1\u5c55\uff0c\u57fa\u4e8e\u6ce2\u5f62\u62fc\u63a5\u7684\u8bed\u97f3\u5408\u6210\u88ab\u63d0\u51fa\u3002\u57fa\u4e8e\u6ce2\u5f62\u62fc\u63a5\u7684\u8bed\u97f3\u5408\u6210\u7684\u57fa\u672c\u539f\u7406\u662f\u9996\u5148\u6784\u5efa\u4e00\u4e2a\u97f3\u5e93\uff0c\u5728\u5408\u6210\u9636\u6bb5\uff0c\u901a\u8fc7\u5bf9\u5408\u6210\u6587\u672c\u7684\u5206\u6790\uff0c\u6309\u7167\u4e00\u5b9a\u7684\u51c6\u5219\uff0c\u4ece\u97f3\u5e93\u4e2d\u6311\u9009\u51fa\u4e0e\u5f85\u5408\u6210\u8bed\u97f3\u76f8\u4f3c\u7684\u58f0\u5b66\u5355\u5143\uff0c\u5bf9\u8fd9\u4e9b\u58f0\u5b66\u5355\u5143\u8fdb\u884c\u5c11\u91cf\u8c03\u6574\uff0c\u62fc\u63a5\u5f97\u5230\u5408\u6210\u7684\u8bed\u97f3\u3002\u65e9\u671f\u7684\u6ce2\u5f62\u62fc\u63a5\u7cfb\u7edf\u53d7\u9650\u4e8e\u97f3\u5e93\u5927\u5c0f\u3001\u6311\u9009\u7b97\u6cd5\u3001\u62fc\u63a5\u8c03\u6574\u7684\u9650\u5236\uff0c\u5408\u6210\u8bed\u97f3\u8d28\u91cf\u8f83\u4f4e\u30021990\u5e74\uff0c\u57fa\u4e8e\u540c\u6b65\u53e0\u52a0\u7684\u65f6\u57df\u6ce2\u5f62\u4fee\u6539\u7b97\u6cd5\u88ab\u63d0\u51fa\uff0c\u89e3\u51b3\u4e86\u58f0\u5b66\u5355\u5143\u62fc\u63a5\u5904\u7684\u5c40\u90e8\u4e0d\u8fde\u7eed\u95ee\u9898\u3002\u66f4\u8fdb\u4e00\u6b65\uff0c\u57fa\u4e8e\u5927\u8bed\u6599\u5e93\u7684\u6ce2\u5f62\u62fc\u63a5\u8bed\u97f3\u5408\u6210\u65b9\u6cd5\u88ab\u63d0\u51fa\uff0c\u91c7\u7528\u66f4\u7cbe\u7ec6\u7684\u6311\u9009\u7b56\u7565\uff0c\u5c06\u8bed\u97f3\u97f3\u5e93\u6781\u5927\u5730\u62d3\u5c55\uff0c\u5927\u5e45\u63d0\u5347\u4e86\u5408\u6210\u8bed\u97f3\u7684\u81ea\u7136\u5ea6\u3002\u7531\u4e8e\u76f4\u63a5\u4f7f\u7528\u53d1\u97f3\u4eba\u7684\u539f\u59cb\u8bed\u97f3\uff0c\u57fa\u4e8e\u6ce2\u5f62\u62fc\u63a5\u7684\u8bed\u97f3\u5408\u6210\u65b9\u6cd5\u5408\u6210\u8bed\u97f3\u7684\u97f3\u8d28\u63a5\u8fd1\u81ea\u7136\u8bed\u97f3\uff0c\u88ab\u5e7f\u6cdb\u5e94\u7528\u3002\u4f46\u5176\u7f3a\u70b9\u4e5f\u8f83\u4e3a\u660e\u663e\uff0c\u5305\u62ec\u97f3\u5e93\u5236\u4f5c\u65f6\u95f4\u957f\u3001\u9700\u8981\u4fdd\u5b58\u6574\u4e2a\u97f3\u5e93\u3001\u62d3\u5c55\u6027\u5dee\u3001\u5408\u6210\u8bed\u97f3\u81ea\u7136\u5ea6\u53d7\u97f3\u5e93\u548c\u6311\u9009\u7b97\u6cd5\u5f71\u54cd\uff0c\u9c81\u68d2\u6027\u4e0d\u9ad8\u7b49\u3002 \u968f\u7740\u7edf\u8ba1\u5efa\u6a21\u7406\u8bba\u7684\u5b8c\u5584\uff0c\u4ee5\u53ca\u5bf9\u8bed\u97f3\u4fe1\u53f7\u7406\u89e3\u7684\u6df1\u5165\uff0c\u57fa\u4e8e\u7edf\u8ba1\u53c2\u6570\u7684\u8bed\u97f3\u5408\u6210\u65b9\u6cd5\u88ab\u63d0\u51fa\u3002\u5176\u57fa\u672c\u539f\u7406\u662f\u4f7f\u7528\u7edf\u8ba1\u6a21\u578b\uff0c\u5bf9\u8bed\u97f3\u7684\u53c2\u6570\u5316\u8868\u5f81\u8fdb\u884c\u5efa\u6a21\u3002\u5728\u5408\u6210\u9636\u6bb5\uff0c\u7ed9\u5b9a\u5f85\u5408\u6210\u6587\u672c\uff0c\u4f7f\u7528\u7edf\u8ba1\u6a21\u578b\u9884\u6d4b\u51fa\u5bf9\u5e94\u7684\u58f0\u5b66\u53c2\u6570\uff0c\u7ecf\u8fc7\u58f0\u7801\u5668\u5408\u6210\u8bed\u97f3\u6ce2\u5f62\u3002\u7edf\u8ba1\u53c2\u6570\u8bed\u97f3\u5408\u6210\u65b9\u6cd5\u662f\u76ee\u524d\u7684\u4e3b\u6d41\u8bed\u97f3\u5408\u6210\u65b9\u6cd5\u4e4b\u4e00\u3002\u7edf\u8ba1\u53c2\u6570\u97f3\u5408\u6210\u65b9\u6cd5\u7684\u4f18\u70b9\u5f88\u591a\uff0c\u5305\u62ec\u53ea\u9700\u8981\u8f83\u5c11\u7684\u4eba\u5de5\u5e72\u9884\uff0c\u80fd\u591f\u5feb\u901f\u5730\u81ea\u52a8\u6784\u5efa\u7cfb\u7edf\uff0c\u540c\u65f6\u5177\u6709\u8f83\u5f3a\u7684\u7075\u6d3b\u6027\uff0c\u80fd\u591f\u9002\u5e94\u4e0d\u540c\u53d1\u97f3\u4eba\uff0c\u4e0d\u540c\u53d1\u97f3\u98ce\u683c\uff0c\u591a\u8bed\u79cd\u7684\u8bed\u97f3\u5408\u6210\uff0c\u5177\u6709\u8f83\u5f3a\u7684\u9c81\u68d2\u6027\u7b49\u3002\u7531\u4e8e\u8bed\u97f3\u53c2\u6570\u5316\u8868\u793a\u4ee5\u53ca\u7edf\u8ba1\u5efa\u6a21\u7684\u5e73\u5747\u6548\u5e94\uff0c\u7edf\u8ba1\u53c2\u6570\u8bed\u97f3\u5408\u6210\u65b9\u6cd5\u751f\u6210\u7684\u8bed\u97f3\u81ea\u7136\u5ea6\u76f8\u6bd4\u81ea\u7136\u8bed\u97f3\u901a\u5e38\u4f1a\u6709\u4e00\u5b9a\u7684\u5dee\u8ddd\u3002\u57fa\u4e8e\u9690\u9a6c\u5c14\u79d1\u592b\u7684\u7edf\u8ba1\u53c2\u6570\u8bed\u97f3\u5408\u6210\u65b9\u6cd5\u662f\u53d1\u5c55\u6700\u4e3a\u5b8c\u5584\u7684\u4e00\u79cd\u3002\u57fa\u4e8eHMM\u7684\u7edf\u8ba1\u53c2\u6570\u8bed\u97f3\u5408\u6210\u7cfb\u7edf\u80fd\u591f\u540c\u65f6\u5bf9\u8bed\u97f3\u7684\u57fa\u9891\u3001\u9891\u8c31\u548c\u65f6\u957f\u8fdb\u884c\u5efa\u6a21\uff0c\u751f\u6210\u51fa\u8fde\u7eed\u6d41\u7545\u4e14\u53ef\u61c2\u5ea6\u9ad8\u7684\u8bed\u97f3\uff0c\u88ab\u5e7f\u6cdb\u5e94\u7528\uff0c\u4f46\u5176\u5408\u6210\u97f3\u8d28\u8f83\u5dee\u3002 \u5f53\u4ee3\u8bed\u97f3\u5408\u6210\u6846\u67b6 \u548c\u7edf\u8ba1\u53c2\u6570\u8bed\u97f3\u5408\u6210\u7cfb\u7edf\u7c7b\u4f3c\uff0c\u6df1\u5ea6\u5b66\u4e60\u8bed\u97f3\u5408\u6210\u7cfb\u7edf\u4e5f\u53ef\u5927\u81f4\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff1a\u6587\u672c\u524d\u7aef\u548c\u58f0\u5b66\u540e\u7aef\u3002\u6587\u672c\u524d\u7aef\u7684\u4e3b\u8981\u4f5c\u7528\u662f\u6587\u672c\u9884\u5904\u7406\uff0c\u5982\uff1a\u4e3a\u6587\u672c\u6dfb\u52a0\u97f5\u5f8b\u4fe1\u606f\uff0c\u5e76\u5c06\u6587\u672c\u8bcd\u9762\u8f6c\u5316\u4e3a\u8bed\u8a00\u5b66\u7279\u5f81\u5e8f\u5217\uff08Linguistic Feature Sequence\uff09\uff1b\u58f0\u5b66\u540e\u7aef\u53c8\u53ef\u4ee5\u5206\u4e3a\u58f0\u5b66\u7279\u5f81\u751f\u6210\u7f51\u7edc\u548c\u58f0\u7801\u5668\uff0c\u5176\u4e2d\u58f0\u5b66\u7279\u5f81\u751f\u6210\u7f51\u7edc\u6839\u636e\u6587\u672c\u524d\u7aef\u8f93\u51fa\u7684\u4fe1\u606f\u4ea7\u751f\u58f0\u5b66\u7279\u5f81\uff0c\u5982\uff1a\u5c06\u8bed\u8a00\u5b66\u7279\u5f81\u5e8f\u5217\u6620\u5c04\u5230\u6885\u5c14\u9891\u8c31\u6216\u7ebf\u6027\u8c31\uff1b\u58f0\u7801\u5668\u5229\u7528\u9891\u8c31\u7b49\u58f0\u5b66\u7279\u5f81\uff0c\u751f\u6210\u8bed\u97f3\u6837\u672c\u70b9\u5e76\u91cd\u5efa\u65f6\u57df\u6ce2\u5f62\uff0c\u5982\uff1a\u5c06\u6885\u5c14\u9891\u8c31\u6062\u590d\u4e3a\u5bf9\u5e94\u7684\u8bed\u97f3\u3002\u8fd1\u5e74\u6765\uff0c\u4e5f\u51fa\u73b0\u4e86\u5b8c\u5168\u7aef\u5230\u7aef\u7684\u8bed\u97f3\u5408\u6210\u7cfb\u7edf\uff0c\u5c06\u58f0\u5b66\u7279\u5f81\u751f\u6210\u7f51\u7edc\u548c\u58f0\u7801\u5668\u548c\u5408\u5e76\u8d77\u6765\uff0c\u58f0\u5b66\u540e\u7aef\u6210\u4e3a\u4e00\u4e2a\u6574\u4f53\uff0c\u76f4\u63a5\u5c06\u8bed\u8a00\u5b66\u7279\u5f81\u5e8f\u5217\uff0c\u751a\u81f3\u6587\u672c\u8bcd\u9762\u7aef\u5230\u7aef\u8f6c\u6362\u4e3a\u8bed\u97f3\u6ce2\u5f62\u3002 \u6587\u672c\u524d\u7aef \u6587\u672c\u524d\u7aef\u7684\u4f5c\u7528\u662f\u4ece\u6587\u672c\u4e2d\u63d0\u53d6\u53d1\u97f3\u548c\u8bed\u8a00\u5b66\u4fe1\u606f\uff0c\u5176\u4efb\u52a1\u81f3\u5c11\u5305\u62ec\u4ee5\u4e0b\u56db\u70b9\u3002 \u6587\u672c\u6b63\u5219\u5316 \u5728\u8bed\u97f3\u5408\u6210\u4e2d\uff0c\u7528\u4e8e\u5408\u6210\u7684\u6587\u672c\u5b58\u5728\u7279\u6b8a\u7b26\u53f7\u3001\u963f\u62c9\u4f2f\u6570\u5b57\u7b49\uff0c\u9700\u8981\u628a\u7b26\u53f7\u8f6c\u6362\u4e3a\u6587\u672c\u3002\u5982\"1.5\u5143\"\u9700\u8981\u8f6c\u6362\u6210\"\u4e00\u70b9\u4e94\u5143\"\uff0c\u65b9\u4fbf\u540e\u7eed\u7684\u8bed\u8a00\u5b66\u5206\u6790\u3002 \u97f5\u5f8b\u9884\u6d4b \u8be5\u6a21\u5757\u7684\u4e3b\u8981\u4f5c\u7528\u662f\u6dfb\u52a0\u53e5\u5b50\u4e2d\u97f5\u5f8b\u505c\u987f\u6216\u8d77\u4f0f\u3002\u5982\"\u5728\u6297\u51fb\u65b0\u578b\u51a0\u72b6\u75c5\u6bd2\u7684\u6218\u5f79\u4e2d\uff0c\u515a\u548c\u4eba\u6c11\u7fa4\u4f17\u7ecf\u53d7\u4e86\u4e00\u6b21\u6b21\u7684\u8003\u9a8c\"\uff0c\u5982\u679c\u505c\u987f\u4fe1\u606f\u4e0d\u51c6\u786e\u5c31\u4f1a\u51fa\u73b0\uff1a\"\u5728/\u6297\u51fb/\u65b0\u578b\u51a0\u72b6\u75c5\u6bd2/\u7684/\u6218\u5f79\u4e2d\uff0c\u515a/\u548c/\u4eba\u6c11\u7fa4\u4f17/\u7ecf\u53d7\u4e86/\u4e00\u6b21/\u6b21/\u7684/\u8003\u9a8c\"\u3002\"\u4e00\u6b21\u6b21\"\u7684\u5730\u65b9\u5b58\u5728\u4e00\u4e2a\u9519\u8bef\u505c\u987f\uff0c\u8fd9\u5c06\u4f1a\u5bfc\u81f4\u5408\u6210\u8bed\u97f3\u4e0d\u81ea\u7136\uff0c\u5982\u679c\u4e25\u91cd\u4e9b\u751a\u81f3\u4f1a\u5f71\u54cd\u8bed\u4e49\u4fe1\u606f\u7684\u4f20\u8fbe\u3002 \u5b57\u5f62\u8f6c\u97f3\u7d20 \u5c06\u6587\u5b57\u8f6c\u5316\u4e3a\u53d1\u97f3\u4fe1\u606f\u3002\u6bd4\u5982\"\u4e2d\u56fd\"\u662f\u6c49\u5b57\u8868\u793a\uff0c\u9700\u8981\u5148\u5c06\u5176\u8f6c\u5316\u4e3a\u62fc\u97f3\"zhong1 guo2\"\uff0c\u4ee5\u5e2e\u52a9\u540e\u7eed\u7684\u58f0\u5b66\u6a21\u578b\u66f4\u52a0\u51c6\u786e\u5730\u83b7\u77e5\u6bcf\u4e2a\u6c49\u5b57\u7684\u53d1\u97f3\u60c5\u51b5\u3002 \u591a\u97f3\u5b57\u548c\u53d8\u8c03 \u8bb8\u591a\u8bed\u8a00\u4e2d\u90fd\u6709\u591a\u97f3\u5b57\u7684\u73b0\u8c61\uff0c\u6bd4\u5982\"\u6a21\u578b\"\u548c\"\u6a21\u6837\"\uff0c\u8fd9\u91cc\"\u6a21\"\u5b57\u7684\u53d1\u97f3\u5c31\u5b58\u5728\u5dee\u5f02\u3002\u53e6\u5916\uff0c\u6c49\u5b57\u4e2d\u53c8\u5b58\u5728\u53d8\u8c03\u73b0\u8c61\uff0c\u5982\"\u4e00\u4e2a\"\u548c\"\u770b\u4e00\u770b\"\u4e2d\u7684\"\u4e00\"\u53d1\u97f3\u97f3\u8c03\u4e0d\u540c\u3002\u6240\u4ee5\u5728\u8f93\u5165\u4e00\u4e2a\u53e5\u5b50\u7684\u65f6\u5019\uff0c\u6587\u672c\u524d\u7aef\u5c31\u9700\u8981\u51c6\u786e\u5224\u65ad\u51fa\u6587\u5b57\u4e2d\u7684\u7279\u6b8a\u53d1\u97f3\u60c5\u51b5\uff0c\u5426\u5219\u53ef\u80fd\u4f1a\u5bfc\u81f4\u540e\u7eed\u7684\u58f0\u5b66\u6a21\u578b\u5408\u6210\u9519\u8bef\u7684\u58f0\u5b66\u7279\u5f81\uff0c\u8fdb\u800c\u751f\u6210\u4e0d\u6b63\u786e\u7684\u8bed\u97f3\u3002 \u58f0\u5b66\u7279\u5f81\u751f\u6210\u7f51\u7edc \u58f0\u5b66\u7279\u5f81\u751f\u6210\u7f51\u7edc\u6839\u636e\u6587\u672c\u524d\u7aef\u7684\u53d1\u97f3\u4fe1\u606f\uff0c\u4ea7\u751f\u58f0\u5b66\u7279\u5f81\uff0c\u5982\u6885\u5c14\u9891\u8c31\u6216\u7ebf\u6027\u8c31\u3002\u8fd1\u5e74\u6765\uff0c\u57fa\u4e8e\u6df1\u5ea6\u5b66\u4e60\u7684\u751f\u6210\u7f51\u7edc\u751a\u81f3\u53ef\u4ee5\u53bb\u9664\u6587\u672c\u524d\u7aef\uff0c\u76f4\u63a5\u7531\u82f1\u6587\u7b49\u6587\u672c\u751f\u6210\u5bf9\u5e94\u7684\u9891\u8c31\u3002\u4f46\u662f\u4e00\u822c\u6765\u8bf4\uff0c\u56e0\u4e3a\u4e2d\u6587\u5b57\u5f62\u548c\u8bfb\u97f3\u5173\u8054\u5be5\u5be5\uff0c\u56e0\u6b64\u4e2d\u6587\u8bed\u97f3\u5408\u6210\u7cfb\u7edf\u5927\u591a\u65e0\u6cd5\u629b\u5f03\u6587\u672c\u524d\u7aef\uff0c\u6362\u8a00\u4e4b\uff0c\u76f4\u63a5\u5c06\u4e2d\u6587\u6587\u672c\u8f93\u5165\u5230\u58f0\u5b66\u7279\u5f81\u751f\u6210\u7f51\u7edc\u4e2d\u662f\u4e0d\u53ef\u884c\u7684\u3002\u57fa\u4e8e\u6df1\u5ea6\u5b66\u4e60\u7684\u58f0\u5b66\u7279\u5f81\u751f\u6210\u7f51\u7edc\u53d1\u5c55\u8fc5\u901f\uff0c\u6bd4\u8f83\u6709\u4ee3\u8868\u6027\u7684\u6a21\u578b\u6709Tacotron\u7cfb\u5217\uff0cFastSpeech\u7cfb\u5217\u7b49\u3002\u8fd1\u5e74\u6765\uff0c\u4e5f\u6d8c\u73b0\u51fa\u7c7b\u4f3c\u4e8eVITS\u7684\u8bed\u97f3\u5408\u6210\u6a21\u578b\uff0c\u5c06\u58f0\u5b66\u7279\u5f81\u751f\u6210\u7f51\u7edc\u548c\u58f0\u7801\u5668\u878d\u5408\u5728\u4e00\u8d77\uff0c\u76f4\u63a5\u5c06\u6587\u672c\u6620\u5c04\u4e3a\u8bed\u97f3\u6ce2\u5f62\u3002 \u58f0\u7801\u5668 \u901a\u8fc7\u58f0\u5b66\u7279\u5f81\u4ea7\u751f\u8bed\u97f3\u6ce2\u5f62\u7684\u7cfb\u7edf\u88ab\u79f0\u4f5c\u58f0\u7801\u5668\uff0c\u58f0\u7801\u5668\u662f\u51b3\u5b9a\u8bed\u97f3\u8d28\u91cf\u7684\u4e00\u4e2a\u91cd\u8981\u56e0\u7d20\u3002\u4e00\u822c\u800c\u8a00\uff0c\u58f0\u7801\u5668\u53ef\u4ee5\u5206\u4e3a\u4ee5\u4e0b4\u7c7b\uff1a\u7eaf\u4fe1\u53f7\u5904\u7406\uff0c\u5982Griffin-Lim\u3001STRAIGHT\u548cWORLD\uff1b\u81ea\u56de\u5f52\u6df1\u5ea6\u7f51\u7edc\u6a21\u578b\uff0c\u5982WaveNet\u548cWaveRNN\uff1b\u975e\u81ea\u56de\u5f52\u6a21\u578b\uff0c\u5982Parallel WaveNet\u3001ClariNet\u548cWaveGlow\uff1b\u57fa\u4e8e\u751f\u6210\u5bf9\u6297\u7f51\u7edc\uff08Generative Adversarial Network\uff0cGAN\uff09\u7684\u6a21\u578b\uff0c\u5982MelGAN\u3001Parallel WaveGAN\u548cHiFiGAN\u3002","title":"\u8bed\u97f3\u5408\u6210\u6982\u8ff0"},{"location":"tts/%E8%AF%AD%E9%9F%B3%E5%90%88%E6%88%90%E6%A6%82%E8%BF%B0/#_1","text":"","title":"\u8bed\u97f3\u5408\u6210\u6982\u8ff0"},{"location":"tts/%E8%AF%AD%E9%9F%B3%E5%90%88%E6%88%90%E6%A6%82%E8%BF%B0/#_2","text":"\u8bed\u97f3\u5408\u6210\uff08Speech Synthesis\uff09\uff0c\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u4e0e\u6587\u8bed\u8f6c\u6362\uff08Text-to-Speech\uff0cTTS\uff09\u540c\u4e49\uff0c\u662f\u4e00\u79cd\u5c06\u6587\u672c\u8f6c\u6362\u4e3a\u8bed\u97f3\u7684\u6280\u672f\uff0c\u662f\u4eba\u5de5\u667a\u80fd\u7684\u5b50\u9886\u57df\u4e4b\u4e00\uff0c\u8d4b\u4e88\u673a\u5668\u50cf\u4eba\u4e00\u6837\u81ea\u5982\u8bf4\u8bdd\u80fd\u529b\u7684\u6280\u672f\uff0c\u662f\u4eba\u673a\u8bed\u97f3\u4ea4\u4e92\u4e2d\u91cd\u8981\u7684\u4e00\u73af\u3002\u8bed\u97f3\u5408\u6210\u7684\u7814\u7a76\u5386\u53f2\u53ef\u8ffd\u6eaf\u81f318\u81f319\u4e16\u7eaa\uff0c\u4ece\u65e9\u671f\u7684\u57fa\u4e8e\u89c4\u5219\u7684\u673a\u68b0\u5f0f\u3001\u7535\u5b50\u5f0f\u8bed\u97f3\u5408\u6210\u5668\uff0c\u5230\u57fa\u4e8e\u6ce2\u5f62\u62fc\u63a5\u3001\u7edf\u8ba1\u53c2\u6570\u7684\u8bed\u97f3\u5408\u6210\u3002\u8fd1\u5e74\u6765\uff0c\u57fa\u4e8e\u6df1\u5ea6\u5b66\u4e60\uff08Deep Learning\uff09\u548c\u795e\u7ecf\u7f51\u7edc\uff08Neural Network\uff09\u7684\u5efa\u6a21\u65b9\u6cd5\u5728\u673a\u5668\u5b66\u4e60\u9886\u57df\u5404\u4e2a\u4efb\u52a1\u4e0a\u90fd\u53d6\u5f97\u4e86\u5feb\u901f\u7684\u53d1\u5c55\uff0c\u8bed\u97f3\u5408\u6210\u6280\u672f\u4e5f\u5728\u6b64\u57fa\u7840\u4e0a\u5f97\u5230\u4e86\u663e\u8457\u7684\u63d0\u5347\u3002\u968f\u7740\u4fe1\u606f\u6280\u672f\u53ca\u4eba\u5de5\u667a\u80fd\u6280\u672f\u7684\u53d1\u5c55\uff0c\u5404\u79cd\u5e94\u7528\u573a\u666f\u5bf9\u8bed\u97f3\u5408\u6210\u7684\u6548\u679c\u6709\u4e86\u8d8a\u6765\u8d8a\u9ad8\u7684\u8981\u6c42\u3002","title":"\u80cc\u666f\u548c\u6982\u8ff0"},{"location":"tts/%E8%AF%AD%E9%9F%B3%E5%90%88%E6%88%90%E6%A6%82%E8%BF%B0/#_3","text":"\u8bed\u97f3\u662f\u6700\u65b9\u4fbf\u6700\u81ea\u7136\u7684\u4eba\u673a\u4ea4\u4e92\u65b9\u5f0f\u4e4b\u4e00\uff0c\u968f\u7740\u8fd1\u5e74\u6765\u667a\u80fd\u624b\u673a\u7b49\u667a\u80fd\u7ec8\u7aef\u7684\u8fc5\u901f\u53d1\u5c55\uff0c\u4eba\u673a\u8bed\u97f3\u4ea4\u4e92\u6536\u5230\u4e86\u8d8a\u6765\u8d8a\u591a\u7684\u5173\u6ce8\u3002\u4eba\u673a\u8bed\u97f3\u4ea4\u4e92\u662f\u57fa\u4e8e\u8bed\u97f3\u8bc6\u522b\u3001\u81ea\u7136\u8bed\u8a00\u7406\u89e3\u53ca\u8bed\u97f3\u5408\u6210\u7684\u4eba\u673a\u8bed\u97f3\u5bf9\u8bdd\u6280\u672f\uff0c\u4f5c\u4e3a\u4eba\u673a\u4ea4\u4e92\u7684\u6838\u5fc3\u6280\u672f\u4e4b\u4e00\uff0c\u8bed\u97f3\u5408\u6210\u5c31\u662f\u8d4b\u4e88\u8ba1\u7b97\u673a\u53ca\u5404\u79cd\u7ec8\u7aef\u8bbe\u5907\u50cf\u4eba\u4e00\u6837\u81ea\u5982\u8bf4\u8bdd\u7684\u80fd\u529b\u3002\u8bed\u97f3\u5408\u6210\u662f\u4e00\u95e8\u4ea4\u53c9\u5b66\u79d1\uff0c\u5b83\u6d89\u53ca\u5230\u8bed\u8a00\u5b66\u3001\u8bed\u97f3\u5b66\u3001\u81ea\u7136\u8bed\u8a00\u5904\u7406\u3001\u4fe1\u53f7\u5904\u7406\u3001\u7edf\u8ba1\u5b66\u4e60\u3001\u6a21\u5f0f\u8bc6\u522b\u7b49\u4f17\u591a\u5b66\u79d1\u7684\u7406\u8bba\u4e0e\u6280\u672f\u3002 \u968f\u7740\u4fe1\u606f\u6280\u672f\u548c\u4eba\u5de5\u667a\u80fd\u6280\u672f\u7684\u53d1\u5c55\uff0c\u4ee5\u53ca\u5bf9\u8bed\u97f3\u4fe1\u53f7\u548c\u7edf\u8ba1\u5efa\u6a21\u6280\u672f\u672c\u8eab\u4e0d\u65ad\u7684\u6df1\u5165\u7406\u89e3\uff0c\u8bed\u97f3\u5408\u6210\u7cfb\u7edf\u7684\u6548\u679c\u9010\u6e10\u63d0\u9ad8\uff0c\u88ab\u5e7f\u6cdb\u5e94\u7528\u4e8e\u5404\u4e2a\u573a\u666f\uff0c\u5305\u62ec\u8bed\u97f3\u5bf9\u8bdd\u7cfb\u7edf\uff1b\u667a\u80fd\u8bed\u97f3\u52a9\u624b\uff0c\u5982Siri\uff1b\u7535\u8bdd\u4fe1\u606f\u67e5\u8be2\u7cfb\u7edf\uff1b\u8f66\u8f7d\u5bfc\u822a\uff0c\u6709\u58f0\u7535\u5b50\u4e66\u7b49\u8f85\u52a9\u5e94\u7528\uff1b\u8bed\u8a00\u5b66\u4e60\uff1b\u673a\u573a\uff0c\u8f66\u7ad9\u7b49\u5b9e\u65f6\u4fe1\u606f\u5e7f\u64ad\u7cfb\u7edf\uff1b\u89c6\u529b\u6216\u8bed\u97f3\u969c\u788d\u8005\u7684\u4fe1\u606f\u83b7\u53d6\u4e0e\u4ea4\u6d41\u7b49\u3002\u540c\u65f6\uff0c\u4e0d\u540c\u5e94\u7528\u573a\u666f\u5bf9\u4e8e\u5408\u6210\u8bed\u97f3\u7684\u5404\u9879\u6307\u6807\uff0c\u5305\u62ec\u81ea\u7136\u5ea6\u3001\u53ef\u61c2\u5ea6\u3001\u97f3\u8d28\u3001\u60c5\u611f\u98ce\u683c\u3001\u63a7\u5236\u529b\u4e5f\u90fd\u63d0\u51fa\u4e86\u66f4\u9ad8\u7684\u8981\u6c42\u3002","title":"\u80cc\u666f\u4ecb\u7ecd"},{"location":"tts/%E8%AF%AD%E9%9F%B3%E5%90%88%E6%88%90%E6%A6%82%E8%BF%B0/#_4","text":"\u8bed\u97f3\u4fe1\u53f7\u7684\u4ea7\u751f\u5206\u4e3a\u4e24\u4e2a\u9636\u6bb5\uff0c\u4fe1\u606f\u7f16\u7801\u548c\u751f\u7406\u63a7\u5236\u3002\u9996\u5148\u5728\u5927\u8111\u4e2d\u51fa\u73b0\u67d0\u79cd\u60f3\u8981\u8868\u8fbe\u7684\u60f3\u6cd5\uff0c\u7136\u540e\u7531\u5927\u8111\u5c06\u5176\u7f16\u7801\u4e3a\u5177\u4f53\u7684\u8bed\u8a00\u6587\u5b57\u5e8f\u5217\uff0c\u53ca\u8bed\u97f3\u4e2d\u53ef\u80fd\u5b58\u5728\u7684\u5f3a\u8c03\u3001\u91cd\u8bfb\u7b49\u97f5\u5f8b\u4fe1\u606f\u3002\u7ecf\u8fc7\u8bed\u8a00\u7684\u7ec4\u7ec7\uff0c\u5927\u8111\u901a\u8fc7\u63a7\u5236\u53d1\u97f3\u5668\u5b98\u808c\u8089\u7684\u8fd0\u52a8\uff0c\u4ea7\u751f\u51fa\u76f8\u5e94\u7684\u8bed\u97f3\u4fe1\u53f7\u3002\u5176\u4e2d\u7b2c\u4e00\u9636\u6bb5\u4e3b\u8981\u6d89\u53ca\u4eba\u8111\u8bed\u8a00\u5904\u7406\u65b9\u9762\uff0c\u7b2c\u4e8c\u9636\u6bb5\u6d89\u53ca\u8bed\u97f3\u4fe1\u53f7\u4ea7\u751f\u7684\u751f\u7406\u673a\u5236\u3002 \u4ece\u6ee4\u6ce2\u7684\u89d2\u5ea6\uff0c\u4eba\u4f53\u6d89\u53ca\u53d1\u97f3\u7684\u5668\u5b98\u53ef\u4ee5\u5206\u4e3a\u4e24\u90e8\u5206\uff1a\u6fc0\u52b1\u7cfb\u7edf\u548c\u58f0\u9053\u7cfb\u7edf\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002\u6fc0\u52b1\u7cfb\u7edf\u4e2d\uff0c\u50a8\u5b58\u4e8e\u80ba\u90e8\u7684\u7a7a\u6c14\u6e90\uff0c\u7ecf\u8fc7\u80f8\u8154\u7684\u538b\u7f29\u6392\u51fa\uff0c\u7ecf\u8fc7\u6c14\u7ba1\u8fdb\u5165\u58f0\u5e26\uff0c\u6839\u636e\u53d1\u97f3\u5355\u5143\u51b3\u5b9a\u662f\u5426\u4ea7\u751f\u632f\u52a8\uff0c\u5f62\u6210\u51c6\u5468\u671f\u7684\u8109\u51b2\u7a7a\u6c14\u6fc0\u52b1\u6d41\u6216\u566a\u58f0\u7a7a\u6c14\u6fc0\u52b1\u6d41\u3002\u8fd9\u4e9b\u7a7a\u6c14\u6d41\u4f5c\u4e3a\u6fc0\u52b1\uff0c\u8fdb\u5165\u58f0\u9053\u7cfb\u7edf\uff0c\u88ab\u9891\u7387\u6574\u5f62\uff0c\u5f62\u6210\u4e0d\u540c\u7684\u58f0\u97f3\u3002\u58f0\u9053\u7cfb\u7edf\u5305\u62ec\u54bd\u5589\u3001\u53e3\u8154\uff08\u820c\u3001\u5507\u3001\u988c\u548c\u53e3\uff09\u7ec4\u6210\uff0c\u53ef\u80fd\u8fd8\u5305\u62ec\u9f3b\u9053\u3002\u4e0d\u540c\u5468\u671f\u7684\u8109\u51b2\u7a7a\u6c14\u6d41\u6216\u8005\u566a\u58f0\u7a7a\u6c14\u6d41\uff0c\u4ee5\u53ca\u4e0d\u540c\u58f0\u9053\u5668\u5b98\u7684\u4f4d\u7f6e\u51b3\u5b9a\u4e86\u4ea7\u751f\u7684\u58f0\u97f3\u3002\u56e0\u6b64\uff0c\u8bed\u97f3\u5408\u6210\u4e2d\u901a\u5e38\u5c06\u8bed\u97f3\u7684\u5efa\u6a21\u5206\u89e3\u4e3a\u6fc0\u52b1\u5efa\u6a21\u548c\u58f0\u9053\u5efa\u6a21\u3002","title":"\u8bed\u97f3\u5408\u6210\u6982\u8ff0"},{"location":"tts/%E8%AF%AD%E9%9F%B3%E5%90%88%E6%88%90%E6%A6%82%E8%BF%B0/#_5","text":"\u8bed\u97f3\u5408\u6210\u7cfb\u7edf\u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u5206\u522b\u79f0\u4e3a\u6587\u672c\u524d\u7aef\u548c\u540e\u7aef\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002 \u6587\u672c\u524d\u7aef\u4e3b\u8981\u8d1f\u8d23\u5728\u8bed\u8a00\u5c42\u3001\u8bed\u6cd5\u5c42\u3001\u8bed\u4e49\u5c42\u5bf9\u8f93\u5165\u6587\u672c\u8fdb\u884c\u6587\u672c\u5206\u6790\uff1b\u540e\u7aef\u4e3b\u8981\u662f\u4ece\u4fe1\u53f7\u5904\u7406\u3001\u6a21\u5f0f\u8bc6\u522b\u3001\u673a\u5668\u5b66\u4e60\u7b49\u89d2\u5ea6\uff0c\u5728\u8bed\u97f3\u5c42\u9762\u4e0a\u8fdb\u884c\u97f5\u5f8b\u7279\u5f81\u5efa\u6a21\uff0c\u58f0\u5b66\u7279\u5f81\u5efa\u6a21\uff0c\u7136\u540e\u8fdb\u884c\u58f0\u5b66\u9884\u6d4b\u6216\u8005\u5728\u97f3\u5e93\u4e2d\u8fdb\u884c\u5355\u5143\u6311\u9009\uff0c\u6700\u7ec8\u7ecf\u8fc7\u5408\u6210\u5668\u6216\u8005\u6ce2\u5f62\u62fc\u63a5\u7b49\u65b9\u6cd5\u5408\u6210\u8bed\u97f3\u3002 \u6839\u636e\u8bed\u97f3\u5408\u6210\u7814\u7a76\u7684\u5386\u53f2\uff0c\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u8bed\u97f3\u5408\u6210\u7814\u7a76\u65b9\u6cd5\u53ef\u4ee5\u5206\u4e3a\uff1a\u673a\u68b0\u5f0f\u8bed\u97f3\u5408\u6210\u5668\u3001\u7535\u5b50\u5f0f\u8bed\u97f3\u5408\u6210\u5668\u3001\u5171\u632f\u5cf0\u53c2\u6570\u5408\u6210\u5668\u3001\u57fa\u4e8e\u6ce2\u5f62\u62fc\u63a5\u7684\u8bed\u97f3\u5408\u6210\u3001\u7edf\u8ba1\u53c2\u6570\u8bed\u97f3\u5408\u6210\u3001\u4ee5\u53ca\u795e\u7ecf\u7f51\u7edc\u8bed\u97f3\u5408\u6210\u3002 \u8bed\u97f3\u5408\u6210\u7684\u65e9\u671f\u5de5\u4f5c\u4e3b\u8981\u662f\u901a\u8fc7\u6e90-\u6ee4\u6ce2\u5668\u6a21\u578b\u5bf9\u8bed\u97f3\u4ea7\u751f\u7684\u8fc7\u7a0b\u8fdb\u884c\u6a21\u62df\u3002\u6700\u5f00\u59cb\u7684\u673a\u68b0\u5f0f\u8bed\u97f3\u5408\u6210\u5668\uff0c\u4f7f\u7528\u98ce\u7bb1\u6a21\u62df\u4eba\u7684\u80ba\u90e8\u8fd0\u52a8\uff0c\u4ea7\u751f\u6fc0\u52b1\u7a7a\u6c14\u6d41\uff0c\u91c7\u7528\u632f\u52a8\u5f39\u7c27\u7247\u548c\u76ae\u9769\u6a21\u62df\u58f0\u9053\u7cfb\u7edf\uff0c\u901a\u8fc7\u624b\u52a8\u534f\u8c03\u5404\u90e8\u5206\u8fd0\u52a8\uff0c\u80fd\u591f\u5408\u6210\u51fa\u4e94\u4e2a\u957f\u5143\u97f3\u3002\u673a\u68b0\u5f0f\u7684\u8bed\u97f3\u5408\u6210\u5668\u96be\u4ee5\u5b9e\u7528\uff0c\u968f\u7740\u65f6\u4ee3\u7684\u53d1\u5c55\uff0c\u8d1d\u5c14\u5b9e\u9a8c\u5ba4\u63d0\u51fa\u4e86\u7535\u5b50\u5f0f\u7684\u8bed\u97f3\u5408\u6210\u5668\u3002\u4e0d\u518d\u6a21\u62df\u5177\u4f53\u7684\u751f\u7406\u5668\u5b98\uff0c\u7535\u5b50\u5f0f\u8bed\u97f3\u5408\u6210\u5668\u901a\u8fc7\u8109\u51b2\u53d1\u5c04\u5668\u548c\u566a\u58f0\u53d1\u5c04\u5668\u6765\u5206\u522b\u4ea7\u751f\u6a21\u62df\u6d4a\u97f3\u548c\u6e05\u97f3\u7684\u6fc0\u52b1\u7cfb\u7edf\uff0c\u901a\u8fc7\u64cd\u4f5c\u4eba\u5458\u624b\u52a8\u63a7\u5236\u591a\u4e2a\u5e26\u901a\u6ee4\u6ce2\u5668\u6765\u6a21\u62df\u58f0\u9053\u7cfb\u7edf\uff0c\u6700\u540e\u901a\u8fc7\u653e\u5927\u5668\u8f93\u51fa\u8bed\u97f3\u4fe1\u53f7\u3002\u7531\u4e8e\u7535\u5b50\u5f0f\u8bed\u97f3\u5408\u6210\u5668\u4f7f\u7528\u6709\u9650\u4e2a\u5e26\u901a\u6ee4\u6ce2\u5668\u6a21\u62df\u58f0\u9053\u7cfb\u7edf\uff0c\u5bf9\u81ea\u7136\u8bed\u97f3\u7684\u9891\u8c31\u7279\u5f81\u7684\u523b\u753b\u7cbe\u5ea6\u6709\u9650\u3002\u4e3a\u4e86\u66f4\u597d\u5730\u523b\u753b\u58f0\u9053\u7cfb\u7edf\uff0c\u5171\u632f\u5cf0\u53c2\u6570\u5408\u6210\u5668\u88ab\u63d0\u51fa\u3002\u5171\u632f\u5cf0\u53c2\u6570\u5408\u6210\u5668\u5c06\u58f0\u9053\u7cfb\u7edf\u770b\u6210\u4e00\u4e2a\u8c10\u632f\u8154\uff0c\u5229\u7528\u5171\u632f\u5cf0\u9891\u7387\u548c\u5bbd\u5ea6\u7b49\u58f0\u9053\u7684\u8c10\u632f\u7279\u6027\uff0c\u6784\u5efa\u58f0\u9053\u6ee4\u6ce2\u5668\uff0c\u4ee5\u66f4\u597d\u5730\u523b\u753b\u8bed\u97f3\u7684\u58f0\u9053\u7279\u6027\u3002\u7136\u800c\u7531\u4e8e\u5171\u632f\u5cf0\u53c2\u6570\u5408\u6210\u5668\u7ed3\u6784\u590d\u6742\uff0c\u9700\u8981\u5927\u91cf\u4eba\u5de5\u5206\u6790\u8c03\u6574\u53c2\u6570\uff0c\u96be\u4ee5\u5b9e\u7528\u3002 \u65e9\u671f\u7684\u8bed\u97f3\u5408\u6210\u65b9\u6cd5\u7531\u4e8e\u6a21\u578b\u7b80\u5355\uff0c\u7cfb\u7edf\u590d\u6742\u7b49\u539f\u56e0\uff0c\u96be\u4ee5\u5728\u5b9e\u9645\u573a\u666f\u5e94\u7528\u3002\u968f\u7740\u8ba1\u7b97\u673a\u6280\u672f\u7684\u53d1\u5c55\uff0c\u57fa\u4e8e\u6ce2\u5f62\u62fc\u63a5\u7684\u8bed\u97f3\u5408\u6210\u88ab\u63d0\u51fa\u3002\u57fa\u4e8e\u6ce2\u5f62\u62fc\u63a5\u7684\u8bed\u97f3\u5408\u6210\u7684\u57fa\u672c\u539f\u7406\u662f\u9996\u5148\u6784\u5efa\u4e00\u4e2a\u97f3\u5e93\uff0c\u5728\u5408\u6210\u9636\u6bb5\uff0c\u901a\u8fc7\u5bf9\u5408\u6210\u6587\u672c\u7684\u5206\u6790\uff0c\u6309\u7167\u4e00\u5b9a\u7684\u51c6\u5219\uff0c\u4ece\u97f3\u5e93\u4e2d\u6311\u9009\u51fa\u4e0e\u5f85\u5408\u6210\u8bed\u97f3\u76f8\u4f3c\u7684\u58f0\u5b66\u5355\u5143\uff0c\u5bf9\u8fd9\u4e9b\u58f0\u5b66\u5355\u5143\u8fdb\u884c\u5c11\u91cf\u8c03\u6574\uff0c\u62fc\u63a5\u5f97\u5230\u5408\u6210\u7684\u8bed\u97f3\u3002\u65e9\u671f\u7684\u6ce2\u5f62\u62fc\u63a5\u7cfb\u7edf\u53d7\u9650\u4e8e\u97f3\u5e93\u5927\u5c0f\u3001\u6311\u9009\u7b97\u6cd5\u3001\u62fc\u63a5\u8c03\u6574\u7684\u9650\u5236\uff0c\u5408\u6210\u8bed\u97f3\u8d28\u91cf\u8f83\u4f4e\u30021990\u5e74\uff0c\u57fa\u4e8e\u540c\u6b65\u53e0\u52a0\u7684\u65f6\u57df\u6ce2\u5f62\u4fee\u6539\u7b97\u6cd5\u88ab\u63d0\u51fa\uff0c\u89e3\u51b3\u4e86\u58f0\u5b66\u5355\u5143\u62fc\u63a5\u5904\u7684\u5c40\u90e8\u4e0d\u8fde\u7eed\u95ee\u9898\u3002\u66f4\u8fdb\u4e00\u6b65\uff0c\u57fa\u4e8e\u5927\u8bed\u6599\u5e93\u7684\u6ce2\u5f62\u62fc\u63a5\u8bed\u97f3\u5408\u6210\u65b9\u6cd5\u88ab\u63d0\u51fa\uff0c\u91c7\u7528\u66f4\u7cbe\u7ec6\u7684\u6311\u9009\u7b56\u7565\uff0c\u5c06\u8bed\u97f3\u97f3\u5e93\u6781\u5927\u5730\u62d3\u5c55\uff0c\u5927\u5e45\u63d0\u5347\u4e86\u5408\u6210\u8bed\u97f3\u7684\u81ea\u7136\u5ea6\u3002\u7531\u4e8e\u76f4\u63a5\u4f7f\u7528\u53d1\u97f3\u4eba\u7684\u539f\u59cb\u8bed\u97f3\uff0c\u57fa\u4e8e\u6ce2\u5f62\u62fc\u63a5\u7684\u8bed\u97f3\u5408\u6210\u65b9\u6cd5\u5408\u6210\u8bed\u97f3\u7684\u97f3\u8d28\u63a5\u8fd1\u81ea\u7136\u8bed\u97f3\uff0c\u88ab\u5e7f\u6cdb\u5e94\u7528\u3002\u4f46\u5176\u7f3a\u70b9\u4e5f\u8f83\u4e3a\u660e\u663e\uff0c\u5305\u62ec\u97f3\u5e93\u5236\u4f5c\u65f6\u95f4\u957f\u3001\u9700\u8981\u4fdd\u5b58\u6574\u4e2a\u97f3\u5e93\u3001\u62d3\u5c55\u6027\u5dee\u3001\u5408\u6210\u8bed\u97f3\u81ea\u7136\u5ea6\u53d7\u97f3\u5e93\u548c\u6311\u9009\u7b97\u6cd5\u5f71\u54cd\uff0c\u9c81\u68d2\u6027\u4e0d\u9ad8\u7b49\u3002 \u968f\u7740\u7edf\u8ba1\u5efa\u6a21\u7406\u8bba\u7684\u5b8c\u5584\uff0c\u4ee5\u53ca\u5bf9\u8bed\u97f3\u4fe1\u53f7\u7406\u89e3\u7684\u6df1\u5165\uff0c\u57fa\u4e8e\u7edf\u8ba1\u53c2\u6570\u7684\u8bed\u97f3\u5408\u6210\u65b9\u6cd5\u88ab\u63d0\u51fa\u3002\u5176\u57fa\u672c\u539f\u7406\u662f\u4f7f\u7528\u7edf\u8ba1\u6a21\u578b\uff0c\u5bf9\u8bed\u97f3\u7684\u53c2\u6570\u5316\u8868\u5f81\u8fdb\u884c\u5efa\u6a21\u3002\u5728\u5408\u6210\u9636\u6bb5\uff0c\u7ed9\u5b9a\u5f85\u5408\u6210\u6587\u672c\uff0c\u4f7f\u7528\u7edf\u8ba1\u6a21\u578b\u9884\u6d4b\u51fa\u5bf9\u5e94\u7684\u58f0\u5b66\u53c2\u6570\uff0c\u7ecf\u8fc7\u58f0\u7801\u5668\u5408\u6210\u8bed\u97f3\u6ce2\u5f62\u3002\u7edf\u8ba1\u53c2\u6570\u8bed\u97f3\u5408\u6210\u65b9\u6cd5\u662f\u76ee\u524d\u7684\u4e3b\u6d41\u8bed\u97f3\u5408\u6210\u65b9\u6cd5\u4e4b\u4e00\u3002\u7edf\u8ba1\u53c2\u6570\u97f3\u5408\u6210\u65b9\u6cd5\u7684\u4f18\u70b9\u5f88\u591a\uff0c\u5305\u62ec\u53ea\u9700\u8981\u8f83\u5c11\u7684\u4eba\u5de5\u5e72\u9884\uff0c\u80fd\u591f\u5feb\u901f\u5730\u81ea\u52a8\u6784\u5efa\u7cfb\u7edf\uff0c\u540c\u65f6\u5177\u6709\u8f83\u5f3a\u7684\u7075\u6d3b\u6027\uff0c\u80fd\u591f\u9002\u5e94\u4e0d\u540c\u53d1\u97f3\u4eba\uff0c\u4e0d\u540c\u53d1\u97f3\u98ce\u683c\uff0c\u591a\u8bed\u79cd\u7684\u8bed\u97f3\u5408\u6210\uff0c\u5177\u6709\u8f83\u5f3a\u7684\u9c81\u68d2\u6027\u7b49\u3002\u7531\u4e8e\u8bed\u97f3\u53c2\u6570\u5316\u8868\u793a\u4ee5\u53ca\u7edf\u8ba1\u5efa\u6a21\u7684\u5e73\u5747\u6548\u5e94\uff0c\u7edf\u8ba1\u53c2\u6570\u8bed\u97f3\u5408\u6210\u65b9\u6cd5\u751f\u6210\u7684\u8bed\u97f3\u81ea\u7136\u5ea6\u76f8\u6bd4\u81ea\u7136\u8bed\u97f3\u901a\u5e38\u4f1a\u6709\u4e00\u5b9a\u7684\u5dee\u8ddd\u3002\u57fa\u4e8e\u9690\u9a6c\u5c14\u79d1\u592b\u7684\u7edf\u8ba1\u53c2\u6570\u8bed\u97f3\u5408\u6210\u65b9\u6cd5\u662f\u53d1\u5c55\u6700\u4e3a\u5b8c\u5584\u7684\u4e00\u79cd\u3002\u57fa\u4e8eHMM\u7684\u7edf\u8ba1\u53c2\u6570\u8bed\u97f3\u5408\u6210\u7cfb\u7edf\u80fd\u591f\u540c\u65f6\u5bf9\u8bed\u97f3\u7684\u57fa\u9891\u3001\u9891\u8c31\u548c\u65f6\u957f\u8fdb\u884c\u5efa\u6a21\uff0c\u751f\u6210\u51fa\u8fde\u7eed\u6d41\u7545\u4e14\u53ef\u61c2\u5ea6\u9ad8\u7684\u8bed\u97f3\uff0c\u88ab\u5e7f\u6cdb\u5e94\u7528\uff0c\u4f46\u5176\u5408\u6210\u97f3\u8d28\u8f83\u5dee\u3002","title":"\u8bed\u97f3\u5408\u6210\u7684\u5386\u53f2"},{"location":"tts/%E8%AF%AD%E9%9F%B3%E5%90%88%E6%88%90%E6%A6%82%E8%BF%B0/#_6","text":"\u548c\u7edf\u8ba1\u53c2\u6570\u8bed\u97f3\u5408\u6210\u7cfb\u7edf\u7c7b\u4f3c\uff0c\u6df1\u5ea6\u5b66\u4e60\u8bed\u97f3\u5408\u6210\u7cfb\u7edf\u4e5f\u53ef\u5927\u81f4\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff1a\u6587\u672c\u524d\u7aef\u548c\u58f0\u5b66\u540e\u7aef\u3002\u6587\u672c\u524d\u7aef\u7684\u4e3b\u8981\u4f5c\u7528\u662f\u6587\u672c\u9884\u5904\u7406\uff0c\u5982\uff1a\u4e3a\u6587\u672c\u6dfb\u52a0\u97f5\u5f8b\u4fe1\u606f\uff0c\u5e76\u5c06\u6587\u672c\u8bcd\u9762\u8f6c\u5316\u4e3a\u8bed\u8a00\u5b66\u7279\u5f81\u5e8f\u5217\uff08Linguistic Feature Sequence\uff09\uff1b\u58f0\u5b66\u540e\u7aef\u53c8\u53ef\u4ee5\u5206\u4e3a\u58f0\u5b66\u7279\u5f81\u751f\u6210\u7f51\u7edc\u548c\u58f0\u7801\u5668\uff0c\u5176\u4e2d\u58f0\u5b66\u7279\u5f81\u751f\u6210\u7f51\u7edc\u6839\u636e\u6587\u672c\u524d\u7aef\u8f93\u51fa\u7684\u4fe1\u606f\u4ea7\u751f\u58f0\u5b66\u7279\u5f81\uff0c\u5982\uff1a\u5c06\u8bed\u8a00\u5b66\u7279\u5f81\u5e8f\u5217\u6620\u5c04\u5230\u6885\u5c14\u9891\u8c31\u6216\u7ebf\u6027\u8c31\uff1b\u58f0\u7801\u5668\u5229\u7528\u9891\u8c31\u7b49\u58f0\u5b66\u7279\u5f81\uff0c\u751f\u6210\u8bed\u97f3\u6837\u672c\u70b9\u5e76\u91cd\u5efa\u65f6\u57df\u6ce2\u5f62\uff0c\u5982\uff1a\u5c06\u6885\u5c14\u9891\u8c31\u6062\u590d\u4e3a\u5bf9\u5e94\u7684\u8bed\u97f3\u3002\u8fd1\u5e74\u6765\uff0c\u4e5f\u51fa\u73b0\u4e86\u5b8c\u5168\u7aef\u5230\u7aef\u7684\u8bed\u97f3\u5408\u6210\u7cfb\u7edf\uff0c\u5c06\u58f0\u5b66\u7279\u5f81\u751f\u6210\u7f51\u7edc\u548c\u58f0\u7801\u5668\u548c\u5408\u5e76\u8d77\u6765\uff0c\u58f0\u5b66\u540e\u7aef\u6210\u4e3a\u4e00\u4e2a\u6574\u4f53\uff0c\u76f4\u63a5\u5c06\u8bed\u8a00\u5b66\u7279\u5f81\u5e8f\u5217\uff0c\u751a\u81f3\u6587\u672c\u8bcd\u9762\u7aef\u5230\u7aef\u8f6c\u6362\u4e3a\u8bed\u97f3\u6ce2\u5f62\u3002 \u6587\u672c\u524d\u7aef \u6587\u672c\u524d\u7aef\u7684\u4f5c\u7528\u662f\u4ece\u6587\u672c\u4e2d\u63d0\u53d6\u53d1\u97f3\u548c\u8bed\u8a00\u5b66\u4fe1\u606f\uff0c\u5176\u4efb\u52a1\u81f3\u5c11\u5305\u62ec\u4ee5\u4e0b\u56db\u70b9\u3002 \u6587\u672c\u6b63\u5219\u5316 \u5728\u8bed\u97f3\u5408\u6210\u4e2d\uff0c\u7528\u4e8e\u5408\u6210\u7684\u6587\u672c\u5b58\u5728\u7279\u6b8a\u7b26\u53f7\u3001\u963f\u62c9\u4f2f\u6570\u5b57\u7b49\uff0c\u9700\u8981\u628a\u7b26\u53f7\u8f6c\u6362\u4e3a\u6587\u672c\u3002\u5982\"1.5\u5143\"\u9700\u8981\u8f6c\u6362\u6210\"\u4e00\u70b9\u4e94\u5143\"\uff0c\u65b9\u4fbf\u540e\u7eed\u7684\u8bed\u8a00\u5b66\u5206\u6790\u3002 \u97f5\u5f8b\u9884\u6d4b \u8be5\u6a21\u5757\u7684\u4e3b\u8981\u4f5c\u7528\u662f\u6dfb\u52a0\u53e5\u5b50\u4e2d\u97f5\u5f8b\u505c\u987f\u6216\u8d77\u4f0f\u3002\u5982\"\u5728\u6297\u51fb\u65b0\u578b\u51a0\u72b6\u75c5\u6bd2\u7684\u6218\u5f79\u4e2d\uff0c\u515a\u548c\u4eba\u6c11\u7fa4\u4f17\u7ecf\u53d7\u4e86\u4e00\u6b21\u6b21\u7684\u8003\u9a8c\"\uff0c\u5982\u679c\u505c\u987f\u4fe1\u606f\u4e0d\u51c6\u786e\u5c31\u4f1a\u51fa\u73b0\uff1a\"\u5728/\u6297\u51fb/\u65b0\u578b\u51a0\u72b6\u75c5\u6bd2/\u7684/\u6218\u5f79\u4e2d\uff0c\u515a/\u548c/\u4eba\u6c11\u7fa4\u4f17/\u7ecf\u53d7\u4e86/\u4e00\u6b21/\u6b21/\u7684/\u8003\u9a8c\"\u3002\"\u4e00\u6b21\u6b21\"\u7684\u5730\u65b9\u5b58\u5728\u4e00\u4e2a\u9519\u8bef\u505c\u987f\uff0c\u8fd9\u5c06\u4f1a\u5bfc\u81f4\u5408\u6210\u8bed\u97f3\u4e0d\u81ea\u7136\uff0c\u5982\u679c\u4e25\u91cd\u4e9b\u751a\u81f3\u4f1a\u5f71\u54cd\u8bed\u4e49\u4fe1\u606f\u7684\u4f20\u8fbe\u3002 \u5b57\u5f62\u8f6c\u97f3\u7d20 \u5c06\u6587\u5b57\u8f6c\u5316\u4e3a\u53d1\u97f3\u4fe1\u606f\u3002\u6bd4\u5982\"\u4e2d\u56fd\"\u662f\u6c49\u5b57\u8868\u793a\uff0c\u9700\u8981\u5148\u5c06\u5176\u8f6c\u5316\u4e3a\u62fc\u97f3\"zhong1 guo2\"\uff0c\u4ee5\u5e2e\u52a9\u540e\u7eed\u7684\u58f0\u5b66\u6a21\u578b\u66f4\u52a0\u51c6\u786e\u5730\u83b7\u77e5\u6bcf\u4e2a\u6c49\u5b57\u7684\u53d1\u97f3\u60c5\u51b5\u3002 \u591a\u97f3\u5b57\u548c\u53d8\u8c03 \u8bb8\u591a\u8bed\u8a00\u4e2d\u90fd\u6709\u591a\u97f3\u5b57\u7684\u73b0\u8c61\uff0c\u6bd4\u5982\"\u6a21\u578b\"\u548c\"\u6a21\u6837\"\uff0c\u8fd9\u91cc\"\u6a21\"\u5b57\u7684\u53d1\u97f3\u5c31\u5b58\u5728\u5dee\u5f02\u3002\u53e6\u5916\uff0c\u6c49\u5b57\u4e2d\u53c8\u5b58\u5728\u53d8\u8c03\u73b0\u8c61\uff0c\u5982\"\u4e00\u4e2a\"\u548c\"\u770b\u4e00\u770b\"\u4e2d\u7684\"\u4e00\"\u53d1\u97f3\u97f3\u8c03\u4e0d\u540c\u3002\u6240\u4ee5\u5728\u8f93\u5165\u4e00\u4e2a\u53e5\u5b50\u7684\u65f6\u5019\uff0c\u6587\u672c\u524d\u7aef\u5c31\u9700\u8981\u51c6\u786e\u5224\u65ad\u51fa\u6587\u5b57\u4e2d\u7684\u7279\u6b8a\u53d1\u97f3\u60c5\u51b5\uff0c\u5426\u5219\u53ef\u80fd\u4f1a\u5bfc\u81f4\u540e\u7eed\u7684\u58f0\u5b66\u6a21\u578b\u5408\u6210\u9519\u8bef\u7684\u58f0\u5b66\u7279\u5f81\uff0c\u8fdb\u800c\u751f\u6210\u4e0d\u6b63\u786e\u7684\u8bed\u97f3\u3002 \u58f0\u5b66\u7279\u5f81\u751f\u6210\u7f51\u7edc \u58f0\u5b66\u7279\u5f81\u751f\u6210\u7f51\u7edc\u6839\u636e\u6587\u672c\u524d\u7aef\u7684\u53d1\u97f3\u4fe1\u606f\uff0c\u4ea7\u751f\u58f0\u5b66\u7279\u5f81\uff0c\u5982\u6885\u5c14\u9891\u8c31\u6216\u7ebf\u6027\u8c31\u3002\u8fd1\u5e74\u6765\uff0c\u57fa\u4e8e\u6df1\u5ea6\u5b66\u4e60\u7684\u751f\u6210\u7f51\u7edc\u751a\u81f3\u53ef\u4ee5\u53bb\u9664\u6587\u672c\u524d\u7aef\uff0c\u76f4\u63a5\u7531\u82f1\u6587\u7b49\u6587\u672c\u751f\u6210\u5bf9\u5e94\u7684\u9891\u8c31\u3002\u4f46\u662f\u4e00\u822c\u6765\u8bf4\uff0c\u56e0\u4e3a\u4e2d\u6587\u5b57\u5f62\u548c\u8bfb\u97f3\u5173\u8054\u5be5\u5be5\uff0c\u56e0\u6b64\u4e2d\u6587\u8bed\u97f3\u5408\u6210\u7cfb\u7edf\u5927\u591a\u65e0\u6cd5\u629b\u5f03\u6587\u672c\u524d\u7aef\uff0c\u6362\u8a00\u4e4b\uff0c\u76f4\u63a5\u5c06\u4e2d\u6587\u6587\u672c\u8f93\u5165\u5230\u58f0\u5b66\u7279\u5f81\u751f\u6210\u7f51\u7edc\u4e2d\u662f\u4e0d\u53ef\u884c\u7684\u3002\u57fa\u4e8e\u6df1\u5ea6\u5b66\u4e60\u7684\u58f0\u5b66\u7279\u5f81\u751f\u6210\u7f51\u7edc\u53d1\u5c55\u8fc5\u901f\uff0c\u6bd4\u8f83\u6709\u4ee3\u8868\u6027\u7684\u6a21\u578b\u6709Tacotron\u7cfb\u5217\uff0cFastSpeech\u7cfb\u5217\u7b49\u3002\u8fd1\u5e74\u6765\uff0c\u4e5f\u6d8c\u73b0\u51fa\u7c7b\u4f3c\u4e8eVITS\u7684\u8bed\u97f3\u5408\u6210\u6a21\u578b\uff0c\u5c06\u58f0\u5b66\u7279\u5f81\u751f\u6210\u7f51\u7edc\u548c\u58f0\u7801\u5668\u878d\u5408\u5728\u4e00\u8d77\uff0c\u76f4\u63a5\u5c06\u6587\u672c\u6620\u5c04\u4e3a\u8bed\u97f3\u6ce2\u5f62\u3002 \u58f0\u7801\u5668 \u901a\u8fc7\u58f0\u5b66\u7279\u5f81\u4ea7\u751f\u8bed\u97f3\u6ce2\u5f62\u7684\u7cfb\u7edf\u88ab\u79f0\u4f5c\u58f0\u7801\u5668\uff0c\u58f0\u7801\u5668\u662f\u51b3\u5b9a\u8bed\u97f3\u8d28\u91cf\u7684\u4e00\u4e2a\u91cd\u8981\u56e0\u7d20\u3002\u4e00\u822c\u800c\u8a00\uff0c\u58f0\u7801\u5668\u53ef\u4ee5\u5206\u4e3a\u4ee5\u4e0b4\u7c7b\uff1a\u7eaf\u4fe1\u53f7\u5904\u7406\uff0c\u5982Griffin-Lim\u3001STRAIGHT\u548cWORLD\uff1b\u81ea\u56de\u5f52\u6df1\u5ea6\u7f51\u7edc\u6a21\u578b\uff0c\u5982WaveNet\u548cWaveRNN\uff1b\u975e\u81ea\u56de\u5f52\u6a21\u578b\uff0c\u5982Parallel WaveNet\u3001ClariNet\u548cWaveGlow\uff1b\u57fa\u4e8e\u751f\u6210\u5bf9\u6297\u7f51\u7edc\uff08Generative Adversarial Network\uff0cGAN\uff09\u7684\u6a21\u578b\uff0c\u5982MelGAN\u3001Parallel WaveGAN\u548cHiFiGAN\u3002","title":"\u5f53\u4ee3\u8bed\u97f3\u5408\u6210\u6846\u67b6"},{"location":"tts/%E8%AF%AD%E9%9F%B3%E5%90%88%E6%88%90%E7%9A%84%E6%80%BB%E4%BD%93%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/","text":"\u8bed\u97f3\u5408\u6210\u7684\u603b\u4f53\u77e5\u8bc6\u4f53\u7cfb \u8bed\u97f3\u5408\u6210\u77e5\u8bc6\u7ed3\u6784\u5982\u4e0b\u3002 \u57fa\u672c\u7ec4\u6210 \u8bed\u97f3\u5408\u6210\uff08Speech Synthesis\uff09\u5c06\u6587\u672c\u8f6c\u6362\u4e3a\u53ef\u542c\u7684\u58f0\u97f3\u4fe1\u606f\uff0c\u5b83\u8d4b\u4e88\u4e86\u50cf\u4eba\u4e00\u6837\u8bf4\u8bdd\u7684\u80fd\u529b\uff0c\u662f\u4eba\u673a\u4ea4\u4e92\u7684\u91cd\u8981\u63a5\u53e3\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u8bed\u97f3\u5408\u6210\u7684\u6982\u5ff5\u6bd4\u6587\u8bed\u8f6c\u6362\uff08Text-to-Speech\uff0cTTS\uff09\u7684\u6db5\u76d6\u8303\u56f4\u66f4\u5e7f\uff0c\u8bed\u97f3\u5408\u6210\u5305\u62ecTTS\u3001\u6b4c\u5531\u5408\u6210\u7b49\u9886\u57df\uff0c\u4f46\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u53ef\u4ee5\u6df7\u7528\u3002 awesome-tts-samples \u63d0\u4f9b\u4e86\u4e00\u4e9b\u7aef\u5230\u7aef\u8bed\u97f3\u5408\u6210\u6a21\u578b\u7684\u6837\u4f8b\uff0c\u53ef\u4ee5\u7b80\u5355\u611f\u53d7\u4e0b\u76ee\u524d\u8bed\u97f3\u5408\u6210\u7684\u53d1\u5c55\u3002 \u4eba\u7c7b\u53ef\u4ee5\u901a\u8fc7\u4e00\u6574\u5957\u53d1\u97f3\u5668\u5b98\u5408\u6210\u8bed\u97f3\uff0c\u5177\u4f53\u6765\u8bf4\uff0c\u80ba\u76f8\u5f53\u4e8e\u52a8\u529b\u6e90\uff0c\u5589\u76f8\u5f53\u4e8e\u8c03\u5236\u5668\uff0c\u58f0\u9053\u76f8\u5f53\u4e8e\u6ee4\u6ce2\u5668\uff0c\u53e3\u5507\u76f8\u5f53\u4e8e\u6269\u97f3\u5668\u3002\u7814\u7a76\u4eba\u5458\u63d0\u51fa\u4e86\u4ee5\u6e90-\u6ee4\u6ce2\u5668\uff08source-filter\uff09\u6a21\u578b\u4e3a\u4ee3\u8868\u7684\u591a\u79cd\u6a21\u578b\u5efa\u6a21\u8be5\u8fc7\u7a0b\uff0c\u8bed\u97f3\u4e2d\u5b58\u5728\u6e05\u97f3\u548c\u6d4a\u97f3\uff0c\u5206\u522b\u7531\u58f0\u5e26\u5468\u671f\u6027\u632f\u52a8\u5bf9\u5e94\u7684\u5468\u671f\u58f0\u6e90\u548c\u58f0\u5e26\u4e0d\u632f\u52a8\u65f6\u7d0a\u4e71\u6c14\u6d41\u5bf9\u5e94\u7684\u975e\u5468\u671f\u58f0\u6e90\u4ea7\u751f\u3002 \u5f53\u4ee3\u5de5\u4e1a\u754c\u4e3b\u6d41\u8bed\u97f3\u5408\u6210\u7cfb\u7edf\u5305\u62ec\u6587\u672c\u524d\u7aef\u548c\u58f0\u5b66\u540e\u7aef\u4e24\u4e2a\u90e8\u5206\u3002\u6587\u672c\u524d\u7aef\u5c06\u8f93\u5165\u6587\u672c\u8f6c\u6362\u4e3a\u5c42\u6b21\u5316\u7684\u8bed\u97f3\u5b66\u8868\u5f81\uff0c\u4e3b\u8981\u5305\u62ec\u6587\u672c\u89c4\u8303\u5316\u3001\u97f5\u5f8b\u5206\u6790\u548c\u6587\u672c\u8f6c\u97f3\u7d20\u7b49\u6a21\u5757\u3002\u58f0\u5b66\u540e\u7aef\u57fa\u4e8e\u6587\u672c\u524d\u7aef\u7ed9\u51fa\u7684\u5c42\u6b21\u5316\u8bed\u8a00\u5b66\u8868\u5f81\uff08linguistics feature\uff09\u6765\u751f\u6210\u8bed\u97f3\uff0c\u4e3b\u8981\u6280\u672f\u8def\u7ebf\u5305\u62ec\u5355\u5143\u6311\u9009\u6ce2\u5f62\u62fc\u63a5\u3001\u7edf\u8ba1\u53c2\u6570\u548c\u7aef\u5230\u7aef\u8bed\u97f3\u5408\u6210\u65b9\u6cd5\uff0c\u5f53\u4ee3\u4e3b\u8981\u91c7\u7528\u7aef\u5230\u7aef\u58f0\u5b66\u540e\u7aef\u3002\u7aef\u5230\u7aef\u58f0\u5b66\u540e\u7aef\u4e00\u822c\u5305\u62ec\u58f0\u5b66\u6a21\u578b\u548c\u58f0\u7801\u5668\u4e24\u90e8\u5206\uff0c\u540c\u65f6\u4e5f\u51fa\u73b0\u4e86\u76f4\u63a5\u4ece\u97f3\u7d20\u6620\u5c04\u4e3a\u6ce2\u5f62\u7684\u5b8c\u5168\u7aef\u5230\u7aef\u8bed\u97f3\u5408\u6210\u7cfb\u7edf\u3002\u58f0\u5b66\u6a21\u578b\u8d1f\u8d23\u5c06\u8bed\u8a00\u5b66\u7279\u5f81\u8f6c\u6362\u4e3a\u4e2d\u95f4\u58f0\u5b66\u7279\u5f81\uff0c\u6bd4\u5982\u6885\u5c14\u9891\u8c31\uff0c\u76f4\u63a5\u51b3\u5b9a\u5408\u6210\u8bed\u97f3\u7684\u97f5\u5f8b\uff1b\u58f0\u7801\u5668\u5c06\u4e2d\u95f4\u58f0\u5b66\u7279\u5f81\u8f6c\u6362\u4e3a\u8bed\u97f3\u6ce2\u5f62\uff0c\u76f4\u63a5\u51b3\u5b9a\u5408\u6210\u8bed\u97f3\u7684\u97f3\u8d28\u3002 \u8bed\u97f3\u5408\u6210\u4e0e\u8bed\u97f3\u8bc6\u522b\u3001\u673a\u5668\u7ffb\u8bd1\u7b49\u95ee\u9898\u7c7b\u4f3c\uff0c\u672c\u8d28\u662f\u5e8f\u5217\u5230\u5e8f\u5217\u7684\u5efa\u6a21\u95ee\u9898\uff0c\u53e6\u4e00\u65b9\u9762\uff0c\u8bed\u97f3\u5408\u6210\u662f\u751f\u6210\u7c7b\u95ee\u9898\uff0c\u56e0\u6b64\u81ea\u56de\u5f52\u751f\u6210\u3001VAE\u3001GAN\u3001Flow\u3001\u6269\u6563\u6a21\u578b\u7b49\u751f\u6210\u6a21\u578b\u5728\u8bed\u97f3\u5408\u6210\u4e0a\u5747\u6709\u5e94\u7528\u3002 \u58f0\u97f3\u8f6c\u6362 \u72ed\u4e49\u4e0a\u8bf4\uff0c\u5c06\u4e00\u4e2a\u8bf4\u8bdd\u4eba\uff08source speaker\uff09\u7684\u8bed\u97f3\u8f6c\u6362\u5230\u53e6\u4e00\u4e2a\u76ee\u6807\u8bf4\u8bdd\u4eba\uff08target speaker\uff09\u7684\u8bed\u97f3\uff0c\u8fd9\u79cd\u8bed\u97f3\u5904\u7406\u6280\u672f\u79f0\u4e4b\u4e3a\u58f0\u97f3\u8f6c\u6362\uff08Voice Conversion\uff0cVC\uff09\u3002\u58f0\u97f3\u8f6c\u6362\u5305\u62ec\u5e73\u884c\u548c\u975e\u5e73\u884c\u4e24\u79cd\uff0c\u5e73\u884c\u8bed\u97f3\u8f6c\u6362\u6307\u7684\u662f\u6e90\u3001\u76ee\u6807\u8bed\u97f3\u7684\u5185\u5bb9\u76f8\u540c\uff0c\u76f8\u5bf9\u5e94\u5730\uff0c\u975e\u5e73\u884c\u8bed\u97f3\u8f6c\u6362\u53ea\u6539\u53d8\u8bed\u97f3\u7684\u97f3\u8272\uff0c\u800c\u5bf9\u8bed\u97f3\u5185\u5bb9\u6ca1\u6709\u8981\u6c42\u3002\u58f0\u97f3\u8f6c\u6362\u53ef\u4ee5\u501f\u9274\u56fe\u50cf\u4e2d\u98ce\u683c\u8f6c\u6362\u7684\u6210\u679c\uff0c\u6bd4\u5982StarGAN-VC\u7b49\u6a21\u578b\u3002\u66f4\u6709\u6548\u7684\u65b9\u6cd5\u662f\u5229\u7528\u8bed\u97f3\u8bc6\u522b\u6a21\u578b\u63d0\u53d6\u8bf4\u8bdd\u4eba\u65e0\u5173\u7684\u4e2d\u95f4\u8868\u5f81\uff0c\u5c06\u8be5\u4e2d\u95f4\u8868\u5f81\u548c\u8bf4\u8bdd\u4eba\u4fe1\u606f\u8f93\u5165\u751f\u6210\u6a21\u578b\u4e2d\uff0c\u751f\u6210\u5177\u6709\u76ee\u6807\u8bf4\u8bdd\u4eba\u97f3\u8272\u7684\u8bed\u97f3\uff0c\u53ef\u4ee5\u501f\u9274TTS\u7684\u7814\u7a76\u6210\u679c\uff0c\u5c06VITS\u7b49\u4f5c\u4e3a\u9ad8\u8d28\u91cf\u5408\u6210\u6a21\u578b\u3002\u5728\u58f0\u97f3\u8f6c\u6362\u4e2d\uff0c\u57fa\u9891\u662f\u4e00\u4e2a\u91cd\u8981\u7279\u5f81\u3002\u53c2\u89c1\uff1a An Overview of Voice Conversion and its Challenges: From Statistical Modeling to Deep Learning \u591a\u8bed\u79cd\u8bed\u97f3\u5408\u6210 \u591a\u8bed\u79cd\u8bed\u97f3\u5408\u6210\u7684\u96be\u70b9\u4e3b\u8981\u6709\u4e94\u70b9\uff1a \u97f3\u5e93\u5236\u4f5c\u548c\u6784\u5efa\u3002 \u6587\u672c\u524d\u7aef\u7684\u6784\u5efa\u3002\u9700\u8981\u5236\u5b9a\u9002\u7528\u4e8e\u4e00\u4e2a\u8bed\u79cd\u8bed\u97f3\u5408\u6210\u7684\u97f3\u7d20\u4f53\u7cfb\uff0c\u6784\u5efa\u8be5\u8bed\u79cd\u7684\u6587\u672c\u89c4\u8303\u5316\u89c4\u5219\u7b49\uff0c\u7279\u522b\u5730\uff0c\u6bd4\u5982\u4fc4\u8bed\u3001\u6ce2\u65af\u8bed\u3001\u963f\u62c9\u4f2f\u8bed\u7b49\u8bed\u79cd\u6709\u6027\u6570\u683c\u7684\u53d8\u5316\uff0c\u63d0\u9ad8\u4e86\u6587\u672c\u524d\u7aef\u7684\u590d\u6742\u6027\u3002\u4e0d\u540c\u8bed\u79cd\u95f4\u6587\u672c\u524d\u7aef\u6a21\u5757\u4e5f\u4f1a\u6709\u6240\u4e0d\u540c\uff0c\u6bd4\u5982\u4e2d\u6cf0\u8d8a\u65e5\u7b49\u8bed\u79cd\u9700\u8981\u6dfb\u52a0\u5206\u8bcd\u6a21\u5757\u3002 \u8bed\u79cd\u4e2d\u7279\u6b8a\u53d1\u97f3\u73b0\u8c61\u3002\u897f\u73ed\u7259\u8bed\u3001\u4fc4\u8bed\u7b49\u8bed\u79cd\u7684\u5347\u964d\u8c03\u5bf9\u5408\u6210\u8bed\u97f3\u81ea\u7136\u5ea6\u5f71\u54cd\u663e\u8457\uff0c\u5177\u4f53\u6765\u8bf4\uff0c\u5728\u6807\u70b9\u5904\u53d1\u97f3\u4f1a\u4ea7\u751f\u8f83\u4e3a\u660e\u663e\u7684\u4e0a\u626c\u3001\u4e0b\u964d\u3001\u5148\u5347\u540e\u964d\u3001\u5148\u964d\u540e\u5347\u548c\u5e73\u8c03\u73b0\u8c61\u3002\u56e0\u6b64\u6587\u672c\u524d\u7aef\u6700\u597d\u7ed9\u51fa\u8be5\u5347\u964d\u8c03\u4fe1\u606f\uff0c\u58f0\u5b66\u540e\u7aef\u9700\u8981\u5c06\u8be5\u5347\u964d\u8c03\u4fe1\u606f\u4f5c\u4e3a\u91cd\u8981\u7279\u5f81\uff0c\u8f93\u5165\u5230\u6a21\u578b\u7684\u591a\u4e2a\u6a21\u5757\u4e2d\uff0c\u4ee5\u534f\u52a9\u6a21\u578b\u4ea7\u751f\u51c6\u786e\u81ea\u7136\u7684\u5347\u964d\u8c03\u8bed\u97f3\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u7531\u4e8e\u5347\u964d\u8c03\u662f\u4e00\u4e2a\u8bed\u5757\u6574\u4f53\u7684\u8868\u73b0\uff0c\u800c\u975e\u4ec5\u4ec5\u4e00\u4e2a\u5b57\u6bcd\u6216\u8005\u5355\u8bcd\u7684\u53d1\u97f3\u53d8\u5316\uff0c\u6bd4\u5982\u897f\u73ed\u7259\u8bed\u53ef\u4ee5\u5c06\u5347\u964d\u8c03\u4fe1\u606f\u6807\u6ce8\u5230\u6574\u4e2aL3\u5757\u4e0a\uff0c\u800c\u4fc4\u8bed\u66f4\u9002\u5408\u4e8e\u4ec5\u4ec5\u6807\u6ce8\u5230\u4e2d\u5fc3\u8bcd\u4e0a\u3002 \u8de8\u8bed\u79cd\u8bed\u97f3\u5408\u6210\u3002\u5f53\u4ee3\u8bed\u79cd\u6df7\u6742\u7684\u8bed\u8a00\u73b0\u8c61\u6108\u53d1\u660e\u663e\uff0c\u6bd4\u5982\u4e2d\u6587\u4e2d\u5939\u6742\u82f1\u8bed\u5355\u8bcd\uff0c\u8fd9\u5c31\u9700\u8981\u5b9e\u73b0\u8bed\u79cd\u5207\u6362\uff08code-switch\uff09\u548c\u8de8\u8bed\u79cd\uff08cross-lingual\uff09\u8bed\u97f3\u5408\u6210\u3002\u5982\u679c\u8bed\u6599\u4e2d\u5b58\u5728\u5355\u8bf4\u8bdd\u4eba\u8de8\u8bed\u79cd\u8bed\u6599\uff0c\u4e00\u822c\u6765\u8bf4\uff0c\u76f4\u63a5\u8bad\u7ec3\u5c31\u53ef\u4ee5\u4ea7\u751f\u8de8\u8bed\u79cd\u5408\u6210\u6548\u679c\u3002\u5b9e\u8df5\u4e2d\uff0c\u5982\u679c\u8de8\u8bed\u79cd\u8bed\u6599\u8f83\u5c11\uff0c\u6bd4\u5982\u4ec5\u6709200\u53e5\u8de8\u8bed\u79cd\u8bed\u6599\uff0c\u591a\u4e2a\u8bed\u79cd\u6df7\u8bad\u65f6\u5171\u4eab\u8bed\u79cd\u95f4\u7684\u97f3\u7d20\u80fd\u591f\u83b7\u5f97\u66f4\u597d\u7684\u5408\u6210\u6548\u679c\uff1b\u5982\u679c\u8de8\u8bed\u79cd\u8bed\u6599\u8f83\u591a\uff0c\u53ef\u4ee5\u4ec5\u91c7\u7528\u4e3b\u8981\u8bed\u79cd\u548c\u8de8\u8bed\u79cd\u8bed\u6599\u8fdb\u884c\u8bad\u7ec3\uff0c\u52a0\u5165\u5176\u5b83\u8bed\u79cd\u8fdb\u884c\u6df7\u8bad\u76f8\u53cd\u53ef\u80fd\u4f1a\u4ea7\u751f\u8f83\u5dee\u7684\u6548\u679c\u3002\u5982\u679c\u6ca1\u6709\u8de8\u8bed\u79cd\u8bed\u6599\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u6570\u636e\u589e\u5f3a\u65b9\u6cd5\u4f2a\u9020\u8de8\u8bed\u79cd\u8bed\u6599\uff0c\u6bd4\u5982\u5bf9\u5355\u8bed\u79cd\u8bed\u6599\u8fdb\u884c\u62fc\u63a5\uff0c\u6784\u9020\u8de8\u8bed\u79cd\u8bed\u6599\uff1b\u5229\u7528\u8de8\u8bed\u79cd\u8bed\u97f3\u5408\u6210\u5927\u6a21\u578b\u4f2a\u9020\u8bad\u7ec3\u8bed\u6599\uff0c\u8bad\u7ec3\u8de8\u8bed\u79cd\u8bed\u97f3\u5408\u6210\u6a21\u578b\u3002 \u4f4e\u8d44\u6e90\u8bed\u97f3\u5408\u6210\u3002\u8bed\u6599\u6570\u91cf\u7684\u589e\u52a0\u53ef\u663e\u8457\u63d0\u5347\u5408\u6210\u8bed\u97f3\u7684\u6548\u679c\uff0c\u4f46\u4e16\u754c\u4e0a\u7684\u8bed\u79cd\u6570\u91cf\u8f83\u591a\uff0c\u5927\u90e8\u5206\u8bed\u79cd\u5e76\u4e0d\u5b58\u5728\u5927\u91cf\u9ad8\u8d28\u91cf\u8bed\u97f3\u5408\u6210\u8bed\u6599\u3002\u4e3b\u8981\u7684\u89e3\u51b3\u65b9\u6848\u6709\u8de8\u8bed\u79cd\u8fc1\u79fb\u3001\u8de8\u8bf4\u8bdd\u4eba\u8fc1\u79fb\u3001\u8bed\u97f3\u8bc6\u522b\u548c\u5408\u6210\u5bf9\u5076\u5b66\u4e60\uff0c\u4ee5\u53ca\u65e0\u76d1\u7763\u8bad\u7ec3\u3002\u53c2\u89c1 \u8bba\u6587\u901f\u89c8\uff1a\u4f4e\u8d44\u6e90\u8bed\u97f3\u5408\u6210 \u3002 Latorre J, Bailleul C, Morrill T, et al. Combining Speakers of Multiple Languages to Improve Quality of Neural Voices[J]. arXiv preprint arXiv:2108.07737, 2021. \u8fdb\u9636 \u8bed\u97f3\u5408\u6210\u5b58\u5728\u6bd4\u8f83\u591a\u7684\u6269\u5c55\u5e94\u7528\uff0c\u6bd4\u5982\uff1a \u9ad8\u8868\u73b0\u529b\u8bed\u97f3\u5408\u6210\u3002 \u4e2a\u6027\u5316\u8bed\u97f3\u5408\u6210\u3002 \u60c5\u611f\u5408\u6210\u548c\u97f5\u5f8b\u8fc1\u79fb\u3002 \u65b9\u8a00\u8fc1\u79fb\u3002 \u6b4c\u5531\u5408\u6210\u3002 \u6709\u58f0\u4eba\u8138\u5408\u6210\uff08talking face synthesis\uff09\u3002 \u8bed\u97f3\u5408\u6210\u7684\u7a33\u5b9a\u6027\u3002 \u8bed\u97f3\u5408\u6210\u7684\u6548\u7387\u4f18\u5316\u3002 \u672c\u90e8\u5206\u53ef\u53c2\u8003\u76f8\u5173\u8bba\u6587\u548c A Survey on Neural Speech Synthesis \u4e86\u89e3\u5177\u4f53\u6280\u672f\u65b9\u6848\u3002 \u9ad8\u8868\u73b0\u529b\u8bed\u97f3\u5408\u6210 \u5728\u4ea4\u4e92\u3001\u5c0f\u8bf4\u9605\u8bfb\u7b49\u5e94\u7528\u573a\u666f\u4e2d\uff0c\u5bf9\u5408\u6210\u8bed\u97f3\u7684\u8868\u73b0\u529b\u8981\u6c42\u8f83\u9ad8\uff0c\u800c\u8868\u73b0\u529b\u7531\u5185\u5bb9\u3001\u8bf4\u8bdd\u4eba\u97f3\u8272\u3001\u97f5\u5f8b\u3001\u60c5\u611f\u548c\u98ce\u683c\u7b49\u591a\u4e2a\u56e0\u7d20\u51b3\u5b9a\uff0c\u56e0\u6b64\u9ad8\u8868\u73b0\u529b\u8bed\u97f3\u5408\u6210\u5b9e\u9645\u6db5\u76d6\u4e86\u5185\u5bb9\u3001\u97f3\u8272\u3001\u97f5\u5f8b\u3001\u60c5\u611f\u548c\u98ce\u683c\u7684\u5efa\u6a21\u3001\u5206\u79bb\u548c\u63a7\u5236\u3002 \u8bed\u97f3\u4e2d\u5305\u542b\u7684\u4fe1\u606f\u53ef\u4ee5\u5206\u4e3a\u5982\u4e0b\u56db\u7c7b\uff1a \u5b57\u7b26\u6216\u97f3\u7d20\uff0c\u4e5f\u5c31\u662f\u8bed\u97f3\u7684\u5185\u5bb9\u3002\u53ef\u4ee5\u901a\u8fc7\u9884\u8bad\u7ec3\u8bcd\u5d4c\u5165\u589e\u5f3a\u5408\u6210\u8bed\u97f3\u7684\u8868\u73b0\u529b\u548c\u8d28\u91cf\uff0c\u6216\u8005\u52a0\u5165\u4e00\u4e9b\u989d\u5916\u7684\u4fe1\u606f\uff0c\u6bd4\u5982\u5347\u964d\u8c03\u4fe1\u606f\u3001\u91c7\u7528fulllab\u80fd\u591f\u589e\u5f3a\u6a21\u578b\u8868\u73b0\u529b\u548c\u7a33\u5b9a\u6027\u3002fulllab\u53ca\u4f20\u7edf\u8bed\u97f3\u5408\u6210\u91c7\u7528\u7684\u6587\u672c\u3001\u58f0\u5b66\u7279\u5f81\u53c2\u89c1\uff1a jsut lab \u3001 HTS Data README \u3002 \u8bf4\u8bdd\u4eba\u6216\u97f3\u8272\u3002\u591a\u8bf4\u8bdd\u4eba\u8bed\u97f3\u5408\u6210\u6a21\u578b\u53ef\u4ee5\u901a\u8fc7\u8bf4\u8bdd\u4eba\u5d4c\u5165\u5411\u91cf\u6216\u5355\u72ec\u7684\u8bf4\u8bdd\u4eba\u7f16\u7801\u5668\uff08speaker encoder\uff09\u5bf9\u97f3\u8272\u7279\u5f81\u8fdb\u884c\u5efa\u6a21\u3002 \u97f5\u5f8b\u3001\u98ce\u683c\u548c\u60c5\u611f\u3002\u8fd9\u4e9b\u7279\u5f81\u8868\u793a\"\u5982\u4f55\u8bf4\u51fa\u6587\u672c\"\uff0c\u8868\u5f81\u8bed\u97f3\u4e2d\u7684\u8bed\u8c03\u3001\u91cd\u97f3\u548c\u8bf4\u8bdd\u8282\u594f\uff0c\u97f5\u5f8b\u3001\u98ce\u683c\u548c\u60c5\u611f\u662f\u9ad8\u8868\u73b0\u529b\u8bed\u97f3\u5408\u6210\u7684\u5efa\u6a21\u91cd\u70b9\u3002 \u5f55\u97f3\u8bbe\u5907\u548c\u73af\u5883\u566a\u97f3\u3002\u8fd9\u4e9b\u5012\u662f\u4e0e\u8bed\u97f3\u5185\u5bb9\u3001\u97f5\u5f8b\u65e0\u5173\uff0c\u4f46\u4f1a\u663e\u8457\u5f71\u54cd\u8bed\u97f3\u8d28\u91cf\uff0c\u56e0\u6b64\u53ef\u4ee5\u5c1d\u8bd5\u5bf9\u8bed\u97f3\u4e2d\u7684\u566a\u97f3\u7b49\u8fdb\u884c\u63a7\u5236\u548c\u5206\u79bb\u3002\u5bf9\u8bad\u7ec3\u8bed\u6599\u672c\u8eab\u53ef\u4ee5\u63d0\u524d\u8fdb\u884c\u53bb\u566a\u5904\u7406\uff0c\u5728\u6a21\u578b\u4e2d\u53ef\u4ee5\u6807\u8bc6\u5e26\u566a\u8bed\u6599\uff0c\u4ee5\u4fbf\u5728\u5408\u6210\u8bed\u97f3\u4e2d\u53bb\u9664\u566a\u97f3\u90e8\u5206\u3002 \u5229\u7528\u6a21\u578b\u5efa\u6a21\u8fd9\u4e9b\u4fe1\u606f\u7684\u65b9\u6cd5\u5f88\u591a\uff0c\u6709\u8bed\u79cd\u3001\u8bf4\u8bdd\u4eba\u3001\u98ce\u683c\u5d4c\u5165\u5411\u91cf\u4ee5\u53ca\u97f3\u9ad8\u3001\u65f6\u957f\u3001\u80fd\u91cf\u7f16\u7801\u5668\u7b49\u663e\u5f0f\u5efa\u6a21\u65b9\u6cd5\uff0c\u4e5f\u6709reference encoder\u3001VAE\u3001GAN/Flow/Diffusion\u3001\u6587\u672c\u9884\u8bad\u7ec3\u7b49\u9690\u5f0f\u5efa\u6a21\u65b9\u6cd5\u3002 \u4e2a\u6027\u5316\u8bed\u97f3\u5408\u6210 \u4e2a\u6027\u5316\u8bed\u97f3\u5408\u6210\u662f\u8bed\u97f3\u5408\u6210\u4e2d\u8f83\u4e3a\u70ed\u95e8\u7684\u65b9\u5411\uff0c\u4e3b\u8981\u5e94\u7528\u4e8e\u5b9a\u5236\u5316\u573a\u666f\u4e2d\uff0c\u5229\u7528\u4efb\u610f\u7528\u6237\u7684\u97f3\u8272\u5408\u6210\u8bed\u97f3\uff0c\u53c8\u79f0\u4e3a\u8bed\u97f3\u81ea\u9002\u5e94\uff08Voice Adaptation\uff09\u3001\u8bed\u97f3\u514b\u9686\uff08Voice Cloning\uff09\u3001\u5b9a\u5236\u5316\u8bed\u97f3\uff08Custom Voice\uff09\u7b49\uff0c\u901a\u5e38\u8981\u6c42\u5229\u75281\u5206\u949f\u4ee5\u5185\u751a\u81f3\u51e0\u79d2\u949f\u7684\u8bed\u6599\uff0c\u5c31\u53ef\u4ee5\u5b9e\u73b0\u5408\u6210\u76ee\u6807\u8bf4\u8bdd\u4eba\u7684\u4efb\u610f\u8bed\u97f3\u3002\u76ee\u524d\u4e2a\u6027\u5316\u8bed\u97f3\u5408\u6210\u7684\u96be\u70b9\u5982\u4e0b\uff1a \u76f8\u4f3c\u5ea6\u3002\u4ec5\u5229\u7528\u5c11\u91cf\u8bed\u6599\uff0c\u5f88\u96be\u8986\u76d6\u5b8c\u5168\u76ee\u6807\u8bf4\u8bdd\u4eba\u4e00\u4e2a\u8bed\u79cd\u7684\u6240\u6709\u97f3\u7d20\u53d1\u97f3\uff0c\u56e0\u6b64\u8981\u6c42\u6a21\u578b\u9700\u8981\u62e5\u6709\u4e00\u5b9a\u7684\u6cdb\u5316\u80fd\u529b\u3002\u5b9e\u8df5\u4e2d\uff0c\u5229\u7528\u76ee\u6807\u8bed\u6599\u5fae\u8c03\u6574\u4e2a\u6a21\u578b\u6216\u8005\u58f0\u5b66\u6a21\u578b\u7684\u89e3\u7801\u5668\u5f80\u5f80\u80fd\u591f\u5927\u5e45\u63d0\u5347\u5408\u6210\u8bed\u97f3\u7684\u76f8\u4f3c\u5ea6\uff0c\u4e5f\u6709\u4e00\u4e9b\u5de5\u4f5c\u5c1d\u8bd5\u4e0d\u8fdb\u884c\u5fae\u8c03\uff0c\u4f46\u76f8\u4f3c\u5ea6\u4e00\u822c\u8f83\u4f4e\u3002 \u7a33\u5b9a\u6027\u3002\u4e2a\u6027\u5316\u8bed\u97f3\u5408\u6210\u5728\u63a8\u65ad\u65f6\uff0c\u76ee\u6807\u97f3\u8272\u4e00\u822c\u4e0d\u5728\u8bad\u7ec3\u96c6\u4e2d\uff0c\u56e0\u6b64\u4f1a\u8ba9\u539f\u672c\u8106\u5f31\u7684\u7aef\u5230\u7aef\u540e\u7aef\u6a21\u578b\u5408\u6210\u5931\u8d25\uff0c\u5982\u679c\u91c7\u7528\u5fae\u8c03\u65b9\u6848\uff0c\u5219\u5c24\u751a\u3002\u56e0\u6b64\u4e00\u4e9b\u5e26\u6709\u5148\u9a8c\u7684\u6ce8\u610f\u529b\u673a\u5236\uff0c\u6216\u8005\u76f4\u63a5\u5229\u7528\u65f6\u957f\u6a21\u578b\u66ff\u4ee3\u6ce8\u610f\u529b\u673a\u5236\u7684\u6a21\u578b\uff0c\u5728\u8fd9\u79cd\u573a\u666f\u4e0b\u62e5\u6709\u4e00\u5b9a\u4f18\u52bf\u3002 \u5fae\u8c03\u6548\u7387\u3002\u5982\u4e0a\u6240\u8ff0\uff0c\u6574\u4f53\u6216\u89e3\u7801\u5668\u5fae\u8c03\u5f80\u5f80\u80fd\u591f\u63d0\u5347\u76f8\u4f3c\u5ea6\uff0c\u4f46\u6a21\u578b\u5fae\u8c03\u4f1a\u5e26\u6765\u4e00\u5b9a\u7684\u6a21\u578b\u8bad\u7ec3\u65f6\u95f4\u3002 \u65b9\u8a00\u8fc1\u79fb \u65b9\u8a00\u8fc1\u79fb\u4e00\u822c\u662f\u6307\u8de8\u65b9\u8a00\u8fc1\u79fb\u76ee\u6807\u8bf4\u8bdd\u4eba\u7684\u97f3\u8272\uff0c\u6bd4\u5982\u5229\u7528\u666e\u901a\u8bdd\u53d1\u97f3\u4eba\u8bf4\u4e0a\u6d77\u8bdd\u3001\u56db\u5ddd\u8bdd\u6216\u7ca4\u8bed\uff0c\u4e0e\u8bf4\u8bdd\u4eba\u8fc1\u79fb\u6709\u4e9b\u7c7b\u4f3c\uff0c\u4f46\u4efb\u52a1\u96be\u5ea6\u6bd4\u8de8\u8bed\u79cd\u8bf4\u8bdd\u4eba\u8fc1\u79fb\u8981\u7b80\u5355\u4e00\u4e9b\u3002\u53ef\u4ee5\u91c7\u7528\"\u591a\u65b9\u8a00\u7f16\u7801\u5668+\u8bf4\u8bdd\u4eba\u68af\u5ea6\u53cd\u8f6c+\u5171\u4eab\u89e3\u7801\u5668+VAE+\u591a\u65b9\u8a00\u6df7\u8bad\"\u7684\u65b9\u6848\u89e3\u51b3\uff0c\u4e5f\u53ef\u4ee5\u5c1d\u8bd5\u7c7b\u4f3c\u58f0\u97f3\u8f6c\u6362\u7684\u65b9\u6848\uff1a\u5229\u7528\u8bed\u97f3\u8bc6\u522b\u58f0\u5b66\u6a21\u578b\u63d0\u53d6\u8bf4\u8bdd\u4eba\u65e0\u5173\u7684\u53d1\u97f3\u5185\u5bb9\uff0c\u7136\u540e\u5229\u7528\u8bed\u97f3\u5408\u6210\u6a21\u578b\u8f93\u5165\u8be5\u8bf4\u8bdd\u4eba\u65e0\u5173\u7684\u53d1\u97f3\u5185\u5bb9\u7279\u5f81\uff0c\u5e76\u52a0\u5165\u76ee\u6807\u97f3\u8272\uff0c\u4ece\u800c\u5b9e\u73b0\u65b9\u8a00\u8fc1\u79fb\u3002 \u6b4c\u5531\u5408\u6210 \u97f3\u4e50\u662f\u4e00\u4e2a\u590d\u6742\u7684\u5b66\u79d1\uff0c\u800c\u97f3\u4e50\u5408\u6210\u51e0\u4e4e\u662f\u53e6\u4e00\u4e2a\u9886\u57df\u3002 \u65cb\u5f8b\u3001\u548c\u58f0\u3001\u8282\u594f\u662f\u97f3\u4e50\u7684\u4e09\u8981\u7d20\u3002\u65cb\u5f8b\u662f\u97f3\u4e50\u7684\u4e3b\u7ebf\uff0c\u5b83\u51b3\u5b9a\u4e86\u97f3\u4e50\u7684\u8c03\u6027\u3001\u66f2\u5f0f\u548c\u8fdb\u7a0b\uff0c\u662f\u97f3\u4e50\u7684\u7075\u9b42\u3002\u4f46\u5982\u679c\u53ea\u6709\u4e3b\u65cb\u5f8b\u7684\u8bdd\uff0c\u97f3\u4e50\u5c31\u663e\u5f97\u5355\u8c03\u3002\u548c\u58f0\u7528\u6765\u54c4\u6258\u4e3b\u65cb\u5f8b\uff0c\u4e30\u5bcc\u4e50\u66f2\u7684\"\u539a\u5ea6\"\uff0c\u8282\u594f\u5f3a\u5316\u98ce\u683c\u3002\u97f3\u4e50\u7684\u521b\u4f5c\u8fc7\u7a0b\u5305\u62ec\uff1a\u4f5c\u8bcd\u4f5c\u66f2\uff08Lyric/Melody\uff09\uff0c\u4f34\u594f/\u8c31\u66f2\uff0c\u6b4c\u5531\u5408\u6210/\u4e50\u97f3\u5408\u6210\uff0c\u6df7\u97f3\u56db\u4e2a\u57fa\u672c\u6b65\u9aa4\uff0c\u800c\u6b4c\u5531\u5408\u6210\u4ec5\u4ec5\u63a2\u8ba8\u7b2c\u4e09\u6b65\uff0c\u5229\u7528\u5df2\u6709\u7684\u4e50\u8c31\u5408\u6210\u4eba\u7c7b\u6b4c\u5531\u7684\u58f0\u97f3\u3002 \u6b4c\u5531\u5408\u6210\u7684\u4efb\u52a1\u5b9a\u4e49\uff1a \u8f93\u5165\uff1a\u6b4c\u8bcd\u3001\u97f3\u9ad8\uff08\u57fa\u9891\uff09\u3001\u8282\u62cd\uff08\u65f6\u957f\uff09 \u8f93\u51fa\uff1a\u6b4c\u5531\u58f0\u97f3 \u548cTTS\u76f8\u6bd4\uff1a \u589e\u52a0\u4e86\u989d\u5916\u7684\u8f93\u5165\uff1a\u97f3\u9ad8\u3001\u8282\u62cd\uff08\u65f6\u957f\uff09\uff0c\u8f93\u51fa\u66f4\u5e7f\u8303\u56f4\u7684\u58f0\u8c03\uff0c\u66f4\u591a\u53d8\u5316\u7684\u97f3\u7d20 \u66f4\u52a0\u4fa7\u91cd\u4e8e\u611f\u60c5\u548c\u8868\u8fbe\uff0c\u800c\u975e\u8bed\u97f3\u672c\u8eab\u7684\u5185\u5bb9 \u56f0\u96be\u70b9\uff1a \u6570\u636e \u6570\u636e\u91cf\u5c11 \u8d28\u91cf\u8981\u6c42\u9ad8\uff08\u6b4c\u5531\u4e0e\u6307\u5b9a\u97f3\u9ad8\u3001\u65f6\u957f\u7684\u7b26\u5408\u7a0b\u5ea6\u8981\u6c42\u9ad8\uff09\uff0c\u6807\u6ce8\u56f0\u96be \u96be\u4ee5\u5168\u9762\u8986\u76d6\u6240\u6709\u7684\u97f3\u9ad8\uff0c\u6b4c\u624b\u7684\u58f0\u97f3\u8303\u56f4\u6709\u9650\uff0c\u65e0\u6cd5\u8986\u76d6\u6240\u6709\u7684\u97f3\u9ad8 \u5bb9\u9519\u7387\u4f4e \u97f3\u8c03\u51c6\u786e\u7387\u8981\u6c42\u9ad8\uff0c\u7b80\u8c31\u57fa\u672c\u51b3\u5b9a\u4e86\u57fa\u9891\uff0c\u5148\u9a8c\u6bd4\u8f83\u5f3a\uff0c\"\u8dd1\u8c03\"\u5bb9\u6613\u542c\u51fa\u6765 \u5361\u62cd\u5b50 \u6b4c\u5531\u989d\u5916\u7684\u7279\u70b9\uff1a\u6bd4\u5982\u98a4\u97f3\uff0c\u8f6c\u8c03\u7b49 \u6b4c\u5531\u5408\u6210\u5b9e\u9645\u548c\u8bed\u97f3\u5408\u6210\u5341\u5206\u7c7b\u4f3c\uff0c\u53ea\u662f\u6587\u672c\u8f93\u5165\u4fe1\u606f\u66f4\u4e3a\u4e30\u5bcc\uff0c\u56e0\u6b64\u53ef\u4ee5\u5f15\u5165\u5355\u72ec\u7684\u6a21\u5757\u5efa\u6a21\u97f3\u9ad8\u548c\u65f6\u957f\uff0c\u5b9e\u9645\u4e0a\u8bed\u97f3\u5408\u6210\u4e2dFastSpeech 2\u8fd9\u4e9b\u663e\u5f0f\u5efa\u6a21\u8bed\u97f3\u4e2d\u97f3\u9ad8\u3001\u65f6\u957f\u7279\u5f81\u7684\u58f0\u5b66\u6a21\u578b\uff0c\u53ef\u4ee5\u76f4\u63a5\u62ff\u6765\u4f5c\u4e3a\u6b4c\u5531\u5408\u6210\u7684\u57fa\u7ebf\uff0c\u5f53\u7136\u4e5f\u51fa\u73b0\u4e86\u66f4\u597d\u7684\u6b4c\u5531\u5408\u6210\u6280\u672f\u65b9\u6848\uff0c\u53c2\u89c1 \u6b4c\u5531\u5408\u6210\uff1a\u6570\u636e\u96c6\u7684\u6784\u5efa\uff0c\u4ee5Opencpop\u4e3a\u4f8b \u3001 \u6b4c\u5531\u5408\u6210\uff1a\u57fa\u4e8eVITS\u7684\u6b4c\u5531\u5408\u6210\u58f0\u5b66\u6a21\u578bVISinger \u3001 \u6b4c\u5531\u5408\u6210\uff1a\u9ad8\u54c1\u8d28\u6b4c\u5531\u5408\u6210\u58f0\u7801\u5668SingGAN \u3001 muzic \u7b49\u3002 \u8bed\u97f3\u5408\u6210\u7684\u7a33\u5b9a\u6027 \u7aef\u5230\u7aef\u8bed\u97f3\u5408\u6210\u81ea\u7136\u5ea6\u4f18\u52bf\u660e\u663e\uff0c\u4f46\u5bb9\u6613\u51fa\u73b0\u5408\u6210\u65e0\u6cd5\u505c\u6b62\u3001\u8c03\u5b57\u3001\u91cd\u590d\u7b49\u5408\u6210\u7f3a\u9677\uff0c\u8fd9\u5728\u751f\u4ea7\u4e0a\u662f\u81f4\u547d\u7684\u3002\u53ef\u4ee5\u5c1d\u8bd5\u4ece\u5982\u4e0b\u4e09\u4e2a\u65b9\u9762\u5165\u624b\uff1a \u8bad\u7ec3\u6570\u636e\u3002\u8bad\u7ec3\u8bed\u6599\u4e2d\u7684\u97f3\u9891\u5c3d\u91cf\u964d\u4f4e\u80cc\u666f\u566a\u97f3\uff1b\u63a7\u5236\u524d\u540e\u9759\u97f3\u6bb5\u548c\u53e5\u4e2d\u9759\u97f3\uff0c\u6bcf\u4e2a\u53e5\u5b50\u7684\u524d\u540e\u9759\u97f3\u6bb5\u5c3d\u53ef\u80fd\u4e00\u81f4\uff0c\u53e5\u4e2dL1/L3\u7684\u505c\u987f\u65f6\u957f\u5c3d\u53ef\u80fd\u88c1\u526a\u7edf\u4e00\uff1b\u786e\u4fdd\u6587\u672c\u6807\u6ce8\u548c\u5b9e\u9645\u97f3\u9891\u4e00\u4e00\u5bf9\u5e94\u3002 \u6a21\u578b\u3002\u5408\u6210\u8bed\u97f3\u7684\u6b63\u786e\u6027\u662f\u8bed\u97f3\u5408\u6210\u7684\u57fa\u672c\u8981\u6c42\uff0c\u56e0\u6b64\u8bed\u97f3\u5408\u6210\u7684\u7a33\u5b9a\u6027\u6709\u8f83\u591a\u7684\u7814\u7a76\u5de5\u4f5c\u3002\u4e3b\u8981\u601d\u8def\u6709\uff1a \u589e\u5f3a\u6ce8\u610f\u529b\u673a\u5236\u3002\u7531\u4e8e\u8bed\u97f3\u5408\u6210\u4efb\u52a1\u5177\u6709\u5355\u8c03\u6027\u7684\u7279\u70b9\uff0c\u4e5f\u5c31\u662f\u8f93\u5165\u97f3\u7d20\u4e00\u5b9a\u662f\u4ece\u5de6\u5230\u53f3\u5408\u6210\uff0c\u56e0\u6b64\u53ef\u4ee5\u5229\u7528\u8be5\u7279\u70b9\u52a0\u5165\u5148\u9a8c\u77e5\u8bc6\u8fdb\u884c\u5408\u6210\u3002 \u5229\u7528\u65f6\u957f\u6a21\u578b\u53d6\u4ee3\u6ce8\u610f\u529b\u673a\u5236\u3002 \u589e\u5f3a\u81ea\u56de\u5f52\u8fc7\u7a0b\u3002\u6bd4\u5982\u51cf\u5c11\u8bad\u7ec3\u3001\u63a8\u65ad\u65f6\u7684\u4e0d\u5339\u914d\uff0c\u77e5\u8bc6\u84b8\u998f\uff0c\u6559\u5e08\u5f3a\u5236\u7b49\u65b9\u6cd5\u3002 \u91c7\u7528\u975e\u81ea\u56de\u5f52\u5408\u6210\u65b9\u6cd5\u3002\u8f93\u5165\u5e8f\u5217\u8fdb\u6765\u4e4b\u540e\u4e00\u628a\u51fa\uff0c\u9632\u6b62\u81ea\u56de\u5f52\u751f\u6210\u5e26\u6765\u7684\u7d2f\u79ef\u8bef\u5dee\u3002 \u540e\u5904\u7406\u3002\u6bd4\u5982\u7edf\u8ba1\u97f3\u5e93\u4e2d\u5e73\u5747\u97f3\u7d20\u65f6\u957f\uff0c\u5408\u6210\u65f6\u7edf\u8ba1\u8f93\u5165\u97f3\u7d20\u4e2a\u6570\uff0c\u8ba1\u7b97\u8be5\u53e5\u5b50\"\u5e73\u5747\u65f6\u957f\"\uff0c\u5408\u6210\u8bed\u97f3\u7684\u65f6\u957f\u8d85\u8fc7\"\u5e73\u5747\u65f6\u957f\"\u768430%\u5219\u8ba4\u4e3a\u5408\u6210\u6ca1\u6709\u6b63\u5e38\u505c\u6b62\uff0c\u88c1\u526a\u8be5\u5408\u6210\u8bed\u97f3\u3002 \u8bed\u97f3\u5408\u6210\u7684\u6548\u7387\u4f18\u5316 \u8bed\u97f3\u5408\u6210\u5728\u6295\u5165\u4f7f\u7528\u65f6\uff0c\u9664\u4e86\u7eaf\u5de5\u7a0b\u7684\u4f18\u5316\u4e4b\u5916\uff0c\u6a21\u578b\u4fa7\u4e5f\u53ef\u4ee5\u8fdb\u884c\u6548\u7387\u4f18\u5316\u3002\u4e3b\u8981\u7684\u601d\u8def\u6709\uff1a \u5e76\u884c\u751f\u6210\u3002\u8be5\u65b9\u6cd5\u5bf9\u4e8e\u5229\u7528GPU\u63a8\u65ad\u7684\u4e91\u7aef\u6a21\u578b\u6548\u679c\u8f83\u597d\uff0c\u4f46\u662f\u5bf9\u4e8eCPU\u63a8\u65ad\u7684\u7aef\u4fa7\u6a21\u578b\u6548\u679c\u4e00\u822c\u3002 \u8f7b\u91cf\u5316\u6a21\u578b\u3002\u5220\u9664\u6a21\u578b\u4e2d\u4e0d\u5fc5\u8981\u7684\u6a21\u5757\uff0c\u7f29\u51cf\u7f51\u7edc\u8282\u70b9\u6570\uff0c\u8fdb\u884c\u6a21\u578b\u88c1\u526a\u3001\u91cf\u5316\u548c\u526a\u679d\u3002 \u5f15\u5165\u9886\u57df\u77e5\u8bc6\u3002\u5229\u7528\u6c89\u6dc0\u5df2\u4e45\u7684\u4fe1\u53f7\u5904\u7406\u65b9\u6cd5\u52a0\u901f\u8bed\u97f3\u5408\u6210\u8fc7\u7a0b\uff0c\u6bd4\u5982\u7ebf\u6027\u9884\u6d4b\u3001\u591a\u5b50\u5e26\u5efa\u6a21\u3001\u591a\u5e27\u5e76\u884c\u9884\u6d4b\u3001\u5c0f\u5c3a\u5ea6\u9884\u6d4b\uff08subscale prediction\uff09\u3002","title":"\u8bed\u97f3\u5408\u6210\u7684\u603b\u4f53\u77e5\u8bc6\u4f53\u7cfb"},{"location":"tts/%E8%AF%AD%E9%9F%B3%E5%90%88%E6%88%90%E7%9A%84%E6%80%BB%E4%BD%93%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/#_1","text":"\u8bed\u97f3\u5408\u6210\u77e5\u8bc6\u7ed3\u6784\u5982\u4e0b\u3002","title":"\u8bed\u97f3\u5408\u6210\u7684\u603b\u4f53\u77e5\u8bc6\u4f53\u7cfb"},{"location":"tts/%E8%AF%AD%E9%9F%B3%E5%90%88%E6%88%90%E7%9A%84%E6%80%BB%E4%BD%93%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/#_2","text":"\u8bed\u97f3\u5408\u6210\uff08Speech Synthesis\uff09\u5c06\u6587\u672c\u8f6c\u6362\u4e3a\u53ef\u542c\u7684\u58f0\u97f3\u4fe1\u606f\uff0c\u5b83\u8d4b\u4e88\u4e86\u50cf\u4eba\u4e00\u6837\u8bf4\u8bdd\u7684\u80fd\u529b\uff0c\u662f\u4eba\u673a\u4ea4\u4e92\u7684\u91cd\u8981\u63a5\u53e3\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u8bed\u97f3\u5408\u6210\u7684\u6982\u5ff5\u6bd4\u6587\u8bed\u8f6c\u6362\uff08Text-to-Speech\uff0cTTS\uff09\u7684\u6db5\u76d6\u8303\u56f4\u66f4\u5e7f\uff0c\u8bed\u97f3\u5408\u6210\u5305\u62ecTTS\u3001\u6b4c\u5531\u5408\u6210\u7b49\u9886\u57df\uff0c\u4f46\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u53ef\u4ee5\u6df7\u7528\u3002 awesome-tts-samples \u63d0\u4f9b\u4e86\u4e00\u4e9b\u7aef\u5230\u7aef\u8bed\u97f3\u5408\u6210\u6a21\u578b\u7684\u6837\u4f8b\uff0c\u53ef\u4ee5\u7b80\u5355\u611f\u53d7\u4e0b\u76ee\u524d\u8bed\u97f3\u5408\u6210\u7684\u53d1\u5c55\u3002 \u4eba\u7c7b\u53ef\u4ee5\u901a\u8fc7\u4e00\u6574\u5957\u53d1\u97f3\u5668\u5b98\u5408\u6210\u8bed\u97f3\uff0c\u5177\u4f53\u6765\u8bf4\uff0c\u80ba\u76f8\u5f53\u4e8e\u52a8\u529b\u6e90\uff0c\u5589\u76f8\u5f53\u4e8e\u8c03\u5236\u5668\uff0c\u58f0\u9053\u76f8\u5f53\u4e8e\u6ee4\u6ce2\u5668\uff0c\u53e3\u5507\u76f8\u5f53\u4e8e\u6269\u97f3\u5668\u3002\u7814\u7a76\u4eba\u5458\u63d0\u51fa\u4e86\u4ee5\u6e90-\u6ee4\u6ce2\u5668\uff08source-filter\uff09\u6a21\u578b\u4e3a\u4ee3\u8868\u7684\u591a\u79cd\u6a21\u578b\u5efa\u6a21\u8be5\u8fc7\u7a0b\uff0c\u8bed\u97f3\u4e2d\u5b58\u5728\u6e05\u97f3\u548c\u6d4a\u97f3\uff0c\u5206\u522b\u7531\u58f0\u5e26\u5468\u671f\u6027\u632f\u52a8\u5bf9\u5e94\u7684\u5468\u671f\u58f0\u6e90\u548c\u58f0\u5e26\u4e0d\u632f\u52a8\u65f6\u7d0a\u4e71\u6c14\u6d41\u5bf9\u5e94\u7684\u975e\u5468\u671f\u58f0\u6e90\u4ea7\u751f\u3002 \u5f53\u4ee3\u5de5\u4e1a\u754c\u4e3b\u6d41\u8bed\u97f3\u5408\u6210\u7cfb\u7edf\u5305\u62ec\u6587\u672c\u524d\u7aef\u548c\u58f0\u5b66\u540e\u7aef\u4e24\u4e2a\u90e8\u5206\u3002\u6587\u672c\u524d\u7aef\u5c06\u8f93\u5165\u6587\u672c\u8f6c\u6362\u4e3a\u5c42\u6b21\u5316\u7684\u8bed\u97f3\u5b66\u8868\u5f81\uff0c\u4e3b\u8981\u5305\u62ec\u6587\u672c\u89c4\u8303\u5316\u3001\u97f5\u5f8b\u5206\u6790\u548c\u6587\u672c\u8f6c\u97f3\u7d20\u7b49\u6a21\u5757\u3002\u58f0\u5b66\u540e\u7aef\u57fa\u4e8e\u6587\u672c\u524d\u7aef\u7ed9\u51fa\u7684\u5c42\u6b21\u5316\u8bed\u8a00\u5b66\u8868\u5f81\uff08linguistics feature\uff09\u6765\u751f\u6210\u8bed\u97f3\uff0c\u4e3b\u8981\u6280\u672f\u8def\u7ebf\u5305\u62ec\u5355\u5143\u6311\u9009\u6ce2\u5f62\u62fc\u63a5\u3001\u7edf\u8ba1\u53c2\u6570\u548c\u7aef\u5230\u7aef\u8bed\u97f3\u5408\u6210\u65b9\u6cd5\uff0c\u5f53\u4ee3\u4e3b\u8981\u91c7\u7528\u7aef\u5230\u7aef\u58f0\u5b66\u540e\u7aef\u3002\u7aef\u5230\u7aef\u58f0\u5b66\u540e\u7aef\u4e00\u822c\u5305\u62ec\u58f0\u5b66\u6a21\u578b\u548c\u58f0\u7801\u5668\u4e24\u90e8\u5206\uff0c\u540c\u65f6\u4e5f\u51fa\u73b0\u4e86\u76f4\u63a5\u4ece\u97f3\u7d20\u6620\u5c04\u4e3a\u6ce2\u5f62\u7684\u5b8c\u5168\u7aef\u5230\u7aef\u8bed\u97f3\u5408\u6210\u7cfb\u7edf\u3002\u58f0\u5b66\u6a21\u578b\u8d1f\u8d23\u5c06\u8bed\u8a00\u5b66\u7279\u5f81\u8f6c\u6362\u4e3a\u4e2d\u95f4\u58f0\u5b66\u7279\u5f81\uff0c\u6bd4\u5982\u6885\u5c14\u9891\u8c31\uff0c\u76f4\u63a5\u51b3\u5b9a\u5408\u6210\u8bed\u97f3\u7684\u97f5\u5f8b\uff1b\u58f0\u7801\u5668\u5c06\u4e2d\u95f4\u58f0\u5b66\u7279\u5f81\u8f6c\u6362\u4e3a\u8bed\u97f3\u6ce2\u5f62\uff0c\u76f4\u63a5\u51b3\u5b9a\u5408\u6210\u8bed\u97f3\u7684\u97f3\u8d28\u3002 \u8bed\u97f3\u5408\u6210\u4e0e\u8bed\u97f3\u8bc6\u522b\u3001\u673a\u5668\u7ffb\u8bd1\u7b49\u95ee\u9898\u7c7b\u4f3c\uff0c\u672c\u8d28\u662f\u5e8f\u5217\u5230\u5e8f\u5217\u7684\u5efa\u6a21\u95ee\u9898\uff0c\u53e6\u4e00\u65b9\u9762\uff0c\u8bed\u97f3\u5408\u6210\u662f\u751f\u6210\u7c7b\u95ee\u9898\uff0c\u56e0\u6b64\u81ea\u56de\u5f52\u751f\u6210\u3001VAE\u3001GAN\u3001Flow\u3001\u6269\u6563\u6a21\u578b\u7b49\u751f\u6210\u6a21\u578b\u5728\u8bed\u97f3\u5408\u6210\u4e0a\u5747\u6709\u5e94\u7528\u3002","title":"\u57fa\u672c\u7ec4\u6210"},{"location":"tts/%E8%AF%AD%E9%9F%B3%E5%90%88%E6%88%90%E7%9A%84%E6%80%BB%E4%BD%93%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/#_3","text":"\u72ed\u4e49\u4e0a\u8bf4\uff0c\u5c06\u4e00\u4e2a\u8bf4\u8bdd\u4eba\uff08source speaker\uff09\u7684\u8bed\u97f3\u8f6c\u6362\u5230\u53e6\u4e00\u4e2a\u76ee\u6807\u8bf4\u8bdd\u4eba\uff08target speaker\uff09\u7684\u8bed\u97f3\uff0c\u8fd9\u79cd\u8bed\u97f3\u5904\u7406\u6280\u672f\u79f0\u4e4b\u4e3a\u58f0\u97f3\u8f6c\u6362\uff08Voice Conversion\uff0cVC\uff09\u3002\u58f0\u97f3\u8f6c\u6362\u5305\u62ec\u5e73\u884c\u548c\u975e\u5e73\u884c\u4e24\u79cd\uff0c\u5e73\u884c\u8bed\u97f3\u8f6c\u6362\u6307\u7684\u662f\u6e90\u3001\u76ee\u6807\u8bed\u97f3\u7684\u5185\u5bb9\u76f8\u540c\uff0c\u76f8\u5bf9\u5e94\u5730\uff0c\u975e\u5e73\u884c\u8bed\u97f3\u8f6c\u6362\u53ea\u6539\u53d8\u8bed\u97f3\u7684\u97f3\u8272\uff0c\u800c\u5bf9\u8bed\u97f3\u5185\u5bb9\u6ca1\u6709\u8981\u6c42\u3002\u58f0\u97f3\u8f6c\u6362\u53ef\u4ee5\u501f\u9274\u56fe\u50cf\u4e2d\u98ce\u683c\u8f6c\u6362\u7684\u6210\u679c\uff0c\u6bd4\u5982StarGAN-VC\u7b49\u6a21\u578b\u3002\u66f4\u6709\u6548\u7684\u65b9\u6cd5\u662f\u5229\u7528\u8bed\u97f3\u8bc6\u522b\u6a21\u578b\u63d0\u53d6\u8bf4\u8bdd\u4eba\u65e0\u5173\u7684\u4e2d\u95f4\u8868\u5f81\uff0c\u5c06\u8be5\u4e2d\u95f4\u8868\u5f81\u548c\u8bf4\u8bdd\u4eba\u4fe1\u606f\u8f93\u5165\u751f\u6210\u6a21\u578b\u4e2d\uff0c\u751f\u6210\u5177\u6709\u76ee\u6807\u8bf4\u8bdd\u4eba\u97f3\u8272\u7684\u8bed\u97f3\uff0c\u53ef\u4ee5\u501f\u9274TTS\u7684\u7814\u7a76\u6210\u679c\uff0c\u5c06VITS\u7b49\u4f5c\u4e3a\u9ad8\u8d28\u91cf\u5408\u6210\u6a21\u578b\u3002\u5728\u58f0\u97f3\u8f6c\u6362\u4e2d\uff0c\u57fa\u9891\u662f\u4e00\u4e2a\u91cd\u8981\u7279\u5f81\u3002\u53c2\u89c1\uff1a An Overview of Voice Conversion and its Challenges: From Statistical Modeling to Deep Learning","title":"\u58f0\u97f3\u8f6c\u6362"},{"location":"tts/%E8%AF%AD%E9%9F%B3%E5%90%88%E6%88%90%E7%9A%84%E6%80%BB%E4%BD%93%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/#_4","text":"\u591a\u8bed\u79cd\u8bed\u97f3\u5408\u6210\u7684\u96be\u70b9\u4e3b\u8981\u6709\u4e94\u70b9\uff1a \u97f3\u5e93\u5236\u4f5c\u548c\u6784\u5efa\u3002 \u6587\u672c\u524d\u7aef\u7684\u6784\u5efa\u3002\u9700\u8981\u5236\u5b9a\u9002\u7528\u4e8e\u4e00\u4e2a\u8bed\u79cd\u8bed\u97f3\u5408\u6210\u7684\u97f3\u7d20\u4f53\u7cfb\uff0c\u6784\u5efa\u8be5\u8bed\u79cd\u7684\u6587\u672c\u89c4\u8303\u5316\u89c4\u5219\u7b49\uff0c\u7279\u522b\u5730\uff0c\u6bd4\u5982\u4fc4\u8bed\u3001\u6ce2\u65af\u8bed\u3001\u963f\u62c9\u4f2f\u8bed\u7b49\u8bed\u79cd\u6709\u6027\u6570\u683c\u7684\u53d8\u5316\uff0c\u63d0\u9ad8\u4e86\u6587\u672c\u524d\u7aef\u7684\u590d\u6742\u6027\u3002\u4e0d\u540c\u8bed\u79cd\u95f4\u6587\u672c\u524d\u7aef\u6a21\u5757\u4e5f\u4f1a\u6709\u6240\u4e0d\u540c\uff0c\u6bd4\u5982\u4e2d\u6cf0\u8d8a\u65e5\u7b49\u8bed\u79cd\u9700\u8981\u6dfb\u52a0\u5206\u8bcd\u6a21\u5757\u3002 \u8bed\u79cd\u4e2d\u7279\u6b8a\u53d1\u97f3\u73b0\u8c61\u3002\u897f\u73ed\u7259\u8bed\u3001\u4fc4\u8bed\u7b49\u8bed\u79cd\u7684\u5347\u964d\u8c03\u5bf9\u5408\u6210\u8bed\u97f3\u81ea\u7136\u5ea6\u5f71\u54cd\u663e\u8457\uff0c\u5177\u4f53\u6765\u8bf4\uff0c\u5728\u6807\u70b9\u5904\u53d1\u97f3\u4f1a\u4ea7\u751f\u8f83\u4e3a\u660e\u663e\u7684\u4e0a\u626c\u3001\u4e0b\u964d\u3001\u5148\u5347\u540e\u964d\u3001\u5148\u964d\u540e\u5347\u548c\u5e73\u8c03\u73b0\u8c61\u3002\u56e0\u6b64\u6587\u672c\u524d\u7aef\u6700\u597d\u7ed9\u51fa\u8be5\u5347\u964d\u8c03\u4fe1\u606f\uff0c\u58f0\u5b66\u540e\u7aef\u9700\u8981\u5c06\u8be5\u5347\u964d\u8c03\u4fe1\u606f\u4f5c\u4e3a\u91cd\u8981\u7279\u5f81\uff0c\u8f93\u5165\u5230\u6a21\u578b\u7684\u591a\u4e2a\u6a21\u5757\u4e2d\uff0c\u4ee5\u534f\u52a9\u6a21\u578b\u4ea7\u751f\u51c6\u786e\u81ea\u7136\u7684\u5347\u964d\u8c03\u8bed\u97f3\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u7531\u4e8e\u5347\u964d\u8c03\u662f\u4e00\u4e2a\u8bed\u5757\u6574\u4f53\u7684\u8868\u73b0\uff0c\u800c\u975e\u4ec5\u4ec5\u4e00\u4e2a\u5b57\u6bcd\u6216\u8005\u5355\u8bcd\u7684\u53d1\u97f3\u53d8\u5316\uff0c\u6bd4\u5982\u897f\u73ed\u7259\u8bed\u53ef\u4ee5\u5c06\u5347\u964d\u8c03\u4fe1\u606f\u6807\u6ce8\u5230\u6574\u4e2aL3\u5757\u4e0a\uff0c\u800c\u4fc4\u8bed\u66f4\u9002\u5408\u4e8e\u4ec5\u4ec5\u6807\u6ce8\u5230\u4e2d\u5fc3\u8bcd\u4e0a\u3002 \u8de8\u8bed\u79cd\u8bed\u97f3\u5408\u6210\u3002\u5f53\u4ee3\u8bed\u79cd\u6df7\u6742\u7684\u8bed\u8a00\u73b0\u8c61\u6108\u53d1\u660e\u663e\uff0c\u6bd4\u5982\u4e2d\u6587\u4e2d\u5939\u6742\u82f1\u8bed\u5355\u8bcd\uff0c\u8fd9\u5c31\u9700\u8981\u5b9e\u73b0\u8bed\u79cd\u5207\u6362\uff08code-switch\uff09\u548c\u8de8\u8bed\u79cd\uff08cross-lingual\uff09\u8bed\u97f3\u5408\u6210\u3002\u5982\u679c\u8bed\u6599\u4e2d\u5b58\u5728\u5355\u8bf4\u8bdd\u4eba\u8de8\u8bed\u79cd\u8bed\u6599\uff0c\u4e00\u822c\u6765\u8bf4\uff0c\u76f4\u63a5\u8bad\u7ec3\u5c31\u53ef\u4ee5\u4ea7\u751f\u8de8\u8bed\u79cd\u5408\u6210\u6548\u679c\u3002\u5b9e\u8df5\u4e2d\uff0c\u5982\u679c\u8de8\u8bed\u79cd\u8bed\u6599\u8f83\u5c11\uff0c\u6bd4\u5982\u4ec5\u6709200\u53e5\u8de8\u8bed\u79cd\u8bed\u6599\uff0c\u591a\u4e2a\u8bed\u79cd\u6df7\u8bad\u65f6\u5171\u4eab\u8bed\u79cd\u95f4\u7684\u97f3\u7d20\u80fd\u591f\u83b7\u5f97\u66f4\u597d\u7684\u5408\u6210\u6548\u679c\uff1b\u5982\u679c\u8de8\u8bed\u79cd\u8bed\u6599\u8f83\u591a\uff0c\u53ef\u4ee5\u4ec5\u91c7\u7528\u4e3b\u8981\u8bed\u79cd\u548c\u8de8\u8bed\u79cd\u8bed\u6599\u8fdb\u884c\u8bad\u7ec3\uff0c\u52a0\u5165\u5176\u5b83\u8bed\u79cd\u8fdb\u884c\u6df7\u8bad\u76f8\u53cd\u53ef\u80fd\u4f1a\u4ea7\u751f\u8f83\u5dee\u7684\u6548\u679c\u3002\u5982\u679c\u6ca1\u6709\u8de8\u8bed\u79cd\u8bed\u6599\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u6570\u636e\u589e\u5f3a\u65b9\u6cd5\u4f2a\u9020\u8de8\u8bed\u79cd\u8bed\u6599\uff0c\u6bd4\u5982\u5bf9\u5355\u8bed\u79cd\u8bed\u6599\u8fdb\u884c\u62fc\u63a5\uff0c\u6784\u9020\u8de8\u8bed\u79cd\u8bed\u6599\uff1b\u5229\u7528\u8de8\u8bed\u79cd\u8bed\u97f3\u5408\u6210\u5927\u6a21\u578b\u4f2a\u9020\u8bad\u7ec3\u8bed\u6599\uff0c\u8bad\u7ec3\u8de8\u8bed\u79cd\u8bed\u97f3\u5408\u6210\u6a21\u578b\u3002 \u4f4e\u8d44\u6e90\u8bed\u97f3\u5408\u6210\u3002\u8bed\u6599\u6570\u91cf\u7684\u589e\u52a0\u53ef\u663e\u8457\u63d0\u5347\u5408\u6210\u8bed\u97f3\u7684\u6548\u679c\uff0c\u4f46\u4e16\u754c\u4e0a\u7684\u8bed\u79cd\u6570\u91cf\u8f83\u591a\uff0c\u5927\u90e8\u5206\u8bed\u79cd\u5e76\u4e0d\u5b58\u5728\u5927\u91cf\u9ad8\u8d28\u91cf\u8bed\u97f3\u5408\u6210\u8bed\u6599\u3002\u4e3b\u8981\u7684\u89e3\u51b3\u65b9\u6848\u6709\u8de8\u8bed\u79cd\u8fc1\u79fb\u3001\u8de8\u8bf4\u8bdd\u4eba\u8fc1\u79fb\u3001\u8bed\u97f3\u8bc6\u522b\u548c\u5408\u6210\u5bf9\u5076\u5b66\u4e60\uff0c\u4ee5\u53ca\u65e0\u76d1\u7763\u8bad\u7ec3\u3002\u53c2\u89c1 \u8bba\u6587\u901f\u89c8\uff1a\u4f4e\u8d44\u6e90\u8bed\u97f3\u5408\u6210 \u3002 Latorre J, Bailleul C, Morrill T, et al. Combining Speakers of Multiple Languages to Improve Quality of Neural Voices[J]. arXiv preprint arXiv:2108.07737, 2021.","title":"\u591a\u8bed\u79cd\u8bed\u97f3\u5408\u6210"},{"location":"tts/%E8%AF%AD%E9%9F%B3%E5%90%88%E6%88%90%E7%9A%84%E6%80%BB%E4%BD%93%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/#_5","text":"\u8bed\u97f3\u5408\u6210\u5b58\u5728\u6bd4\u8f83\u591a\u7684\u6269\u5c55\u5e94\u7528\uff0c\u6bd4\u5982\uff1a \u9ad8\u8868\u73b0\u529b\u8bed\u97f3\u5408\u6210\u3002 \u4e2a\u6027\u5316\u8bed\u97f3\u5408\u6210\u3002 \u60c5\u611f\u5408\u6210\u548c\u97f5\u5f8b\u8fc1\u79fb\u3002 \u65b9\u8a00\u8fc1\u79fb\u3002 \u6b4c\u5531\u5408\u6210\u3002 \u6709\u58f0\u4eba\u8138\u5408\u6210\uff08talking face synthesis\uff09\u3002 \u8bed\u97f3\u5408\u6210\u7684\u7a33\u5b9a\u6027\u3002 \u8bed\u97f3\u5408\u6210\u7684\u6548\u7387\u4f18\u5316\u3002 \u672c\u90e8\u5206\u53ef\u53c2\u8003\u76f8\u5173\u8bba\u6587\u548c A Survey on Neural Speech Synthesis \u4e86\u89e3\u5177\u4f53\u6280\u672f\u65b9\u6848\u3002","title":"\u8fdb\u9636"},{"location":"tts/%E8%AF%AD%E9%9F%B3%E5%90%88%E6%88%90%E7%9A%84%E6%80%BB%E4%BD%93%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/#_6","text":"\u5728\u4ea4\u4e92\u3001\u5c0f\u8bf4\u9605\u8bfb\u7b49\u5e94\u7528\u573a\u666f\u4e2d\uff0c\u5bf9\u5408\u6210\u8bed\u97f3\u7684\u8868\u73b0\u529b\u8981\u6c42\u8f83\u9ad8\uff0c\u800c\u8868\u73b0\u529b\u7531\u5185\u5bb9\u3001\u8bf4\u8bdd\u4eba\u97f3\u8272\u3001\u97f5\u5f8b\u3001\u60c5\u611f\u548c\u98ce\u683c\u7b49\u591a\u4e2a\u56e0\u7d20\u51b3\u5b9a\uff0c\u56e0\u6b64\u9ad8\u8868\u73b0\u529b\u8bed\u97f3\u5408\u6210\u5b9e\u9645\u6db5\u76d6\u4e86\u5185\u5bb9\u3001\u97f3\u8272\u3001\u97f5\u5f8b\u3001\u60c5\u611f\u548c\u98ce\u683c\u7684\u5efa\u6a21\u3001\u5206\u79bb\u548c\u63a7\u5236\u3002 \u8bed\u97f3\u4e2d\u5305\u542b\u7684\u4fe1\u606f\u53ef\u4ee5\u5206\u4e3a\u5982\u4e0b\u56db\u7c7b\uff1a \u5b57\u7b26\u6216\u97f3\u7d20\uff0c\u4e5f\u5c31\u662f\u8bed\u97f3\u7684\u5185\u5bb9\u3002\u53ef\u4ee5\u901a\u8fc7\u9884\u8bad\u7ec3\u8bcd\u5d4c\u5165\u589e\u5f3a\u5408\u6210\u8bed\u97f3\u7684\u8868\u73b0\u529b\u548c\u8d28\u91cf\uff0c\u6216\u8005\u52a0\u5165\u4e00\u4e9b\u989d\u5916\u7684\u4fe1\u606f\uff0c\u6bd4\u5982\u5347\u964d\u8c03\u4fe1\u606f\u3001\u91c7\u7528fulllab\u80fd\u591f\u589e\u5f3a\u6a21\u578b\u8868\u73b0\u529b\u548c\u7a33\u5b9a\u6027\u3002fulllab\u53ca\u4f20\u7edf\u8bed\u97f3\u5408\u6210\u91c7\u7528\u7684\u6587\u672c\u3001\u58f0\u5b66\u7279\u5f81\u53c2\u89c1\uff1a jsut lab \u3001 HTS Data README \u3002 \u8bf4\u8bdd\u4eba\u6216\u97f3\u8272\u3002\u591a\u8bf4\u8bdd\u4eba\u8bed\u97f3\u5408\u6210\u6a21\u578b\u53ef\u4ee5\u901a\u8fc7\u8bf4\u8bdd\u4eba\u5d4c\u5165\u5411\u91cf\u6216\u5355\u72ec\u7684\u8bf4\u8bdd\u4eba\u7f16\u7801\u5668\uff08speaker encoder\uff09\u5bf9\u97f3\u8272\u7279\u5f81\u8fdb\u884c\u5efa\u6a21\u3002 \u97f5\u5f8b\u3001\u98ce\u683c\u548c\u60c5\u611f\u3002\u8fd9\u4e9b\u7279\u5f81\u8868\u793a\"\u5982\u4f55\u8bf4\u51fa\u6587\u672c\"\uff0c\u8868\u5f81\u8bed\u97f3\u4e2d\u7684\u8bed\u8c03\u3001\u91cd\u97f3\u548c\u8bf4\u8bdd\u8282\u594f\uff0c\u97f5\u5f8b\u3001\u98ce\u683c\u548c\u60c5\u611f\u662f\u9ad8\u8868\u73b0\u529b\u8bed\u97f3\u5408\u6210\u7684\u5efa\u6a21\u91cd\u70b9\u3002 \u5f55\u97f3\u8bbe\u5907\u548c\u73af\u5883\u566a\u97f3\u3002\u8fd9\u4e9b\u5012\u662f\u4e0e\u8bed\u97f3\u5185\u5bb9\u3001\u97f5\u5f8b\u65e0\u5173\uff0c\u4f46\u4f1a\u663e\u8457\u5f71\u54cd\u8bed\u97f3\u8d28\u91cf\uff0c\u56e0\u6b64\u53ef\u4ee5\u5c1d\u8bd5\u5bf9\u8bed\u97f3\u4e2d\u7684\u566a\u97f3\u7b49\u8fdb\u884c\u63a7\u5236\u548c\u5206\u79bb\u3002\u5bf9\u8bad\u7ec3\u8bed\u6599\u672c\u8eab\u53ef\u4ee5\u63d0\u524d\u8fdb\u884c\u53bb\u566a\u5904\u7406\uff0c\u5728\u6a21\u578b\u4e2d\u53ef\u4ee5\u6807\u8bc6\u5e26\u566a\u8bed\u6599\uff0c\u4ee5\u4fbf\u5728\u5408\u6210\u8bed\u97f3\u4e2d\u53bb\u9664\u566a\u97f3\u90e8\u5206\u3002 \u5229\u7528\u6a21\u578b\u5efa\u6a21\u8fd9\u4e9b\u4fe1\u606f\u7684\u65b9\u6cd5\u5f88\u591a\uff0c\u6709\u8bed\u79cd\u3001\u8bf4\u8bdd\u4eba\u3001\u98ce\u683c\u5d4c\u5165\u5411\u91cf\u4ee5\u53ca\u97f3\u9ad8\u3001\u65f6\u957f\u3001\u80fd\u91cf\u7f16\u7801\u5668\u7b49\u663e\u5f0f\u5efa\u6a21\u65b9\u6cd5\uff0c\u4e5f\u6709reference encoder\u3001VAE\u3001GAN/Flow/Diffusion\u3001\u6587\u672c\u9884\u8bad\u7ec3\u7b49\u9690\u5f0f\u5efa\u6a21\u65b9\u6cd5\u3002","title":"\u9ad8\u8868\u73b0\u529b\u8bed\u97f3\u5408\u6210"},{"location":"tts/%E8%AF%AD%E9%9F%B3%E5%90%88%E6%88%90%E7%9A%84%E6%80%BB%E4%BD%93%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/#_7","text":"\u4e2a\u6027\u5316\u8bed\u97f3\u5408\u6210\u662f\u8bed\u97f3\u5408\u6210\u4e2d\u8f83\u4e3a\u70ed\u95e8\u7684\u65b9\u5411\uff0c\u4e3b\u8981\u5e94\u7528\u4e8e\u5b9a\u5236\u5316\u573a\u666f\u4e2d\uff0c\u5229\u7528\u4efb\u610f\u7528\u6237\u7684\u97f3\u8272\u5408\u6210\u8bed\u97f3\uff0c\u53c8\u79f0\u4e3a\u8bed\u97f3\u81ea\u9002\u5e94\uff08Voice Adaptation\uff09\u3001\u8bed\u97f3\u514b\u9686\uff08Voice Cloning\uff09\u3001\u5b9a\u5236\u5316\u8bed\u97f3\uff08Custom Voice\uff09\u7b49\uff0c\u901a\u5e38\u8981\u6c42\u5229\u75281\u5206\u949f\u4ee5\u5185\u751a\u81f3\u51e0\u79d2\u949f\u7684\u8bed\u6599\uff0c\u5c31\u53ef\u4ee5\u5b9e\u73b0\u5408\u6210\u76ee\u6807\u8bf4\u8bdd\u4eba\u7684\u4efb\u610f\u8bed\u97f3\u3002\u76ee\u524d\u4e2a\u6027\u5316\u8bed\u97f3\u5408\u6210\u7684\u96be\u70b9\u5982\u4e0b\uff1a \u76f8\u4f3c\u5ea6\u3002\u4ec5\u5229\u7528\u5c11\u91cf\u8bed\u6599\uff0c\u5f88\u96be\u8986\u76d6\u5b8c\u5168\u76ee\u6807\u8bf4\u8bdd\u4eba\u4e00\u4e2a\u8bed\u79cd\u7684\u6240\u6709\u97f3\u7d20\u53d1\u97f3\uff0c\u56e0\u6b64\u8981\u6c42\u6a21\u578b\u9700\u8981\u62e5\u6709\u4e00\u5b9a\u7684\u6cdb\u5316\u80fd\u529b\u3002\u5b9e\u8df5\u4e2d\uff0c\u5229\u7528\u76ee\u6807\u8bed\u6599\u5fae\u8c03\u6574\u4e2a\u6a21\u578b\u6216\u8005\u58f0\u5b66\u6a21\u578b\u7684\u89e3\u7801\u5668\u5f80\u5f80\u80fd\u591f\u5927\u5e45\u63d0\u5347\u5408\u6210\u8bed\u97f3\u7684\u76f8\u4f3c\u5ea6\uff0c\u4e5f\u6709\u4e00\u4e9b\u5de5\u4f5c\u5c1d\u8bd5\u4e0d\u8fdb\u884c\u5fae\u8c03\uff0c\u4f46\u76f8\u4f3c\u5ea6\u4e00\u822c\u8f83\u4f4e\u3002 \u7a33\u5b9a\u6027\u3002\u4e2a\u6027\u5316\u8bed\u97f3\u5408\u6210\u5728\u63a8\u65ad\u65f6\uff0c\u76ee\u6807\u97f3\u8272\u4e00\u822c\u4e0d\u5728\u8bad\u7ec3\u96c6\u4e2d\uff0c\u56e0\u6b64\u4f1a\u8ba9\u539f\u672c\u8106\u5f31\u7684\u7aef\u5230\u7aef\u540e\u7aef\u6a21\u578b\u5408\u6210\u5931\u8d25\uff0c\u5982\u679c\u91c7\u7528\u5fae\u8c03\u65b9\u6848\uff0c\u5219\u5c24\u751a\u3002\u56e0\u6b64\u4e00\u4e9b\u5e26\u6709\u5148\u9a8c\u7684\u6ce8\u610f\u529b\u673a\u5236\uff0c\u6216\u8005\u76f4\u63a5\u5229\u7528\u65f6\u957f\u6a21\u578b\u66ff\u4ee3\u6ce8\u610f\u529b\u673a\u5236\u7684\u6a21\u578b\uff0c\u5728\u8fd9\u79cd\u573a\u666f\u4e0b\u62e5\u6709\u4e00\u5b9a\u4f18\u52bf\u3002 \u5fae\u8c03\u6548\u7387\u3002\u5982\u4e0a\u6240\u8ff0\uff0c\u6574\u4f53\u6216\u89e3\u7801\u5668\u5fae\u8c03\u5f80\u5f80\u80fd\u591f\u63d0\u5347\u76f8\u4f3c\u5ea6\uff0c\u4f46\u6a21\u578b\u5fae\u8c03\u4f1a\u5e26\u6765\u4e00\u5b9a\u7684\u6a21\u578b\u8bad\u7ec3\u65f6\u95f4\u3002","title":"\u4e2a\u6027\u5316\u8bed\u97f3\u5408\u6210"},{"location":"tts/%E8%AF%AD%E9%9F%B3%E5%90%88%E6%88%90%E7%9A%84%E6%80%BB%E4%BD%93%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/#_8","text":"\u65b9\u8a00\u8fc1\u79fb\u4e00\u822c\u662f\u6307\u8de8\u65b9\u8a00\u8fc1\u79fb\u76ee\u6807\u8bf4\u8bdd\u4eba\u7684\u97f3\u8272\uff0c\u6bd4\u5982\u5229\u7528\u666e\u901a\u8bdd\u53d1\u97f3\u4eba\u8bf4\u4e0a\u6d77\u8bdd\u3001\u56db\u5ddd\u8bdd\u6216\u7ca4\u8bed\uff0c\u4e0e\u8bf4\u8bdd\u4eba\u8fc1\u79fb\u6709\u4e9b\u7c7b\u4f3c\uff0c\u4f46\u4efb\u52a1\u96be\u5ea6\u6bd4\u8de8\u8bed\u79cd\u8bf4\u8bdd\u4eba\u8fc1\u79fb\u8981\u7b80\u5355\u4e00\u4e9b\u3002\u53ef\u4ee5\u91c7\u7528\"\u591a\u65b9\u8a00\u7f16\u7801\u5668+\u8bf4\u8bdd\u4eba\u68af\u5ea6\u53cd\u8f6c+\u5171\u4eab\u89e3\u7801\u5668+VAE+\u591a\u65b9\u8a00\u6df7\u8bad\"\u7684\u65b9\u6848\u89e3\u51b3\uff0c\u4e5f\u53ef\u4ee5\u5c1d\u8bd5\u7c7b\u4f3c\u58f0\u97f3\u8f6c\u6362\u7684\u65b9\u6848\uff1a\u5229\u7528\u8bed\u97f3\u8bc6\u522b\u58f0\u5b66\u6a21\u578b\u63d0\u53d6\u8bf4\u8bdd\u4eba\u65e0\u5173\u7684\u53d1\u97f3\u5185\u5bb9\uff0c\u7136\u540e\u5229\u7528\u8bed\u97f3\u5408\u6210\u6a21\u578b\u8f93\u5165\u8be5\u8bf4\u8bdd\u4eba\u65e0\u5173\u7684\u53d1\u97f3\u5185\u5bb9\u7279\u5f81\uff0c\u5e76\u52a0\u5165\u76ee\u6807\u97f3\u8272\uff0c\u4ece\u800c\u5b9e\u73b0\u65b9\u8a00\u8fc1\u79fb\u3002","title":"\u65b9\u8a00\u8fc1\u79fb"},{"location":"tts/%E8%AF%AD%E9%9F%B3%E5%90%88%E6%88%90%E7%9A%84%E6%80%BB%E4%BD%93%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/#_9","text":"\u97f3\u4e50\u662f\u4e00\u4e2a\u590d\u6742\u7684\u5b66\u79d1\uff0c\u800c\u97f3\u4e50\u5408\u6210\u51e0\u4e4e\u662f\u53e6\u4e00\u4e2a\u9886\u57df\u3002 \u65cb\u5f8b\u3001\u548c\u58f0\u3001\u8282\u594f\u662f\u97f3\u4e50\u7684\u4e09\u8981\u7d20\u3002\u65cb\u5f8b\u662f\u97f3\u4e50\u7684\u4e3b\u7ebf\uff0c\u5b83\u51b3\u5b9a\u4e86\u97f3\u4e50\u7684\u8c03\u6027\u3001\u66f2\u5f0f\u548c\u8fdb\u7a0b\uff0c\u662f\u97f3\u4e50\u7684\u7075\u9b42\u3002\u4f46\u5982\u679c\u53ea\u6709\u4e3b\u65cb\u5f8b\u7684\u8bdd\uff0c\u97f3\u4e50\u5c31\u663e\u5f97\u5355\u8c03\u3002\u548c\u58f0\u7528\u6765\u54c4\u6258\u4e3b\u65cb\u5f8b\uff0c\u4e30\u5bcc\u4e50\u66f2\u7684\"\u539a\u5ea6\"\uff0c\u8282\u594f\u5f3a\u5316\u98ce\u683c\u3002\u97f3\u4e50\u7684\u521b\u4f5c\u8fc7\u7a0b\u5305\u62ec\uff1a\u4f5c\u8bcd\u4f5c\u66f2\uff08Lyric/Melody\uff09\uff0c\u4f34\u594f/\u8c31\u66f2\uff0c\u6b4c\u5531\u5408\u6210/\u4e50\u97f3\u5408\u6210\uff0c\u6df7\u97f3\u56db\u4e2a\u57fa\u672c\u6b65\u9aa4\uff0c\u800c\u6b4c\u5531\u5408\u6210\u4ec5\u4ec5\u63a2\u8ba8\u7b2c\u4e09\u6b65\uff0c\u5229\u7528\u5df2\u6709\u7684\u4e50\u8c31\u5408\u6210\u4eba\u7c7b\u6b4c\u5531\u7684\u58f0\u97f3\u3002 \u6b4c\u5531\u5408\u6210\u7684\u4efb\u52a1\u5b9a\u4e49\uff1a \u8f93\u5165\uff1a\u6b4c\u8bcd\u3001\u97f3\u9ad8\uff08\u57fa\u9891\uff09\u3001\u8282\u62cd\uff08\u65f6\u957f\uff09 \u8f93\u51fa\uff1a\u6b4c\u5531\u58f0\u97f3 \u548cTTS\u76f8\u6bd4\uff1a \u589e\u52a0\u4e86\u989d\u5916\u7684\u8f93\u5165\uff1a\u97f3\u9ad8\u3001\u8282\u62cd\uff08\u65f6\u957f\uff09\uff0c\u8f93\u51fa\u66f4\u5e7f\u8303\u56f4\u7684\u58f0\u8c03\uff0c\u66f4\u591a\u53d8\u5316\u7684\u97f3\u7d20 \u66f4\u52a0\u4fa7\u91cd\u4e8e\u611f\u60c5\u548c\u8868\u8fbe\uff0c\u800c\u975e\u8bed\u97f3\u672c\u8eab\u7684\u5185\u5bb9 \u56f0\u96be\u70b9\uff1a \u6570\u636e \u6570\u636e\u91cf\u5c11 \u8d28\u91cf\u8981\u6c42\u9ad8\uff08\u6b4c\u5531\u4e0e\u6307\u5b9a\u97f3\u9ad8\u3001\u65f6\u957f\u7684\u7b26\u5408\u7a0b\u5ea6\u8981\u6c42\u9ad8\uff09\uff0c\u6807\u6ce8\u56f0\u96be \u96be\u4ee5\u5168\u9762\u8986\u76d6\u6240\u6709\u7684\u97f3\u9ad8\uff0c\u6b4c\u624b\u7684\u58f0\u97f3\u8303\u56f4\u6709\u9650\uff0c\u65e0\u6cd5\u8986\u76d6\u6240\u6709\u7684\u97f3\u9ad8 \u5bb9\u9519\u7387\u4f4e \u97f3\u8c03\u51c6\u786e\u7387\u8981\u6c42\u9ad8\uff0c\u7b80\u8c31\u57fa\u672c\u51b3\u5b9a\u4e86\u57fa\u9891\uff0c\u5148\u9a8c\u6bd4\u8f83\u5f3a\uff0c\"\u8dd1\u8c03\"\u5bb9\u6613\u542c\u51fa\u6765 \u5361\u62cd\u5b50 \u6b4c\u5531\u989d\u5916\u7684\u7279\u70b9\uff1a\u6bd4\u5982\u98a4\u97f3\uff0c\u8f6c\u8c03\u7b49 \u6b4c\u5531\u5408\u6210\u5b9e\u9645\u548c\u8bed\u97f3\u5408\u6210\u5341\u5206\u7c7b\u4f3c\uff0c\u53ea\u662f\u6587\u672c\u8f93\u5165\u4fe1\u606f\u66f4\u4e3a\u4e30\u5bcc\uff0c\u56e0\u6b64\u53ef\u4ee5\u5f15\u5165\u5355\u72ec\u7684\u6a21\u5757\u5efa\u6a21\u97f3\u9ad8\u548c\u65f6\u957f\uff0c\u5b9e\u9645\u4e0a\u8bed\u97f3\u5408\u6210\u4e2dFastSpeech 2\u8fd9\u4e9b\u663e\u5f0f\u5efa\u6a21\u8bed\u97f3\u4e2d\u97f3\u9ad8\u3001\u65f6\u957f\u7279\u5f81\u7684\u58f0\u5b66\u6a21\u578b\uff0c\u53ef\u4ee5\u76f4\u63a5\u62ff\u6765\u4f5c\u4e3a\u6b4c\u5531\u5408\u6210\u7684\u57fa\u7ebf\uff0c\u5f53\u7136\u4e5f\u51fa\u73b0\u4e86\u66f4\u597d\u7684\u6b4c\u5531\u5408\u6210\u6280\u672f\u65b9\u6848\uff0c\u53c2\u89c1 \u6b4c\u5531\u5408\u6210\uff1a\u6570\u636e\u96c6\u7684\u6784\u5efa\uff0c\u4ee5Opencpop\u4e3a\u4f8b \u3001 \u6b4c\u5531\u5408\u6210\uff1a\u57fa\u4e8eVITS\u7684\u6b4c\u5531\u5408\u6210\u58f0\u5b66\u6a21\u578bVISinger \u3001 \u6b4c\u5531\u5408\u6210\uff1a\u9ad8\u54c1\u8d28\u6b4c\u5531\u5408\u6210\u58f0\u7801\u5668SingGAN \u3001 muzic \u7b49\u3002","title":"\u6b4c\u5531\u5408\u6210"},{"location":"tts/%E8%AF%AD%E9%9F%B3%E5%90%88%E6%88%90%E7%9A%84%E6%80%BB%E4%BD%93%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/#_10","text":"\u7aef\u5230\u7aef\u8bed\u97f3\u5408\u6210\u81ea\u7136\u5ea6\u4f18\u52bf\u660e\u663e\uff0c\u4f46\u5bb9\u6613\u51fa\u73b0\u5408\u6210\u65e0\u6cd5\u505c\u6b62\u3001\u8c03\u5b57\u3001\u91cd\u590d\u7b49\u5408\u6210\u7f3a\u9677\uff0c\u8fd9\u5728\u751f\u4ea7\u4e0a\u662f\u81f4\u547d\u7684\u3002\u53ef\u4ee5\u5c1d\u8bd5\u4ece\u5982\u4e0b\u4e09\u4e2a\u65b9\u9762\u5165\u624b\uff1a \u8bad\u7ec3\u6570\u636e\u3002\u8bad\u7ec3\u8bed\u6599\u4e2d\u7684\u97f3\u9891\u5c3d\u91cf\u964d\u4f4e\u80cc\u666f\u566a\u97f3\uff1b\u63a7\u5236\u524d\u540e\u9759\u97f3\u6bb5\u548c\u53e5\u4e2d\u9759\u97f3\uff0c\u6bcf\u4e2a\u53e5\u5b50\u7684\u524d\u540e\u9759\u97f3\u6bb5\u5c3d\u53ef\u80fd\u4e00\u81f4\uff0c\u53e5\u4e2dL1/L3\u7684\u505c\u987f\u65f6\u957f\u5c3d\u53ef\u80fd\u88c1\u526a\u7edf\u4e00\uff1b\u786e\u4fdd\u6587\u672c\u6807\u6ce8\u548c\u5b9e\u9645\u97f3\u9891\u4e00\u4e00\u5bf9\u5e94\u3002 \u6a21\u578b\u3002\u5408\u6210\u8bed\u97f3\u7684\u6b63\u786e\u6027\u662f\u8bed\u97f3\u5408\u6210\u7684\u57fa\u672c\u8981\u6c42\uff0c\u56e0\u6b64\u8bed\u97f3\u5408\u6210\u7684\u7a33\u5b9a\u6027\u6709\u8f83\u591a\u7684\u7814\u7a76\u5de5\u4f5c\u3002\u4e3b\u8981\u601d\u8def\u6709\uff1a \u589e\u5f3a\u6ce8\u610f\u529b\u673a\u5236\u3002\u7531\u4e8e\u8bed\u97f3\u5408\u6210\u4efb\u52a1\u5177\u6709\u5355\u8c03\u6027\u7684\u7279\u70b9\uff0c\u4e5f\u5c31\u662f\u8f93\u5165\u97f3\u7d20\u4e00\u5b9a\u662f\u4ece\u5de6\u5230\u53f3\u5408\u6210\uff0c\u56e0\u6b64\u53ef\u4ee5\u5229\u7528\u8be5\u7279\u70b9\u52a0\u5165\u5148\u9a8c\u77e5\u8bc6\u8fdb\u884c\u5408\u6210\u3002 \u5229\u7528\u65f6\u957f\u6a21\u578b\u53d6\u4ee3\u6ce8\u610f\u529b\u673a\u5236\u3002 \u589e\u5f3a\u81ea\u56de\u5f52\u8fc7\u7a0b\u3002\u6bd4\u5982\u51cf\u5c11\u8bad\u7ec3\u3001\u63a8\u65ad\u65f6\u7684\u4e0d\u5339\u914d\uff0c\u77e5\u8bc6\u84b8\u998f\uff0c\u6559\u5e08\u5f3a\u5236\u7b49\u65b9\u6cd5\u3002 \u91c7\u7528\u975e\u81ea\u56de\u5f52\u5408\u6210\u65b9\u6cd5\u3002\u8f93\u5165\u5e8f\u5217\u8fdb\u6765\u4e4b\u540e\u4e00\u628a\u51fa\uff0c\u9632\u6b62\u81ea\u56de\u5f52\u751f\u6210\u5e26\u6765\u7684\u7d2f\u79ef\u8bef\u5dee\u3002 \u540e\u5904\u7406\u3002\u6bd4\u5982\u7edf\u8ba1\u97f3\u5e93\u4e2d\u5e73\u5747\u97f3\u7d20\u65f6\u957f\uff0c\u5408\u6210\u65f6\u7edf\u8ba1\u8f93\u5165\u97f3\u7d20\u4e2a\u6570\uff0c\u8ba1\u7b97\u8be5\u53e5\u5b50\"\u5e73\u5747\u65f6\u957f\"\uff0c\u5408\u6210\u8bed\u97f3\u7684\u65f6\u957f\u8d85\u8fc7\"\u5e73\u5747\u65f6\u957f\"\u768430%\u5219\u8ba4\u4e3a\u5408\u6210\u6ca1\u6709\u6b63\u5e38\u505c\u6b62\uff0c\u88c1\u526a\u8be5\u5408\u6210\u8bed\u97f3\u3002","title":"\u8bed\u97f3\u5408\u6210\u7684\u7a33\u5b9a\u6027"},{"location":"tts/%E8%AF%AD%E9%9F%B3%E5%90%88%E6%88%90%E7%9A%84%E6%80%BB%E4%BD%93%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/#_11","text":"\u8bed\u97f3\u5408\u6210\u5728\u6295\u5165\u4f7f\u7528\u65f6\uff0c\u9664\u4e86\u7eaf\u5de5\u7a0b\u7684\u4f18\u5316\u4e4b\u5916\uff0c\u6a21\u578b\u4fa7\u4e5f\u53ef\u4ee5\u8fdb\u884c\u6548\u7387\u4f18\u5316\u3002\u4e3b\u8981\u7684\u601d\u8def\u6709\uff1a \u5e76\u884c\u751f\u6210\u3002\u8be5\u65b9\u6cd5\u5bf9\u4e8e\u5229\u7528GPU\u63a8\u65ad\u7684\u4e91\u7aef\u6a21\u578b\u6548\u679c\u8f83\u597d\uff0c\u4f46\u662f\u5bf9\u4e8eCPU\u63a8\u65ad\u7684\u7aef\u4fa7\u6a21\u578b\u6548\u679c\u4e00\u822c\u3002 \u8f7b\u91cf\u5316\u6a21\u578b\u3002\u5220\u9664\u6a21\u578b\u4e2d\u4e0d\u5fc5\u8981\u7684\u6a21\u5757\uff0c\u7f29\u51cf\u7f51\u7edc\u8282\u70b9\u6570\uff0c\u8fdb\u884c\u6a21\u578b\u88c1\u526a\u3001\u91cf\u5316\u548c\u526a\u679d\u3002 \u5f15\u5165\u9886\u57df\u77e5\u8bc6\u3002\u5229\u7528\u6c89\u6dc0\u5df2\u4e45\u7684\u4fe1\u53f7\u5904\u7406\u65b9\u6cd5\u52a0\u901f\u8bed\u97f3\u5408\u6210\u8fc7\u7a0b\uff0c\u6bd4\u5982\u7ebf\u6027\u9884\u6d4b\u3001\u591a\u5b50\u5e26\u5efa\u6a21\u3001\u591a\u5e27\u5e76\u884c\u9884\u6d4b\u3001\u5c0f\u5c3a\u5ea6\u9884\u6d4b\uff08subscale prediction\uff09\u3002","title":"\u8bed\u97f3\u5408\u6210\u7684\u6548\u7387\u4f18\u5316"},{"location":"tts/%E8%AF%AD%E9%9F%B3%E5%90%88%E6%88%90%E7%9A%84%E8%AF%84%E4%BB%B7%E6%A0%87%E5%87%86%E5%92%8C%E6%96%B9%E6%B3%95/","text":"\u8bed\u97f3\u5408\u6210\u7684\u8bc4\u4ef7\u6807\u51c6\u548c\u65b9\u6cd5 \u8bed\u97f3\u5408\u6210\u8bc4\u4ef7\u6307\u6807 \u5bf9\u5408\u6210\u8bed\u97f3\u7684\u8d28\u91cf\u8bc4\u4ef7\uff0c\u4e3b\u8981\u53ef\u4ee5\u5206\u4e3a\u4e3b\u89c2\u548c\u5ba2\u89c2\u8bc4\u4ef7\u3002\u4e3b\u89c2\u8bc4\u4ef7\u662f\u901a\u8fc7\u4eba\u7c7b\u5bf9\u8bed\u97f3\u8fdb\u884c\u6253\u5206\uff0c\u6bd4\u5982\u5e73\u5747\u610f\u89c1\u5f97\u5206\uff08Mean Opinion Score\uff0cMOS\uff09\u3001\u4f17\u5305\u5e73\u5747\u610f\u89c1\u5f97\u5206\uff08CrowdMOS\uff0cCMOS\uff09\u548cABX\u6d4b\u8bd5\u3002\u5ba2\u89c2\u8bc4\u4ef7\u662f\u901a\u8fc7\u8ba1\u7b97\u673a\u81ea\u52a8\u7ed9\u51fa\u8bed\u97f3\u97f3\u8d28\u7684\u8bc4\u4f30\uff0c\u5728\u8bed\u97f3\u5408\u6210\u9886\u57df\u7814\u7a76\u7684\u6bd4\u8f83\u5c11\uff0c\u8bba\u6587\u4e2d\u5e38\u5e38\u901a\u8fc7\u5c55\u793a\u9891\u8c31\u7ec6\u8282\uff0c\u8ba1\u7b97\u6885\u5c14\u5012\u8c31\u5931\u771f\uff08Mel Cepstral Distortion\uff0cMCD\uff09\u7b49\u65b9\u6cd5\u4f5c\u4e3a\u5ba2\u89c2\u8bc4\u4ef7\u3002\u5ba2\u89c2\u8bc4\u4ef7\u8fd8\u53ef\u4ee5\u5206\u4e3a\u6709\u53c2\u8003\u548c\u65e0\u53c2\u8003\u8d28\u91cf\u8bc4\u4f30\uff0c\u8fd9\u4e24\u8005\u7684\u4e3b\u8981\u5224\u522b\u4f9d\u636e\u5728\u4e8e\u8be5\u65b9\u6cd5\u662f\u5426\u9700\u8981\u6807\u51c6\u4fe1\u53f7\u3002\u6709\u53c2\u8003\u8bc4\u4f30\u65b9\u6cd5\u9664\u4e86\u5f85\u8bc4\u6d4b\u4fe1\u53f7\uff0c\u8fd8\u9700\u8981\u4e00\u4e2a\u97f3\u8d28\u4f18\u5f02\u7684\uff0c\u53ef\u4ee5\u8ba4\u4e3a\u6ca1\u6709\u635f\u4f24\u7684\u53c2\u8003\u4fe1\u53f7\u3002\u5e38\u89c1\u7684\u6709\u53c2\u8003\u8d28\u91cf\u8bc4\u4f30\u4e3b\u8981\u6709ITU-T P.861 (MNB)\u3001ITU-T P.862 (PESQ)\u3001ITU-T P.863 (POLQA)\u3001STOI\u548cBSSEval\u3002\u65e0\u53c2\u8003\u8bc4\u4f30\u65b9\u6cd5\u5219\u4e0d\u9700\u8981\u53c2\u8003\u4fe1\u53f7\uff0c\u76f4\u63a5\u6839\u636e\u5f85\u8bc4\u4f30\u4fe1\u53f7\uff0c\u7ed9\u51fa\u8d28\u91cf\u8bc4\u5206\uff0c\u65e0\u53c2\u8003\u8bc4\u4f30\u65b9\u6cd5\u8fd8\u53ef\u4ee5\u5206\u4e3a\u57fa\u4e8e\u4fe1\u53f7\u3001\u57fa\u4e8e\u53c2\u6570\u4ee5\u53ca\u57fa\u4e8e\u6df1\u5ea6\u5b66\u4e60\u7684\u8d28\u91cf\u8bc4\u4f30\u65b9\u6cd5\u3002\u5e38\u89c1\u7684\u57fa\u4e8e\u4fe1\u53f7\u7684\u65e0\u53c2\u8003\u8d28\u91cf\u8bc4\u4f30\u5305\u62ecITU-T P.563\u548cANIQUE+\uff0c\u57fa\u4e8e\u53c2\u6570\u7684\u65b9\u6cd5\u6709ITU-T G.107(E-Model)\u3002\u8fd1\u5e74\u6765\uff0c\u6df1\u5ea6\u5b66\u4e60\u4e5f\u9010\u6b65\u5e94\u7528\u5230\u65e0\u53c2\u8003\u8d28\u91cf\u8bc4\u4f30\u4e2d\uff0c\u5982\uff1aAutoMOS\u3001QualityNet\u3001NISQA\u548cMOSNet\u3002 \u4e3b\u89c2\u8bc4\u4ef7\u4e2d\u7684MOS\u8bc4\u6d4b\u662f\u4e00\u79cd\u8f83\u4e3a\u5bbd\u6cdb\u7684\u8bf4\u6cd5\uff0c\u7531\u4e8e\u7ed9\u51fa\u8bc4\u6d4b\u5206\u6570\u7684\u4e3b\u4f53\u662f\u4eba\u7c7b\uff0c\u56e0\u6b64\u53ef\u4ee5\u7075\u6d3b\u6d4b\u8bd5\u8bed\u97f3\u7684\u4e0d\u540c\u65b9\u9762\u3002\u6bd4\u5982\u5728\u8bed\u97f3\u5408\u6210\u9886\u57df\uff0c\u4e3b\u8981\u6709\u81ea\u7136\u5ea6MOS\uff08MOS of Naturalness\uff09\u548c\u76f8\u4f3c\u5ea6MOS\uff08MOS of Similarity\uff09\u3002\u4f46\u662f\u4eba\u7c7b\u7ed9\u51fa\u7684\u8bc4\u5206\u7ed3\u679c\u53d7\u5230\u7684\u5e72\u6270\u56e0\u7d20\u8f83\u591a\uff0c\u8c37\u6b4c\u5bf9\u5408\u6210\u8bed\u97f3\u7684\u4e3b\u89c2\u8bc4\u4f30\u65b9\u6cd5\u8fdb\u884c\u4e86\u6bd4\u8f83\uff0c\u5728\u8bc4\u4f30\u8f83\u957f\u8bed\u97f3\u4e2d\u7684\u5355\u4e2a\u53e5\u5b50\u65f6\uff0c\u97f3\u9891\u6837\u672c\u7684\u5448\u73b0\u5f62\u5f0f\u4f1a\u663e\u8457\u5f71\u54cd\u53c2\u4e0e\u4eba\u5458\u7ed9\u51fa\u7684\u7ed3\u679c\u3002\u6bd4\u5982\u4ec5\u63d0\u4f9b\u5355\u4e2a\u53e5\u5b50\u800c\u4e0d\u63d0\u4f9b\u4e0a\u4e0b\u6587\uff0c\u4e0e\u76f8\u540c\u53e5\u5b50\u7ed9\u51fa\u8bed\u5883\u76f8\u6bd4\uff0c\u88ab\u6d4b\u4eba\u5458\u7ed9\u51fa\u7684\u8bc4\u5206\u5dee\u5f02\u663e\u8457\u3002\u56fd\u9645\u7535\u4fe1\u8054\u76df\uff08International Telecommunication Union\uff0cITU\uff09\u5c06MOS\u8bc4\u6d4b\u89c4\u8303\u5316\u4e3aITU-T P.800\uff0c\u5176\u4e2d\u7edd\u5bf9\u7b49\u7ea7\u8bc4\u5206\uff08Absolute Category Rating\uff0cACR\uff09\u5e94\u7528\u6700\u4e3a\u5e7f\u6cdb\uff0cACR\u7684\u8be6\u7ec6\u8bc4\u4f30\u6807\u51c6\u5982\u4e0b\u8868\u6240\u793a\u3002 \u97f3\u9891\u7ea7\u522b \u5e73\u5747\u610f\u89c1\u5f97\u5206 \u8bc4\u4ef7\u6807\u51c6 \u4f18 5.0 \u5f88\u597d\uff0c\u542c\u5f97\u6e05\u695a\uff1b\u5ef6\u8fdf\u5c0f\uff0c\u4ea4\u6d41\u6d41\u7545 \u826f 4.0 \u7a0d\u5dee\uff0c\u542c\u5f97\u6e05\u695a\uff1b\u5ef6\u8fdf\u5c0f\uff0c\u4ea4\u6d41\u6b20\u6d41\u7545\uff0c\u6709\u70b9\u6742\u97f3 \u4e2d 3.0 \u8fd8\u53ef\u4ee5\uff0c\u542c\u4e0d\u592a\u6e05\uff1b\u6709\u4e00\u5b9a\u5ef6\u8fdf\uff0c\u53ef\u4ee5\u4ea4\u6d41 \u5dee 2.0 \u52c9\u5f3a\uff0c\u542c\u4e0d\u592a\u6e05\uff1b\u5ef6\u8fdf\u8f83\u5927\uff0c\u4ea4\u6d41\u9700\u8981\u91cd\u590d\u591a\u904d \u52a3 1.0 \u6781\u5dee\uff0c\u542c\u4e0d\u61c2\uff1b\u5ef6\u8fdf\u5927\uff0c\u4ea4\u6d41\u4e0d\u901a\u7545 \u5728\u4f7f\u7528ACR\u65b9\u6cd5\u5bf9\u8bed\u97f3\u8d28\u91cf\u8fdb\u884c\u8bc4\u4ef7\u65f6\uff0c\u53c2\u4e0e\u8bc4\u6d4b\u7684\u4eba\u5458\uff08\u7b80\u79f0\u88ab\u8bd5\uff09\u5bf9\u8bed\u97f3\u6574\u4f53\u8d28\u91cf\u8fdb\u884c\u6253\u5206\uff0c\u5206\u503c\u8303\u56f4\u4e3a1 5\u5206\uff0c\u5206\u6570\u8d8a\u5927\u8868\u793a\u8bed\u97f3\u8d28\u91cf\u8d8a\u597d\u3002MOS\u5927\u4e8e4\u65f6\uff0c\u53ef\u4ee5\u8ba4\u4e3a\u8be5\u97f3\u8d28\u53d7\u5230\u5927\u90e8\u5206\u88ab\u8bd5\u7684\u8ba4\u53ef\uff0c\u97f3\u8d28\u8f83\u597d\uff1b\u82e5MOS\u4f4e\u4e8e3\uff0c\u5219\u8be5\u8bed\u97f3\u6709\u6bd4\u8f83\u5927\u7684\u7f3a\u9677\uff0c\u5927\u90e8\u5206\u88ab\u8bd5\u5e76\u4e0d\u6ee1\u610f\u8be5\u97f3\u8d28\u3002 \u5e73\u5747\u610f\u89c1\u5f97\u5206\u7684\u6d4b\u8bc4\u8981\u6c42\u4e0e\u65b9\u6cd5 \u8bed\u97f3\u5408\u6210\u7684\u6700\u7ec8\u76ee\u6807\u662f\uff0c\u5408\u6210\u8bed\u97f3\u5e94\u5c3d\u53ef\u80fd\u63a5\u8fd1\u771f\u5b9e\u53d1\u97f3\uff0c\u4ee5\u81f3\u4e8e\u4eba\u7c7b\u65e0\u6cd5\u533a\u5206\u5408\u6210\u548c\u771f\u5b9e\u8bed\u97f3\u3002\u56e0\u6b64\u8ba9\u4eba\u7c7b\u5bf9\u5408\u6210\u8bed\u97f3\u8fdb\u884c\u8bc4\u4ef7\u6253\u5206\u662f\u6700\u4e3a\u76f4\u89c2\u7684\u8bc4\u4ef7\u65b9\u6cd5\uff0c\u8bc4\u5206\u7ecf\u5904\u7406\u4e4b\u540e\u5373\u53ef\u83b7\u5f97\u5e73\u5747\u610f\u89c1\u5f97\u5206\u3002\u5e73\u5747\u610f\u89c1\u5f97\u5206\u662f\u8bed\u97f3\u5408\u6210\u7cfb\u7edf\u6700\u91cd\u8981\u7684\u6027\u80fd\u6307\u6807\u4e4b\u4e00\uff0c\u80fd\u591f\u76f4\u63a5\u53cd\u6620\u5408\u6210\u8bed\u97f3\u7684\u81ea\u7136\u5ea6\u3001\u6e05\u6670\u5ea6\u4ee5\u53ca\u53ef\u61c2\u5ea6\u3002 \u5b9e\u9a8c\u8981\u6c42 \u83b7\u53d6\u591a\u6837\u5316\u4e14\u6570\u91cf\u8db3\u591f\u5927\u7684\u97f3\u9891\u6837\u672c\uff0c\u4ee5\u786e\u4fdd\u7ed3\u679c\u5728\u7edf\u8ba1\u4e0a\u7684\u663e\u8457\uff0c\u6d4b\u8bc4\u5728\u5177\u6709\u7279\u5b9a\u58f0\u5b66\u7279\u6027\u7684\u8bbe\u5907\u4e0a\u8fdb\u884c\uff0c\u63a7\u5236\u6bcf\u4e2a\u88ab\u8bd5\u9075\u5faa\u540c\u6837\u7684\u8bc4\u4f30\u6807\u51c6\uff0c\u5e76\u4e14\u786e\u4fdd\u6bcf\u4e2a\u88ab\u8bd5\u7684\u5b9e\u9a8c\u73af\u5883\u4fdd\u6301\u4e00\u81f4\u3002 \u5b9e\u9a8c\u65b9\u6cd5 \u4e3a\u4e86\u8fbe\u5230\u5b9e\u9a8c\u8981\u6c42\uff0c\u53ef\u4ee5\u901a\u8fc7\u4e24\u79cd\u65b9\u6cd5\u83b7\u5f97\u8db3\u591f\u7cbe\u786e\u7684\u6d4b\u8bc4\u7ed3\u679c\u3002\u7b2c\u4e00\u79cd\u662f\u5b9e\u9a8c\u5ba4\u65b9\u5f0f\uff0c\u8be5\u65b9\u5f0f\u8ba9\u88ab\u8bd5\u5728\u5b9e\u9a8c\u5ba4\u73af\u5883\u4e2d\u8fdb\u884c\u6d4b\u8bc4\uff0c\u5728\u8bd5\u542c\u8fc7\u7a0b\u4e2d\u73af\u5883\u566a\u97f3\u5fc5\u987b\u4f4e\u4e8e35dB\uff0c\u6d4b\u8bd5\u8bed\u97f3\u6570\u91cf\u81f3\u5c11\u4fdd\u630130\u4e2a\u4ee5\u4e0a\uff0c\u4e14\u8986\u76d6\u8be5\u8bed\u79cd\u6240\u6709\u97f3\u7d20\u548c\u97f3\u7d20\u7ec4\u5408\uff0c\u53c2\u4e0e\u8bc4\u6d4b\u7684\u88ab\u8bd5\u5e94\u5c3d\u53ef\u80fd\u719f\u7ec3\u638c\u63e1\u5f85\u6d4b\u5408\u6210\u8bed\u97f3\u7684\u8bed\u79cd\uff0c\u6700\u597d\u4ee5\u5408\u6210\u8bed\u97f3\u7684\u8bed\u79cd\u4e3a\u6bcd\u8bed\u3002\u8be5\u65b9\u6cd5\u7684\u4f18\u70b9\u662f\u6d4b\u8bd5\u8981\u7d20\u5bb9\u6613\u63a7\u5236\uff0c\u80fd\u591f\u7a33\u5b9a\u4fdd\u8bc1\u5b9e\u9a8c\u73af\u5883\u8fbe\u5230\u6d4b\u8bc4\u8981\u6c42\uff1b\u7f3a\u70b9\u5219\u4e3b\u8981\u662f\u9700\u8981\u88ab\u8bd5\u5728\u56fa\u5b9a\u573a\u6240\u5b8c\u6210\u8bd5\u542c\uff0c\u4eba\u529b\u6210\u672c\u9ad8\u3002\u7b2c\u4e8c\u79cd\u662f\u4f17\u5305\uff0c\u4e5f\u5c31\u662f\u5c06\u4efb\u52a1\u53d1\u5e03\u5230\u7f51\u7edc\u4e0a\uff0c\u8ba9\u5177\u6709\u6761\u4ef6\u7684\u88ab\u8bd5\u5728\u4efb\u4f55\u5730\u65b9\u8fdb\u884c\u6d4b\u8bc4\u3002\u8be5\u65b9\u6cd5\u4e3b\u8981\u4f18\u70b9\u662f\u6613\u4e8e\u83b7\u5f97\u8f83\u4e3a\u6709\u6548\u7684\u8bc4\u4f30\u7ed3\u679c\uff1b\u800c\u7f3a\u70b9\u5219\u4f53\u73b0\u5728\u65e0\u6cd5\u786e\u4fdd\u8bd5\u542c\u6761\u4ef6\u3002 \u5b9e\u9a8c\u6b65\u9aa4 \u6536\u96c6\u5408\u6210\u8bed\u97f3\u548c\u5f55\u5236\u7684\u771f\u5b9e\u8bed\u97f3\uff1b \u786e\u4fdd\u6587\u672c\u548c\u8bed\u97f3\u4e00\u4e00\u5bf9\u5e94\uff0c\u53bb\u9664\u53d1\u97f3\u660e\u663e\u9519\u8bef\u7684\u97f3\u9891\u6837\u672c\uff1b \u751f\u6210\u95ee\u5377\uff0c\u5c06\u5408\u6210\u8bed\u97f3\u548c\u771f\u5b9e\u8bed\u97f3\u4ea4\u53c9\u6253\u4e71\uff0c\u786e\u4fdd\u6253\u4e71\u7684\u987a\u5e8f\u6ca1\u6709\u89c4\u5f8b\uff0c\u5408\u6210\u8bed\u97f3\u548c\u771f\u5b9e\u8bed\u97f3\u4e0d\u53ef\u8ba9\u88ab\u8bd5\u63d0\u524d\u63a2\u77e5\u5230\uff1b \u5f00\u59cb\u4efb\u52a1\u524d\uff0c\u88ab\u8bd5\u8bd5\u542c\u793a\u4f8b\u8bed\u97f3\uff0c\u5e76\u544a\u77e5\u5176\u5bf9\u5e94\u7684\u5927\u81f4\u5f97\u5206\uff1b \u88ab\u8bd5\u5f00\u59cb\u5bf9\u7ed9\u5b9a\u97f3\u9891\u6253\u5206\uff0c\u524d\u4e09\u6761\u8bed\u97f3\u53ef\u4ee5\u4f5c\u4e3a\u88ab\u8bd5\u8fdb\u5165\u5e73\u7a33\u6253\u5206\u72b6\u6001\u7684\u94fa\u57ab\uff0c\u4e0d\u8ba1\u5165\u6700\u7ec8\u7ed3\u679c\uff1b \u56de\u6536\u95ee\u5377\uff0c\u820d\u5f03\u6709\u660e\u663e\u504f\u5dee\u7684\u8bc4\u4ef7\u6570\u636e\uff0c\u7edf\u8ba1\u6700\u7ec8\u5f97\u5206\u3002 \u5b9e\u9a8c\u8bbe\u8ba1 \u51c6\u5907\u6d4b\u8bd5\u8bed\u97f3\u6570\u636e\u3002(1)\u4ece\u5404\u9886\u57df\u548c\u8bed\u97f3\u5408\u6210\u7cfb\u7edf\u5b9e\u9645\u5e94\u7528\u573a\u666f\u4e2d\uff0c\u6458\u9009\u5e38\u89c4\u6587\u672c\u4f5c\u4e3a\u6d4b\u8bd5\u8bed\u6599\uff0c\u9009\u53d6\u7684\u8bed\u53e5\u4e00\u822c\u5c3d\u53ef\u80fd\u6392\u9664\u751f\u50fb\u5b57\uff1b(2)\u7528\u4e8e\u6d4b\u8bd5\u7684\u53e5\u5b50\u4e00\u822c\u662f\u672a\u51fa\u73b0\u5728\u8bad\u7ec3\u96c6\u4e2d\u7684\uff1b(3) \u88ab\u8bd5\u5fc5\u987b\u4f7f\u7528\u8033\u673a\u8bd5\u542c\u8bed\u97f3\uff0c\u4ee5\u4fbf\u4e8e\u5224\u65ad\u66f4\u4e3a\u7ec6\u5fae\u7684\u5dee\u522b\uff1b(4)\u4e3a\u4e86\u907f\u514d\u88ab\u8bd5\u7684\u75b2\u60eb\uff0c\u5f85\u6d4b\u8bc4\u7cfb\u7edf\u548c\u8bed\u6599\u6570\u91cf\u4e0d\u53ef\u592a\u591a\uff0c\u9700\u8981\u63a7\u5236\u6d4b\u8bc4\u65f6\u95f4\uff1b(5)\u4e00\u4e2a\u53e5\u5b50\u9700\u8981\u7531\u591a\u4e2a\u88ab\u8bd5\u6253\u5206\u3002 \u8bbe\u7f6e\u5b9e\u9a8c\u53c2\u6570\u3002\u5728\u51c6\u5907\u6d4b\u8bd5\u8bed\u97f3\u65f6\uff0c\u9700\u8981\u63d0\u524d\u8bbe\u7f6e\u597d\u8bad\u7ec3\u8bed\u6599\u3001\u5f85\u6d4b\u7cfb\u7edf\u3001\u53c2\u4e0e\u6d4b\u8bd5\u7684\u53e5\u5b50\u6570\u91cf\u3001\u6bcf\u4e2a\u53e5\u5b50\u88ab\u8bd5\u542c\u7684\u6b21\u6570\u7b49\u3002\u4ee5\u4e2d\u6587\u8bed\u97f3\u5408\u6210\u7cfb\u7edf\u7684\u8bed\u97f3\u8bc4\u4f30\u4e3a\u4f8b\uff0c\u6d4b\u8bc4\u8bbe\u7f6e\u5982\u4e0b\u8868\u6240\u793a\u3002 \u8bad\u7ec3\u96c6 \u5f85\u6d4b\u7cfb\u7edf \u53e5\u5b50\u6570\u91cf \u6bcf\u4e2a\u53e5\u5b50\u88ab\u6d4b\u6b21\u6570 \u5185\u90e8\u6570\u636e\u96c6 \u771f\u5b9e\u8bed\u97f3 40 12 \u5185\u90e8\u6570\u636e\u96c6 Tacotron-2 40 12 \u5185\u90e8\u6570\u636e\u96c6 FastSpeech-2 40 12 \u51c6\u5907HTML\u6587\u6863\u7b49\u5c55\u793a\u6750\u6599\uff0c\u5411\u88ab\u8bd5\u4ecb\u7ecd\u8be5\u6d4b\u8bd5\u3002\u8be5HTML\u6587\u6863\u81f3\u5c11\u5305\u62ec\uff1a(1)\u6d4b\u8bd5\u6ce8\u610f\u4e8b\u9879\uff0c\u5982\u88ab\u8bd5\u5e94\u8be5\u4f7f\u7528\u4f55\u79cd\u8bbe\u5907\uff0c\u5728\u4f55\u79cd\u73af\u5883\u4e0b\u8bd5\u542c\uff0c\u8bd5\u542c\u65f6\u5e94\u8be5\u6392\u9664\u7684\u5e72\u6270\u56e0\u7d20\u7b49\uff1b(2)\u6d4b\u8bd5\u4efb\u52a1\uff0c\u5411\u88ab\u8bd5\u4ecb\u7ecd\u672c\u6b21\u8bd5\u542c\u7684\u6d4b\u8bd5\u76ee\u6807\uff0c\u5e94\u5173\u6ce8\u7684\u4fa7\u91cd\u70b9\uff0c\u5982\uff1a\u53ef\u61c2\u5ea6\u3001\u76f8\u4f3c\u5ea6\u3001\u6e05\u6670\u5ea6\u7b49\u65b9\u9762\uff1b(3)\u53c2\u8003\u97f3\u9891\uff0c\u53ef\u4ee5\u653e\u7f6e\u4e00\u4e9b\u793a\u4f8b\u97f3\u9891\uff0c\u5982MOS=5\u7684\u4f18\u8d28\u8bed\u97f3\uff0cMOS=1\u7684\u4f4e\u52a3\u97f3\u9891\uff0c\u4ee5\u4fbf\u88ab\u8bd5\u66f4\u597d\u5730\u5bf9\u97f3\u9891\u6253\u5206\uff1b(4) \u6d4b\u8bd5\u97f3\u9891\uff0c\u6839\u636e\u4e0d\u540c\u4efb\u52a1\uff0c\u653e\u7f6e\u5408\u7406\u7684\u6d4b\u8bd5\u97f3\u9891\uff0c\u771f\u5b9e\u548c\u5408\u6210\u97f3\u9891\u5e94\u63d0\u524d\u6253\u4e71\uff0c\u5e76\u4e14\u4e0d\u53ef\u544a\u77e5\u88ab\u8bd5\u6253\u4e71\u7684\u987a\u5e8f\u3002 \u5b9e\u9a8c\u6570\u636e\u5904\u7406 \u6570\u636e\u7b5b\u9009\u3002\u7531\u4e8e\u88ab\u8bd5\u6709\u53ef\u80fd\u6ca1\u6709\u53d7\u5230\u76d1\u7763\uff0c\u56e0\u6b64\u9700\u8981\u5bf9\u6536\u96c6\u5230\u7684\u8bc4\u5206\u8fdb\u884c\u4e8b\u540e\u68c0\u67e5\uff0c\u5982\u5220\u9664\u4f7f\u7528\u626c\u58f0\u5668\u8bd5\u542c\u7684\u8bc4\u5206\u3002\u53e6\u5916\uff0c\u4e3a\u4e86\u63a7\u5236\u4e2a\u4f53\u56e0\u7d20\u5bf9\u6574\u4f53\u7ed3\u679c\u7684\u5f71\u54cd\uff0c\u51cf\u5c11\u504f\u79bb\u6574\u4f53\u6570\u636e\u7684\u5f02\u5e38\u503c\uff0c\u9700\u8981\u8ba1\u7b97\u6bcf\u4e2a\u4eba\u7684\u8bc4\u5206\u4e0e\u603b\u4f53\u5f97\u5206\u5e8f\u5217\u7684\u76f8\u5173\u6027\uff0c\u76f8\u5173\u6027\u7684\u5ea6\u91cf\u4f7f\u7528\u76f8\u5173\u7cfb\u6570\u6765\u5b9e\u73b0\uff0c\u5982\u679c\u76f8\u5173\u7cfb\u6570r\u5927\u4e8e0.25\uff0c\u5219\u4fdd\u7559\uff1b\u5426\u5219\u62d2\u7edd\u8be5\u88ab\u8bd5\u7684\u6240\u6709\u8bc4\u5206\u3002\u76f8\u5173\u7cfb\u6570r\u7684\u8ba1\u7b97\u65b9\u6cd5\u5982\u4e0b\uff1a \\[ r=\\frac{\\mathop{cov}(\\mu_{1n},...,\\mu_{Mn};\\mu_1,...,\\mu_M)}{\\sqrt{\\mathop{var}(\\mu_{1n},...,\\mu_{Mn})}\\cdot \\sqrt{\\mathop{var}(\\mu_1,...,\\mu_M)}} \\] \u5176\u4e2d\uff0c \\(M\\) \u4e3a\u53e5\u5b50\u6570\u91cf\uff0c \\(N\\) \u4e3a\u88ab\u8bd5\u6570\u91cf\uff0c \\(\\mu_{mn}\\) \u4e3a\u88ab\u8bd5 \\(n\\) \u5bf9\u53e5\u5b50 \\(m\\) \u7ed9\u51fa\u7684\u8bc4\u5206\uff0c \\(1\\leq m\\leq M\\) , \\(1\\leq n\\leq N\\) , \\(\\mu_m=1/N\\sum_{n=1}^N\\mu_{mn}\\) \u4e3a\u53e5\u5b50 \\(m\\) \u7684\u603b\u4f53\u5e73\u5747\u5206\uff0c \\(\\mathop{cov}\\) \u4e3a\u534f\u65b9\u5dee\uff0c \\(\\mathop{var}\\) \u4e3a\u65b9\u5dee\u3002","title":"\u8bed\u97f3\u5408\u6210\u7684\u8bc4\u4ef7\u6807\u51c6\u548c\u65b9\u6cd5"},{"location":"tts/%E8%AF%AD%E9%9F%B3%E5%90%88%E6%88%90%E7%9A%84%E8%AF%84%E4%BB%B7%E6%A0%87%E5%87%86%E5%92%8C%E6%96%B9%E6%B3%95/#_1","text":"","title":"\u8bed\u97f3\u5408\u6210\u7684\u8bc4\u4ef7\u6807\u51c6\u548c\u65b9\u6cd5"},{"location":"tts/%E8%AF%AD%E9%9F%B3%E5%90%88%E6%88%90%E7%9A%84%E8%AF%84%E4%BB%B7%E6%A0%87%E5%87%86%E5%92%8C%E6%96%B9%E6%B3%95/#_2","text":"\u5bf9\u5408\u6210\u8bed\u97f3\u7684\u8d28\u91cf\u8bc4\u4ef7\uff0c\u4e3b\u8981\u53ef\u4ee5\u5206\u4e3a\u4e3b\u89c2\u548c\u5ba2\u89c2\u8bc4\u4ef7\u3002\u4e3b\u89c2\u8bc4\u4ef7\u662f\u901a\u8fc7\u4eba\u7c7b\u5bf9\u8bed\u97f3\u8fdb\u884c\u6253\u5206\uff0c\u6bd4\u5982\u5e73\u5747\u610f\u89c1\u5f97\u5206\uff08Mean Opinion Score\uff0cMOS\uff09\u3001\u4f17\u5305\u5e73\u5747\u610f\u89c1\u5f97\u5206\uff08CrowdMOS\uff0cCMOS\uff09\u548cABX\u6d4b\u8bd5\u3002\u5ba2\u89c2\u8bc4\u4ef7\u662f\u901a\u8fc7\u8ba1\u7b97\u673a\u81ea\u52a8\u7ed9\u51fa\u8bed\u97f3\u97f3\u8d28\u7684\u8bc4\u4f30\uff0c\u5728\u8bed\u97f3\u5408\u6210\u9886\u57df\u7814\u7a76\u7684\u6bd4\u8f83\u5c11\uff0c\u8bba\u6587\u4e2d\u5e38\u5e38\u901a\u8fc7\u5c55\u793a\u9891\u8c31\u7ec6\u8282\uff0c\u8ba1\u7b97\u6885\u5c14\u5012\u8c31\u5931\u771f\uff08Mel Cepstral Distortion\uff0cMCD\uff09\u7b49\u65b9\u6cd5\u4f5c\u4e3a\u5ba2\u89c2\u8bc4\u4ef7\u3002\u5ba2\u89c2\u8bc4\u4ef7\u8fd8\u53ef\u4ee5\u5206\u4e3a\u6709\u53c2\u8003\u548c\u65e0\u53c2\u8003\u8d28\u91cf\u8bc4\u4f30\uff0c\u8fd9\u4e24\u8005\u7684\u4e3b\u8981\u5224\u522b\u4f9d\u636e\u5728\u4e8e\u8be5\u65b9\u6cd5\u662f\u5426\u9700\u8981\u6807\u51c6\u4fe1\u53f7\u3002\u6709\u53c2\u8003\u8bc4\u4f30\u65b9\u6cd5\u9664\u4e86\u5f85\u8bc4\u6d4b\u4fe1\u53f7\uff0c\u8fd8\u9700\u8981\u4e00\u4e2a\u97f3\u8d28\u4f18\u5f02\u7684\uff0c\u53ef\u4ee5\u8ba4\u4e3a\u6ca1\u6709\u635f\u4f24\u7684\u53c2\u8003\u4fe1\u53f7\u3002\u5e38\u89c1\u7684\u6709\u53c2\u8003\u8d28\u91cf\u8bc4\u4f30\u4e3b\u8981\u6709ITU-T P.861 (MNB)\u3001ITU-T P.862 (PESQ)\u3001ITU-T P.863 (POLQA)\u3001STOI\u548cBSSEval\u3002\u65e0\u53c2\u8003\u8bc4\u4f30\u65b9\u6cd5\u5219\u4e0d\u9700\u8981\u53c2\u8003\u4fe1\u53f7\uff0c\u76f4\u63a5\u6839\u636e\u5f85\u8bc4\u4f30\u4fe1\u53f7\uff0c\u7ed9\u51fa\u8d28\u91cf\u8bc4\u5206\uff0c\u65e0\u53c2\u8003\u8bc4\u4f30\u65b9\u6cd5\u8fd8\u53ef\u4ee5\u5206\u4e3a\u57fa\u4e8e\u4fe1\u53f7\u3001\u57fa\u4e8e\u53c2\u6570\u4ee5\u53ca\u57fa\u4e8e\u6df1\u5ea6\u5b66\u4e60\u7684\u8d28\u91cf\u8bc4\u4f30\u65b9\u6cd5\u3002\u5e38\u89c1\u7684\u57fa\u4e8e\u4fe1\u53f7\u7684\u65e0\u53c2\u8003\u8d28\u91cf\u8bc4\u4f30\u5305\u62ecITU-T P.563\u548cANIQUE+\uff0c\u57fa\u4e8e\u53c2\u6570\u7684\u65b9\u6cd5\u6709ITU-T G.107(E-Model)\u3002\u8fd1\u5e74\u6765\uff0c\u6df1\u5ea6\u5b66\u4e60\u4e5f\u9010\u6b65\u5e94\u7528\u5230\u65e0\u53c2\u8003\u8d28\u91cf\u8bc4\u4f30\u4e2d\uff0c\u5982\uff1aAutoMOS\u3001QualityNet\u3001NISQA\u548cMOSNet\u3002 \u4e3b\u89c2\u8bc4\u4ef7\u4e2d\u7684MOS\u8bc4\u6d4b\u662f\u4e00\u79cd\u8f83\u4e3a\u5bbd\u6cdb\u7684\u8bf4\u6cd5\uff0c\u7531\u4e8e\u7ed9\u51fa\u8bc4\u6d4b\u5206\u6570\u7684\u4e3b\u4f53\u662f\u4eba\u7c7b\uff0c\u56e0\u6b64\u53ef\u4ee5\u7075\u6d3b\u6d4b\u8bd5\u8bed\u97f3\u7684\u4e0d\u540c\u65b9\u9762\u3002\u6bd4\u5982\u5728\u8bed\u97f3\u5408\u6210\u9886\u57df\uff0c\u4e3b\u8981\u6709\u81ea\u7136\u5ea6MOS\uff08MOS of Naturalness\uff09\u548c\u76f8\u4f3c\u5ea6MOS\uff08MOS of Similarity\uff09\u3002\u4f46\u662f\u4eba\u7c7b\u7ed9\u51fa\u7684\u8bc4\u5206\u7ed3\u679c\u53d7\u5230\u7684\u5e72\u6270\u56e0\u7d20\u8f83\u591a\uff0c\u8c37\u6b4c\u5bf9\u5408\u6210\u8bed\u97f3\u7684\u4e3b\u89c2\u8bc4\u4f30\u65b9\u6cd5\u8fdb\u884c\u4e86\u6bd4\u8f83\uff0c\u5728\u8bc4\u4f30\u8f83\u957f\u8bed\u97f3\u4e2d\u7684\u5355\u4e2a\u53e5\u5b50\u65f6\uff0c\u97f3\u9891\u6837\u672c\u7684\u5448\u73b0\u5f62\u5f0f\u4f1a\u663e\u8457\u5f71\u54cd\u53c2\u4e0e\u4eba\u5458\u7ed9\u51fa\u7684\u7ed3\u679c\u3002\u6bd4\u5982\u4ec5\u63d0\u4f9b\u5355\u4e2a\u53e5\u5b50\u800c\u4e0d\u63d0\u4f9b\u4e0a\u4e0b\u6587\uff0c\u4e0e\u76f8\u540c\u53e5\u5b50\u7ed9\u51fa\u8bed\u5883\u76f8\u6bd4\uff0c\u88ab\u6d4b\u4eba\u5458\u7ed9\u51fa\u7684\u8bc4\u5206\u5dee\u5f02\u663e\u8457\u3002\u56fd\u9645\u7535\u4fe1\u8054\u76df\uff08International Telecommunication Union\uff0cITU\uff09\u5c06MOS\u8bc4\u6d4b\u89c4\u8303\u5316\u4e3aITU-T P.800\uff0c\u5176\u4e2d\u7edd\u5bf9\u7b49\u7ea7\u8bc4\u5206\uff08Absolute Category Rating\uff0cACR\uff09\u5e94\u7528\u6700\u4e3a\u5e7f\u6cdb\uff0cACR\u7684\u8be6\u7ec6\u8bc4\u4f30\u6807\u51c6\u5982\u4e0b\u8868\u6240\u793a\u3002 \u97f3\u9891\u7ea7\u522b \u5e73\u5747\u610f\u89c1\u5f97\u5206 \u8bc4\u4ef7\u6807\u51c6 \u4f18 5.0 \u5f88\u597d\uff0c\u542c\u5f97\u6e05\u695a\uff1b\u5ef6\u8fdf\u5c0f\uff0c\u4ea4\u6d41\u6d41\u7545 \u826f 4.0 \u7a0d\u5dee\uff0c\u542c\u5f97\u6e05\u695a\uff1b\u5ef6\u8fdf\u5c0f\uff0c\u4ea4\u6d41\u6b20\u6d41\u7545\uff0c\u6709\u70b9\u6742\u97f3 \u4e2d 3.0 \u8fd8\u53ef\u4ee5\uff0c\u542c\u4e0d\u592a\u6e05\uff1b\u6709\u4e00\u5b9a\u5ef6\u8fdf\uff0c\u53ef\u4ee5\u4ea4\u6d41 \u5dee 2.0 \u52c9\u5f3a\uff0c\u542c\u4e0d\u592a\u6e05\uff1b\u5ef6\u8fdf\u8f83\u5927\uff0c\u4ea4\u6d41\u9700\u8981\u91cd\u590d\u591a\u904d \u52a3 1.0 \u6781\u5dee\uff0c\u542c\u4e0d\u61c2\uff1b\u5ef6\u8fdf\u5927\uff0c\u4ea4\u6d41\u4e0d\u901a\u7545 \u5728\u4f7f\u7528ACR\u65b9\u6cd5\u5bf9\u8bed\u97f3\u8d28\u91cf\u8fdb\u884c\u8bc4\u4ef7\u65f6\uff0c\u53c2\u4e0e\u8bc4\u6d4b\u7684\u4eba\u5458\uff08\u7b80\u79f0\u88ab\u8bd5\uff09\u5bf9\u8bed\u97f3\u6574\u4f53\u8d28\u91cf\u8fdb\u884c\u6253\u5206\uff0c\u5206\u503c\u8303\u56f4\u4e3a1 5\u5206\uff0c\u5206\u6570\u8d8a\u5927\u8868\u793a\u8bed\u97f3\u8d28\u91cf\u8d8a\u597d\u3002MOS\u5927\u4e8e4\u65f6\uff0c\u53ef\u4ee5\u8ba4\u4e3a\u8be5\u97f3\u8d28\u53d7\u5230\u5927\u90e8\u5206\u88ab\u8bd5\u7684\u8ba4\u53ef\uff0c\u97f3\u8d28\u8f83\u597d\uff1b\u82e5MOS\u4f4e\u4e8e3\uff0c\u5219\u8be5\u8bed\u97f3\u6709\u6bd4\u8f83\u5927\u7684\u7f3a\u9677\uff0c\u5927\u90e8\u5206\u88ab\u8bd5\u5e76\u4e0d\u6ee1\u610f\u8be5\u97f3\u8d28\u3002","title":"\u8bed\u97f3\u5408\u6210\u8bc4\u4ef7\u6307\u6807"},{"location":"tts/%E8%AF%AD%E9%9F%B3%E5%90%88%E6%88%90%E7%9A%84%E8%AF%84%E4%BB%B7%E6%A0%87%E5%87%86%E5%92%8C%E6%96%B9%E6%B3%95/#_3","text":"\u8bed\u97f3\u5408\u6210\u7684\u6700\u7ec8\u76ee\u6807\u662f\uff0c\u5408\u6210\u8bed\u97f3\u5e94\u5c3d\u53ef\u80fd\u63a5\u8fd1\u771f\u5b9e\u53d1\u97f3\uff0c\u4ee5\u81f3\u4e8e\u4eba\u7c7b\u65e0\u6cd5\u533a\u5206\u5408\u6210\u548c\u771f\u5b9e\u8bed\u97f3\u3002\u56e0\u6b64\u8ba9\u4eba\u7c7b\u5bf9\u5408\u6210\u8bed\u97f3\u8fdb\u884c\u8bc4\u4ef7\u6253\u5206\u662f\u6700\u4e3a\u76f4\u89c2\u7684\u8bc4\u4ef7\u65b9\u6cd5\uff0c\u8bc4\u5206\u7ecf\u5904\u7406\u4e4b\u540e\u5373\u53ef\u83b7\u5f97\u5e73\u5747\u610f\u89c1\u5f97\u5206\u3002\u5e73\u5747\u610f\u89c1\u5f97\u5206\u662f\u8bed\u97f3\u5408\u6210\u7cfb\u7edf\u6700\u91cd\u8981\u7684\u6027\u80fd\u6307\u6807\u4e4b\u4e00\uff0c\u80fd\u591f\u76f4\u63a5\u53cd\u6620\u5408\u6210\u8bed\u97f3\u7684\u81ea\u7136\u5ea6\u3001\u6e05\u6670\u5ea6\u4ee5\u53ca\u53ef\u61c2\u5ea6\u3002","title":"\u5e73\u5747\u610f\u89c1\u5f97\u5206\u7684\u6d4b\u8bc4\u8981\u6c42\u4e0e\u65b9\u6cd5"},{"location":"tts/%E8%AF%AD%E9%9F%B3%E5%90%88%E6%88%90%E7%9A%84%E8%AF%84%E4%BB%B7%E6%A0%87%E5%87%86%E5%92%8C%E6%96%B9%E6%B3%95/#_4","text":"\u83b7\u53d6\u591a\u6837\u5316\u4e14\u6570\u91cf\u8db3\u591f\u5927\u7684\u97f3\u9891\u6837\u672c\uff0c\u4ee5\u786e\u4fdd\u7ed3\u679c\u5728\u7edf\u8ba1\u4e0a\u7684\u663e\u8457\uff0c\u6d4b\u8bc4\u5728\u5177\u6709\u7279\u5b9a\u58f0\u5b66\u7279\u6027\u7684\u8bbe\u5907\u4e0a\u8fdb\u884c\uff0c\u63a7\u5236\u6bcf\u4e2a\u88ab\u8bd5\u9075\u5faa\u540c\u6837\u7684\u8bc4\u4f30\u6807\u51c6\uff0c\u5e76\u4e14\u786e\u4fdd\u6bcf\u4e2a\u88ab\u8bd5\u7684\u5b9e\u9a8c\u73af\u5883\u4fdd\u6301\u4e00\u81f4\u3002","title":"\u5b9e\u9a8c\u8981\u6c42"},{"location":"tts/%E8%AF%AD%E9%9F%B3%E5%90%88%E6%88%90%E7%9A%84%E8%AF%84%E4%BB%B7%E6%A0%87%E5%87%86%E5%92%8C%E6%96%B9%E6%B3%95/#_5","text":"\u4e3a\u4e86\u8fbe\u5230\u5b9e\u9a8c\u8981\u6c42\uff0c\u53ef\u4ee5\u901a\u8fc7\u4e24\u79cd\u65b9\u6cd5\u83b7\u5f97\u8db3\u591f\u7cbe\u786e\u7684\u6d4b\u8bc4\u7ed3\u679c\u3002\u7b2c\u4e00\u79cd\u662f\u5b9e\u9a8c\u5ba4\u65b9\u5f0f\uff0c\u8be5\u65b9\u5f0f\u8ba9\u88ab\u8bd5\u5728\u5b9e\u9a8c\u5ba4\u73af\u5883\u4e2d\u8fdb\u884c\u6d4b\u8bc4\uff0c\u5728\u8bd5\u542c\u8fc7\u7a0b\u4e2d\u73af\u5883\u566a\u97f3\u5fc5\u987b\u4f4e\u4e8e35dB\uff0c\u6d4b\u8bd5\u8bed\u97f3\u6570\u91cf\u81f3\u5c11\u4fdd\u630130\u4e2a\u4ee5\u4e0a\uff0c\u4e14\u8986\u76d6\u8be5\u8bed\u79cd\u6240\u6709\u97f3\u7d20\u548c\u97f3\u7d20\u7ec4\u5408\uff0c\u53c2\u4e0e\u8bc4\u6d4b\u7684\u88ab\u8bd5\u5e94\u5c3d\u53ef\u80fd\u719f\u7ec3\u638c\u63e1\u5f85\u6d4b\u5408\u6210\u8bed\u97f3\u7684\u8bed\u79cd\uff0c\u6700\u597d\u4ee5\u5408\u6210\u8bed\u97f3\u7684\u8bed\u79cd\u4e3a\u6bcd\u8bed\u3002\u8be5\u65b9\u6cd5\u7684\u4f18\u70b9\u662f\u6d4b\u8bd5\u8981\u7d20\u5bb9\u6613\u63a7\u5236\uff0c\u80fd\u591f\u7a33\u5b9a\u4fdd\u8bc1\u5b9e\u9a8c\u73af\u5883\u8fbe\u5230\u6d4b\u8bc4\u8981\u6c42\uff1b\u7f3a\u70b9\u5219\u4e3b\u8981\u662f\u9700\u8981\u88ab\u8bd5\u5728\u56fa\u5b9a\u573a\u6240\u5b8c\u6210\u8bd5\u542c\uff0c\u4eba\u529b\u6210\u672c\u9ad8\u3002\u7b2c\u4e8c\u79cd\u662f\u4f17\u5305\uff0c\u4e5f\u5c31\u662f\u5c06\u4efb\u52a1\u53d1\u5e03\u5230\u7f51\u7edc\u4e0a\uff0c\u8ba9\u5177\u6709\u6761\u4ef6\u7684\u88ab\u8bd5\u5728\u4efb\u4f55\u5730\u65b9\u8fdb\u884c\u6d4b\u8bc4\u3002\u8be5\u65b9\u6cd5\u4e3b\u8981\u4f18\u70b9\u662f\u6613\u4e8e\u83b7\u5f97\u8f83\u4e3a\u6709\u6548\u7684\u8bc4\u4f30\u7ed3\u679c\uff1b\u800c\u7f3a\u70b9\u5219\u4f53\u73b0\u5728\u65e0\u6cd5\u786e\u4fdd\u8bd5\u542c\u6761\u4ef6\u3002","title":"\u5b9e\u9a8c\u65b9\u6cd5"},{"location":"tts/%E8%AF%AD%E9%9F%B3%E5%90%88%E6%88%90%E7%9A%84%E8%AF%84%E4%BB%B7%E6%A0%87%E5%87%86%E5%92%8C%E6%96%B9%E6%B3%95/#_6","text":"\u6536\u96c6\u5408\u6210\u8bed\u97f3\u548c\u5f55\u5236\u7684\u771f\u5b9e\u8bed\u97f3\uff1b \u786e\u4fdd\u6587\u672c\u548c\u8bed\u97f3\u4e00\u4e00\u5bf9\u5e94\uff0c\u53bb\u9664\u53d1\u97f3\u660e\u663e\u9519\u8bef\u7684\u97f3\u9891\u6837\u672c\uff1b \u751f\u6210\u95ee\u5377\uff0c\u5c06\u5408\u6210\u8bed\u97f3\u548c\u771f\u5b9e\u8bed\u97f3\u4ea4\u53c9\u6253\u4e71\uff0c\u786e\u4fdd\u6253\u4e71\u7684\u987a\u5e8f\u6ca1\u6709\u89c4\u5f8b\uff0c\u5408\u6210\u8bed\u97f3\u548c\u771f\u5b9e\u8bed\u97f3\u4e0d\u53ef\u8ba9\u88ab\u8bd5\u63d0\u524d\u63a2\u77e5\u5230\uff1b \u5f00\u59cb\u4efb\u52a1\u524d\uff0c\u88ab\u8bd5\u8bd5\u542c\u793a\u4f8b\u8bed\u97f3\uff0c\u5e76\u544a\u77e5\u5176\u5bf9\u5e94\u7684\u5927\u81f4\u5f97\u5206\uff1b \u88ab\u8bd5\u5f00\u59cb\u5bf9\u7ed9\u5b9a\u97f3\u9891\u6253\u5206\uff0c\u524d\u4e09\u6761\u8bed\u97f3\u53ef\u4ee5\u4f5c\u4e3a\u88ab\u8bd5\u8fdb\u5165\u5e73\u7a33\u6253\u5206\u72b6\u6001\u7684\u94fa\u57ab\uff0c\u4e0d\u8ba1\u5165\u6700\u7ec8\u7ed3\u679c\uff1b \u56de\u6536\u95ee\u5377\uff0c\u820d\u5f03\u6709\u660e\u663e\u504f\u5dee\u7684\u8bc4\u4ef7\u6570\u636e\uff0c\u7edf\u8ba1\u6700\u7ec8\u5f97\u5206\u3002","title":"\u5b9e\u9a8c\u6b65\u9aa4"},{"location":"tts/%E8%AF%AD%E9%9F%B3%E5%90%88%E6%88%90%E7%9A%84%E8%AF%84%E4%BB%B7%E6%A0%87%E5%87%86%E5%92%8C%E6%96%B9%E6%B3%95/#_7","text":"\u51c6\u5907\u6d4b\u8bd5\u8bed\u97f3\u6570\u636e\u3002(1)\u4ece\u5404\u9886\u57df\u548c\u8bed\u97f3\u5408\u6210\u7cfb\u7edf\u5b9e\u9645\u5e94\u7528\u573a\u666f\u4e2d\uff0c\u6458\u9009\u5e38\u89c4\u6587\u672c\u4f5c\u4e3a\u6d4b\u8bd5\u8bed\u6599\uff0c\u9009\u53d6\u7684\u8bed\u53e5\u4e00\u822c\u5c3d\u53ef\u80fd\u6392\u9664\u751f\u50fb\u5b57\uff1b(2)\u7528\u4e8e\u6d4b\u8bd5\u7684\u53e5\u5b50\u4e00\u822c\u662f\u672a\u51fa\u73b0\u5728\u8bad\u7ec3\u96c6\u4e2d\u7684\uff1b(3) \u88ab\u8bd5\u5fc5\u987b\u4f7f\u7528\u8033\u673a\u8bd5\u542c\u8bed\u97f3\uff0c\u4ee5\u4fbf\u4e8e\u5224\u65ad\u66f4\u4e3a\u7ec6\u5fae\u7684\u5dee\u522b\uff1b(4)\u4e3a\u4e86\u907f\u514d\u88ab\u8bd5\u7684\u75b2\u60eb\uff0c\u5f85\u6d4b\u8bc4\u7cfb\u7edf\u548c\u8bed\u6599\u6570\u91cf\u4e0d\u53ef\u592a\u591a\uff0c\u9700\u8981\u63a7\u5236\u6d4b\u8bc4\u65f6\u95f4\uff1b(5)\u4e00\u4e2a\u53e5\u5b50\u9700\u8981\u7531\u591a\u4e2a\u88ab\u8bd5\u6253\u5206\u3002 \u8bbe\u7f6e\u5b9e\u9a8c\u53c2\u6570\u3002\u5728\u51c6\u5907\u6d4b\u8bd5\u8bed\u97f3\u65f6\uff0c\u9700\u8981\u63d0\u524d\u8bbe\u7f6e\u597d\u8bad\u7ec3\u8bed\u6599\u3001\u5f85\u6d4b\u7cfb\u7edf\u3001\u53c2\u4e0e\u6d4b\u8bd5\u7684\u53e5\u5b50\u6570\u91cf\u3001\u6bcf\u4e2a\u53e5\u5b50\u88ab\u8bd5\u542c\u7684\u6b21\u6570\u7b49\u3002\u4ee5\u4e2d\u6587\u8bed\u97f3\u5408\u6210\u7cfb\u7edf\u7684\u8bed\u97f3\u8bc4\u4f30\u4e3a\u4f8b\uff0c\u6d4b\u8bc4\u8bbe\u7f6e\u5982\u4e0b\u8868\u6240\u793a\u3002 \u8bad\u7ec3\u96c6 \u5f85\u6d4b\u7cfb\u7edf \u53e5\u5b50\u6570\u91cf \u6bcf\u4e2a\u53e5\u5b50\u88ab\u6d4b\u6b21\u6570 \u5185\u90e8\u6570\u636e\u96c6 \u771f\u5b9e\u8bed\u97f3 40 12 \u5185\u90e8\u6570\u636e\u96c6 Tacotron-2 40 12 \u5185\u90e8\u6570\u636e\u96c6 FastSpeech-2 40 12 \u51c6\u5907HTML\u6587\u6863\u7b49\u5c55\u793a\u6750\u6599\uff0c\u5411\u88ab\u8bd5\u4ecb\u7ecd\u8be5\u6d4b\u8bd5\u3002\u8be5HTML\u6587\u6863\u81f3\u5c11\u5305\u62ec\uff1a(1)\u6d4b\u8bd5\u6ce8\u610f\u4e8b\u9879\uff0c\u5982\u88ab\u8bd5\u5e94\u8be5\u4f7f\u7528\u4f55\u79cd\u8bbe\u5907\uff0c\u5728\u4f55\u79cd\u73af\u5883\u4e0b\u8bd5\u542c\uff0c\u8bd5\u542c\u65f6\u5e94\u8be5\u6392\u9664\u7684\u5e72\u6270\u56e0\u7d20\u7b49\uff1b(2)\u6d4b\u8bd5\u4efb\u52a1\uff0c\u5411\u88ab\u8bd5\u4ecb\u7ecd\u672c\u6b21\u8bd5\u542c\u7684\u6d4b\u8bd5\u76ee\u6807\uff0c\u5e94\u5173\u6ce8\u7684\u4fa7\u91cd\u70b9\uff0c\u5982\uff1a\u53ef\u61c2\u5ea6\u3001\u76f8\u4f3c\u5ea6\u3001\u6e05\u6670\u5ea6\u7b49\u65b9\u9762\uff1b(3)\u53c2\u8003\u97f3\u9891\uff0c\u53ef\u4ee5\u653e\u7f6e\u4e00\u4e9b\u793a\u4f8b\u97f3\u9891\uff0c\u5982MOS=5\u7684\u4f18\u8d28\u8bed\u97f3\uff0cMOS=1\u7684\u4f4e\u52a3\u97f3\u9891\uff0c\u4ee5\u4fbf\u88ab\u8bd5\u66f4\u597d\u5730\u5bf9\u97f3\u9891\u6253\u5206\uff1b(4) \u6d4b\u8bd5\u97f3\u9891\uff0c\u6839\u636e\u4e0d\u540c\u4efb\u52a1\uff0c\u653e\u7f6e\u5408\u7406\u7684\u6d4b\u8bd5\u97f3\u9891\uff0c\u771f\u5b9e\u548c\u5408\u6210\u97f3\u9891\u5e94\u63d0\u524d\u6253\u4e71\uff0c\u5e76\u4e14\u4e0d\u53ef\u544a\u77e5\u88ab\u8bd5\u6253\u4e71\u7684\u987a\u5e8f\u3002","title":"\u5b9e\u9a8c\u8bbe\u8ba1"},{"location":"tts/%E8%AF%AD%E9%9F%B3%E5%90%88%E6%88%90%E7%9A%84%E8%AF%84%E4%BB%B7%E6%A0%87%E5%87%86%E5%92%8C%E6%96%B9%E6%B3%95/#_8","text":"\u6570\u636e\u7b5b\u9009\u3002\u7531\u4e8e\u88ab\u8bd5\u6709\u53ef\u80fd\u6ca1\u6709\u53d7\u5230\u76d1\u7763\uff0c\u56e0\u6b64\u9700\u8981\u5bf9\u6536\u96c6\u5230\u7684\u8bc4\u5206\u8fdb\u884c\u4e8b\u540e\u68c0\u67e5\uff0c\u5982\u5220\u9664\u4f7f\u7528\u626c\u58f0\u5668\u8bd5\u542c\u7684\u8bc4\u5206\u3002\u53e6\u5916\uff0c\u4e3a\u4e86\u63a7\u5236\u4e2a\u4f53\u56e0\u7d20\u5bf9\u6574\u4f53\u7ed3\u679c\u7684\u5f71\u54cd\uff0c\u51cf\u5c11\u504f\u79bb\u6574\u4f53\u6570\u636e\u7684\u5f02\u5e38\u503c\uff0c\u9700\u8981\u8ba1\u7b97\u6bcf\u4e2a\u4eba\u7684\u8bc4\u5206\u4e0e\u603b\u4f53\u5f97\u5206\u5e8f\u5217\u7684\u76f8\u5173\u6027\uff0c\u76f8\u5173\u6027\u7684\u5ea6\u91cf\u4f7f\u7528\u76f8\u5173\u7cfb\u6570\u6765\u5b9e\u73b0\uff0c\u5982\u679c\u76f8\u5173\u7cfb\u6570r\u5927\u4e8e0.25\uff0c\u5219\u4fdd\u7559\uff1b\u5426\u5219\u62d2\u7edd\u8be5\u88ab\u8bd5\u7684\u6240\u6709\u8bc4\u5206\u3002\u76f8\u5173\u7cfb\u6570r\u7684\u8ba1\u7b97\u65b9\u6cd5\u5982\u4e0b\uff1a \\[ r=\\frac{\\mathop{cov}(\\mu_{1n},...,\\mu_{Mn};\\mu_1,...,\\mu_M)}{\\sqrt{\\mathop{var}(\\mu_{1n},...,\\mu_{Mn})}\\cdot \\sqrt{\\mathop{var}(\\mu_1,...,\\mu_M)}} \\] \u5176\u4e2d\uff0c \\(M\\) \u4e3a\u53e5\u5b50\u6570\u91cf\uff0c \\(N\\) \u4e3a\u88ab\u8bd5\u6570\u91cf\uff0c \\(\\mu_{mn}\\) \u4e3a\u88ab\u8bd5 \\(n\\) \u5bf9\u53e5\u5b50 \\(m\\) \u7ed9\u51fa\u7684\u8bc4\u5206\uff0c \\(1\\leq m\\leq M\\) , \\(1\\leq n\\leq N\\) , \\(\\mu_m=1/N\\sum_{n=1}^N\\mu_{mn}\\) \u4e3a\u53e5\u5b50 \\(m\\) \u7684\u603b\u4f53\u5e73\u5747\u5206\uff0c \\(\\mathop{cov}\\) \u4e3a\u534f\u65b9\u5dee\uff0c \\(\\mathop{var}\\) \u4e3a\u65b9\u5dee\u3002","title":"\u5b9e\u9a8c\u6570\u636e\u5904\u7406"},{"location":"tts/%E9%9F%B3%E5%BA%93%E5%88%B6%E4%BD%9C%E5%92%8C%E6%96%87%E6%9C%AC%E5%89%8D%E7%AB%AF/","text":"\u97f3\u5e93\u5236\u4f5c\u548c\u6587\u672c\u524d\u7aef \u97f3\u5e93\u5236\u4f5c \u97f3\u5e93\u5236\u4f5c\u6982\u8ff0 \u97f3\u5e93\u7684\u5236\u4f5c\u4e00\u822c\u5305\u62ec\u53d1\u97f3\u4eba\u9009\u578b\u3001\u5f55\u97f3\u6587\u672c\u6536\u96c6\u3001\u97f3\u9891\u5f55\u5236\u3001\u8bed\u6599\u6574\u7406\u548c\u6807\u6ce85\u4e2a\u6b65\u9aa4\u3002\u97f3\u5e93\u7684\u5236\u4f5c\u5bf9\u6574\u4e2a\u8bed\u97f3\u5408\u6210\u7cfb\u7edf\u7684\u5efa\u8bbe\u8f83\u4e3a\u91cd\u8981\uff0c\u97f3\u5e93\u5982\u679c\u5efa\u8bbe\u8f83\u5dee\uff0c\u6bd4\u5982\u53d1\u97f3\u4eba\u98ce\u683c\u96be\u4ee5\u63a5\u53d7\u3001\u6807\u6ce8\u548c\u5b9e\u9645\u97f3\u9891\u4e0d\u7b26\uff0c\u4e4b\u540e\u7684\u52aa\u529b\u53ea\u4f1a\u4e8b\u500d\u529f\u534a\u3002 \u53d1\u97f3\u4eba\u9009\u578b \u53d1\u97f3\u4eba\u9009\u578b\uff0c\u987e\u540d\u601d\u4e49\uff0c\u5c31\u662f\u6839\u636e\u5e94\u7528\u573a\u666f\u9009\u62e9\u5f55\u97f3\u98ce\u683c\u3001\u53d1\u97f3\u4eba\u7b49\u3002\u9996\u5148\uff0c\u8bed\u97f3\u5408\u6210\u7cfb\u7edf\u5728\u4e0d\u540c\u573a\u666f\u4e0b\uff0c\u5bf9\u8bad\u7ec3\u8bed\u6599\u7684\u8981\u6c42\u6709\u6240\u4e0d\u540c\u3002\u6bd4\u5982\u65b0\u95fb\u64ad\u62a5\u573a\u666f\u4e0b\uff0c\u8981\u6c42\u53d1\u97f3\u4eba\u64ad\u62a5\u98ce\uff1b\u6709\u58f0\u4e66\u5408\u6210\u573a\u666f\u4e0b\uff0c\u8981\u6c42\u53d1\u97f3\u4eba\u6291\u626c\u987f\u632b\uff0c\u5bcc\u6709\u611f\u60c5\uff1b\u5728\u8f66\u8f7d\u7b49\u9886\u57df\uff0c\u5219\u8981\u6c42\u4ea4\u4e92\u98ce\uff1b\u5728\u60c5\u611f\u8bed\u97f3\u5408\u6210\u5219\u8981\u6c42\u5f55\u5236\u4e0d\u540c\u60c5\u611f\u7684\u8bed\u97f3\uff1b\u751a\u81f3\u5728\u4e00\u4e9b\u7279\u5b9a\u573a\u666f\u4e0b\uff0c\u6bd4\u5982\u4e8c\u6b21\u5143\u9886\u57df\uff0c\u5219\u8981\u6c42\u53ef\u7231\u98ce\u7b49\u7b49\u3002\u5176\u6b21\uff0c\u4e0d\u540c\u7684\u53d1\u97f3\u4eba\u5bf9\u6700\u7ec8\u7684\u5408\u6210\u8bed\u97f3\u81ea\u7136\u5ea6\u4e5f\u6709\u5f71\u54cd\uff0c\u90e8\u5206\u53d1\u97f3\u4eba\u53d1\u97f3\u82cd\u8001\u3001\u4f4e\u6c89\uff0c\u5373\u4f7f\u540c\u6837\u7684\u6587\u672c\u3001\u58f0\u5b66\u6a21\u578b\u548c\u58f0\u7801\u5668\uff0c\u6700\u4f18\u7684\u8d85\u53c2\u6570\uff0c\u6bcd\u8bed\u8005\u4e5f\u503e\u5411\u4e8e\u7ed9\u4e88\u8f83\u4f4e\u7684\u81ea\u7136\u5ea6\u6253\u5206\u3002\u56e0\u6b64\uff0c\u5728\u97f3\u5e93\u5f55\u97f3\u4e4b\u521d\uff0c\u5c31\u53ef\u4ee5\u53d1\u5e03\u6709\u5173\u4e8e\u5f55\u97f3\u6837\u54c1\u7684\u5e73\u5747\u610f\u89c1\u5f97\u5206\u8bc4\u6d4b\uff0c\u8ba9\u6bcd\u8bed\u8005\u6216\u8005\u9700\u6c42\u65b9\u9009\u62e9\u5408\u9002\u7684\u53d1\u97f3\u4eba\u548c\u5f55\u97f3\u98ce\u683c\u3002\u867d\u7136\u76ee\u524d\u540e\u7aef\u6a21\u578b\u6709\u4e00\u4e9b\u8fc1\u79fb\u98ce\u683c\u3001\u8bf4\u8bdd\u4eba\u7684\u80fd\u529b\uff0c\u4f46\u6700\u597d\u4ece\u6e90\u5934\u5c31\u505a\u597d\u3002 \u5f55\u97f3\u6587\u672c\u6536\u96c6 \u5728\u4e00\u4e2a\u8bed\u79cd\u7684\u8bed\u97f3\u5408\u6210\u5efa\u8bbe\u4e4b\u521d\uff0c\u5c31\u53ef\u4ee5\u540c\u6b65\u6536\u96c6\u8be5\u8bed\u79cd\u5bf9\u5e94\u7684\u5927\u6587\u672c\u3002\u5927\u6587\u672c\u4e0d\u4ec5\u4ec5\u53ef\u4ee5\u7b5b\u9009\u5f55\u97f3\u6587\u672c\uff0c\u8fd8\u53ef\u4ee5\u4ece\u4e2d\u63d0\u53d6\u8bcd\u6761\u3001\u7edf\u8ba1\u8bcd\u9891\u3001\u5236\u4f5c\u8bcd\u5178\u3001\u6807\u6ce8\u97f5\u5f8b\u3001\u6784\u5efa\u6d4b\u8bd5\u96c6\u7b49\u7b49\u3002\u5f55\u97f3\u6587\u672c\u7684\u9009\u62e9\u4e00\u822c\u9075\u5faa\u4ee5\u4e0b\u51e0\u4e2a\u539f\u5219\uff1a \u97f3\u7d20\u8986\u76d6\u3002\u8fd9\u5c31\u8981\u6c42\u5728\u5f55\u97f3\u5f00\u59cb\u4e4b\u524d\uff0c\u5c31\u9700\u8981\u6784\u5efa\u8d77\u6765\u4e00\u5957\u57fa\u7840\u7684\u6587\u672c\u524d\u7aef\uff0c\u6700\u8d77\u7801\u8981\u6709\u7b80\u5355\u7684\u6587\u672c\u8f6c\u97f3\u7d20\uff08G2P\uff09\u7cfb\u7edf\u3002\u5927\u90e8\u5206\u8bed\u79cd\u7684\u5b57\u7b26\u6216\u8005\u5b57\u7b26\u7ec4\u5408\u4f1a\u6709\u8f83\u4e3a\u56fa\u5b9a\u7684\u53d1\u97f3\uff0c\u6bd4\u5982\u82f1\u8bed\u4e2d\u7684h\u603b\u662f\u4f1a\u53d1[h]\u7684\u97f3\uff0co\u603b\u662f\u4f1a\u53d1[eu]\u7684\u97f3\uff0c\u5982\u679c\u627e\u4e0d\u5230\u516c\u5f00\u3001\u5373\u65f6\u53ef\u7528\u7684\u6587\u672c\u8f6c\u97f3\u7d20\u7cfb\u7edf\uff0c\u53ef\u4ee5\u6839\u636e\u89c4\u5219\u6784\u5efa\u3002\u7528\u4e8e\u5f55\u97f3\u7684\u6587\u672c\u8981\u4fdd\u6301\u591a\u6837\u6027\uff0c\u97f3\u7d20\u6216\u8005\u97f3\u7d20\u7ec4\u5408\u8981\u5c3d\u53ef\u80fd\u8986\u76d6\u5168\uff0c\u53ef\u4ee5\u7edf\u8ba1\u97f3\u7d20\u5e8f\u5217\u4e2d\u7684N-Gram\uff0c\u786e\u4fdd\u67d0\u4e9b\u97f3\u7d20\u6216\u8005\u97f3\u7d20\u7ec4\u5408\u51fa\u73b0\u9891\u6b21\u8fc7\u9ad8\uff0c\u800c\u67d0\u4e9b\u97f3\u7d20\u6216\u97f3\u7d20\u7ec4\u5408\u53c8\u9c9c\u5c11\u51fa\u73b0\u3002 \u573a\u666f\u5b9a\u5236\u3002\u5982\u679c\u662f\u901a\u7528\u8bed\u97f3\u5408\u6210\uff0c\u9700\u8981\u786e\u4fdd\u767e\u79d1\u3001\u65b0\u95fb\u3001\u5bf9\u8bdd\u3001\u9ad8\u9891\u8bcd\u3001\u57fa\u6570\u8bcd\u548c\u5e8f\u6570\u8bcd\u7b49\u6570\u5b57\u4e32\u3001\u5305\u542b\u5e38\u7528\u5916\u6765\u8bcd\uff08\u5982\u5305\u542b\u82f1\u8bed\u5355\u8bcd\uff09\u7684\u53e5\u5b50\u8981\u6709\u6240\u8986\u76d6\uff1b\u5982\u679c\u662f\u7279\u5b9a\u573a\u666f\uff0c\u6bd4\u5982\u8f66\u8f7d\u9886\u57df\uff0c\u5219\u53ef\u4ee5\u6536\u96c6\u8f66\u8f7d\u64ad\u62a5\u7684\u5e38\u7528\u8bdd\u672f\u3001\u4e13\u4e1a\u672f\u8bed\uff08\u6bd4\u5982\u6cb9\u91cf\u3001\u80ce\u538b\u7b49\uff09\u3001\u97f3\u4e50\u540d\u6216\u6b4c\u624b\u540d\u3001\u5730\u540d\u548c\u65b0\u95fb\u64ad\u62a5\uff0c\u5728\u7279\u5b9a\u573a\u666f\u4e0b\uff0c\u9700\u8981\u5bf9\u4e1a\u52a1\u6709\u4e00\u5b9a\u7684\u7406\u89e3\uff0c\u5e76\u4e14\u5728\u4e00\u5f00\u59cb\u5c31\u8981\u548c\u9700\u6c42\u65b9\u7d27\u5bc6\u6c9f\u901a\u3002 \u6587\u672c\u6b63\u786e\u6027\u3002\u5f55\u97f3\u6587\u672c\u786e\u4fdd\u62fc\u5199\u65e0\u8bef\uff0c\u5185\u5bb9\u6b63\u786e\uff0c\u6bd4\u5982\u9700\u8981\u5220\u9664\u810f\u8bdd\u3001\u4e0d\u7b26\u5408\u5b97\u6559\u4fe1\u4ef0\u6216\u653f\u6cbb\u4e0d\u6b63\u786e\u7684\u8bed\u53e5\u7b49\u3002 \u97f3\u9891\u5f55\u5236 \u97f3\u9891\u7684\u5f55\u5236\u5bf9\u5408\u6210\u8bed\u97f3\u7684\u8868\u73b0\u8f83\u4e3a\u91cd\u8981\uff0c\u8f83\u5dee\u7684\u8bed\u97f3\u751a\u81f3\u4f1a\u5bfc\u81f4\u7aef\u5230\u7aef\u58f0\u5b66\u6a21\u578b\u65e0\u6cd5\u6b63\u5e38\u6536\u655b\u3002\u7528\u4e8e\u8bad\u7ec3\u7684\u5f55\u97f3\u81f3\u5c11\u8981\u4fdd\u8bc1\u5f55\u97f3\u73af\u5883\u548c\u8bbe\u5907\u59cb\u7ec8\u4fdd\u6301\u4e00\u81f4\uff0c\u65e0\u6df7\u54cd\u3001\u80cc\u666f\u566a\u97f3\uff1b\u539f\u59cb\u5f55\u97f3\u4e0d\u53ef\u622a\u5e45\uff1b\u5982\u679c\u5e0c\u671b\u5408\u6210\u51fa\u6765\u7684\u8bed\u97f3\u5e72\u51c0\uff0c\u5219\u8981\u5220\u9664\u542b\u53e3\u6c34\u97f3\u3001\u547c\u5438\u97f3\u3001\u6742\u97f3\u3001\u6a21\u7cca\u7b49\uff0c\u4f46\u5bf9\u4e8e\u76ee\u524d\u7684\u7aef\u5230\u7aef\u5408\u6210\u6a21\u578b\uff0c\u6709\u65f6\u4f1a\u5b66\u4e60\u5230\u5728\u5408\u9002\u7684\u4f4d\u7f6e\u5408\u6210\u547c\u5438\u97f3\u3001\u53e3\u6c34\u97f3\uff0c\u53cd\u800c\u4f1a\u589e\u52a0\u8bed\u97f3\u81ea\u7136\u5ea6\u3002\u5f55\u97f3\u5c3d\u53ef\u80fd\u4e0d\u8981\u4e8b\u5148\u5904\u7406\uff0c\u8bed\u901f\u7684\u8c03\u8282\u5c1a\u53ef\uff0c\u4f46\u8c03\u8282\u97f3\u6548\u7b49\u6709\u65f6\u4f1a\u9020\u6210\u5947\u602a\u7684\u95ee\u9898\uff0c\u751a\u81f3\u5bfc\u81f4\u58f0\u5b66\u6a21\u578b\u65e0\u6cd5\u6536\u655b\u3002\u97f3\u9891\u7684\u5f55\u5236\u53ef\u4ee5\u53c2\u8003\u5f55\u97f3\u516c\u53f8\u7684\u6807\u51c6\uff0c\u8d2d\u4e70\u4e13\u4e1a\u9ea6\u514b\u98ce\uff0c\u5e76\u4fdd\u6301\u5f55\u97f3\u73af\u5883\u5b89\u9759\u5373\u53ef\u3002\u5728\u97f3\u5e93\u5f55\u5236\u8fc7\u7a0b\u4e2d\uff0c\u53ef\u5c3d\u65e9\u63d0\u524d\u5c1d\u8bd5\u58f0\u5b66\u6a21\u578b\uff0c\u6bd4\u5982\u97f3\u5e93\u5f55\u52362\u4e2a\u5c0f\u65f6\u8bed\u97f3\u540e\uff0c\u5c31\u53ef\u5c1d\u8bd5\u8bad\u7ec3\u57fa\u7ebf\u8bed\u97f3\u5408\u6210\u7cfb\u7edf\uff0c\u4ee5\u9632\u6b62\u5f55\u97f3\u4e0d\u7b26\u5408\u6700\u7ec8\u7684\u9700\u6c42\u3002 \u8bed\u6599\u6574\u7406 \u68c0\u67e5\u6587\u672c\u548c\u5f55\u5236\u7684\u8bed\u97f3\u662f\u5426\u4e00\u4e00\u5bf9\u5e94\uff0c\u5f55\u5236\u7684\u97f3\u9891\u672c\u8eab\u4e00\u53e5\u8bdd\u662f\u5426\u80fd\u91cf\u6e10\u5f31\uff0c\u53c2\u4e0e\u8bad\u7ec3\u7684\u8bed\u97f3\u524d\u540e\u9759\u97f3\u6bb5\u8981\u4fdd\u6301\u4e00\u81f4\uff0c\u80fd\u91cf\u8981\u8fdb\u884c\u89c4\u8303\u5316\u3002\u53ef\u4f7f\u7528\u9884\u8bad\u7ec3\u7684\u8bed\u97f3\u6d3b\u52a8\u68c0\u6d4b\uff08Voice Activity Detection\uff0cVAD\uff09\u5de5\u5177\uff0c\u6216\u8005\u76f4\u63a5\u6839\u636e\u8bed\u97f3\u8d77\u6b62\u7684\u7535\u5e73\u503c\u786e\u5b9a\u524d\u540e\u9759\u97f3\u6bb5\u3002\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e9b\u5f00\u6e90\u7684\u5de5\u5177\uff0c\u6bd4\u5982 pyloudnorm \u7edf\u4e00\u6240\u6709\u8bed\u97f3\u7684\u6574\u4f53\u80fd\u91cf\uff0c\u8fd9\u5c06\u6709\u52a9\u4e8e\u58f0\u5b66\u6a21\u578b\u7684\u6536\u655b\u3002\u5f53\u7136\uff0c\u5728\u58f0\u5b66\u6a21\u578b\u6a21\u578b\u8bad\u7ec3\u65f6\uff0c\u9996\u5148\u5c31\u8981\u5bf9\u6240\u6709\u8bed\u6599\u8ba1\u7b97\u5747\u503c\u65b9\u5dee\uff0c\u8fdb\u884c\u7edf\u4e00\u7684\u89c4\u8303\u5316\uff0c\u4f46\u662f\u8fd9\u91cc\u6700\u597d\u5b9e\u73b0\u7edf\u4e00\u80fd\u91cf\u6c34\u5e73\uff0c\u9632\u6b62\u4e00\u53e5\u8bdd\u524d\u540e\u80fd\u91cf\u4e0d\u4e00\u81f4\u3002\u80fd\u91cf\u89c4\u6574\u7684\u793a\u4f8b\u4ee3\u7801\u5982\u4e0b\u3002 1 2 3 4 5 6 7 8 9 def normalize_wav ( wav_path , sample_rate , target_loudness =- 24.0 ) y , sr = librosa . load ( YOUR_WAV_PATH , sr = SAMPLE_RATE ) meter = pyln . Meter ( sr ) # create BS.1770 meter loudness = meter . integrated_loudness ( y ) y = pyln . normalize . loudness ( y , loudness , target_loudness ) peak = np . abs ( y ) . max () if peak >= 1 : y = y / peak * 0.999 return y \u6807\u6ce8 \u6807\u6ce8\u662f\u6240\u6709\u6a21\u578b\u90fd\u4f1a\u9047\u5230\u7684\u95ee\u9898\uff0c\u4f46\u8bed\u97f3\u5408\u6210\u4e2d\u6240\u6709\u8bed\u6599\uff0c\u7279\u522b\u662f\u97f3\u7d20\u3001\u97f3\u7d20\u65f6\u957f\u8ba9\u4eba\u7c7b\u4e00\u4e00\u6807\u6ce8\u662f\u4e0d\u73b0\u5b9e\u7684\uff0c\u4e00\u822c\u662f\u5229\u7528\u6587\u672c\u524d\u7aef\u4ea7\u751f\u4e00\u4e2a\u57fa\u7ebf\u7684\u97f3\u7d20\u5e8f\u5217\u548c\u97f3\u7d20\u65f6\u957f\uff0c\u7136\u540e\u8ba9\u4eba\u7c7b\u53c2\u4e0e\u68c0\u67e5\u3002\u8bed\u97f3\u5408\u6210\u4e2d\u7684\u6807\u6ce8\u8981\u68c0\u67e5\u4ee5\u4e0b\u51e0\u70b9\uff1a \u97f3\u7d20\u5c42\u7ea7\u3002\u68c0\u67e5\u8bed\u97f3\u548c\u97f3\u7d20\u7684\u4e00\u81f4\u6027\uff1b\u68c0\u67e5\u91cd\u97f3\u6216\u97f3\u8c03\u6807\u6ce8\uff1b\u8c03\u6574\u97f3\u7d20\u8fb9\u754c\u3002 \u5355\u8bcd\u5c42\u7ea7\u3002\u68c0\u67e5\u5355\u8bcd\u7684\u5f31\u5316\u8bfb\u97f3\u60c5\u5f62\uff0c\u6bd4\u5982car[r]\u67d0\u4e9b\u53d1\u97f3\u4eba\u5b8c\u5168\u5f31\u8bfb[r]\uff0c\u6839\u636e\u5f55\u97f3\u5220\u9664\u8be5\u97f3\u7d20[r]\uff0c\u6216\u8005\u7ed9\u4e88\u4e00\u4e2a\u65b0\u7684\u97f3\u7d20\uff1b\u5916\u6765\u8bcd\u548c\u7f29\u7565\u8bcd\u7684\u53d1\u97f3\u60c5\u51b5\uff0c\u4e0d\u540c\u97f3\u5e93\u53ef\u80fd\u6709\u4e0d\u540c\u7684\u5904\u7406\u65b9\u6cd5\uff1b\u8c03\u6574\u5355\u8bcd\u8fb9\u754c\u3002 \u53e5\u5b50\u5c42\u7ea7\u3002\u589e\u5220\u505c\u987f\uff0c\u786e\u4fdd\u548c\u5b9e\u9645\u5f55\u97f3\u4e00\u81f4\u3002 \u6807\u6ce8\u4eba\u5458\u53ef\u4ee5\u91c7\u7528 Praat \u8fdb\u884c\u53ef\u89c6\u5316\u6807\u6ce8\u548c\u68c0\u67e5\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u4e3a\u5229\u7528Praat\u6807\u6ce8\u8bed\u6599\u7684\u793a\u4f8b\u3002 \u603b\u800c\u8a00\u4e4b\uff0c\u5f55\u97f3\u5b8c\u6210\u540e\uff0c\u97f3\u7d20\u5e8f\u5217\u8ddf\u7740\u5f55\u97f3\u8d70\uff0c\u8bed\u97f3\u5982\u4f55\u53d1\u97f3\uff0c\u97f3\u7d20\u5e8f\u5217\u5c31\u4e25\u683c\u6309\u7167\u8bed\u97f3\u6807\u6ce8\uff0c\u5b9e\u5728\u4e0d\u884c\u5c31\u53d1\u56de\u91cd\u5f55\u3002\u5728\u8bed\u97f3\u5408\u6210\u4e2d\uff0c\u540c\u6837\u7684\u97f3\u9891\uff0c\u4e0d\u540c\u573a\u666f\u7684\u6807\u6ce8\u6709\u53ef\u80fd\u662f\u6709\u7ec6\u5fae\u53d8\u5316\u7684\u3002\u6bd4\u5982\u5728\u65b0\u95fb\u64ad\u62a5\u573a\u666f\u4e0b\uff0c\u53d1\u97f3\u98ce\u683c\u6bd4\u8f83\u5e73\u6de1\uff0c\u67d0\u4e9b\u7ec6\u5fae\u7684\u505c\u987f\u548c\u97f5\u5f8b\u53d8\u5316\u53ef\u4ee5\u4e0d\u7528\u5728\u610f\uff0c\u6807\u6ce8\u4e0a\u4e5f\u53ef\u4ee5\u4e0d\u4f53\u73b0\uff1b\u4f46\u662f\u5728\u4ea4\u4e92\u6216\u8005\u5c0f\u8bf4\u9886\u57df\uff0c\u53d1\u97f3\u98ce\u683c\u7684\u53d8\u5316\u8f83\u4e3a\u4e30\u5bcc\uff0c\u5bf9\u97f5\u5f8b\u548c\u60c5\u611f\u63a7\u5236\u8981\u6c42\u8f83\u9ad8\uff0c\u56e0\u6b64\u6807\u6ce8\u53ef\u80fd\u66f4\u4e3a\u7cbe\u7ec6\uff0c\u751a\u81f3\u4f1a\u589e\u52a0\u989d\u5916\u7684\u6807\u6ce8\u4fe1\u606f\uff0c\u505c\u987f\u3001\u97f5\u5f8b\u7b49\u4fe1\u606f\u7684\u6807\u6ce8\u53ef\u80fd\u548c\u64ad\u62a5\u98ce\u6709\u6240\u4e0d\u540c\u3002 \u5e38\u89c1\u7684\u8bed\u97f3\u5408\u6210\u4e13\u4e1a\u6570\u636e\u63d0\u4f9b\u5546\u6709 \u6d77\u5929\u745e\u58f0 \u3001 \u6807\u8d1d\u79d1\u6280 \u3001 \u5e0c\u5c14\u8d1d\u58f3 \u7b49\u3002 \u6587\u672c\u524d\u7aef \u6587\u672c\u524d\u7aef\u5728\u8bed\u97f3\u5408\u6210\u4e2d\u626e\u6f14\u7684\u89d2\u8272 \u8bed\u97f3\u5408\u6210\uff0c\u987e\u540d\u601d\u4e49\uff0c\u662f\u4e00\u9879\u5c06\u6587\u672c\u8f6c\u5316\u4e3a\u8bed\u97f3\u7684\u6280\u672f\u3002\u4ee5Google\u7684 Tacotron \u7cfb\u5217\u4e3a\u4ee3\u8868\u7684\u7aef\u5230\u7aef\u8bed\u97f3\u5408\u6210\u6280\u672f\u5927\u5927\u964d\u4f4e\u4e86\u8bed\u97f3\u5408\u6210\u7684\u6280\u672f\u95e8\u69db\u3002\u5bf9\u4e8e\u8868\u97f3\u8bed\u8a00\u6bd4\u5982\u82f1\u6cd5\u897f\u5fb7\u610f\u7b49\u8bed\u79cd\uff0c\u751a\u81f3\u53ef\u4ee5\u76f4\u63a5\u8f93\u5165\u6587\u672c\uff0c\u8ba9\u6a21\u578b\u81ea\u884c\u5b66\u4e60\u5982\u4f55\u5c06\u6587\u672c\u8f6c\u5316\u5230\u8bed\u97f3\u3002\u4f46\u662f\u5728\u5b9e\u9645\u7684\u751f\u4ea7\u73af\u5883\u4e2d\uff0c\u76f4\u63a5\u6587\u672c\u5230\u8bed\u97f3\u4f1a\u5e26\u6765\u8f83\u5927\u7684\u4e0d\u53ef\u63a7\u98ce\u9669\uff0c\u6bd4\u5982\"love\"/l\u028cv/\u8bfb\u6210\u4e86/l\u026av/\uff0c\u5982\u4f55\u5feb\u901f\u7ea0\u6b63\u7c7b\u4f3c\u7684\u53d1\u97f3\u9519\u8bef\uff1b\"2kg\"\u5982\u4f55\u6307\u5b9a\u6a21\u578b\u8bfb\u6210\"\u4e24\u5343\u514b\"\uff0c\u800c\u975e\"\u4e8ckg\"\u7b49\u3002\u56e0\u6b64\u5728\u5b9e\u9645\u7684\u8bed\u97f3\u5408\u6210\u7cfb\u7edf\u4e2d\uff0c\u901a\u5e38\u4f1a\u4e3a\u8bed\u97f3\u5408\u6210\u7cfb\u7edf\u6dfb\u52a0\u6587\u672c\u524d\u7aef\uff0c\u4e3b\u8981\u4f5c\u7528\u662f\u5c06\u6587\u672c\u8f6c\u6362\u4e3a\u97f3\u7d20\uff0c\u751a\u81f3\u4f1a\u6dfb\u52a0\u4e00\u4e9b\u97f5\u5f8b\u6807\u8bc6\u6784\u6210\u8bed\u8a00\u5b66\u7279\u5f81\uff08linguistic feature\uff09\uff0c\u4ee5\u4fbf\u58f0\u5b66\u6a21\u578b\u66f4\u597d\u5730\u5efa\u7acb\u6587\u672c\u5230\u8bed\u97f3\u7684\u6620\u5c04\u3002 \u6587\u672c\u524d\u7aef\u7684\u4e3b\u8981\u7ec4\u6210 \u6587\u672c\u524d\u7aef\u4e00\u822c\u9075\u5faa\u6587\u672c\uff0c\u5230\u89c4\u8303\u5316\u6587\u672c\uff0c\u5230\u97f3\u7d20\u8fd93\u4e2a\u57fa\u672c\u6b65\u9aa4\uff0c\u540c\u65f6\u4f1a\u4ece\u6587\u672c\u548c\u89c4\u8303\u5316\u6587\u672c\u4e2d\u9884\u6d4b\u97f5\u5f8b\u3002\u97f3\u7d20\u548c\u97f5\u5f8b\u6807\u8bc6\u7edf\u79f0\u4e3a\u8bed\u8a00\u5b66\u7279\u5f81\uff08linguistic feature\uff09\u3002\u6587\u672c\u524d\u7aef\u7684\u8f93\u51fa\u4f5c\u4e3a\u4e0b\u6e38\u58f0\u5b66\u6a21\u578b\u548c\u58f0\u7801\u5668\u7684\u8f93\u5165\uff0c\u5982\u679c\u53d1\u751f\u53d1\u97f3\u9519\u8bef\u7b49\u95ee\u9898\uff0c\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u76f4\u63a5\u4fee\u6b63\u97f3\u7d20\u5e8f\u5217\u5373\u53ef\uff0c\u5927\u5927\u964d\u4f4e\u4e86\u95ee\u9898\u89e3\u51b3\u7684\u96be\u5ea6\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u6587\u672c\u524d\u7aef\u53ef\u5206\u4e3a\u4ee5\u4e0b\u4e94\u4e2a\u90e8\u5206\uff1a \u6587\u672c\u9884\u5904\u7406\uff1a\u4e3b\u8981\u662f\u89e3\u51b3\u6587\u672c\u4e2d\u4e66\u5199\u9519\u8bef\u3001\u4e00\u4e9b\u8bed\u79cd\u4e2d\u540c\u5f62\u5f02\u7801\u7b49\u95ee\u9898\u3002 \u6587\u672c\u5f52\u4e00\u5316\uff1a\u4e3b\u8981\u89e3\u51b3\u6587\u672c\u4e2d\u7684\u7279\u6b8a\u7b26\u53f7\u8bfb\u6cd5\uff0c\u6bd4\u5982\"2kg\"\u8f6c\u6362\u4e3a\"\u4e24\u5343\u514b\"\uff0c\u53e6\u5916\u8fd8\u8981\u5904\u7406\u4e00\u4e9b\u8bed\u79cd\u6bd4\u5982\u6ce2\u5170\u8bed\u3001\u4fc4\u8bed\u4e2d\u7684\u6027\u6570\u683c\u53d8\u5316\u3002 \u5206\u8bcd\uff1a\u4e00\u4e9b\u8bed\u79cd\u6bd4\u5982\u4e2d\u6587\u3001\u85cf\u8bed\u3001\u65e5\u8bed\u3001\u6cf0\u8bed\u3001\u8d8a\u5357\u8bed\u3001\u7ef4\u543e\u5c14\u8bed\u3001\u671d\u9c9c\u8bed\u7b49\u5e76\u975e\u4ee5\u7a7a\u683c\u4f5c\u4e3a\u8bcd\u8fb9\u754c\uff0c\u901a\u5e38\u9700\u8981\u5206\u8bcd\u4ee5\u4fbf\u540e\u7eed\u7684\u5904\u7406\uff0c\u4f46\u4e16\u754c\u4e0a\u5927\u90e8\u5206\u8bed\u79cd\u90fd\u4ee5\u7a7a\u683c\u4e3a\u8bcd\u8fb9\u754c\uff0c\u8be5\u6b65\u9aa4\u53ef\u7701\u7565\u3002 \u6587\u672c\u8f6c\u97f3\u7d20\uff08G2P\uff09\uff1a\u5c06\u6587\u672c\u8f6c\u6362\u4e3a\u6ce8\u97f3\uff0c\u6bd4\u5982\"\u4e2d\u56fd\"\u8f6c\u5316\u4e3a\"zhong1 guo2\"\u3002 \u97f5\u5f8b\u5206\u6790\uff1a\u8bed\u97f3\u4e2d\u6bcf\u4e2a\u97f3\u7d20\u7684\u53d1\u97f3\u65f6\u957f\u4e0d\u540c\uff0c\u505c\u987f\u4e5f\u4e0d\u540c\u3002\u5c06\u6587\u672c\u8f6c\u6362\u4e3a\u97f3\u7d20\u4e4b\u540e\uff0c\u901a\u5e38\u4f1a\u52a0\u5165\u4e00\u5b9a\u7684\u97f5\u5f8b\u4fe1\u606f\uff0c\u4ee5\u5e2e\u52a9\u58f0\u5b66\u6a21\u578b\u63d0\u5347\u5408\u6210\u8bed\u97f3\u7684\u81ea\u7136\u5ea6\uff0c\u52a0\u5165\u7684\u97f5\u5f8b\u4fe1\u606f\u53ef\u4ee5\u5206\u4e3a\u97f3\u7d20\uff08L0\uff09\u3001\u5355\u8bcd\uff08L1\uff09\u3001breath break\uff08L3\uff09\u548c\u53e5\u5b50\uff08L4\uff09\u56db\u4e2a\u97f5\u5f8b\u5c42\u7ea7\u3002 Unicode\u8c03\u7814\u548c\u6587\u672c\u9884\u5904\u7406 \u5f00\u5c55\u4e00\u4e2a\u65b0\u8bed\u79cd\u7684\u6587\u672c\u524d\u7aef\u7684\u5f00\u53d1\uff0c\u9996\u8981\u662f\u8c03\u7814\u8be5\u8bed\u79cd\u6587\u5b57\u7684\u5b57\u5f62\u3001\u8bfb\u97f3\u7b49\uff0c\u4e86\u89e3\u4e16\u754c\u5404\u8bed\u79cd\u7684\u597d\u53bb\u5904\u65e0\u7591\u662f Unicode\u5b98\u7f51 \u548c\u7ef4\u57fa\u767e\u79d1\u3002Unicode\u5c06\u4e16\u754c\u4e0a\u6240\u6709\u7684\u5b57\u7b26\u5747\u5206\u914d\u552f\u4e00\u6570\u5b57\u6807\u8bc6\uff0c\u540c\u65f6\u4e3a\u4e86\u517c\u5bb9\u548c\u8282\u7701\u7a7a\u95f4\uff0c\u5e38\u5e38\u91c7\u7528\"\u7edf\u4e00\u7801\u8f6c\u6362\u683c\u5f0f-8\"\uff08UTF-8\uff09\u3001\"\u7edf\u4e00\u7801\u8f6c\u6362\u683c\u5f0f-16\"\uff08UTF-16\uff09\u7b49\u5177\u4f53\u5b9e\u73b0\u8be5\u7f16\u7801\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u53ef\u4ee5\u8fdb\u5165 Unicode Code Charts \u67e5\u8be2\u5404\u4e2a\u8bed\u79cd\u7684\u7f16\u7801\u3002\u4ee5\u6700\u5e7f\u6cdb\u4f7f\u7528\u7684\u62c9\u4e01\u5b57\u7b26\u4e3a\u4f8b\uff0c Basic Latin (ASCII) \u6587\u6863\u4e2d\uff0c\u9996\u5148\u662f\u4e00\u9875\u7248\u6743\u58f0\u660e\uff0c\u4e4b\u540e\u5c55\u793a\u4e86\u8be5\u7c7b\u5b57\u7b26\u7684Unicode\u7801\uff0c\u6700\u540e\u662f\u5404\u4e2a\u5b57\u7b26\u7684\u7b80\u77ed\u4ecb\u7ecd\uff0c\u5e2e\u52a9\u5feb\u901f\u4e86\u89e3\u8be5\u8bed\u79cd\u3002\u5728\u4ecb\u7ecd\u65f6\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5b57\u7b26\uff0c\u6bd4\u5982\"!\"\uff0c\u9996\u5148\u7ed9\u51fa\u5b83\u7684Unicode\u7f16\u7801\"0021\"\uff08 \\(\\backslash\\) u0021\uff09\uff0c\u7136\u540e\u662f\u8be5\u5b57\u7b26\u7684\u5b57\u5f62\u5982\"!\"\uff0c\u63a5\u4e0b\u6765\u4e00\u822c\u662f\u8be5\u5b57\u7b26\u7684\u7b80\u4ecb\u6bd4\u5982\"EXCLAMATION MARK\"\uff0c\u4e4b\u540e\u4f1a\u7ed9\u51fa\u4e00\u4e9b\u8865\u5145\u4fe1\u606f\uff0c\u6bd4\u5982\"=\"\u8868\u793a\u8be5\u5b57\u7b26\u7684\u5176\u5b83\u542b\u4e49\uff0c \\(\\to\\) \u8868\u793a\u8be5\u5b57\u7b26\u7684\u76f8\u5173\u5b57\u7b26\uff0c \\(\\equiv\\) \u8868\u793a\u8be5\u5b57\u7b26\u7684\u540c\u5f62\u5f02\u7801\u3002\u540c\u5f62\u5f02\u7801\u5728\u591a\u8bed\u79cd\u7684\u6587\u672c\u524d\u7aef\u4e2d\u5c24\u5176\u9700\u8981\u6ce8\u610f\uff0c\u4f8b\u5982 Latin Extended-A \u4e2d\uff0c \\(\\backslash\\) u0100\u7684\u540c\u5f62\u5f02\u7801\u4e3a \\(\\backslash\\) u0041 \\(\\backslash\\) u0304\uff0c\u8fd9\u79cd\u540c\u5f62\u5f02\u7801\u7684\u5b57\u7b26\u9700\u8981\u7edf\u4e00\u5904\u7406\u4e3a\u4e00\u79cd\u5b57\u7b26\uff0c\u7528\u6237\u7684\u8f93\u5165\u770b\u8d77\u6765\u76f8\u540c\uff0c\u4f46\u5728\u8ba1\u7b97\u673a\u4e2d\u7684\u8868\u793a\u662f\u5b8c\u5168\u4e0d\u540c\u7684\u3002 \u6587\u672c\u524d\u7aef\u4e2d\u7684\u6587\u672c\u9884\u5904\u7406\u6a21\u5757\u4e3b\u8981\u662f\u5904\u7406\u975e\u6cd5\u8f93\u5165\u3001\u540c\u5f62\u5f02\u7801\u7684\u66ff\u6362\u7b49\u3002\u6587\u672c\u524d\u7aef\u6536\u5230\u8f93\u5165\u4e4b\u540e\uff0c\u53ef\u4ee5\u9650\u5236\u4e00\u4e9b\u8fb9\u754c\u6761\u4ef6\uff0c\u6bd4\u5982\u9632\u6b62\u7528\u6237\u5c06\u97f3\u89c6\u9891\u8f93\u5165\u6587\u672c\u524d\u7aef\uff0c\u9650\u5236\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u957f\u5ea6\u548c\u79cd\u7c7b\u7b49\uff1b\u4e4b\u540e\u5c31\u8fdb\u5165\u5305\u62ec\u540c\u5f62\u5f02\u7801\u66ff\u6362\u7684\u6587\u672c\u6e05\u7406\u6a21\u5757\u3002\u9996\u5148\u662f\u786e\u5b9a\u8f93\u5165\u6587\u672c\u7684\u8bed\u79cd\uff08\u53ef\u8981\u6c42\u7528\u6237\u63d0\u4f9b\u6216\u8005\u9650\u5236\u672c\u8bed\u97f3\u5408\u6210\u7cfb\u7edf\u7684\u4e3b\u8981\u8f93\u5165\u8bed\u79cd\uff09\uff1b\u4e4b\u540e\u662f\u901a\u7528\u5904\u7406\u89c4\u5219\uff0c\u6bd4\u5982\u5220\u9664\" \\(\\backslash\\) u200B\"\u3001\" \\(\\backslash\\) u200C\"\u7b49\u4e0d\u53ef\u89c1\u5b57\u7b26\uff0c\u7edf\u4e00\u6807\u70b9\u7b26\u53f7\uff0c\u5168\u89d2\u8f6c\u534a\u89d2\uff0c\u4e00\u4e9b\u7279\u6b8a\u6570\u5b57\u5982 \\(\\backslash\\) u00BD\u66ff\u6362\u4e3a\"\u00bd\"\u7b49\u7b49\uff1b\u7136\u540e\u662f\u672c\u8bed\u7cfb\u7684\u5904\u7406\u89c4\u5219\uff0c\u6b64\u65f6\u4e3b\u8981\u5bf9\u540c\u5f62\u5f02\u7801\u8fdb\u884c\u66ff\u6362\uff1b\u7136\u540e\u662f\u672c\u8bed\u79cd\u7684\u5904\u7406\u89c4\u5219\uff0c\u4e3b\u8981\u662f\u5904\u7406\u672c\u8bed\u79cd\u7684\u5916\u6765\u5b57\u7b26\uff0c\u6bd4\u5982\u5728\u610f\u5927\u5229\u8bed\u4e2d\uff0c\u5c06\u5947\u5f62\u602a\u72b6\u7684\u5916\u6765\u5b57\u7b26\"\u00c1\"\u3001\"\u00c3\"\u3001\"\u00c4\"\u3001\"\u00c5\"\u7edf\u4e00\u66ff\u6362\u4e3a\"A\"\uff0c\u8fde\u63a5\u8bcd\"\u00c6\"\u66ff\u6362\u4e3a\"AE\"\uff1b\u6700\u540e\u662f\u9488\u5bf9\u4e0d\u540c\u8bed\u79cd\u5b9a\u5236\u7684\u540e\u5904\u7406\u89c4\u5219\u3002\u9010\u7ea7\u5904\u7406\u7684\u597d\u5904\u662f\u4ee3\u7801\u3001\u5c42\u6b21\u6e05\u6670\uff0c\u5f53\u7136\u4e3a\u4e86\u65b9\u4fbf\uff0c\u53ef\u4ee5\u7edf\u4e00\u8fdb\u884c\u5904\u7406\u548c\u66ff\u6362\u3002 \u76f8\u5173\u7684\u53c2\u8003\u8d44\u6599\uff1a Unicdoe\u641c\u7d22 Unicode\u5b98\u7f51 Unicode\u672f\u8bed\u8868\uff08\u4e2d\u82f1\u4e92\u8bd1\uff09 Unicode\u5b9e\u7528\u5de5\u5177 \u6587\u672c\u89c4\u8303\u5316 \u5f52\u4e00\u5316\u76ee\u524d\u662f\u6587\u672c\u524d\u7aef\u4e2d\u7684\u96be\u70b9\uff0c\u5b66\u672f\u754c\u548c\u5de5\u4e1a\u754c\u6700\u666e\u904d\u548c\u7cbe\u786e\u7684\u65b9\u6cd5\u8fd8\u662f\u9760\u4eba\u8089\u5806\u89c4\u5219\uff0c\u5f53\u7136\u4e5f\u9010\u6e10\u51fa\u73b0\u4e86\u89c4\u5219\u548c\u6a21\u578b\u6df7\u5408\u7684\u5f52\u4e00\u5316\u7cfb\u7edf\uff0c\u6bd4\u5982 A Hybrid Text Normalization System Using Multi-Head Self-Attention For Mandarin \u3001 Cold-Start and Interpretability: Turning Regular Expressions into Trainable Recurrent Neural Networks \u3002 \u4e00\u4e2a\u57fa\u7840\u7684\u5f52\u4e00\u5316\u6a21\u5757\u81f3\u5c11\u5e94\u8986\u76d6\u4ee5\u4e0b\u51e0\u7c7b\u89c4\u5219\uff1a\u7269\u7406\u91cf\u3001\u8d27\u5e01\u3001\u7f29\u7565\u8bed\u3001\u5e38\u7528\u673a\u6784\u540d\u6216\u4e13\u6709\u540d\u8bcd\u3001\u6570\u5b57\uff08\u5206\u6570/\u767e\u5206\u6570/\u79d1\u5b66\u8ba1\u6570\u6cd5/\u5c0f\u6570\u70b9/\u57fa\u6570\u8bcd/\u5e8f\u6570\u8bcd/\u6570\u5b57\u4e32\uff09\u3001\u7b97\u672f\u8868\u8fbe\u5f0f\u3001\u6807\u70b9\u7b26\u53f7\u3001\u65e5\u671f\uff08\u6708\u4efd/\u661f\u671f\uff09\u7684\u5404\u79cd\u8868\u793a\u3001\u65f6\u95f4\u3001\u6bd4\u5206\u3001\u7f51\u7edc\u7528\u8bed\u6216\u5916\u6765\u8bcd\u7b49\u3002 \u76f8\u5173\u7684\u53c2\u8003\u8d44\u6599\uff1a ICASSP 2020\u4e2d\u7684\u8bed\u97f3\u5408\u6210 A Hybrid Text Normalization System Using Multi-Head Self-Attention For Mandarin Cold-Start and Interpretability: Turning Regular Expressions into Trainable Recurrent Neural Networks \u5206\u8bcd \u5bf9\u4e8e\u4e16\u754c\u4e0a\u5927\u90e8\u5206\u7684\u8bed\u79cd\u6765\u8bf4\uff0c\u7a7a\u683c\u662f\u5929\u7136\u7684\u5355\u8bcd\u8fb9\u754c\uff0c\u56e0\u6b64\u5206\u8bcd\u5e76\u975e\u4e00\u4e2a\u5e38\u89c1\u4efb\u52a1\uff0c\u4ec5\u6709\u4e2d\u65e5\u97e9\u3001\u6cf0\u8bed\u3001\u8d8a\u5357\u8bed\u7b49\u8bed\u79cd\u9700\u8981\u5206\u8bcd\u3002\"\u6700\u5927\u6700\u957f\u5339\u914d\"\u662f\u7b80\u5355\u4e14\u5e38\u89c1\u7684\u5206\u8bcd\u7b97\u6cd5\uff0c\u8be5\u7b97\u6cd5\u9700\u8981\u51c6\u5907\u4e00\u4e2a\u8bcd\u5178\uff0c\u5728\u5bf9\u6587\u672c\u8fdb\u884c\u5207\u5206\u65f6\uff0c\u6839\u636e\u5207\u5206\u65b9\u5411\u7684\u4e0d\u540c\uff0c\u8fd8\u53ef\u5206\u4e3a\u524d\u5411\u3001\u540e\u5411\u3001\u524d\u540e\u5411\u6700\u957f\u5339\u914d\u7b97\u6cd5\u3002\u4ee5\"\u524d\u5411\u6700\u957f\u5339\u914d\u7b97\u6cd5\"\u4e3a\u4f8b\uff0c\u8be5\u65b9\u6cd5\u9996\u5148\u8bbe\u5b9a\u4e00\u4e2a\u8bcd\u7684\u6700\u5927\u957f\u5ea6\uff0c\u5c06\u5f85\u5207\u5206\u6587\u672c\u5f00\u59cb\u5230\u8bcd\u6700\u5927\u957f\u5ea6\u5185\u7684\u5b57\u7b26\u4f5c\u4e3a\"\u5019\u9009\u8bcd\"\uff0c\u6bcf\u6b21\u626b\u63cf\u65f6\uff0c\u5c06\u8be5\"\u5019\u9009\u8bcd\"\u548c\u8bcd\u5178\u4e2d\u7684\u8bcd\u8fdb\u884c\u5339\u914d\uff0c\u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u5c31\u7f29\u77ed\"\u5019\u9009\u8bcd\"\u7684\u957f\u5ea6\u7ee7\u7eed\u5bfb\u627e\uff0c\u76f4\u5230\u5339\u914d\u5230\u5b57\u5178\u4e2d\u7684\u8bcd\u6216\u8005\"\u5019\u9009\u8bcd\"\u6210\u4e3a\u5355\u5b57\uff0c\u7136\u540e\u7ee7\u7eed\u5207\u5206\u5269\u4f59\u6587\u672c\u3002\u4e3a\u4e86\u964d\u4f4e\"\u5019\u9009\u8bcd\"\u548c\u8bcd\u5178\u5339\u914d\u7684\u7b97\u6cd5\u590d\u6742\u5ea6\uff0c\u53ef\u4ee5\u5148\u5c06\u8bcd\u5178\u6784\u5efa\u4e3aTrie\uff08\u79f0\u524d\u7f00\u6811\u6216\u5b57\u5178\u6811\uff09\uff0c\u5bf9\u6587\u672c\u4ece\u524d\u5230\u540e\u5207\u5206\u65f6\uff0c\u6bcf\u6b21\u5c1d\u8bd5\u52a0\u5165\u5f85\u5207\u5206\u6587\u672c\u7684\u4e00\u4e2a\u5b57\u7b26\uff0c\u5e76\u67e5\u8be2\u5f53\u524d\u8282\u70b9\u7684\u6240\u6709\u5b50\u8282\u70b9\uff0c\u5982\u679c\u5f85\u52a0\u5165\u5b57\u7b26\u5b58\u5728\u4e8e\u5b50\u8282\u70b9\u4e2d\uff0c\u5219\u6cbf\u7740\u8be5\u8282\u70b9\u7ee7\u7eed\u67e5\u8be2\uff0c\u5426\u5219\u9000\u51fa\u8be5\u5b57\u7b26\uff0c\u5e76\u5c06\u4e4b\u524d\u8282\u70b9\u7684\u5b57\u7b26\u4f5c\u4e3a\u5207\u5206\u540e\u7684\u5355\u8bcd\uff0c\u4ee5\u8be5\u5b57\u7b26\u4e3a\u8d77\u59cb\u70b9\u4f5c\u4e3a\u5269\u4f59\u5f85\u5207\u5206\u6587\u672c\u3002 \u4e3a\u4e86\u63d0\u9ad8\u5206\u8bcd\u7684\u51c6\u786e\u7387\uff0c\u6761\u4ef6\u968f\u673a\u573a\u3001\u795e\u7ecf\u7f51\u7edc\u7b49\u65b9\u6cd5\u4e5f\u5e94\u7528\u5230\u4e86\u5206\u8bcd\u9886\u57df\u5e76\u53d6\u5f97\u4e86\u4e0d\u9519\u7684\u6548\u679c\u3002\u53ef\u53c2\u8003\uff1a NLP\u5206\u8bcd\u7b97\u6cd5\u6df1\u5ea6\u7efc\u8ff0 \u4e2d\u6587\u5206\u8bcd\u7b97\u6cd5\u7b80\u4ecb \u4e94\u6b3e\u4e2d\u6587\u5206\u8bcd\u5de5\u5177\u5728\u7ebfPK: Jieba, SnowNLP, PkuSeg,THULAC, HanLP \u5bf9\u4e8e\u65e5\u8bed\u6765\u8bf4\uff0c\u4e5f\u6709\u4e00\u4e9b\u6d41\u884c\u7684\u5f00\u6e90\u8bcd\u5178\uff0c\u6bd4\u5982 UniDic \u3001 mecab-ipadic-neologd \uff0c\u540c\u65f6\u4e5f\u6709\u4e00\u4e9b\u5f00\u6e90\u5206\u8bcd\u5668\u6bd4\u5982 MeCab \u3001 Kuromoji \u3001 jumanpp \u3001 Sudachi \u7b49\u3002\u53c2\u89c1\uff1a \u65e5\u8bed\u5206\u8bcd\u5668\u7684\u4ecb\u7ecd\u548c\u6bd4\u8f83 \u3002 \u5bf9\u4e8e\u6cf0\u8bed\u6765\u8bf4\uff0c\u97f3\u8282\u3001\u5355\u8bcd\u548c\u53e5\u5b50\u90fd\u9700\u8981\u5207\u5206\u3002 ssg \u4f7f\u7528\u6761\u4ef6\u968f\u673a\u573a\u5bf9\u6cf0\u8bed\u6587\u672c\u5207\u5206\u97f3\u8282\uff0c CRF-Cut \u540c\u6837\u5229\u7528\u6761\u4ef6\u968f\u673a\u573a\u5bf9\u6587\u672c\u8fdb\u884c\u5206\u53e5\u3002\u6cf0\u8bed\u7684\u5206\u8bcd\u7b97\u6cd5\u540c\u6837\u4e5f\u6709\u5f88\u591a\uff0c\u53ef\u53c2\u89c1 AttaCut-Benchmark \u4e86\u89e3\u5e38\u7528\u6cf0\u8bed\u5206\u8bcd\u7b97\u6cd5\u7684\u8bc4\u6d4b\u3002 \u6587\u672c\u8f6c\u97f3\u7d20 \u6587\u672c\u8f6c\u97f3\u7d20\uff08G2P/LTS\uff09\u662f\u5c06\u6587\u672c\u8f6c\u6362\u4e3a\u6ce8\u97f3\u8868\u793a\u7684\u8fc7\u7a0b\u3002\u6700\u7b80\u5355\u76f4\u767d\u7684\u6587\u672c\u8f6c\u97f3\u7d20\u65b9\u6cd5\u65e0\u7591\u662f\u67e5\u8bcd\u5178\uff0c\u7ecf\u8fc7\u9884\u5904\u7406\u548c\u5206\u8bcd\u6a21\u5757\u4e4b\u540e\uff0c\u6587\u672c\u88ab\u5207\u5206\u4e3a\u4e00\u4e2a\u4e2a\u5355\u8bcd\uff0c\u5229\u7528\u8bcd\u5178\u67e5\u8be2\u5355\u8bcd\u5bf9\u5e94\u7684\u53d1\u97f3\u5e8f\u5217\u3002\u4f46\u662f\u5bf9\u4e8e\u5e26\u6709\u7f29\u7565\u8bcd\u3001\u5916\u6765\u8bcd\u7684\u6587\u672c\u6765\u8bf4\uff0c\u60c5\u51b5\u7565\u5fae\u590d\u6742\uff0c\u56e0\u4e3a\u67e5\u8be2\u7f29\u7565\u8bcd\u3001\u672c\u8bed\u79cd\u548c\u5916\u6765\u8bcd\u8bcd\u5178\u7684\u4f18\u5148\u7ea7\u4e0d\u540c\uff0c\u8f93\u51fa\u7684\u97f3\u7d20\u5e8f\u5217\u6709\u65f6\u4e5f\u4f1a\u6709\u6240\u4e0d\u540c\u3002\u4e00\u4e2a\u8f83\u597d\u7684\u5904\u7406\u903b\u8f91\u662f\uff0c\u6700\u7279\u6b8a\u3001\u6700\u6709\u53ef\u80fd\u7684\u5355\u8bcd\u4f18\u5148\u5904\u7406\u3002\u9996\u5148\u5904\u7406\u7f29\u7565\u8bcd\u7684\u53d1\u97f3\uff0c\u5982\u679c\u5b58\u5728\u4e8e\u7f29\u7565\u8bcd\u8bcd\u5178\u4e2d\u6216\u8005\u5355\u8bcd\u5168\u5927\u5199\u65f6\uff0c\u5219\u8ba4\u4e3a\u662f\u7f29\u7565\u8bcd\uff0c\u5982\u679c\u7f29\u7565\u8bcd\u8bcd\u5178\u4e2d\u6709\u8be5\u8bcd\uff0c\u76f4\u63a5\u8f93\u51fa\u97f3\u7d20\u5e8f\u5217\uff0c\u5426\u5219\u6309\u7167\u89c4\u5219\uff0c\u6bd4\u5982\u6309\u7167\u6bcf\u4e2a\u5b57\u6bcd\u7684\u53d1\u97f3\u9010\u4e2a\u7ed9\u51fa\u53d1\u97f3\uff1b\u4e4b\u540e\u5904\u7406\u672c\u571f\u8bcd\u7684\u53d1\u97f3\uff0c\u5982\u679c\u5b58\u5728\u4e8e\u672c\u571f\u8bcd\u8bcd\u5178\u4e2d\uff0c\u5219\u8ba4\u4e3a\u662f\u672c\u571f\u8bcd\uff0c\u76f4\u63a5\u4ece\u8bcd\u5178\u4e2d\u7ed9\u51fa\u97f3\u7d20\u5e8f\u5217\uff1b\u63a5\u4e0b\u6765\u5904\u7406\u82f1\u8bed\u5355\u8bcd\uff0c\u5982\u679c\u662f\u82f1\u8bed\u6536\u5f55\u8bcd\uff0c\u5219\u53ef\u4ee5\u76f4\u63a5\u4ece\u8bcd\u5178\u4e2d\u53d6\u51fa\u8be5\u82f1\u8bed\u8bcd\u7684\u97f3\u7d20\u5e8f\u5217\uff0c\u83b7\u5f97\u82f1\u8bed\u8bcd\u7684\u97f3\u7d20\u5e8f\u5217\u4e4b\u540e\uff0c\u6ce8\u610f\u8981\u5c06\u82f1\u8bed\u97f3\u7d20\u8f6c\u6362\u4e3a\u672c\u571f\u97f3\u7d20\u3002\u5f53\u7136\uff0c\u8bcd\u5178\u5f88\u96be\u8986\u76d6\u6240\u6709\u8bcd\uff0c\u7279\u522b\u662f\u8bed\u79cd\u6784\u5efa\u7684\u521d\u671f\uff0c\u5927\u90e8\u5206\u8bcd\u90fd\u662f\u96c6\u5916\u8bcd\uff0c\u9700\u8981\u5229\u7528\u4e00\u4e9b\u89c4\u5219\u6216\u6a21\u578b\u7ed9\u51fa\u5355\u8bcd\u7684\u53d1\u97f3\u3002\u6784\u5efa\u6587\u672c\u8f6c\u97f3\u7d20\u89c4\u5219\u7684\u4e00\u822c\u6b65\u9aa4\u662f\uff1a \u8c03\u7814\u516c\u5f00\u8d44\u6599\uff0c\u4e86\u89e3\u8be5\u8bed\u79cd\u662f\u5426\u6709\u91cd\u97f3\u548c\u58f0\u8c03\uff0c\u5e76\u5236\u5b9a\u5b57\u7b26\u5230\u97f3\u7d20\u7684\u8f6c\u6362\u89c4\u5219\uff0c\u6ce8\u610f\u97f3\u7d20\u8981\u6293\u5bf9\u7acb\u800c\u975e\u97f3\u53d8\uff0c\u6bd4\u5982cat[k]\u548cfat[f]\u4e2d\u7684[k/f]\u5c31\u662f\u4e00\u7ec4\u5bf9\u7acb\uff0c\u4e0d\u540c\u53d1\u97f3\u4f1a\u5bfc\u81f4\u610f\u601d\u53d1\u751f\u6539\u53d8\uff0c\u800ctell[l]\u548ctelling[l]\u4e2d\u7684[l]\u867d\u7136\u53d1\u97f3\u4e5f\u4e0d\u540c\uff0c\u4f46\u662f\u5c5e\u4e8e\u97f3\u53d8\uff0c\u53d1\u97f3\u4e0d\u540c\u5e76\u4e0d\u4f1a\u6539\u53d8\u5355\u8bcd\u542b\u4e49\uff1b \u8fed\u4ee3\uff0c\u6587\u672c\u8f6c\u97f3\u7d20\u89c4\u5219\uff0c\u4e43\u81f3\u97f3\u7d20\u4f53\u7cfb\u90fd\u662f\u4e00\u4e2a\u8fed\u4ee3\u7684\u8fc7\u7a0b\uff0c\u9700\u8981\u7ed3\u5408\u7ed9\u5b9a\u97f3\u7d20\u4e0e\u5b9e\u9645\u6a21\u578b\u5408\u6210\u7684\u53d1\u97f3\u60c5\u51b5\uff0c\u4e0d\u65ad\u5b8c\u5584\u97f3\u7d20\u89c4\u5219\u3002 \u5229\u7528\u4e00\u4e2a\u57fa\u7840\u7684\u8bcd\u5178\uff0c\u53ef\u4ee5\u8bad\u7ec3\u51fa\u4e00\u4e2aG2P\u6a21\u578b\uff0c\u7ed9\u51fa\u4efb\u610f\u4e00\u4e2a\u5355\u8bcd\u7684\u53d1\u97f3\u5e8f\u5217\u3002\u540c\u6837\u6709\u4e00\u4e9b\u5f00\u6e90\u7684G2P\u6a21\u578b\u6bd4\u5982 MfaTrainG2p \uff0cMfaG2p\u751a\u81f3\u7ed9\u51fa\u4e86\u4e00\u4e9b \u9884\u8bad\u7ec3\u6a21\u578b \u3002 cmusphinx: g2p-seq2seq \uff0c\u57fa\u4e8eTensorFlow\u7684Tensor2Tensor\u5e93\uff0c\u51c6\u786e\u7387\u8f83\u9ad8\u3002 \u5f53\u7136\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u4e00\u4e9b\u5e8f\u5217\u5efa\u6a21\u65b9\u6cd5\u6216\u8005\u4e0a\u9762\u7684\u5de5\u5177\uff0c\u6bd4\u5982 Fairseq \uff0c\u7c7b\u4f3c\u673a\u5668\u7ffb\u8bd1\uff0c\u6784\u5efa\u4e00\u4e2aG2P\u6a21\u578b\uff0c\u4ee5\u4fbf\u5728\u8bed\u79cd\u6784\u5efa\u521d\u671f\uff0c\u8fc5\u901f\u6269\u5145\u8bcd\u5178\u3002\u76f8\u5173\u7684\u53c2\u8003\u8d44\u6599\u5982\u4e0b\uff1a The Festvox Indic Frontend for Grapheme-to-Phoneme Conversion A study on rule based approach for Grapheme to Phoneme conversion of Assamese letters in Festival framework \u5728\u4ea7\u751f\u97f3\u7d20\u5e8f\u5217\u4e4b\u540e\uff0c\u6709\u65f6\u5019\u8fd8\u9700\u8981\u6309\u7167\u89c4\u5219\u5207\u5206\u97f3\u8282\uff0c\u5e76\u4e14\u7ed9\u91cd\u97f3\u3002\u7279\u522b\u662f\u591a\u4e2a\u8fde\u7eed\u8f85\u97f3\uff08Consonant\uff09\u7684\u60c5\u5f62\uff0c\u4e0d\u540c\u7684\u8bed\u79cd\u5728\u5207\u5206\u97f3\u8282\u65f6\u6709\u4e0d\u540c\u7684\u89c4\u5219\uff0c\u6bd4\u5982\u4e09\u8f85\u97f3\u60c5\u5f62\u4e0b\uff0c\u5982\u4f55\u5206\u914d\u8fd9\u4e9b\u8f85\u97f3\u6240\u5c5e\u97f3\u8282\u3002\u91cd\u97f3\u60c5\u5f62\u4e5f\u7c7b\u4f3c\uff0c\u9700\u8981\u6839\u636e\u8bed\u79cd\u786e\u5b9a\u91cd\u97f3\u89c4\u5219\u3002\u8fd9\u4e9b\u591a\u4e2a\u8fde\u7eed\u8f85\u97f3\u5206\u914d\u97f3\u8282\uff0c\u6839\u636e\u89c4\u5219\u7ed9\u5b9a\u91cd\u97f3\u5b9e\u9645\u90fd\u9700\u8981\u914d\u5408\u540e\u7aef\u6a21\u578b\u8fdb\u884c\u5b9e\u9a8c\uff0c\u7279\u522b\u662f\u76ee\u524d\u7aef\u5230\u7aef\u58f0\u5b66\u6a21\u578b\u6d41\u884c\u7684\u60c5\u5f62\u4e0b\uff0c\u4e00\u4e9b\u97f3\u8282\u7684\u5212\u5206\u3001\u91cd\u97f3\u7684\u7ed9\u5b9a\u4f4d\u7f6e\u4e5f\u8bb8\u5bf9\u58f0\u5b66\u6a21\u578b\u5e76\u6ca1\u6709\u5f71\u54cd\uff0c\u800c\u4e00\u4e9b\u8bed\u79cd\u5c31\u6709\u4e00\u5b9a\u7684\u4f18\u52a3\u4e4b\u5206\u3002 \u97f5\u5f8b\u5206\u6790 \u97f5\u5f8b\u5206\u6790\u540c\u6837\u662f\u6587\u672c\u524d\u7aef\u7684\u96be\u70b9\u4e4b\u4e00\uff0c\u4e00\u4e2a\u597d\u7684\u97f5\u5f8b\u4fe1\u606f\u53ef\u5927\u5927\u63d0\u5347\u6700\u7ec8\u5408\u6210\u8bed\u97f3\u7684\u81ea\u7136\u5ea6\u3002\u4e00\u4e2a\u7b80\u5355\u7684\u97f5\u5f8b\u89c4\u5219\u662f\uff0c\u52a0\u5165\u5355\u8bcd\u8fb9\u754c\u4f5c\u4e3aL1\uff0c\u53e5\u5b50\u4e2d\u6807\u70b9\u5904\u4f5c\u4e3aL3\uff0c\u53e5\u672b\u4f5c\u4e3aL4\uff0c\u4f46\u8fd9\u79cd\u89c4\u5219\u901a\u5e38\u5e76\u4e0d\u662f\u6700\u4f18\u7684\u3002\u97f5\u5f8b\u5206\u6790\u4e2dL3\u7684\u9884\u6d4b\u5c24\u4e3a\u91cd\u8981\uff0c\u53ef\u501f\u52a9\u4e00\u4e9b\u7b80\u5355\u6a21\u578b\uff0c\u6bd4\u5982\u51b3\u7b56\u6811\u3001CRF\u7b49\uff0c\u6784\u9020L3\u6216\u8005\u97f5\u5f8b\u76f8\u5173\u7684\u7279\u5f81\uff0c\u5982\uff1a\u524d\u4e00\u4e2a\u5355\u8bcd\uff08L1\uff09\u5185\u7684L0\u4e2a\u6570\u3001\u524d\u4e00\u4e2a\u5355\u8bcd\uff08L1\uff09\u7684\u8bcd\u6027\u3001\u524d\u524dL1\u5185\u7684\u5b57\u7b26\u4e2a\u6570\u3001\u524dL1\u5185\u7684\u5b57\u7b26\u4e2a\u6570\u3001\u540eL1\u5185\u7684\u5b57\u7b26\u4e2a\u6570\u3001\u540e\u540eL1\u5185\u7684\u5b57\u7b26\u4e2a\u6570\u3001\u672c\u5b57\u7b26\u7684ID\u548c\u524d\u4e00\u4e2a\u7a7a\u683c\u79bb\u672c\u5b57\u7b26\u7684\u5b57\u7b26\u8ddd\u79bb\u7b49\u3002\u5f53\u7136\u4e5f\u53ef\u4ee5\u4f7f\u7528\u66f4\u4e3a\u590d\u6742\u7684\u6a21\u578b\u6bd4\u5982LSTM\u751a\u81f3BERT\u53c2\u4e0e\u97f5\u5f8b\u5206\u6790\uff0c\u5c06\u95ee\u9898\u8f6c\u6362\u4e3a\u5bf9\u6bcf\u4e2a\u5b57\u7b26\u7684\u4e8c\u5206\u7c7b\uff08\u52a0\u6216\u4e0d\u52a0L3\uff09\u6216\u8005\u591a\u5206\u7c7b\u4efb\u52a1\uff08L0/L1/L3\uff09\u3002 \u6587\u672c\u524d\u7aef\u7684\u5de5\u7a0b\u5b9e\u73b0 \u7531\u4e8e\u6587\u672c\u524d\u7aef\u8f83\u4e3a\u4f9d\u8d56\u8d44\u6e90\uff0c\u6bd4\u5982\u6587\u672c\u9884\u5904\u7406\u89c4\u5219\u6587\u4ef6\u3001\u6587\u672c\u5f52\u4e00\u5316\u89c4\u5219\u6587\u4ef6\u3001\u5206\u8bcd\u548c\u6587\u672c\u8f6c\u97f3\u7d20\u5e38\u7528\u5230\u7684\u8bcd\u5178\u3001\u7528\u4e8e\u97f5\u5f8b\u5206\u6790\u7684\u6a21\u578b\u7b49\uff0c\u7279\u522b\u662f\u6587\u672c\u524d\u7aef\u5e38\u5e38\u9700\u8981\u6ca1\u6709\u4ee3\u7801\u7ecf\u9a8c\u7684\u8bed\u79cd\u4e13\u5bb6\u53c2\u4e0e\u8fdb\u6765\uff0c\u56e0\u6b64\u8981\u5c06\u8d44\u6e90\u548c\u4ee3\u7801\u5206\u79bb\u5f00\u6765\uff0c\u4fbf\u4e8e\u5de5\u7a0b\u5b9e\u73b0\u548c\u7ef4\u62a4\u3002\u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u4f5c\u4e3a\u6587\u672c\u5f52\u4e00\u5316\u89c4\u5219\u7684\u5177\u4f53\u5b9e\u73b0\uff0c\u5728\u5927\u578b\u7684\u6587\u672c\u524d\u7aef\u4e2d\u7f3a\u9677\u51f8\u73b0\u660e\u663e\uff1a\u96be\u4ee5\u9605\u8bfb\u548c\u7ef4\u62a4\uff0c\u5e76\u4e14\u89c4\u5219\u51b2\u7a81\u4e25\u91cd\u3002\u4e00\u4e2a\u6298\u4e2d\u7684\u505a\u6cd5\u662f\u81ea\u5b9a\u4e49\u89c4\u5219\u6587\u4ef6\uff0c\u5c06\u4e00\u6761\u6761\u89c4\u5219\u4ee5\u4f18\u5148\u7ea7\u3001\u5339\u914d\u6761\u4ef6\u548c\u8f93\u51fa\u7684\u5f62\u5f0f\u5448\u73b0\u3002 \u603b\u7ed3 \u672c\u7ae0\u4e3b\u8981\u4ecb\u7ecd\u8bed\u97f3\u5408\u6210\u4e2d\u97f3\u5e93\u6784\u5efa\u548c\u6587\u672c\u524d\u7aef\u3002\u9700\u8981\u8bf4\u660e\u7684\u662f\uff0c\u6587\u672c\u524d\u7aef\u751a\u81f3\u6574\u4e2a\u8bed\u97f3\u5408\u6210\u7cfb\u7edf\u7684\u6784\u5efa\u90fd\u4e0d\u662f\u4e00\u8e74\u800c\u5c31\u7684\uff0c\u901a\u5e38\u9700\u8981\u53cd\u590d\u8bc4\u6d4b\u8fed\u4ee3\u3002\u6784\u5efa\u4e00\u4e2a\u97f3\u7d20\u8986\u76d6\u5168\u3001\u5408\u7406\u7684\u6d4b\u8bd5\u96c6\uff0c\u4e4b\u540e\u6bcd\u8bed\u8005\u6216\u8005\u5b66\u4e60\u8005\u8fdb\u884c\u8bc4\u6d4b\u548c\u5206\u6790\u95ee\u9898\uff0c\u786e\u4fdd\u8bc4\u6d4b\u6807\u51c6\u5408\u7406\u3002\u800c\u4e0a\u7ebf\u65f6\uff0c\u5c31\u8981\u786e\u4fdd\u7ebf\u4e0a\u7ebf\u4e0a\u4e00\u81f4\u6027\uff0c\u6587\u672c\u524d\u7aef\u3001\u58f0\u5b66\u6a21\u578b\u3001\u58f0\u7801\u5668\u4e00\u4e2a\u6a21\u5757\u4e00\u4e2a\u6a21\u5757\u5bf9\u9f50\u4e00\u81f4\uff0c\u624d\u80fd\u6700\u7ec8\u5448\u73b0\u51fa\u4e00\u4e2a\u6027\u80fd\u826f\u597d\u7684\u8bed\u97f3\u5408\u6210\u7cfb\u7edf\u3002","title":"\u97f3\u5e93\u5236\u4f5c\u548c\u6587\u672c\u524d\u7aef"},{"location":"tts/%E9%9F%B3%E5%BA%93%E5%88%B6%E4%BD%9C%E5%92%8C%E6%96%87%E6%9C%AC%E5%89%8D%E7%AB%AF/#_1","text":"","title":"\u97f3\u5e93\u5236\u4f5c\u548c\u6587\u672c\u524d\u7aef"},{"location":"tts/%E9%9F%B3%E5%BA%93%E5%88%B6%E4%BD%9C%E5%92%8C%E6%96%87%E6%9C%AC%E5%89%8D%E7%AB%AF/#_2","text":"","title":"\u97f3\u5e93\u5236\u4f5c"},{"location":"tts/%E9%9F%B3%E5%BA%93%E5%88%B6%E4%BD%9C%E5%92%8C%E6%96%87%E6%9C%AC%E5%89%8D%E7%AB%AF/#_3","text":"\u97f3\u5e93\u7684\u5236\u4f5c\u4e00\u822c\u5305\u62ec\u53d1\u97f3\u4eba\u9009\u578b\u3001\u5f55\u97f3\u6587\u672c\u6536\u96c6\u3001\u97f3\u9891\u5f55\u5236\u3001\u8bed\u6599\u6574\u7406\u548c\u6807\u6ce85\u4e2a\u6b65\u9aa4\u3002\u97f3\u5e93\u7684\u5236\u4f5c\u5bf9\u6574\u4e2a\u8bed\u97f3\u5408\u6210\u7cfb\u7edf\u7684\u5efa\u8bbe\u8f83\u4e3a\u91cd\u8981\uff0c\u97f3\u5e93\u5982\u679c\u5efa\u8bbe\u8f83\u5dee\uff0c\u6bd4\u5982\u53d1\u97f3\u4eba\u98ce\u683c\u96be\u4ee5\u63a5\u53d7\u3001\u6807\u6ce8\u548c\u5b9e\u9645\u97f3\u9891\u4e0d\u7b26\uff0c\u4e4b\u540e\u7684\u52aa\u529b\u53ea\u4f1a\u4e8b\u500d\u529f\u534a\u3002","title":"\u97f3\u5e93\u5236\u4f5c\u6982\u8ff0"},{"location":"tts/%E9%9F%B3%E5%BA%93%E5%88%B6%E4%BD%9C%E5%92%8C%E6%96%87%E6%9C%AC%E5%89%8D%E7%AB%AF/#_4","text":"\u53d1\u97f3\u4eba\u9009\u578b\uff0c\u987e\u540d\u601d\u4e49\uff0c\u5c31\u662f\u6839\u636e\u5e94\u7528\u573a\u666f\u9009\u62e9\u5f55\u97f3\u98ce\u683c\u3001\u53d1\u97f3\u4eba\u7b49\u3002\u9996\u5148\uff0c\u8bed\u97f3\u5408\u6210\u7cfb\u7edf\u5728\u4e0d\u540c\u573a\u666f\u4e0b\uff0c\u5bf9\u8bad\u7ec3\u8bed\u6599\u7684\u8981\u6c42\u6709\u6240\u4e0d\u540c\u3002\u6bd4\u5982\u65b0\u95fb\u64ad\u62a5\u573a\u666f\u4e0b\uff0c\u8981\u6c42\u53d1\u97f3\u4eba\u64ad\u62a5\u98ce\uff1b\u6709\u58f0\u4e66\u5408\u6210\u573a\u666f\u4e0b\uff0c\u8981\u6c42\u53d1\u97f3\u4eba\u6291\u626c\u987f\u632b\uff0c\u5bcc\u6709\u611f\u60c5\uff1b\u5728\u8f66\u8f7d\u7b49\u9886\u57df\uff0c\u5219\u8981\u6c42\u4ea4\u4e92\u98ce\uff1b\u5728\u60c5\u611f\u8bed\u97f3\u5408\u6210\u5219\u8981\u6c42\u5f55\u5236\u4e0d\u540c\u60c5\u611f\u7684\u8bed\u97f3\uff1b\u751a\u81f3\u5728\u4e00\u4e9b\u7279\u5b9a\u573a\u666f\u4e0b\uff0c\u6bd4\u5982\u4e8c\u6b21\u5143\u9886\u57df\uff0c\u5219\u8981\u6c42\u53ef\u7231\u98ce\u7b49\u7b49\u3002\u5176\u6b21\uff0c\u4e0d\u540c\u7684\u53d1\u97f3\u4eba\u5bf9\u6700\u7ec8\u7684\u5408\u6210\u8bed\u97f3\u81ea\u7136\u5ea6\u4e5f\u6709\u5f71\u54cd\uff0c\u90e8\u5206\u53d1\u97f3\u4eba\u53d1\u97f3\u82cd\u8001\u3001\u4f4e\u6c89\uff0c\u5373\u4f7f\u540c\u6837\u7684\u6587\u672c\u3001\u58f0\u5b66\u6a21\u578b\u548c\u58f0\u7801\u5668\uff0c\u6700\u4f18\u7684\u8d85\u53c2\u6570\uff0c\u6bcd\u8bed\u8005\u4e5f\u503e\u5411\u4e8e\u7ed9\u4e88\u8f83\u4f4e\u7684\u81ea\u7136\u5ea6\u6253\u5206\u3002\u56e0\u6b64\uff0c\u5728\u97f3\u5e93\u5f55\u97f3\u4e4b\u521d\uff0c\u5c31\u53ef\u4ee5\u53d1\u5e03\u6709\u5173\u4e8e\u5f55\u97f3\u6837\u54c1\u7684\u5e73\u5747\u610f\u89c1\u5f97\u5206\u8bc4\u6d4b\uff0c\u8ba9\u6bcd\u8bed\u8005\u6216\u8005\u9700\u6c42\u65b9\u9009\u62e9\u5408\u9002\u7684\u53d1\u97f3\u4eba\u548c\u5f55\u97f3\u98ce\u683c\u3002\u867d\u7136\u76ee\u524d\u540e\u7aef\u6a21\u578b\u6709\u4e00\u4e9b\u8fc1\u79fb\u98ce\u683c\u3001\u8bf4\u8bdd\u4eba\u7684\u80fd\u529b\uff0c\u4f46\u6700\u597d\u4ece\u6e90\u5934\u5c31\u505a\u597d\u3002","title":"\u53d1\u97f3\u4eba\u9009\u578b"},{"location":"tts/%E9%9F%B3%E5%BA%93%E5%88%B6%E4%BD%9C%E5%92%8C%E6%96%87%E6%9C%AC%E5%89%8D%E7%AB%AF/#_5","text":"\u5728\u4e00\u4e2a\u8bed\u79cd\u7684\u8bed\u97f3\u5408\u6210\u5efa\u8bbe\u4e4b\u521d\uff0c\u5c31\u53ef\u4ee5\u540c\u6b65\u6536\u96c6\u8be5\u8bed\u79cd\u5bf9\u5e94\u7684\u5927\u6587\u672c\u3002\u5927\u6587\u672c\u4e0d\u4ec5\u4ec5\u53ef\u4ee5\u7b5b\u9009\u5f55\u97f3\u6587\u672c\uff0c\u8fd8\u53ef\u4ee5\u4ece\u4e2d\u63d0\u53d6\u8bcd\u6761\u3001\u7edf\u8ba1\u8bcd\u9891\u3001\u5236\u4f5c\u8bcd\u5178\u3001\u6807\u6ce8\u97f5\u5f8b\u3001\u6784\u5efa\u6d4b\u8bd5\u96c6\u7b49\u7b49\u3002\u5f55\u97f3\u6587\u672c\u7684\u9009\u62e9\u4e00\u822c\u9075\u5faa\u4ee5\u4e0b\u51e0\u4e2a\u539f\u5219\uff1a \u97f3\u7d20\u8986\u76d6\u3002\u8fd9\u5c31\u8981\u6c42\u5728\u5f55\u97f3\u5f00\u59cb\u4e4b\u524d\uff0c\u5c31\u9700\u8981\u6784\u5efa\u8d77\u6765\u4e00\u5957\u57fa\u7840\u7684\u6587\u672c\u524d\u7aef\uff0c\u6700\u8d77\u7801\u8981\u6709\u7b80\u5355\u7684\u6587\u672c\u8f6c\u97f3\u7d20\uff08G2P\uff09\u7cfb\u7edf\u3002\u5927\u90e8\u5206\u8bed\u79cd\u7684\u5b57\u7b26\u6216\u8005\u5b57\u7b26\u7ec4\u5408\u4f1a\u6709\u8f83\u4e3a\u56fa\u5b9a\u7684\u53d1\u97f3\uff0c\u6bd4\u5982\u82f1\u8bed\u4e2d\u7684h\u603b\u662f\u4f1a\u53d1[h]\u7684\u97f3\uff0co\u603b\u662f\u4f1a\u53d1[eu]\u7684\u97f3\uff0c\u5982\u679c\u627e\u4e0d\u5230\u516c\u5f00\u3001\u5373\u65f6\u53ef\u7528\u7684\u6587\u672c\u8f6c\u97f3\u7d20\u7cfb\u7edf\uff0c\u53ef\u4ee5\u6839\u636e\u89c4\u5219\u6784\u5efa\u3002\u7528\u4e8e\u5f55\u97f3\u7684\u6587\u672c\u8981\u4fdd\u6301\u591a\u6837\u6027\uff0c\u97f3\u7d20\u6216\u8005\u97f3\u7d20\u7ec4\u5408\u8981\u5c3d\u53ef\u80fd\u8986\u76d6\u5168\uff0c\u53ef\u4ee5\u7edf\u8ba1\u97f3\u7d20\u5e8f\u5217\u4e2d\u7684N-Gram\uff0c\u786e\u4fdd\u67d0\u4e9b\u97f3\u7d20\u6216\u8005\u97f3\u7d20\u7ec4\u5408\u51fa\u73b0\u9891\u6b21\u8fc7\u9ad8\uff0c\u800c\u67d0\u4e9b\u97f3\u7d20\u6216\u97f3\u7d20\u7ec4\u5408\u53c8\u9c9c\u5c11\u51fa\u73b0\u3002 \u573a\u666f\u5b9a\u5236\u3002\u5982\u679c\u662f\u901a\u7528\u8bed\u97f3\u5408\u6210\uff0c\u9700\u8981\u786e\u4fdd\u767e\u79d1\u3001\u65b0\u95fb\u3001\u5bf9\u8bdd\u3001\u9ad8\u9891\u8bcd\u3001\u57fa\u6570\u8bcd\u548c\u5e8f\u6570\u8bcd\u7b49\u6570\u5b57\u4e32\u3001\u5305\u542b\u5e38\u7528\u5916\u6765\u8bcd\uff08\u5982\u5305\u542b\u82f1\u8bed\u5355\u8bcd\uff09\u7684\u53e5\u5b50\u8981\u6709\u6240\u8986\u76d6\uff1b\u5982\u679c\u662f\u7279\u5b9a\u573a\u666f\uff0c\u6bd4\u5982\u8f66\u8f7d\u9886\u57df\uff0c\u5219\u53ef\u4ee5\u6536\u96c6\u8f66\u8f7d\u64ad\u62a5\u7684\u5e38\u7528\u8bdd\u672f\u3001\u4e13\u4e1a\u672f\u8bed\uff08\u6bd4\u5982\u6cb9\u91cf\u3001\u80ce\u538b\u7b49\uff09\u3001\u97f3\u4e50\u540d\u6216\u6b4c\u624b\u540d\u3001\u5730\u540d\u548c\u65b0\u95fb\u64ad\u62a5\uff0c\u5728\u7279\u5b9a\u573a\u666f\u4e0b\uff0c\u9700\u8981\u5bf9\u4e1a\u52a1\u6709\u4e00\u5b9a\u7684\u7406\u89e3\uff0c\u5e76\u4e14\u5728\u4e00\u5f00\u59cb\u5c31\u8981\u548c\u9700\u6c42\u65b9\u7d27\u5bc6\u6c9f\u901a\u3002 \u6587\u672c\u6b63\u786e\u6027\u3002\u5f55\u97f3\u6587\u672c\u786e\u4fdd\u62fc\u5199\u65e0\u8bef\uff0c\u5185\u5bb9\u6b63\u786e\uff0c\u6bd4\u5982\u9700\u8981\u5220\u9664\u810f\u8bdd\u3001\u4e0d\u7b26\u5408\u5b97\u6559\u4fe1\u4ef0\u6216\u653f\u6cbb\u4e0d\u6b63\u786e\u7684\u8bed\u53e5\u7b49\u3002","title":"\u5f55\u97f3\u6587\u672c\u6536\u96c6"},{"location":"tts/%E9%9F%B3%E5%BA%93%E5%88%B6%E4%BD%9C%E5%92%8C%E6%96%87%E6%9C%AC%E5%89%8D%E7%AB%AF/#_6","text":"\u97f3\u9891\u7684\u5f55\u5236\u5bf9\u5408\u6210\u8bed\u97f3\u7684\u8868\u73b0\u8f83\u4e3a\u91cd\u8981\uff0c\u8f83\u5dee\u7684\u8bed\u97f3\u751a\u81f3\u4f1a\u5bfc\u81f4\u7aef\u5230\u7aef\u58f0\u5b66\u6a21\u578b\u65e0\u6cd5\u6b63\u5e38\u6536\u655b\u3002\u7528\u4e8e\u8bad\u7ec3\u7684\u5f55\u97f3\u81f3\u5c11\u8981\u4fdd\u8bc1\u5f55\u97f3\u73af\u5883\u548c\u8bbe\u5907\u59cb\u7ec8\u4fdd\u6301\u4e00\u81f4\uff0c\u65e0\u6df7\u54cd\u3001\u80cc\u666f\u566a\u97f3\uff1b\u539f\u59cb\u5f55\u97f3\u4e0d\u53ef\u622a\u5e45\uff1b\u5982\u679c\u5e0c\u671b\u5408\u6210\u51fa\u6765\u7684\u8bed\u97f3\u5e72\u51c0\uff0c\u5219\u8981\u5220\u9664\u542b\u53e3\u6c34\u97f3\u3001\u547c\u5438\u97f3\u3001\u6742\u97f3\u3001\u6a21\u7cca\u7b49\uff0c\u4f46\u5bf9\u4e8e\u76ee\u524d\u7684\u7aef\u5230\u7aef\u5408\u6210\u6a21\u578b\uff0c\u6709\u65f6\u4f1a\u5b66\u4e60\u5230\u5728\u5408\u9002\u7684\u4f4d\u7f6e\u5408\u6210\u547c\u5438\u97f3\u3001\u53e3\u6c34\u97f3\uff0c\u53cd\u800c\u4f1a\u589e\u52a0\u8bed\u97f3\u81ea\u7136\u5ea6\u3002\u5f55\u97f3\u5c3d\u53ef\u80fd\u4e0d\u8981\u4e8b\u5148\u5904\u7406\uff0c\u8bed\u901f\u7684\u8c03\u8282\u5c1a\u53ef\uff0c\u4f46\u8c03\u8282\u97f3\u6548\u7b49\u6709\u65f6\u4f1a\u9020\u6210\u5947\u602a\u7684\u95ee\u9898\uff0c\u751a\u81f3\u5bfc\u81f4\u58f0\u5b66\u6a21\u578b\u65e0\u6cd5\u6536\u655b\u3002\u97f3\u9891\u7684\u5f55\u5236\u53ef\u4ee5\u53c2\u8003\u5f55\u97f3\u516c\u53f8\u7684\u6807\u51c6\uff0c\u8d2d\u4e70\u4e13\u4e1a\u9ea6\u514b\u98ce\uff0c\u5e76\u4fdd\u6301\u5f55\u97f3\u73af\u5883\u5b89\u9759\u5373\u53ef\u3002\u5728\u97f3\u5e93\u5f55\u5236\u8fc7\u7a0b\u4e2d\uff0c\u53ef\u5c3d\u65e9\u63d0\u524d\u5c1d\u8bd5\u58f0\u5b66\u6a21\u578b\uff0c\u6bd4\u5982\u97f3\u5e93\u5f55\u52362\u4e2a\u5c0f\u65f6\u8bed\u97f3\u540e\uff0c\u5c31\u53ef\u5c1d\u8bd5\u8bad\u7ec3\u57fa\u7ebf\u8bed\u97f3\u5408\u6210\u7cfb\u7edf\uff0c\u4ee5\u9632\u6b62\u5f55\u97f3\u4e0d\u7b26\u5408\u6700\u7ec8\u7684\u9700\u6c42\u3002","title":"\u97f3\u9891\u5f55\u5236"},{"location":"tts/%E9%9F%B3%E5%BA%93%E5%88%B6%E4%BD%9C%E5%92%8C%E6%96%87%E6%9C%AC%E5%89%8D%E7%AB%AF/#_7","text":"\u68c0\u67e5\u6587\u672c\u548c\u5f55\u5236\u7684\u8bed\u97f3\u662f\u5426\u4e00\u4e00\u5bf9\u5e94\uff0c\u5f55\u5236\u7684\u97f3\u9891\u672c\u8eab\u4e00\u53e5\u8bdd\u662f\u5426\u80fd\u91cf\u6e10\u5f31\uff0c\u53c2\u4e0e\u8bad\u7ec3\u7684\u8bed\u97f3\u524d\u540e\u9759\u97f3\u6bb5\u8981\u4fdd\u6301\u4e00\u81f4\uff0c\u80fd\u91cf\u8981\u8fdb\u884c\u89c4\u8303\u5316\u3002\u53ef\u4f7f\u7528\u9884\u8bad\u7ec3\u7684\u8bed\u97f3\u6d3b\u52a8\u68c0\u6d4b\uff08Voice Activity Detection\uff0cVAD\uff09\u5de5\u5177\uff0c\u6216\u8005\u76f4\u63a5\u6839\u636e\u8bed\u97f3\u8d77\u6b62\u7684\u7535\u5e73\u503c\u786e\u5b9a\u524d\u540e\u9759\u97f3\u6bb5\u3002\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e9b\u5f00\u6e90\u7684\u5de5\u5177\uff0c\u6bd4\u5982 pyloudnorm \u7edf\u4e00\u6240\u6709\u8bed\u97f3\u7684\u6574\u4f53\u80fd\u91cf\uff0c\u8fd9\u5c06\u6709\u52a9\u4e8e\u58f0\u5b66\u6a21\u578b\u7684\u6536\u655b\u3002\u5f53\u7136\uff0c\u5728\u58f0\u5b66\u6a21\u578b\u6a21\u578b\u8bad\u7ec3\u65f6\uff0c\u9996\u5148\u5c31\u8981\u5bf9\u6240\u6709\u8bed\u6599\u8ba1\u7b97\u5747\u503c\u65b9\u5dee\uff0c\u8fdb\u884c\u7edf\u4e00\u7684\u89c4\u8303\u5316\uff0c\u4f46\u662f\u8fd9\u91cc\u6700\u597d\u5b9e\u73b0\u7edf\u4e00\u80fd\u91cf\u6c34\u5e73\uff0c\u9632\u6b62\u4e00\u53e5\u8bdd\u524d\u540e\u80fd\u91cf\u4e0d\u4e00\u81f4\u3002\u80fd\u91cf\u89c4\u6574\u7684\u793a\u4f8b\u4ee3\u7801\u5982\u4e0b\u3002 1 2 3 4 5 6 7 8 9 def normalize_wav ( wav_path , sample_rate , target_loudness =- 24.0 ) y , sr = librosa . load ( YOUR_WAV_PATH , sr = SAMPLE_RATE ) meter = pyln . Meter ( sr ) # create BS.1770 meter loudness = meter . integrated_loudness ( y ) y = pyln . normalize . loudness ( y , loudness , target_loudness ) peak = np . abs ( y ) . max () if peak >= 1 : y = y / peak * 0.999 return y","title":"\u8bed\u6599\u6574\u7406"},{"location":"tts/%E9%9F%B3%E5%BA%93%E5%88%B6%E4%BD%9C%E5%92%8C%E6%96%87%E6%9C%AC%E5%89%8D%E7%AB%AF/#_8","text":"\u6807\u6ce8\u662f\u6240\u6709\u6a21\u578b\u90fd\u4f1a\u9047\u5230\u7684\u95ee\u9898\uff0c\u4f46\u8bed\u97f3\u5408\u6210\u4e2d\u6240\u6709\u8bed\u6599\uff0c\u7279\u522b\u662f\u97f3\u7d20\u3001\u97f3\u7d20\u65f6\u957f\u8ba9\u4eba\u7c7b\u4e00\u4e00\u6807\u6ce8\u662f\u4e0d\u73b0\u5b9e\u7684\uff0c\u4e00\u822c\u662f\u5229\u7528\u6587\u672c\u524d\u7aef\u4ea7\u751f\u4e00\u4e2a\u57fa\u7ebf\u7684\u97f3\u7d20\u5e8f\u5217\u548c\u97f3\u7d20\u65f6\u957f\uff0c\u7136\u540e\u8ba9\u4eba\u7c7b\u53c2\u4e0e\u68c0\u67e5\u3002\u8bed\u97f3\u5408\u6210\u4e2d\u7684\u6807\u6ce8\u8981\u68c0\u67e5\u4ee5\u4e0b\u51e0\u70b9\uff1a \u97f3\u7d20\u5c42\u7ea7\u3002\u68c0\u67e5\u8bed\u97f3\u548c\u97f3\u7d20\u7684\u4e00\u81f4\u6027\uff1b\u68c0\u67e5\u91cd\u97f3\u6216\u97f3\u8c03\u6807\u6ce8\uff1b\u8c03\u6574\u97f3\u7d20\u8fb9\u754c\u3002 \u5355\u8bcd\u5c42\u7ea7\u3002\u68c0\u67e5\u5355\u8bcd\u7684\u5f31\u5316\u8bfb\u97f3\u60c5\u5f62\uff0c\u6bd4\u5982car[r]\u67d0\u4e9b\u53d1\u97f3\u4eba\u5b8c\u5168\u5f31\u8bfb[r]\uff0c\u6839\u636e\u5f55\u97f3\u5220\u9664\u8be5\u97f3\u7d20[r]\uff0c\u6216\u8005\u7ed9\u4e88\u4e00\u4e2a\u65b0\u7684\u97f3\u7d20\uff1b\u5916\u6765\u8bcd\u548c\u7f29\u7565\u8bcd\u7684\u53d1\u97f3\u60c5\u51b5\uff0c\u4e0d\u540c\u97f3\u5e93\u53ef\u80fd\u6709\u4e0d\u540c\u7684\u5904\u7406\u65b9\u6cd5\uff1b\u8c03\u6574\u5355\u8bcd\u8fb9\u754c\u3002 \u53e5\u5b50\u5c42\u7ea7\u3002\u589e\u5220\u505c\u987f\uff0c\u786e\u4fdd\u548c\u5b9e\u9645\u5f55\u97f3\u4e00\u81f4\u3002 \u6807\u6ce8\u4eba\u5458\u53ef\u4ee5\u91c7\u7528 Praat \u8fdb\u884c\u53ef\u89c6\u5316\u6807\u6ce8\u548c\u68c0\u67e5\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u4e3a\u5229\u7528Praat\u6807\u6ce8\u8bed\u6599\u7684\u793a\u4f8b\u3002 \u603b\u800c\u8a00\u4e4b\uff0c\u5f55\u97f3\u5b8c\u6210\u540e\uff0c\u97f3\u7d20\u5e8f\u5217\u8ddf\u7740\u5f55\u97f3\u8d70\uff0c\u8bed\u97f3\u5982\u4f55\u53d1\u97f3\uff0c\u97f3\u7d20\u5e8f\u5217\u5c31\u4e25\u683c\u6309\u7167\u8bed\u97f3\u6807\u6ce8\uff0c\u5b9e\u5728\u4e0d\u884c\u5c31\u53d1\u56de\u91cd\u5f55\u3002\u5728\u8bed\u97f3\u5408\u6210\u4e2d\uff0c\u540c\u6837\u7684\u97f3\u9891\uff0c\u4e0d\u540c\u573a\u666f\u7684\u6807\u6ce8\u6709\u53ef\u80fd\u662f\u6709\u7ec6\u5fae\u53d8\u5316\u7684\u3002\u6bd4\u5982\u5728\u65b0\u95fb\u64ad\u62a5\u573a\u666f\u4e0b\uff0c\u53d1\u97f3\u98ce\u683c\u6bd4\u8f83\u5e73\u6de1\uff0c\u67d0\u4e9b\u7ec6\u5fae\u7684\u505c\u987f\u548c\u97f5\u5f8b\u53d8\u5316\u53ef\u4ee5\u4e0d\u7528\u5728\u610f\uff0c\u6807\u6ce8\u4e0a\u4e5f\u53ef\u4ee5\u4e0d\u4f53\u73b0\uff1b\u4f46\u662f\u5728\u4ea4\u4e92\u6216\u8005\u5c0f\u8bf4\u9886\u57df\uff0c\u53d1\u97f3\u98ce\u683c\u7684\u53d8\u5316\u8f83\u4e3a\u4e30\u5bcc\uff0c\u5bf9\u97f5\u5f8b\u548c\u60c5\u611f\u63a7\u5236\u8981\u6c42\u8f83\u9ad8\uff0c\u56e0\u6b64\u6807\u6ce8\u53ef\u80fd\u66f4\u4e3a\u7cbe\u7ec6\uff0c\u751a\u81f3\u4f1a\u589e\u52a0\u989d\u5916\u7684\u6807\u6ce8\u4fe1\u606f\uff0c\u505c\u987f\u3001\u97f5\u5f8b\u7b49\u4fe1\u606f\u7684\u6807\u6ce8\u53ef\u80fd\u548c\u64ad\u62a5\u98ce\u6709\u6240\u4e0d\u540c\u3002 \u5e38\u89c1\u7684\u8bed\u97f3\u5408\u6210\u4e13\u4e1a\u6570\u636e\u63d0\u4f9b\u5546\u6709 \u6d77\u5929\u745e\u58f0 \u3001 \u6807\u8d1d\u79d1\u6280 \u3001 \u5e0c\u5c14\u8d1d\u58f3 \u7b49\u3002","title":"\u6807\u6ce8"},{"location":"tts/%E9%9F%B3%E5%BA%93%E5%88%B6%E4%BD%9C%E5%92%8C%E6%96%87%E6%9C%AC%E5%89%8D%E7%AB%AF/#_9","text":"","title":"\u6587\u672c\u524d\u7aef"},{"location":"tts/%E9%9F%B3%E5%BA%93%E5%88%B6%E4%BD%9C%E5%92%8C%E6%96%87%E6%9C%AC%E5%89%8D%E7%AB%AF/#_10","text":"\u8bed\u97f3\u5408\u6210\uff0c\u987e\u540d\u601d\u4e49\uff0c\u662f\u4e00\u9879\u5c06\u6587\u672c\u8f6c\u5316\u4e3a\u8bed\u97f3\u7684\u6280\u672f\u3002\u4ee5Google\u7684 Tacotron \u7cfb\u5217\u4e3a\u4ee3\u8868\u7684\u7aef\u5230\u7aef\u8bed\u97f3\u5408\u6210\u6280\u672f\u5927\u5927\u964d\u4f4e\u4e86\u8bed\u97f3\u5408\u6210\u7684\u6280\u672f\u95e8\u69db\u3002\u5bf9\u4e8e\u8868\u97f3\u8bed\u8a00\u6bd4\u5982\u82f1\u6cd5\u897f\u5fb7\u610f\u7b49\u8bed\u79cd\uff0c\u751a\u81f3\u53ef\u4ee5\u76f4\u63a5\u8f93\u5165\u6587\u672c\uff0c\u8ba9\u6a21\u578b\u81ea\u884c\u5b66\u4e60\u5982\u4f55\u5c06\u6587\u672c\u8f6c\u5316\u5230\u8bed\u97f3\u3002\u4f46\u662f\u5728\u5b9e\u9645\u7684\u751f\u4ea7\u73af\u5883\u4e2d\uff0c\u76f4\u63a5\u6587\u672c\u5230\u8bed\u97f3\u4f1a\u5e26\u6765\u8f83\u5927\u7684\u4e0d\u53ef\u63a7\u98ce\u9669\uff0c\u6bd4\u5982\"love\"/l\u028cv/\u8bfb\u6210\u4e86/l\u026av/\uff0c\u5982\u4f55\u5feb\u901f\u7ea0\u6b63\u7c7b\u4f3c\u7684\u53d1\u97f3\u9519\u8bef\uff1b\"2kg\"\u5982\u4f55\u6307\u5b9a\u6a21\u578b\u8bfb\u6210\"\u4e24\u5343\u514b\"\uff0c\u800c\u975e\"\u4e8ckg\"\u7b49\u3002\u56e0\u6b64\u5728\u5b9e\u9645\u7684\u8bed\u97f3\u5408\u6210\u7cfb\u7edf\u4e2d\uff0c\u901a\u5e38\u4f1a\u4e3a\u8bed\u97f3\u5408\u6210\u7cfb\u7edf\u6dfb\u52a0\u6587\u672c\u524d\u7aef\uff0c\u4e3b\u8981\u4f5c\u7528\u662f\u5c06\u6587\u672c\u8f6c\u6362\u4e3a\u97f3\u7d20\uff0c\u751a\u81f3\u4f1a\u6dfb\u52a0\u4e00\u4e9b\u97f5\u5f8b\u6807\u8bc6\u6784\u6210\u8bed\u8a00\u5b66\u7279\u5f81\uff08linguistic feature\uff09\uff0c\u4ee5\u4fbf\u58f0\u5b66\u6a21\u578b\u66f4\u597d\u5730\u5efa\u7acb\u6587\u672c\u5230\u8bed\u97f3\u7684\u6620\u5c04\u3002","title":"\u6587\u672c\u524d\u7aef\u5728\u8bed\u97f3\u5408\u6210\u4e2d\u626e\u6f14\u7684\u89d2\u8272"},{"location":"tts/%E9%9F%B3%E5%BA%93%E5%88%B6%E4%BD%9C%E5%92%8C%E6%96%87%E6%9C%AC%E5%89%8D%E7%AB%AF/#_11","text":"\u6587\u672c\u524d\u7aef\u4e00\u822c\u9075\u5faa\u6587\u672c\uff0c\u5230\u89c4\u8303\u5316\u6587\u672c\uff0c\u5230\u97f3\u7d20\u8fd93\u4e2a\u57fa\u672c\u6b65\u9aa4\uff0c\u540c\u65f6\u4f1a\u4ece\u6587\u672c\u548c\u89c4\u8303\u5316\u6587\u672c\u4e2d\u9884\u6d4b\u97f5\u5f8b\u3002\u97f3\u7d20\u548c\u97f5\u5f8b\u6807\u8bc6\u7edf\u79f0\u4e3a\u8bed\u8a00\u5b66\u7279\u5f81\uff08linguistic feature\uff09\u3002\u6587\u672c\u524d\u7aef\u7684\u8f93\u51fa\u4f5c\u4e3a\u4e0b\u6e38\u58f0\u5b66\u6a21\u578b\u548c\u58f0\u7801\u5668\u7684\u8f93\u5165\uff0c\u5982\u679c\u53d1\u751f\u53d1\u97f3\u9519\u8bef\u7b49\u95ee\u9898\uff0c\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u76f4\u63a5\u4fee\u6b63\u97f3\u7d20\u5e8f\u5217\u5373\u53ef\uff0c\u5927\u5927\u964d\u4f4e\u4e86\u95ee\u9898\u89e3\u51b3\u7684\u96be\u5ea6\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u6587\u672c\u524d\u7aef\u53ef\u5206\u4e3a\u4ee5\u4e0b\u4e94\u4e2a\u90e8\u5206\uff1a \u6587\u672c\u9884\u5904\u7406\uff1a\u4e3b\u8981\u662f\u89e3\u51b3\u6587\u672c\u4e2d\u4e66\u5199\u9519\u8bef\u3001\u4e00\u4e9b\u8bed\u79cd\u4e2d\u540c\u5f62\u5f02\u7801\u7b49\u95ee\u9898\u3002 \u6587\u672c\u5f52\u4e00\u5316\uff1a\u4e3b\u8981\u89e3\u51b3\u6587\u672c\u4e2d\u7684\u7279\u6b8a\u7b26\u53f7\u8bfb\u6cd5\uff0c\u6bd4\u5982\"2kg\"\u8f6c\u6362\u4e3a\"\u4e24\u5343\u514b\"\uff0c\u53e6\u5916\u8fd8\u8981\u5904\u7406\u4e00\u4e9b\u8bed\u79cd\u6bd4\u5982\u6ce2\u5170\u8bed\u3001\u4fc4\u8bed\u4e2d\u7684\u6027\u6570\u683c\u53d8\u5316\u3002 \u5206\u8bcd\uff1a\u4e00\u4e9b\u8bed\u79cd\u6bd4\u5982\u4e2d\u6587\u3001\u85cf\u8bed\u3001\u65e5\u8bed\u3001\u6cf0\u8bed\u3001\u8d8a\u5357\u8bed\u3001\u7ef4\u543e\u5c14\u8bed\u3001\u671d\u9c9c\u8bed\u7b49\u5e76\u975e\u4ee5\u7a7a\u683c\u4f5c\u4e3a\u8bcd\u8fb9\u754c\uff0c\u901a\u5e38\u9700\u8981\u5206\u8bcd\u4ee5\u4fbf\u540e\u7eed\u7684\u5904\u7406\uff0c\u4f46\u4e16\u754c\u4e0a\u5927\u90e8\u5206\u8bed\u79cd\u90fd\u4ee5\u7a7a\u683c\u4e3a\u8bcd\u8fb9\u754c\uff0c\u8be5\u6b65\u9aa4\u53ef\u7701\u7565\u3002 \u6587\u672c\u8f6c\u97f3\u7d20\uff08G2P\uff09\uff1a\u5c06\u6587\u672c\u8f6c\u6362\u4e3a\u6ce8\u97f3\uff0c\u6bd4\u5982\"\u4e2d\u56fd\"\u8f6c\u5316\u4e3a\"zhong1 guo2\"\u3002 \u97f5\u5f8b\u5206\u6790\uff1a\u8bed\u97f3\u4e2d\u6bcf\u4e2a\u97f3\u7d20\u7684\u53d1\u97f3\u65f6\u957f\u4e0d\u540c\uff0c\u505c\u987f\u4e5f\u4e0d\u540c\u3002\u5c06\u6587\u672c\u8f6c\u6362\u4e3a\u97f3\u7d20\u4e4b\u540e\uff0c\u901a\u5e38\u4f1a\u52a0\u5165\u4e00\u5b9a\u7684\u97f5\u5f8b\u4fe1\u606f\uff0c\u4ee5\u5e2e\u52a9\u58f0\u5b66\u6a21\u578b\u63d0\u5347\u5408\u6210\u8bed\u97f3\u7684\u81ea\u7136\u5ea6\uff0c\u52a0\u5165\u7684\u97f5\u5f8b\u4fe1\u606f\u53ef\u4ee5\u5206\u4e3a\u97f3\u7d20\uff08L0\uff09\u3001\u5355\u8bcd\uff08L1\uff09\u3001breath break\uff08L3\uff09\u548c\u53e5\u5b50\uff08L4\uff09\u56db\u4e2a\u97f5\u5f8b\u5c42\u7ea7\u3002","title":"\u6587\u672c\u524d\u7aef\u7684\u4e3b\u8981\u7ec4\u6210"},{"location":"tts/%E9%9F%B3%E5%BA%93%E5%88%B6%E4%BD%9C%E5%92%8C%E6%96%87%E6%9C%AC%E5%89%8D%E7%AB%AF/#unicode","text":"\u5f00\u5c55\u4e00\u4e2a\u65b0\u8bed\u79cd\u7684\u6587\u672c\u524d\u7aef\u7684\u5f00\u53d1\uff0c\u9996\u8981\u662f\u8c03\u7814\u8be5\u8bed\u79cd\u6587\u5b57\u7684\u5b57\u5f62\u3001\u8bfb\u97f3\u7b49\uff0c\u4e86\u89e3\u4e16\u754c\u5404\u8bed\u79cd\u7684\u597d\u53bb\u5904\u65e0\u7591\u662f Unicode\u5b98\u7f51 \u548c\u7ef4\u57fa\u767e\u79d1\u3002Unicode\u5c06\u4e16\u754c\u4e0a\u6240\u6709\u7684\u5b57\u7b26\u5747\u5206\u914d\u552f\u4e00\u6570\u5b57\u6807\u8bc6\uff0c\u540c\u65f6\u4e3a\u4e86\u517c\u5bb9\u548c\u8282\u7701\u7a7a\u95f4\uff0c\u5e38\u5e38\u91c7\u7528\"\u7edf\u4e00\u7801\u8f6c\u6362\u683c\u5f0f-8\"\uff08UTF-8\uff09\u3001\"\u7edf\u4e00\u7801\u8f6c\u6362\u683c\u5f0f-16\"\uff08UTF-16\uff09\u7b49\u5177\u4f53\u5b9e\u73b0\u8be5\u7f16\u7801\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u53ef\u4ee5\u8fdb\u5165 Unicode Code Charts \u67e5\u8be2\u5404\u4e2a\u8bed\u79cd\u7684\u7f16\u7801\u3002\u4ee5\u6700\u5e7f\u6cdb\u4f7f\u7528\u7684\u62c9\u4e01\u5b57\u7b26\u4e3a\u4f8b\uff0c Basic Latin (ASCII) \u6587\u6863\u4e2d\uff0c\u9996\u5148\u662f\u4e00\u9875\u7248\u6743\u58f0\u660e\uff0c\u4e4b\u540e\u5c55\u793a\u4e86\u8be5\u7c7b\u5b57\u7b26\u7684Unicode\u7801\uff0c\u6700\u540e\u662f\u5404\u4e2a\u5b57\u7b26\u7684\u7b80\u77ed\u4ecb\u7ecd\uff0c\u5e2e\u52a9\u5feb\u901f\u4e86\u89e3\u8be5\u8bed\u79cd\u3002\u5728\u4ecb\u7ecd\u65f6\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5b57\u7b26\uff0c\u6bd4\u5982\"!\"\uff0c\u9996\u5148\u7ed9\u51fa\u5b83\u7684Unicode\u7f16\u7801\"0021\"\uff08 \\(\\backslash\\) u0021\uff09\uff0c\u7136\u540e\u662f\u8be5\u5b57\u7b26\u7684\u5b57\u5f62\u5982\"!\"\uff0c\u63a5\u4e0b\u6765\u4e00\u822c\u662f\u8be5\u5b57\u7b26\u7684\u7b80\u4ecb\u6bd4\u5982\"EXCLAMATION MARK\"\uff0c\u4e4b\u540e\u4f1a\u7ed9\u51fa\u4e00\u4e9b\u8865\u5145\u4fe1\u606f\uff0c\u6bd4\u5982\"=\"\u8868\u793a\u8be5\u5b57\u7b26\u7684\u5176\u5b83\u542b\u4e49\uff0c \\(\\to\\) \u8868\u793a\u8be5\u5b57\u7b26\u7684\u76f8\u5173\u5b57\u7b26\uff0c \\(\\equiv\\) \u8868\u793a\u8be5\u5b57\u7b26\u7684\u540c\u5f62\u5f02\u7801\u3002\u540c\u5f62\u5f02\u7801\u5728\u591a\u8bed\u79cd\u7684\u6587\u672c\u524d\u7aef\u4e2d\u5c24\u5176\u9700\u8981\u6ce8\u610f\uff0c\u4f8b\u5982 Latin Extended-A \u4e2d\uff0c \\(\\backslash\\) u0100\u7684\u540c\u5f62\u5f02\u7801\u4e3a \\(\\backslash\\) u0041 \\(\\backslash\\) u0304\uff0c\u8fd9\u79cd\u540c\u5f62\u5f02\u7801\u7684\u5b57\u7b26\u9700\u8981\u7edf\u4e00\u5904\u7406\u4e3a\u4e00\u79cd\u5b57\u7b26\uff0c\u7528\u6237\u7684\u8f93\u5165\u770b\u8d77\u6765\u76f8\u540c\uff0c\u4f46\u5728\u8ba1\u7b97\u673a\u4e2d\u7684\u8868\u793a\u662f\u5b8c\u5168\u4e0d\u540c\u7684\u3002 \u6587\u672c\u524d\u7aef\u4e2d\u7684\u6587\u672c\u9884\u5904\u7406\u6a21\u5757\u4e3b\u8981\u662f\u5904\u7406\u975e\u6cd5\u8f93\u5165\u3001\u540c\u5f62\u5f02\u7801\u7684\u66ff\u6362\u7b49\u3002\u6587\u672c\u524d\u7aef\u6536\u5230\u8f93\u5165\u4e4b\u540e\uff0c\u53ef\u4ee5\u9650\u5236\u4e00\u4e9b\u8fb9\u754c\u6761\u4ef6\uff0c\u6bd4\u5982\u9632\u6b62\u7528\u6237\u5c06\u97f3\u89c6\u9891\u8f93\u5165\u6587\u672c\u524d\u7aef\uff0c\u9650\u5236\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u957f\u5ea6\u548c\u79cd\u7c7b\u7b49\uff1b\u4e4b\u540e\u5c31\u8fdb\u5165\u5305\u62ec\u540c\u5f62\u5f02\u7801\u66ff\u6362\u7684\u6587\u672c\u6e05\u7406\u6a21\u5757\u3002\u9996\u5148\u662f\u786e\u5b9a\u8f93\u5165\u6587\u672c\u7684\u8bed\u79cd\uff08\u53ef\u8981\u6c42\u7528\u6237\u63d0\u4f9b\u6216\u8005\u9650\u5236\u672c\u8bed\u97f3\u5408\u6210\u7cfb\u7edf\u7684\u4e3b\u8981\u8f93\u5165\u8bed\u79cd\uff09\uff1b\u4e4b\u540e\u662f\u901a\u7528\u5904\u7406\u89c4\u5219\uff0c\u6bd4\u5982\u5220\u9664\" \\(\\backslash\\) u200B\"\u3001\" \\(\\backslash\\) u200C\"\u7b49\u4e0d\u53ef\u89c1\u5b57\u7b26\uff0c\u7edf\u4e00\u6807\u70b9\u7b26\u53f7\uff0c\u5168\u89d2\u8f6c\u534a\u89d2\uff0c\u4e00\u4e9b\u7279\u6b8a\u6570\u5b57\u5982 \\(\\backslash\\) u00BD\u66ff\u6362\u4e3a\"\u00bd\"\u7b49\u7b49\uff1b\u7136\u540e\u662f\u672c\u8bed\u7cfb\u7684\u5904\u7406\u89c4\u5219\uff0c\u6b64\u65f6\u4e3b\u8981\u5bf9\u540c\u5f62\u5f02\u7801\u8fdb\u884c\u66ff\u6362\uff1b\u7136\u540e\u662f\u672c\u8bed\u79cd\u7684\u5904\u7406\u89c4\u5219\uff0c\u4e3b\u8981\u662f\u5904\u7406\u672c\u8bed\u79cd\u7684\u5916\u6765\u5b57\u7b26\uff0c\u6bd4\u5982\u5728\u610f\u5927\u5229\u8bed\u4e2d\uff0c\u5c06\u5947\u5f62\u602a\u72b6\u7684\u5916\u6765\u5b57\u7b26\"\u00c1\"\u3001\"\u00c3\"\u3001\"\u00c4\"\u3001\"\u00c5\"\u7edf\u4e00\u66ff\u6362\u4e3a\"A\"\uff0c\u8fde\u63a5\u8bcd\"\u00c6\"\u66ff\u6362\u4e3a\"AE\"\uff1b\u6700\u540e\u662f\u9488\u5bf9\u4e0d\u540c\u8bed\u79cd\u5b9a\u5236\u7684\u540e\u5904\u7406\u89c4\u5219\u3002\u9010\u7ea7\u5904\u7406\u7684\u597d\u5904\u662f\u4ee3\u7801\u3001\u5c42\u6b21\u6e05\u6670\uff0c\u5f53\u7136\u4e3a\u4e86\u65b9\u4fbf\uff0c\u53ef\u4ee5\u7edf\u4e00\u8fdb\u884c\u5904\u7406\u548c\u66ff\u6362\u3002 \u76f8\u5173\u7684\u53c2\u8003\u8d44\u6599\uff1a Unicdoe\u641c\u7d22 Unicode\u5b98\u7f51 Unicode\u672f\u8bed\u8868\uff08\u4e2d\u82f1\u4e92\u8bd1\uff09 Unicode\u5b9e\u7528\u5de5\u5177","title":"Unicode\u8c03\u7814\u548c\u6587\u672c\u9884\u5904\u7406"},{"location":"tts/%E9%9F%B3%E5%BA%93%E5%88%B6%E4%BD%9C%E5%92%8C%E6%96%87%E6%9C%AC%E5%89%8D%E7%AB%AF/#_12","text":"\u5f52\u4e00\u5316\u76ee\u524d\u662f\u6587\u672c\u524d\u7aef\u4e2d\u7684\u96be\u70b9\uff0c\u5b66\u672f\u754c\u548c\u5de5\u4e1a\u754c\u6700\u666e\u904d\u548c\u7cbe\u786e\u7684\u65b9\u6cd5\u8fd8\u662f\u9760\u4eba\u8089\u5806\u89c4\u5219\uff0c\u5f53\u7136\u4e5f\u9010\u6e10\u51fa\u73b0\u4e86\u89c4\u5219\u548c\u6a21\u578b\u6df7\u5408\u7684\u5f52\u4e00\u5316\u7cfb\u7edf\uff0c\u6bd4\u5982 A Hybrid Text Normalization System Using Multi-Head Self-Attention For Mandarin \u3001 Cold-Start and Interpretability: Turning Regular Expressions into Trainable Recurrent Neural Networks \u3002 \u4e00\u4e2a\u57fa\u7840\u7684\u5f52\u4e00\u5316\u6a21\u5757\u81f3\u5c11\u5e94\u8986\u76d6\u4ee5\u4e0b\u51e0\u7c7b\u89c4\u5219\uff1a\u7269\u7406\u91cf\u3001\u8d27\u5e01\u3001\u7f29\u7565\u8bed\u3001\u5e38\u7528\u673a\u6784\u540d\u6216\u4e13\u6709\u540d\u8bcd\u3001\u6570\u5b57\uff08\u5206\u6570/\u767e\u5206\u6570/\u79d1\u5b66\u8ba1\u6570\u6cd5/\u5c0f\u6570\u70b9/\u57fa\u6570\u8bcd/\u5e8f\u6570\u8bcd/\u6570\u5b57\u4e32\uff09\u3001\u7b97\u672f\u8868\u8fbe\u5f0f\u3001\u6807\u70b9\u7b26\u53f7\u3001\u65e5\u671f\uff08\u6708\u4efd/\u661f\u671f\uff09\u7684\u5404\u79cd\u8868\u793a\u3001\u65f6\u95f4\u3001\u6bd4\u5206\u3001\u7f51\u7edc\u7528\u8bed\u6216\u5916\u6765\u8bcd\u7b49\u3002 \u76f8\u5173\u7684\u53c2\u8003\u8d44\u6599\uff1a ICASSP 2020\u4e2d\u7684\u8bed\u97f3\u5408\u6210 A Hybrid Text Normalization System Using Multi-Head Self-Attention For Mandarin Cold-Start and Interpretability: Turning Regular Expressions into Trainable Recurrent Neural Networks","title":"\u6587\u672c\u89c4\u8303\u5316"},{"location":"tts/%E9%9F%B3%E5%BA%93%E5%88%B6%E4%BD%9C%E5%92%8C%E6%96%87%E6%9C%AC%E5%89%8D%E7%AB%AF/#_13","text":"\u5bf9\u4e8e\u4e16\u754c\u4e0a\u5927\u90e8\u5206\u7684\u8bed\u79cd\u6765\u8bf4\uff0c\u7a7a\u683c\u662f\u5929\u7136\u7684\u5355\u8bcd\u8fb9\u754c\uff0c\u56e0\u6b64\u5206\u8bcd\u5e76\u975e\u4e00\u4e2a\u5e38\u89c1\u4efb\u52a1\uff0c\u4ec5\u6709\u4e2d\u65e5\u97e9\u3001\u6cf0\u8bed\u3001\u8d8a\u5357\u8bed\u7b49\u8bed\u79cd\u9700\u8981\u5206\u8bcd\u3002\"\u6700\u5927\u6700\u957f\u5339\u914d\"\u662f\u7b80\u5355\u4e14\u5e38\u89c1\u7684\u5206\u8bcd\u7b97\u6cd5\uff0c\u8be5\u7b97\u6cd5\u9700\u8981\u51c6\u5907\u4e00\u4e2a\u8bcd\u5178\uff0c\u5728\u5bf9\u6587\u672c\u8fdb\u884c\u5207\u5206\u65f6\uff0c\u6839\u636e\u5207\u5206\u65b9\u5411\u7684\u4e0d\u540c\uff0c\u8fd8\u53ef\u5206\u4e3a\u524d\u5411\u3001\u540e\u5411\u3001\u524d\u540e\u5411\u6700\u957f\u5339\u914d\u7b97\u6cd5\u3002\u4ee5\"\u524d\u5411\u6700\u957f\u5339\u914d\u7b97\u6cd5\"\u4e3a\u4f8b\uff0c\u8be5\u65b9\u6cd5\u9996\u5148\u8bbe\u5b9a\u4e00\u4e2a\u8bcd\u7684\u6700\u5927\u957f\u5ea6\uff0c\u5c06\u5f85\u5207\u5206\u6587\u672c\u5f00\u59cb\u5230\u8bcd\u6700\u5927\u957f\u5ea6\u5185\u7684\u5b57\u7b26\u4f5c\u4e3a\"\u5019\u9009\u8bcd\"\uff0c\u6bcf\u6b21\u626b\u63cf\u65f6\uff0c\u5c06\u8be5\"\u5019\u9009\u8bcd\"\u548c\u8bcd\u5178\u4e2d\u7684\u8bcd\u8fdb\u884c\u5339\u914d\uff0c\u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u5c31\u7f29\u77ed\"\u5019\u9009\u8bcd\"\u7684\u957f\u5ea6\u7ee7\u7eed\u5bfb\u627e\uff0c\u76f4\u5230\u5339\u914d\u5230\u5b57\u5178\u4e2d\u7684\u8bcd\u6216\u8005\"\u5019\u9009\u8bcd\"\u6210\u4e3a\u5355\u5b57\uff0c\u7136\u540e\u7ee7\u7eed\u5207\u5206\u5269\u4f59\u6587\u672c\u3002\u4e3a\u4e86\u964d\u4f4e\"\u5019\u9009\u8bcd\"\u548c\u8bcd\u5178\u5339\u914d\u7684\u7b97\u6cd5\u590d\u6742\u5ea6\uff0c\u53ef\u4ee5\u5148\u5c06\u8bcd\u5178\u6784\u5efa\u4e3aTrie\uff08\u79f0\u524d\u7f00\u6811\u6216\u5b57\u5178\u6811\uff09\uff0c\u5bf9\u6587\u672c\u4ece\u524d\u5230\u540e\u5207\u5206\u65f6\uff0c\u6bcf\u6b21\u5c1d\u8bd5\u52a0\u5165\u5f85\u5207\u5206\u6587\u672c\u7684\u4e00\u4e2a\u5b57\u7b26\uff0c\u5e76\u67e5\u8be2\u5f53\u524d\u8282\u70b9\u7684\u6240\u6709\u5b50\u8282\u70b9\uff0c\u5982\u679c\u5f85\u52a0\u5165\u5b57\u7b26\u5b58\u5728\u4e8e\u5b50\u8282\u70b9\u4e2d\uff0c\u5219\u6cbf\u7740\u8be5\u8282\u70b9\u7ee7\u7eed\u67e5\u8be2\uff0c\u5426\u5219\u9000\u51fa\u8be5\u5b57\u7b26\uff0c\u5e76\u5c06\u4e4b\u524d\u8282\u70b9\u7684\u5b57\u7b26\u4f5c\u4e3a\u5207\u5206\u540e\u7684\u5355\u8bcd\uff0c\u4ee5\u8be5\u5b57\u7b26\u4e3a\u8d77\u59cb\u70b9\u4f5c\u4e3a\u5269\u4f59\u5f85\u5207\u5206\u6587\u672c\u3002 \u4e3a\u4e86\u63d0\u9ad8\u5206\u8bcd\u7684\u51c6\u786e\u7387\uff0c\u6761\u4ef6\u968f\u673a\u573a\u3001\u795e\u7ecf\u7f51\u7edc\u7b49\u65b9\u6cd5\u4e5f\u5e94\u7528\u5230\u4e86\u5206\u8bcd\u9886\u57df\u5e76\u53d6\u5f97\u4e86\u4e0d\u9519\u7684\u6548\u679c\u3002\u53ef\u53c2\u8003\uff1a NLP\u5206\u8bcd\u7b97\u6cd5\u6df1\u5ea6\u7efc\u8ff0 \u4e2d\u6587\u5206\u8bcd\u7b97\u6cd5\u7b80\u4ecb \u4e94\u6b3e\u4e2d\u6587\u5206\u8bcd\u5de5\u5177\u5728\u7ebfPK: Jieba, SnowNLP, PkuSeg,THULAC, HanLP \u5bf9\u4e8e\u65e5\u8bed\u6765\u8bf4\uff0c\u4e5f\u6709\u4e00\u4e9b\u6d41\u884c\u7684\u5f00\u6e90\u8bcd\u5178\uff0c\u6bd4\u5982 UniDic \u3001 mecab-ipadic-neologd \uff0c\u540c\u65f6\u4e5f\u6709\u4e00\u4e9b\u5f00\u6e90\u5206\u8bcd\u5668\u6bd4\u5982 MeCab \u3001 Kuromoji \u3001 jumanpp \u3001 Sudachi \u7b49\u3002\u53c2\u89c1\uff1a \u65e5\u8bed\u5206\u8bcd\u5668\u7684\u4ecb\u7ecd\u548c\u6bd4\u8f83 \u3002 \u5bf9\u4e8e\u6cf0\u8bed\u6765\u8bf4\uff0c\u97f3\u8282\u3001\u5355\u8bcd\u548c\u53e5\u5b50\u90fd\u9700\u8981\u5207\u5206\u3002 ssg \u4f7f\u7528\u6761\u4ef6\u968f\u673a\u573a\u5bf9\u6cf0\u8bed\u6587\u672c\u5207\u5206\u97f3\u8282\uff0c CRF-Cut \u540c\u6837\u5229\u7528\u6761\u4ef6\u968f\u673a\u573a\u5bf9\u6587\u672c\u8fdb\u884c\u5206\u53e5\u3002\u6cf0\u8bed\u7684\u5206\u8bcd\u7b97\u6cd5\u540c\u6837\u4e5f\u6709\u5f88\u591a\uff0c\u53ef\u53c2\u89c1 AttaCut-Benchmark \u4e86\u89e3\u5e38\u7528\u6cf0\u8bed\u5206\u8bcd\u7b97\u6cd5\u7684\u8bc4\u6d4b\u3002","title":"\u5206\u8bcd"},{"location":"tts/%E9%9F%B3%E5%BA%93%E5%88%B6%E4%BD%9C%E5%92%8C%E6%96%87%E6%9C%AC%E5%89%8D%E7%AB%AF/#_14","text":"\u6587\u672c\u8f6c\u97f3\u7d20\uff08G2P/LTS\uff09\u662f\u5c06\u6587\u672c\u8f6c\u6362\u4e3a\u6ce8\u97f3\u8868\u793a\u7684\u8fc7\u7a0b\u3002\u6700\u7b80\u5355\u76f4\u767d\u7684\u6587\u672c\u8f6c\u97f3\u7d20\u65b9\u6cd5\u65e0\u7591\u662f\u67e5\u8bcd\u5178\uff0c\u7ecf\u8fc7\u9884\u5904\u7406\u548c\u5206\u8bcd\u6a21\u5757\u4e4b\u540e\uff0c\u6587\u672c\u88ab\u5207\u5206\u4e3a\u4e00\u4e2a\u4e2a\u5355\u8bcd\uff0c\u5229\u7528\u8bcd\u5178\u67e5\u8be2\u5355\u8bcd\u5bf9\u5e94\u7684\u53d1\u97f3\u5e8f\u5217\u3002\u4f46\u662f\u5bf9\u4e8e\u5e26\u6709\u7f29\u7565\u8bcd\u3001\u5916\u6765\u8bcd\u7684\u6587\u672c\u6765\u8bf4\uff0c\u60c5\u51b5\u7565\u5fae\u590d\u6742\uff0c\u56e0\u4e3a\u67e5\u8be2\u7f29\u7565\u8bcd\u3001\u672c\u8bed\u79cd\u548c\u5916\u6765\u8bcd\u8bcd\u5178\u7684\u4f18\u5148\u7ea7\u4e0d\u540c\uff0c\u8f93\u51fa\u7684\u97f3\u7d20\u5e8f\u5217\u6709\u65f6\u4e5f\u4f1a\u6709\u6240\u4e0d\u540c\u3002\u4e00\u4e2a\u8f83\u597d\u7684\u5904\u7406\u903b\u8f91\u662f\uff0c\u6700\u7279\u6b8a\u3001\u6700\u6709\u53ef\u80fd\u7684\u5355\u8bcd\u4f18\u5148\u5904\u7406\u3002\u9996\u5148\u5904\u7406\u7f29\u7565\u8bcd\u7684\u53d1\u97f3\uff0c\u5982\u679c\u5b58\u5728\u4e8e\u7f29\u7565\u8bcd\u8bcd\u5178\u4e2d\u6216\u8005\u5355\u8bcd\u5168\u5927\u5199\u65f6\uff0c\u5219\u8ba4\u4e3a\u662f\u7f29\u7565\u8bcd\uff0c\u5982\u679c\u7f29\u7565\u8bcd\u8bcd\u5178\u4e2d\u6709\u8be5\u8bcd\uff0c\u76f4\u63a5\u8f93\u51fa\u97f3\u7d20\u5e8f\u5217\uff0c\u5426\u5219\u6309\u7167\u89c4\u5219\uff0c\u6bd4\u5982\u6309\u7167\u6bcf\u4e2a\u5b57\u6bcd\u7684\u53d1\u97f3\u9010\u4e2a\u7ed9\u51fa\u53d1\u97f3\uff1b\u4e4b\u540e\u5904\u7406\u672c\u571f\u8bcd\u7684\u53d1\u97f3\uff0c\u5982\u679c\u5b58\u5728\u4e8e\u672c\u571f\u8bcd\u8bcd\u5178\u4e2d\uff0c\u5219\u8ba4\u4e3a\u662f\u672c\u571f\u8bcd\uff0c\u76f4\u63a5\u4ece\u8bcd\u5178\u4e2d\u7ed9\u51fa\u97f3\u7d20\u5e8f\u5217\uff1b\u63a5\u4e0b\u6765\u5904\u7406\u82f1\u8bed\u5355\u8bcd\uff0c\u5982\u679c\u662f\u82f1\u8bed\u6536\u5f55\u8bcd\uff0c\u5219\u53ef\u4ee5\u76f4\u63a5\u4ece\u8bcd\u5178\u4e2d\u53d6\u51fa\u8be5\u82f1\u8bed\u8bcd\u7684\u97f3\u7d20\u5e8f\u5217\uff0c\u83b7\u5f97\u82f1\u8bed\u8bcd\u7684\u97f3\u7d20\u5e8f\u5217\u4e4b\u540e\uff0c\u6ce8\u610f\u8981\u5c06\u82f1\u8bed\u97f3\u7d20\u8f6c\u6362\u4e3a\u672c\u571f\u97f3\u7d20\u3002\u5f53\u7136\uff0c\u8bcd\u5178\u5f88\u96be\u8986\u76d6\u6240\u6709\u8bcd\uff0c\u7279\u522b\u662f\u8bed\u79cd\u6784\u5efa\u7684\u521d\u671f\uff0c\u5927\u90e8\u5206\u8bcd\u90fd\u662f\u96c6\u5916\u8bcd\uff0c\u9700\u8981\u5229\u7528\u4e00\u4e9b\u89c4\u5219\u6216\u6a21\u578b\u7ed9\u51fa\u5355\u8bcd\u7684\u53d1\u97f3\u3002\u6784\u5efa\u6587\u672c\u8f6c\u97f3\u7d20\u89c4\u5219\u7684\u4e00\u822c\u6b65\u9aa4\u662f\uff1a \u8c03\u7814\u516c\u5f00\u8d44\u6599\uff0c\u4e86\u89e3\u8be5\u8bed\u79cd\u662f\u5426\u6709\u91cd\u97f3\u548c\u58f0\u8c03\uff0c\u5e76\u5236\u5b9a\u5b57\u7b26\u5230\u97f3\u7d20\u7684\u8f6c\u6362\u89c4\u5219\uff0c\u6ce8\u610f\u97f3\u7d20\u8981\u6293\u5bf9\u7acb\u800c\u975e\u97f3\u53d8\uff0c\u6bd4\u5982cat[k]\u548cfat[f]\u4e2d\u7684[k/f]\u5c31\u662f\u4e00\u7ec4\u5bf9\u7acb\uff0c\u4e0d\u540c\u53d1\u97f3\u4f1a\u5bfc\u81f4\u610f\u601d\u53d1\u751f\u6539\u53d8\uff0c\u800ctell[l]\u548ctelling[l]\u4e2d\u7684[l]\u867d\u7136\u53d1\u97f3\u4e5f\u4e0d\u540c\uff0c\u4f46\u662f\u5c5e\u4e8e\u97f3\u53d8\uff0c\u53d1\u97f3\u4e0d\u540c\u5e76\u4e0d\u4f1a\u6539\u53d8\u5355\u8bcd\u542b\u4e49\uff1b \u8fed\u4ee3\uff0c\u6587\u672c\u8f6c\u97f3\u7d20\u89c4\u5219\uff0c\u4e43\u81f3\u97f3\u7d20\u4f53\u7cfb\u90fd\u662f\u4e00\u4e2a\u8fed\u4ee3\u7684\u8fc7\u7a0b\uff0c\u9700\u8981\u7ed3\u5408\u7ed9\u5b9a\u97f3\u7d20\u4e0e\u5b9e\u9645\u6a21\u578b\u5408\u6210\u7684\u53d1\u97f3\u60c5\u51b5\uff0c\u4e0d\u65ad\u5b8c\u5584\u97f3\u7d20\u89c4\u5219\u3002 \u5229\u7528\u4e00\u4e2a\u57fa\u7840\u7684\u8bcd\u5178\uff0c\u53ef\u4ee5\u8bad\u7ec3\u51fa\u4e00\u4e2aG2P\u6a21\u578b\uff0c\u7ed9\u51fa\u4efb\u610f\u4e00\u4e2a\u5355\u8bcd\u7684\u53d1\u97f3\u5e8f\u5217\u3002\u540c\u6837\u6709\u4e00\u4e9b\u5f00\u6e90\u7684G2P\u6a21\u578b\u6bd4\u5982 MfaTrainG2p \uff0cMfaG2p\u751a\u81f3\u7ed9\u51fa\u4e86\u4e00\u4e9b \u9884\u8bad\u7ec3\u6a21\u578b \u3002 cmusphinx: g2p-seq2seq \uff0c\u57fa\u4e8eTensorFlow\u7684Tensor2Tensor\u5e93\uff0c\u51c6\u786e\u7387\u8f83\u9ad8\u3002 \u5f53\u7136\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u4e00\u4e9b\u5e8f\u5217\u5efa\u6a21\u65b9\u6cd5\u6216\u8005\u4e0a\u9762\u7684\u5de5\u5177\uff0c\u6bd4\u5982 Fairseq \uff0c\u7c7b\u4f3c\u673a\u5668\u7ffb\u8bd1\uff0c\u6784\u5efa\u4e00\u4e2aG2P\u6a21\u578b\uff0c\u4ee5\u4fbf\u5728\u8bed\u79cd\u6784\u5efa\u521d\u671f\uff0c\u8fc5\u901f\u6269\u5145\u8bcd\u5178\u3002\u76f8\u5173\u7684\u53c2\u8003\u8d44\u6599\u5982\u4e0b\uff1a The Festvox Indic Frontend for Grapheme-to-Phoneme Conversion A study on rule based approach for Grapheme to Phoneme conversion of Assamese letters in Festival framework \u5728\u4ea7\u751f\u97f3\u7d20\u5e8f\u5217\u4e4b\u540e\uff0c\u6709\u65f6\u5019\u8fd8\u9700\u8981\u6309\u7167\u89c4\u5219\u5207\u5206\u97f3\u8282\uff0c\u5e76\u4e14\u7ed9\u91cd\u97f3\u3002\u7279\u522b\u662f\u591a\u4e2a\u8fde\u7eed\u8f85\u97f3\uff08Consonant\uff09\u7684\u60c5\u5f62\uff0c\u4e0d\u540c\u7684\u8bed\u79cd\u5728\u5207\u5206\u97f3\u8282\u65f6\u6709\u4e0d\u540c\u7684\u89c4\u5219\uff0c\u6bd4\u5982\u4e09\u8f85\u97f3\u60c5\u5f62\u4e0b\uff0c\u5982\u4f55\u5206\u914d\u8fd9\u4e9b\u8f85\u97f3\u6240\u5c5e\u97f3\u8282\u3002\u91cd\u97f3\u60c5\u5f62\u4e5f\u7c7b\u4f3c\uff0c\u9700\u8981\u6839\u636e\u8bed\u79cd\u786e\u5b9a\u91cd\u97f3\u89c4\u5219\u3002\u8fd9\u4e9b\u591a\u4e2a\u8fde\u7eed\u8f85\u97f3\u5206\u914d\u97f3\u8282\uff0c\u6839\u636e\u89c4\u5219\u7ed9\u5b9a\u91cd\u97f3\u5b9e\u9645\u90fd\u9700\u8981\u914d\u5408\u540e\u7aef\u6a21\u578b\u8fdb\u884c\u5b9e\u9a8c\uff0c\u7279\u522b\u662f\u76ee\u524d\u7aef\u5230\u7aef\u58f0\u5b66\u6a21\u578b\u6d41\u884c\u7684\u60c5\u5f62\u4e0b\uff0c\u4e00\u4e9b\u97f3\u8282\u7684\u5212\u5206\u3001\u91cd\u97f3\u7684\u7ed9\u5b9a\u4f4d\u7f6e\u4e5f\u8bb8\u5bf9\u58f0\u5b66\u6a21\u578b\u5e76\u6ca1\u6709\u5f71\u54cd\uff0c\u800c\u4e00\u4e9b\u8bed\u79cd\u5c31\u6709\u4e00\u5b9a\u7684\u4f18\u52a3\u4e4b\u5206\u3002","title":"\u6587\u672c\u8f6c\u97f3\u7d20"},{"location":"tts/%E9%9F%B3%E5%BA%93%E5%88%B6%E4%BD%9C%E5%92%8C%E6%96%87%E6%9C%AC%E5%89%8D%E7%AB%AF/#_15","text":"\u97f5\u5f8b\u5206\u6790\u540c\u6837\u662f\u6587\u672c\u524d\u7aef\u7684\u96be\u70b9\u4e4b\u4e00\uff0c\u4e00\u4e2a\u597d\u7684\u97f5\u5f8b\u4fe1\u606f\u53ef\u5927\u5927\u63d0\u5347\u6700\u7ec8\u5408\u6210\u8bed\u97f3\u7684\u81ea\u7136\u5ea6\u3002\u4e00\u4e2a\u7b80\u5355\u7684\u97f5\u5f8b\u89c4\u5219\u662f\uff0c\u52a0\u5165\u5355\u8bcd\u8fb9\u754c\u4f5c\u4e3aL1\uff0c\u53e5\u5b50\u4e2d\u6807\u70b9\u5904\u4f5c\u4e3aL3\uff0c\u53e5\u672b\u4f5c\u4e3aL4\uff0c\u4f46\u8fd9\u79cd\u89c4\u5219\u901a\u5e38\u5e76\u4e0d\u662f\u6700\u4f18\u7684\u3002\u97f5\u5f8b\u5206\u6790\u4e2dL3\u7684\u9884\u6d4b\u5c24\u4e3a\u91cd\u8981\uff0c\u53ef\u501f\u52a9\u4e00\u4e9b\u7b80\u5355\u6a21\u578b\uff0c\u6bd4\u5982\u51b3\u7b56\u6811\u3001CRF\u7b49\uff0c\u6784\u9020L3\u6216\u8005\u97f5\u5f8b\u76f8\u5173\u7684\u7279\u5f81\uff0c\u5982\uff1a\u524d\u4e00\u4e2a\u5355\u8bcd\uff08L1\uff09\u5185\u7684L0\u4e2a\u6570\u3001\u524d\u4e00\u4e2a\u5355\u8bcd\uff08L1\uff09\u7684\u8bcd\u6027\u3001\u524d\u524dL1\u5185\u7684\u5b57\u7b26\u4e2a\u6570\u3001\u524dL1\u5185\u7684\u5b57\u7b26\u4e2a\u6570\u3001\u540eL1\u5185\u7684\u5b57\u7b26\u4e2a\u6570\u3001\u540e\u540eL1\u5185\u7684\u5b57\u7b26\u4e2a\u6570\u3001\u672c\u5b57\u7b26\u7684ID\u548c\u524d\u4e00\u4e2a\u7a7a\u683c\u79bb\u672c\u5b57\u7b26\u7684\u5b57\u7b26\u8ddd\u79bb\u7b49\u3002\u5f53\u7136\u4e5f\u53ef\u4ee5\u4f7f\u7528\u66f4\u4e3a\u590d\u6742\u7684\u6a21\u578b\u6bd4\u5982LSTM\u751a\u81f3BERT\u53c2\u4e0e\u97f5\u5f8b\u5206\u6790\uff0c\u5c06\u95ee\u9898\u8f6c\u6362\u4e3a\u5bf9\u6bcf\u4e2a\u5b57\u7b26\u7684\u4e8c\u5206\u7c7b\uff08\u52a0\u6216\u4e0d\u52a0L3\uff09\u6216\u8005\u591a\u5206\u7c7b\u4efb\u52a1\uff08L0/L1/L3\uff09\u3002","title":"\u97f5\u5f8b\u5206\u6790"},{"location":"tts/%E9%9F%B3%E5%BA%93%E5%88%B6%E4%BD%9C%E5%92%8C%E6%96%87%E6%9C%AC%E5%89%8D%E7%AB%AF/#_16","text":"\u7531\u4e8e\u6587\u672c\u524d\u7aef\u8f83\u4e3a\u4f9d\u8d56\u8d44\u6e90\uff0c\u6bd4\u5982\u6587\u672c\u9884\u5904\u7406\u89c4\u5219\u6587\u4ef6\u3001\u6587\u672c\u5f52\u4e00\u5316\u89c4\u5219\u6587\u4ef6\u3001\u5206\u8bcd\u548c\u6587\u672c\u8f6c\u97f3\u7d20\u5e38\u7528\u5230\u7684\u8bcd\u5178\u3001\u7528\u4e8e\u97f5\u5f8b\u5206\u6790\u7684\u6a21\u578b\u7b49\uff0c\u7279\u522b\u662f\u6587\u672c\u524d\u7aef\u5e38\u5e38\u9700\u8981\u6ca1\u6709\u4ee3\u7801\u7ecf\u9a8c\u7684\u8bed\u79cd\u4e13\u5bb6\u53c2\u4e0e\u8fdb\u6765\uff0c\u56e0\u6b64\u8981\u5c06\u8d44\u6e90\u548c\u4ee3\u7801\u5206\u79bb\u5f00\u6765\uff0c\u4fbf\u4e8e\u5de5\u7a0b\u5b9e\u73b0\u548c\u7ef4\u62a4\u3002\u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u4f5c\u4e3a\u6587\u672c\u5f52\u4e00\u5316\u89c4\u5219\u7684\u5177\u4f53\u5b9e\u73b0\uff0c\u5728\u5927\u578b\u7684\u6587\u672c\u524d\u7aef\u4e2d\u7f3a\u9677\u51f8\u73b0\u660e\u663e\uff1a\u96be\u4ee5\u9605\u8bfb\u548c\u7ef4\u62a4\uff0c\u5e76\u4e14\u89c4\u5219\u51b2\u7a81\u4e25\u91cd\u3002\u4e00\u4e2a\u6298\u4e2d\u7684\u505a\u6cd5\u662f\u81ea\u5b9a\u4e49\u89c4\u5219\u6587\u4ef6\uff0c\u5c06\u4e00\u6761\u6761\u89c4\u5219\u4ee5\u4f18\u5148\u7ea7\u3001\u5339\u914d\u6761\u4ef6\u548c\u8f93\u51fa\u7684\u5f62\u5f0f\u5448\u73b0\u3002","title":"\u6587\u672c\u524d\u7aef\u7684\u5de5\u7a0b\u5b9e\u73b0"},{"location":"tts/%E9%9F%B3%E5%BA%93%E5%88%B6%E4%BD%9C%E5%92%8C%E6%96%87%E6%9C%AC%E5%89%8D%E7%AB%AF/#_17","text":"\u672c\u7ae0\u4e3b\u8981\u4ecb\u7ecd\u8bed\u97f3\u5408\u6210\u4e2d\u97f3\u5e93\u6784\u5efa\u548c\u6587\u672c\u524d\u7aef\u3002\u9700\u8981\u8bf4\u660e\u7684\u662f\uff0c\u6587\u672c\u524d\u7aef\u751a\u81f3\u6574\u4e2a\u8bed\u97f3\u5408\u6210\u7cfb\u7edf\u7684\u6784\u5efa\u90fd\u4e0d\u662f\u4e00\u8e74\u800c\u5c31\u7684\uff0c\u901a\u5e38\u9700\u8981\u53cd\u590d\u8bc4\u6d4b\u8fed\u4ee3\u3002\u6784\u5efa\u4e00\u4e2a\u97f3\u7d20\u8986\u76d6\u5168\u3001\u5408\u7406\u7684\u6d4b\u8bd5\u96c6\uff0c\u4e4b\u540e\u6bcd\u8bed\u8005\u6216\u8005\u5b66\u4e60\u8005\u8fdb\u884c\u8bc4\u6d4b\u548c\u5206\u6790\u95ee\u9898\uff0c\u786e\u4fdd\u8bc4\u6d4b\u6807\u51c6\u5408\u7406\u3002\u800c\u4e0a\u7ebf\u65f6\uff0c\u5c31\u8981\u786e\u4fdd\u7ebf\u4e0a\u7ebf\u4e0a\u4e00\u81f4\u6027\uff0c\u6587\u672c\u524d\u7aef\u3001\u58f0\u5b66\u6a21\u578b\u3001\u58f0\u7801\u5668\u4e00\u4e2a\u6a21\u5757\u4e00\u4e2a\u6a21\u5757\u5bf9\u9f50\u4e00\u81f4\uff0c\u624d\u80fd\u6700\u7ec8\u5448\u73b0\u51fa\u4e00\u4e2a\u6027\u80fd\u826f\u597d\u7684\u8bed\u97f3\u5408\u6210\u7cfb\u7edf\u3002","title":"\u603b\u7ed3"}]}